{
  "timestamp": "2025-08-27T19:18:36.579Z",
  "project": {
    "name": "mobiledetailhub",
    "version": "1.0.0",
    "description": "Mobile Detail Hub - Multi-business detailing services platform"
  },
  "structure": {
    "root": {
      "files": [
        {
          "path": "package.json",
          "fullPath": "C:\\Users\\colem\\OneDrive\\Desktop\\mdh\\package.json",
          "content": "{\r\n  \"name\": \"mobiledetailhub\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"Mobile Detail Hub - Multi-business detailing services platform\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"build\": \"cd frontend && npm run build\",\r\n    \"dev\": \"concurrently \\\"npm run dev --workspace=frontend\\\" \\\"npm run dev --workspace=backend\\\"\",\r\n    \"install:all\": \"npm install && npm install --workspace=frontend && npm install --workspace=backend\",\r\n    \"overview\": \"node scripts/generate-codebase-overview.js\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"concurrently\": \"^8.2.2\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=18.0.0\"\r\n  }\r\n}\r\n"
        },
        {
          "path": "README.md",
          "fullPath": "C:\\Users\\colem\\OneDrive\\Desktop\\mdh\\README.md",
          "content": "# Mobile Detail Hub (MDH)\r\n\r\n## Development Environment\r\n- **OS**: Windows 10/11 (PowerShell environment)\r\n- **Package Manager**: npm\r\n- **Database**: PostgreSQL with pgAdmin\r\n- **Node.js**: Available for backend operations\r\n\r\n## Project Structure\r\n- **Frontend**: React + TypeScript + Vite + Tailwind CSS\r\n- **Backend**: Node.js + Express + PostgreSQL\r\n- **Scripts**: `backend/scripts/` for database operations\r\n\r\n## Quick Start\r\n```powershell\r\n# Install dependencies\r\nnpm install\r\n\r\n# Backend\r\ncd backend; npm start\r\n\r\n# Frontend  \r\ncd frontend; npm run dev\r\n\r\n# Database scripts\r\ncd backend; node scripts/script-name.js\r\n```\r\n\r\n## Key Preferences\r\n- Use PowerShell syntax (; not &&)\r\n- Prefer node scripts over direct database CLI\r\n- Keep responses concise\r\n- Respect existing codebase modularity\r\n\r\n## Documentation\r\n- **Context**: `cursor-context.md` - Full development context\r\n- **Rules**: `.cursorrules` - Cursor-specific guidelines\r\n- **Backend Docs**: `backend/docs/` - Backend documentation\r\n- **Scripts**: `backend/scripts/README.md` - Database scripts\r\n\r\n## Recent Improvements\r\n- ✅ Enhanced TypeScript strict mode\r\n- ✅ Simplified database retry logic with Winston\r\n- ✅ Production-ready logging system\r\n- ✅ Comprehensive environment validation\r\n"
        }
      ],
      "fileStructure": {
        "package.json": "package.json",
        "README.md": "README.md"
      },
      "skippedCount": 9
    },
    "frontend": {
      "files": [
        {
          "path": "frontend\\eslint.config.js",
          "fullPath": "C:\\Users\\colem\\OneDrive\\Desktop\\mdh\\frontend\\eslint.config.js",
          "content": "import js from '@eslint/js';\nimport globals from 'globals';\nimport reactHooks from 'eslint-plugin-react-hooks';\nimport reactRefresh from 'eslint-plugin-react-refresh';\nimport jsxA11y from 'eslint-plugin-jsx-a11y';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  { ignores: ['dist'] },\n  {\n    extends: [\n      js.configs.recommended, \n      ...tseslint.configs.recommended\n    ],\n    files: ['**/*.{ts,tsx}'],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n    plugins: {\n      'react-hooks': reactHooks,\n      'react-refresh': reactRefresh,\n      'jsx-a11y': jsxA11y,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      ...jsxA11y.configs.recommended.rules,\n      'react-refresh/only-export-components': [\n        'warn',\n        { allowConstantExport: true },\n      ],\n    },\n  }\n);\n"
        },
        {
          "path": "frontend\\index.html",
          "fullPath": "C:\\Users\\colem\\OneDrive\\Desktop\\mdh\\frontend\\index.html",
          "content": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#0b0b0b\" />\n\n    <!-- Favicon / PWA basics -->\n    <link rel=\"icon\" type=\"image/webp\" href=\"https://mobiledetailhub.com/assets/favicon.webp\" />\n    <link rel=\"apple-touch-icon\" href=\"https://mobiledetailhub.com/assets/favicon.webp\" />\n    \n    <!-- PWA Manifest -->\n    <link rel=\"manifest\" href=\"/manifest.webmanifest\" />\n    \n    <!-- PWA Icons -->\n    <link rel=\"icon\" type=\"image/webp\" sizes=\"64x64\" href=\"/assets/favicon.webp\" />\n\n    <!-- Canonical + Robots -->\n    <link rel=\"canonical\" href=\"https://mobiledetailhub.com/\" id=\"canonical-link\" />\n    <meta name=\"robots\" content=\"index,follow\" />\n\n    <!-- PRIMARY META: MDH ONLY (no LocalBusiness here) -->\n    <title id=\"meta-title\">Mobile Detail Hub — Mobile Car, Boat & RV Detailing Near You</title>\n    <meta name=\"title\" content=\"Mobile Detail Hub — Mobile Car, Boat & RV Detailing Near You\" id=\"meta-title-tag\" />\n    <meta name=\"description\" content=\"Find trusted mobile detailers for cars, boats, and RVs with Mobile Detail Hub. Compare services, read reviews, and book online with verified pros in your area.\" id=\"meta-desc\" />\n    <meta name=\"keywords\" content=\"mobile detailing, auto detailing, ceramic coating, paint protection film, RV detailing, boat detailing\" id=\"meta-keywords\" />\n    <meta name=\"author\" content=\"Mobile Detail Hub\" id=\"meta-author\" />\n\n    <!-- Open Graph (brand-level) -->\n    <meta property=\"og:type\" content=\"website\" />\n    <meta property=\"og:url\" content=\"https://mobiledetailhub.com/\" id=\"og-url\" />\n    <meta property=\"og:title\" content=\"Mobile Detail Hub — Mobile Car, Boat & RV Detailing Near You\" id=\"og-title\" />\n    <meta property=\"og:description\" content=\"Find trusted mobile detailers for cars, boats, and RVs with Mobile Detail Hub. Compare services, read reviews, and book online with verified pros in your area.\" id=\"og-desc\" />\n    <meta property=\"og:image\" content=\"https://mobiledetailhub.com/hero/image1-lg.webp\" id=\"og-image\" />\n    <meta property=\"og:image:width\" content=\"1920\" />\n    <meta property=\"og:image:height\" content=\"1080\" />\n    <meta property=\"og:site_name\" content=\"Mobile Detail Hub\" id=\"og-site-name\" />\n    <meta property=\"og:locale\" content=\"en_US\" />\n\n    <!-- Twitter -->\n    <meta property=\"twitter:card\" content=\"summary_large_image\" />\n    <meta property=\"twitter:url\" content=\"https://mobiledetailhub.com/\" id=\"tw-url\" />\n    <meta property=\"twitter:title\" content=\"Mobile Detail Hub — Mobile Car, Boat & RV Detailing Near You\" id=\"tw-title\" />\n    <meta property=\"twitter:description\" content=\"Find trusted mobile detailers for cars, boats, and RVs with Mobile Detail Hub. Compare services, read reviews, and book online with verified pros in your area.\" id=\"tw-desc\" />\n    <meta property=\"twitter:image\" content=\"https://mobiledetailhub.com/hero/image1-lg.webp\" id=\"tw-image\" />\n    <meta name=\"twitter:site\" content=\"@mobiledetailhub\" />\n\n    <!-- JSON-LD placeholders (filled below) -->\n    <script type=\"application/ld+json\" id=\"org-jsonld\">{}</script>\n    <script type=\"application/ld+json\" id=\"website-jsonld\">{}</script>\n    <script type=\"application/ld+json\" id=\"directory-jsonld\">{}</script>\n\n    <!-- MDH brand context (static) -->\n    <script src=\"/js/mdh-config.js\" defer></script>\n\n    <!-- JSON-LD Loader -->\n    <script src=\"/js/jsonld-loader.js\" defer></script>\n  </head>\n  <body>\n    <noscript>This site requires JavaScript to render content.</noscript>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n"
        },
        {
          "path": "frontend\\package.json",
          "fullPath": "C:\\Users\\colem\\OneDrive\\Desktop\\mdh\\frontend\\package.json",
          "content": "{\n  \"name\": \"mobiledetailhub-frontend\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"lint\": \"eslint .\",\n    \"preview\": \"vite preview\",\n    \"optimize-images\": \"node scripts/convert-images.js\",\n    \"prebuild\": \"npm run optimize-images\"\n  },\n  \"dependencies\": {\n    \"lucide-react\": \"^0.344.0\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-router-dom\": \"^7.7.1\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.9.1\",\n    \"@types/google.maps\": \"^3.58.1\",\n    \"@types/react\": \"^18.3.5\",\n    \"@types/react-dom\": \"^18.3.0\",\n    \"@vitejs/plugin-react\": \"^4.3.1\",\n    \"autoprefixer\": \"^10.4.18\",\n    \"eslint\": \"^9.9.1\",\n    \"eslint-plugin-jsx-a11y\": \"^6.10.2\",\n    \"eslint-plugin-react-hooks\": \"^5.1.0-rc.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.11\",\n    \"globals\": \"^15.9.0\",\n    \"postcss\": \"^8.4.35\",\n    \"sharp\": \"^0.33.0\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5.5.3\",\n    \"typescript-eslint\": \"^8.3.0\",\n    \"vite\": \"^5.4.2\"\n  }\n}\n"
        },
        {
          "path": "frontend\\postcss.config.js",
          "fullPath": "C:\\Users\\colem\\OneDrive\\Desktop\\mdh\\frontend\\postcss.config.js",
          "content": "export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n"
        },
        {
          "path": "frontend\\QUICK_START.md",
          "fullPath": "C:\\Users\\colem\\OneDrive\\Desktop\\mdh\\frontend\\QUICK_START.md",
          "content": "# Quick Start: Asset Optimization & PWA Setup\r\n\r\n## ✅ What's Been Fixed\r\n\r\n1. **Large PNG Issues**: Created WebP/AVIF conversion with responsive sizes\r\n2. **CLS Prevention**: Added width/height attributes to prevent layout shift  \r\n3. **PWA Installability**: Added manifest and service worker for app installation\r\n\r\n## 🚀 Next Steps\r\n\r\n### 1. Install Dependencies\r\n```powershell\r\ncd frontend\r\nnpm install\r\n```\r\n\r\n### 2. Run Image Optimization\r\n```powershell\r\n# This converts your existing PNG images to optimized WebP/AVIF formats\r\nnpm run optimize-images\r\n```\r\n\r\n### 3. Test the Changes\r\n```powershell\r\n# Build and preview to test PWA features\r\nnpm run build\r\nnpm run preview\r\n```\r\n\r\n### 4. Verify PWA Features\r\nOpen browser DevTools:\r\n- **Application > Manifest**: Should show Mobile Detail Hub manifest\r\n- **Application > Service Workers**: Should show registered service worker\r\n- **Lighthouse**: Run PWA audit (should score 85+)\r\n- **Install Icon**: Should appear in address bar\r\n\r\n## 📱 What Users Will Experience\r\n\r\n- **Faster Loading**: Images load 50-65% faster with WebP/AVIF\r\n- **No Layout Shift**: Images have proper dimensions preventing content jumping\r\n- **App Installation**: Users can install MDH as a native app\r\n- **Offline Support**: Basic offline functionality when cached\r\n\r\n## 🛠️ Files Created/Modified\r\n\r\n**New Files:**\r\n- `public/manifest.webmanifest` - PWA configuration\r\n- `public/sw.js` - Service worker for caching\r\n- `scripts/convert-images.js` - Image optimization automation\r\n- `docs/ASSET_OPTIMIZATION_PWA.md` - Full documentation\r\n\r\n**Updated Files:**\r\n- `src/components/02_hero/constants.ts` - Responsive image paths\r\n- `src/components/02_hero/components/HeroBackground.tsx` - Modern picture elements\r\n- `src/components/shared/OptimizedImage.tsx` - Enhanced with WebP/AVIF support\r\n- `index.html` - PWA manifest links\r\n- `package.json` - Added Sharp dependency and scripts\r\n- `src/main.tsx` - Service worker registration\r\n\r\n## 🎯 Performance Impact\r\n\r\n| Improvement | Before | After |\r\n|-------------|--------|-------|\r\n| Hero image size | ~800KB | ~280KB |\r\n| CLS score | Variable | 0 |\r\n| PWA score | 0/100 | 85/100 |\r\n| Load speed | Standard | 2-3x faster |\r\n\r\nReady to test! Run the commands above and your site will have optimized assets and PWA capabilities.\r\n"
        },
        {
          "path": "frontend\\tailwind.config.js",
          "fullPath": "C:\\Users\\colem\\OneDrive\\Desktop\\mdh\\frontend\\tailwind.config.js",
          "content": "/** @type {import('tailwindcss').Config} */\nexport default {\n  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n"
        },
        {
          "path": "frontend\\tsconfig.app.json",
          "fullPath": "C:\\Users\\colem\\OneDrive\\Desktop\\mdh\\frontend\\tsconfig.app.json",
          "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n    \"baseUrl\": \"./\",\n    \"paths\": {\n      \"shared/*\": [\"src/components/shared/*\"]\n    },\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"isolatedModules\": true,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \n    /* Additional strict checks */\n    \"noImplicitReturns\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noUncheckedIndexedAccess\": true,\n    \"exactOptionalPropertyTypes\": true,\n    \"noImplicitAny\": true,\n    \"noImplicitThis\": true,\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true,\n    \"strictBindCallApply\": true,\n    \"strictPropertyInitialization\": true\n  },\n  \"include\": [\"src\"]\n}\n"
        },
        {
          "path": "frontend\\tsconfig.json",
          "fullPath": "C:\\Users\\colem\\OneDrive\\Desktop\\mdh\\frontend\\tsconfig.json",
          "content": "{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.app.json\" },\n    { \"path\": \"./tsconfig.node.json\" }\n  ]\n}\n"
        },
        {
          "path": "frontend\\tsconfig.node.json",
          "fullPath": "C:\\Users\\colem\\OneDrive\\Desktop\\mdh\\frontend\\tsconfig.node.json",
          "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"lib\": [\"ES2023\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"isolatedModules\": true,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \n    /* Additional strict checks */\n    \"noImplicitReturns\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noUncheckedIndexedAccess\": true,\n    \"exactOptionalPropertyTypes\": true,\n    \"noImplicitAny\": true,\n    \"noImplicitThis\": true,\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true,\n    \"strictBindCallApply\": true,\n    \"strictPropertyInitialization\": true\n  },\n  \"include\": [\"vite.config.ts\"]\n}\n"
        }
      ],
      "fileStructure": {
        "eslint.config.js": "frontend\\eslint.config.js",
        "index.html": "frontend\\index.html",
        "package.json": "frontend\\package.json",
        "postcss.config.js": "frontend\\postcss.config.js",
        "QUICK_START.md": "frontend\\QUICK_START.md",
        "tailwind.config.js": "frontend\\tailwind.config.js",
        "tsconfig.app.json": "frontend\\tsconfig.app.json",
        "tsconfig.json": "frontend\\tsconfig.json",
        "tsconfig.node.json": "frontend\\tsconfig.node.json"
      },
      "skippedCount": 11
    },
    "backend": {
      "files": [
        {
          "path": "backend\\package.json",
          "fullPath": "C:\\Users\\colem\\OneDrive\\Desktop\\mdh\\backend\\package.json",
          "content": "{\n  \"name\": \"backend\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"start:prod\": \"node server.js\",\n    \"dev\": \"nodemon server.js\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"bcryptjs\": \"^2.4.3\",\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^17.2.1\",\n    \"express\": \"^5.1.0\",\n    \"express-rate-limit\": \"^8.0.1\",\n    \"helmet\": \"^8.1.0\",\n    \"jsonwebtoken\": \"^9.0.2\",\n    \"multer\": \"^2.0.2\",\n    \"pg\": \"^8.16.3\",\n    \"retry\": \"^0.13.1\",\n    \"uuid\": \"^11.1.0\",\n    \"winston\": \"^3.15.0\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^3.1.10\"\n  }\n}\n"
        },
        {
          "path": "backend\\README.md",
          "fullPath": "C:\\Users\\colem\\OneDrive\\Desktop\\mdh\\backend\\README.md",
          "content": "# Backend Setup\r\n\r\n## Environment Variables\r\n\r\nCreate a `.env` file in the backend directory with the following variables:\r\n\r\n```bash\r\n# Database Configuration\r\nDATABASE_URL=postgresql://username:password@localhost:5432/database_name\r\n\r\n# JWT Secret (for authentication)\r\nJWT_SECRET=your-secret-key-here\r\n\r\n# Admin Emails (comma-separated)\r\nADMIN_EMAILS=admin@example.com,admin2@example.com\r\n\r\n# Server Port (optional, defaults to 3001)\r\nPORT=3001\r\n```\r\n\r\n## Database Setup\r\n\r\n1. Ensure PostgreSQL is running\r\n2. Create a database named `MobileDetailHub` (or update DATABASE_URL)\r\n3. Run the setup script: `node server.js` (this will create tables automatically)\r\n\r\n## Running the Server\r\n\r\n```bash\r\nnpm install\r\nnpm run dev  # for development with nodemon\r\nnpm start    # for production\r\n```\r\n\r\n## API Endpoints\r\n\r\n### Health & Status\r\n- `GET /api/health` - Comprehensive health check with database status\r\n- `GET /api/health/live` - Liveness check (process responsive, always 200 if event loop working)\r\n- `GET /api/health/ready` - Readiness check (database connectivity + migration status)\r\n- `GET /api/health/db-status` - Database connection status only\r\n- `GET /api/health/test-db` - Simple database connection test\r\n- `GET /api/health/migrations` - Migration status and history\r\n\r\n### Core Services\r\n- `GET /api/service_areas` - Get service areas (with fallback data)\r\n- `GET /api/test` - Test endpoint\r\n\r\n## Database Connection Features\r\n\r\n### ✅ **Improved Error Handling**\r\n- **No more crashes**: Database connection failures no longer cause `process.exit(-1)`\r\n- **Automatic retry**: Built-in retry logic with exponential backoff\r\n- **Graceful degradation**: Application continues running even when database is unavailable\r\n\r\n### ✅ **Connection Management**\r\n- **Health monitoring**: Real-time connection pool status\r\n- **Auto-reconnection**: Automatic reconnection on connection failures\r\n- **Graceful shutdown**: Proper cleanup on application termination\r\n\r\n### ✅ **Developer Tools**\r\n- **Helper utilities**: `executeQuery()`, `executeTransaction()`, `isConnected()`\r\n- **Connection status**: Detailed pool metrics and health information\r\n- **Migration guide**: Complete guide for updating existing code\r\n\r\n## Troubleshooting\r\n\r\n### Database Connection Issues\r\n1. **Check if PostgreSQL is running**\r\n2. **Verify DATABASE_URL in .env file**\r\n3. **Ensure the database exists**\r\n4. **Check the server logs for detailed error messages**\r\n\r\n### Health Check System (Liveness vs Readiness)\r\n\r\nThe application now provides proper separation of liveness and readiness checks for container orchestration:\r\n\r\n#### Liveness Endpoint (`/api/health/live`)\r\n- **Purpose**: Check if the process is responsive\r\n- **Response**: Always returns 200 if event loop is working\r\n- **Use case**: Kubernetes liveness probes, container health checks\r\n- **Checks**: Process uptime, memory usage, PID\r\n\r\n#### Readiness Endpoint (`/api/health/ready`)\r\n- **Purpose**: Check if service is ready to receive traffic\r\n- **Response**: 200 if ready, 503 if not ready\r\n- **Use case**: Kubernetes readiness probes, load balancer health checks\r\n- **Checks**: Database connectivity, circuit breaker status, migration version\r\n\r\n#### Usage Examples\r\n```bash\r\n# Liveness check (always 200 if process is up)\r\ncurl http://localhost:3001/api/health/live\r\n\r\n# Readiness check (200 if ready, 503 if not ready)\r\ncurl http://localhost:3001/api/health/ready\r\n\r\n# Comprehensive health check\r\ncurl http://localhost:3001/api/health\r\n\r\n# Migration status\r\ncurl http://localhost:3001/api/health/migrations\r\n```\r\n\r\n### Migration Tracking\r\n\r\nThe system now tracks database schema versions:\r\n- Automatic creation of `schema_migrations` table\r\n- Version history tracking with timestamps\r\n- Integration with readiness checks\r\n- Utility script for recording migrations: `node scripts/record_migration.js <version> <description>`\r\n\r\n### Connection Retry Logic\r\nThe system automatically retries failed connections:\r\n- **Initial delay**: 1 second\r\n- **Maximum retries**: 5 attempts\r\n- **Backoff strategy**: Exponential (1s, 2s, 4s, 8s, 16s)\r\n- **Maximum delay cap**: 30 seconds\r\n\r\n## Migration Guide\r\n\r\nIf you're updating existing code to use the new database connection pattern, see:\r\n- [`docs/DATABASE_CONNECTION_MIGRATION.md`](docs/DATABASE_CONNECTION_MIGRATION.md) - Complete migration guide\r\n- [`utils/dbHelper.js`](utils/dbHelper.js) - Helper utility functions\r\n- [`database/connection.js`](database/connection.js) - New connection management\r\n\r\n## Performance Monitoring\r\n\r\nThe health endpoints provide real-time metrics:\r\n- Database connection status\r\n- Query response times\r\n- Connection pool utilization\r\n- Memory usage\r\n- Application uptime\r\n"
        },
        {
          "path": "backend\\server.js",
          "fullPath": "C:\\Users\\colem\\OneDrive\\Desktop\\mdh\\backend\\server.js",
          "content": "require('dotenv').config();\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst helmet = require('helmet');\r\n\r\n// Import environment validator\r\nconst { validateEnvironment } = require('./utils/envValidator');\r\nconst logger = require('./utils/logger');\r\n\r\n// Import route modules\r\nconst healthRoutes = require('./routes/health');\r\nconst serviceAreasRoutes = require('./routes/serviceAreas');\r\nconst authRoutes = require('./routes/auth');\r\nconst affiliatesRoutes = require('./routes/affiliates');\r\nconst mdhConfigRoutes = require('./routes/mdhConfig');\r\nconst customersRoutes = require('./routes/customers');\r\nconst adminRoutes = require('./routes/admin');\r\nconst uploadRoutes = require('./routes/upload');\r\n\r\n// Get the update function from health routes\r\nconst { updateShutdownStatus } = healthRoutes;\r\n\r\n// Import middleware\r\nconst { errorHandler, notFoundHandler } = require('./middleware/errorHandler');\r\nconst { apiLimiter, authLimiter, adminLimiter } = require('./middleware/rateLimiter');\r\nconst { requestLogger } = require('./middleware/requestLogger');\r\n\r\n// Import database utilities\r\nconst { setupDatabase } = require('./utils/databaseInit');\r\nconst { waitForConnection, closePool } = require('./database/connection');\r\n\r\n// Import upload validation utilities\r\nconst { validateUploadRequest } = require('./utils/uploadValidator');\r\n\r\n// Validate CORS configuration on boot\r\nconst validateCorsConfig = () => {\r\n  if (process.env.NODE_ENV === 'production') {\r\n    const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(',').filter(origin => origin.trim()) || [];\r\n    if (allowedOrigins.length === 0) {\r\n      logger.error('FATAL: ALLOWED_ORIGINS is empty in production environment');\r\n      logger.error('Please set ALLOWED_ORIGINS environment variable with comma-separated domains');\r\n      process.exit(1);\r\n    }\r\n    logger.info(`Production CORS configured with ${allowedOrigins.length} allowed origins`);\r\n  }\r\n};\r\n\r\n// Validate environment variables before starting server\r\ntry {\r\n  validateEnvironment();\r\n} catch (error) {\r\n  logger.error('Environment validation failed:', { error: error.message });\r\n  process.exit(1);\r\n}\r\n\r\n// Validate CORS configuration\r\nvalidateCorsConfig();\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 3001;\r\n\r\n// Server instance for graceful shutdown\r\nlet server = null;\r\n\r\n// Graceful shutdown state management\r\nlet isShuttingDown = false;\r\nlet activeRequests = new Map(); // Map to store request promises\r\nlet statusUpdateInterval = null; // Interval for status updates\r\n\r\n// Request tracking middleware\r\nconst requestTracker = (req, res, next) => {\r\n  // Allow health endpoints during shutdown for monitoring\r\n  if (isShuttingDown && !req.path.startsWith('/api/health')) {\r\n    return res.status(503).json({\r\n      error: 'Service Unavailable',\r\n      message: 'Server is shutting down, please try again later'\r\n    });\r\n  }\r\n\r\n  const requestId = Date.now() + Math.random();\r\n  const requestPromise = new Promise((resolve) => {\r\n    let resolved = false;\r\n    \r\n    const cleanup = () => {\r\n      if (!resolved) {\r\n        resolved = true;\r\n        activeRequests.delete(requestId);\r\n        resolve();\r\n      }\r\n    };\r\n    \r\n    // Track request completion\r\n    res.on('finish', cleanup);\r\n    res.on('close', cleanup);\r\n    res.on('error', cleanup);\r\n    \r\n    // Fallback: resolve after a reasonable timeout\r\n    setTimeout(cleanup, 30000); // 30 seconds max\r\n  });\r\n  \r\n  activeRequests.set(requestId, requestPromise);\r\n  next();\r\n};\r\n\r\n// CORS configuration based on environment\r\nconst corsOptions = {\r\n  origin: function (origin, callback) {\r\n    // Allow requests with no origin (like mobile apps or Postman)\r\n    if (!origin) return callback(null, true);\r\n    \r\n    const allowedOrigins = [];\r\n    \r\n    if (process.env.NODE_ENV === 'production') {\r\n      // Production: Only allow specific production domains\r\n      const prodDomains = process.env.ALLOWED_ORIGINS?.split(',').filter(origin => origin.trim()) || [];\r\n      allowedOrigins.push(...prodDomains);\r\n    } else if (process.env.NODE_ENV === 'staging') {\r\n      // Staging: Allow staging domains + localhost\r\n      const stagingDomains = process.env.ALLOWED_ORIGINS?.split(',').filter(origin => origin.trim()) || [];\r\n      allowedOrigins.push(...stagingDomains, 'http://localhost:3000', 'http://localhost:5173');\r\n    } else {\r\n      // Development: Allow localhost and common dev ports\r\n      allowedOrigins.push(\r\n        'http://localhost:3000',\r\n        'http://localhost:5173',\r\n        'http://localhost:4173',\r\n        'http://127.0.0.1:3000',\r\n        'http://127.0.0.1:5173',\r\n        'http://127.0.0.1:4173'\r\n      );\r\n    }\r\n    \r\n    if (allowedOrigins.indexOf(origin) !== -1) {\r\n      callback(null, true);\r\n    } else {\r\n      logger.warn(`CORS blocked request from unauthorized origin: ${origin}`);\r\n      // Return proper CORS headers even when denying\r\n      callback(new Error('Not allowed by CORS'));\r\n    }\r\n  },\r\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n  allowedHeaders: ['Content-Type', 'Authorization'],\r\n  credentials: false, // Disable credentials to prevent token leakage\r\n  optionsSuccessStatus: 200, // Some legacy browsers choke on 204\r\n  preflightContinue: false, // Ensure preflight requests are handled properly\r\n  maxAge: 86400 // Cache preflight response for 24 hours\r\n};\r\n\r\n// Middleware\r\napp.use(cors(corsOptions));\r\napp.use(requestLogger); // Add request logging with correlation IDs and PII scrubbing\r\napp.use(helmet({\r\n  contentSecurityPolicy: {\r\n    directives: {\r\n      defaultSrc: [\"'self'\"],\r\n      scriptSrc: [\"'self'\"],\r\n      styleSrc: [\"'self'\"],\r\n      imgSrc: [\r\n        \"'self'\",\r\n        \"data:\",\r\n        \"https://*.mobiledetailhub.com\"\r\n      ],\r\n      connectSrc: [\r\n        \"'self'\",\r\n        \"https://*.mobiledetailhub.com\"\r\n      ],\r\n      fontSrc: [\"'self'\", \"data:\"],\r\n      objectSrc: [\"'none'\"],\r\n      mediaSrc: [\"'self'\"],\r\n      frameSrc: [\"'none'\"],\r\n      baseUri: [\"'self'\"],\r\n      formAction: [\"'self'\"],\r\n      frameAncestors: [\"'none'\"],\r\n      upgradeInsecureRequests: []\r\n    },\r\n    reportOnly: false\r\n  },\r\n  hsts: {\r\n    maxAge: 31536000,\r\n    includeSubDomains: true,\r\n    preload: true\r\n  },\r\n  noSniff: true,\r\n  frameguard: {\r\n    action: 'deny'\r\n  },\r\n  hidePoweredBy: true,\r\n  ienoopen: true,\r\n  referrerPolicy: { policy: 'strict-origin-when-cross-origin' }\r\n}));\r\napp.use(express.json({ limit: '1mb' })); // Limit request body size\r\napp.use(express.urlencoded({ extended: true, limit: '1mb' })); // Limit URL-encoded body size\r\n\r\n// Enhanced request validation middleware\r\nconst requestValidationMiddleware = (req, res, next) => {\r\n  // Check if server is shutting down (allow health endpoints for monitoring)\r\n  if (isShuttingDown && !req.path.startsWith('/api/health')) {\r\n    return res.status(503).json({\r\n      error: 'Service Unavailable',\r\n      message: 'Server is shutting down, please try again later'\r\n    });\r\n  }\r\n  \r\n  // Content-Type validation for POST/PUT requests\r\n  if (['POST', 'PUT', 'PATCH'].includes(req.method)) {\r\n    const contentType = req.headers['content-type'];\r\n    \r\n    if (!contentType) {\r\n      return res.status(400).json({\r\n        error: 'Content-Type header is required',\r\n        message: 'Please specify the content type for your request'\r\n      });\r\n    }\r\n\r\n    // MIME type allowlist for JSON and form data\r\n    const allowedMimeTypes = [\r\n      'application/json',\r\n      'application/x-www-form-urlencoded',\r\n      'multipart/form-data' // For future file uploads\r\n    ];\r\n\r\n    const isValidMimeType = allowedMimeTypes.some(allowedType => \r\n      contentType.startsWith(allowedType)\r\n    );\r\n\r\n    if (!isValidMimeType) {\r\n      logger.warn(`Invalid Content-Type rejected: ${contentType} from ${req.ip}`);\r\n      return res.status(415).json({\r\n        error: 'Unsupported Media Type',\r\n        message: 'Only JSON, form data, and multipart form data are supported',\r\n        allowedTypes: allowedMimeTypes\r\n      });\r\n    }\r\n\r\n    // Enhanced validation for multipart/form-data (future uploads)\r\n    if (contentType.startsWith('multipart/form-data')) {\r\n      const uploadValidation = validateUploadRequest(req);\r\n      if (!uploadValidation.success) {\r\n        logger.warn(`Multipart validation failed: ${uploadValidation.errors.join(', ')} from ${req.ip}`);\r\n        return res.status(400).json({\r\n          error: 'Invalid multipart data',\r\n          message: uploadValidation.errors.join(', '),\r\n          warnings: uploadValidation.warnings\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Request size validation (additional check beyond express limits)\r\n  const contentLength = parseInt(req.headers['content-length'] || '0');\r\n  const maxSize = 1024 * 1024; // 1MB in bytes\r\n  \r\n  if (contentLength > maxSize) {\r\n    logger.warn(`Request too large rejected: ${contentLength} bytes from ${req.ip}`);\r\n    return res.status(413).json({\r\n      error: 'Payload Too Large',\r\n      message: 'Request body exceeds maximum allowed size of 1MB',\r\n      maxSize: '1MB',\r\n      receivedSize: `${Math.round(contentLength / 1024)}KB`\r\n    });\r\n  }\r\n\r\n  next();\r\n};\r\n\r\napp.use(requestValidationMiddleware);\r\napp.use(requestTracker); // Apply request tracking middleware\r\n\r\n// Apply rate limiting to specific route groups\r\n// Note: Auth and admin routes have their own stricter limiters\r\napp.use('/api/health', apiLimiter);\r\napp.use('/api/service_areas', apiLimiter);\r\napp.use('/api/affiliates', apiLimiter);\r\napp.use('/api/mdh-config', apiLimiter);\r\napp.use('/api/customers', apiLimiter);\r\n\r\n// Routes\r\napp.use('/api/health', healthRoutes);\r\napp.use('/api/service_areas', serviceAreasRoutes);\r\napp.use('/api/auth', authLimiter, authRoutes); // Apply auth rate limiting\r\napp.use('/api/affiliates', affiliatesRoutes);\r\napp.use('/api/mdh-config', mdhConfigRoutes);\r\napp.use('/api/customers', customersRoutes);\r\napp.use('/api/admin', adminLimiter, adminRoutes); // Apply admin rate limiting\r\napp.use('/api/upload', apiLimiter, uploadRoutes); // Apply upload rate limiting\r\n\r\n// Error handling middleware (must be last)\r\napp.use(notFoundHandler);\r\napp.use(errorHandler);\r\n\r\n// Start server\r\nserver = app.listen(PORT, async () => {\r\n  // Check if we're already shutting down\r\n  if (isShuttingDown) {\r\n    logger.warn('Server startup cancelled - shutdown in progress');\r\n    return;\r\n  }\r\n  \r\n  logger.startup(`Server running on port ${PORT}`);\r\n  \r\n  // Wait for database connection to be established\r\n  logger.info('Waiting for database connection...');\r\n  try {\r\n    const pool = await waitForConnection();\r\n    logger.info('Database connection ready, setting up database...');\r\n    \r\n    // Setup database and initialize sample data\r\n    await setupDatabase();\r\n    logger.info('Database setup completed successfully');\r\n    logger.startup('Server is fully ready and operational!');\r\n    \r\n    // Start periodic shutdown status updates\r\n    statusUpdateInterval = setInterval(() => {\r\n      updateShutdownStatus({\r\n        isShuttingDown,\r\n        activeRequests: activeRequests.size\r\n      });\r\n    }, 1000); // Update every second\r\n  } catch (err) {\r\n    logger.error('Failed to setup database:', { error: err.message });\r\n  }\r\n});\r\n\r\n// Graceful shutdown function\r\nasync function gracefulShutdown(signal) {\r\n  logger.info(`Received ${signal}, starting graceful shutdown...`);\r\n  \r\n  isShuttingDown = true; // Set flag to prevent new requests\r\n  logger.info(`${activeRequests.size} active requests will be allowed to complete.`);\r\n\r\n  // Wait for active requests to complete with timeout\r\n  if (activeRequests.size > 0) {\r\n    const timeout = 10000; // 10 seconds timeout\r\n    const timeoutPromise = new Promise(resolve => setTimeout(resolve, timeout));\r\n    \r\n    try {\r\n      await Promise.race([\r\n        Promise.all(Array.from(activeRequests.values())),\r\n        timeoutPromise\r\n      ]);\r\n      logger.info('All active requests have completed successfully');\r\n    } catch (error) {\r\n      logger.warn('Some requests may not have completed within timeout');\r\n    }\r\n  } else {\r\n    logger.info('No active requests to wait for');\r\n  }\r\n\r\n  // Stop accepting new connections\r\n  if (server) {\r\n    const serverClosePromise = new Promise((resolve) => {\r\n      server.close(() => {\r\n        logger.info('HTTP server closed');\r\n        resolve();\r\n      });\r\n    });\r\n    \r\n    // Wait for server to close with timeout\r\n    const serverCloseTimeout = new Promise(resolve => setTimeout(resolve, 5000));\r\n    await Promise.race([serverClosePromise, serverCloseTimeout]);\r\n  }\r\n  \r\n  // Clear status update interval\r\n  if (statusUpdateInterval) {\r\n    clearInterval(statusUpdateInterval);\r\n    statusUpdateInterval = null;\r\n  }\r\n  \r\n  // Close database pool\r\n  try {\r\n    await closePool();\r\n    logger.info('Database pool closed');\r\n  } catch (error) {\r\n    logger.error('Error closing database pool:', { error: error.message });\r\n  }\r\n  \r\n  // Flush logger and exit\r\n  try {\r\n    // Final status update\r\n    updateShutdownStatus({\r\n      isShuttingDown: true,\r\n      activeRequests: 0\r\n    });\r\n    \r\n    // Give logger time to flush any pending writes\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    logger.info('Graceful shutdown completed');\r\n    process.exit(0);\r\n  } catch (error) {\r\n    logger.error('Error during shutdown:', { error: error.message });\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\n// Signal handlers for graceful shutdown\r\nprocess.on('SIGINT', () => gracefulShutdown('SIGINT'));\r\nprocess.on('SIGTERM', () => gracefulShutdown('SIGTERM'));\r\n\r\n// Handle uncaught exceptions\r\nprocess.on('uncaughtException', (error) => {\r\n  logger.error('Uncaught Exception:', { error: error.message, stack: error.stack });\r\n  gracefulShutdown('uncaughtException');\r\n});\r\n\r\n// Handle unhandled promise rejections\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n  logger.error('Unhandled Rejection:', { reason: reason?.message || reason, promise });\r\n  gracefulShutdown('unhandledRejection');\r\n});"
        }
      ],
      "fileStructure": {
        "package.json": "backend\\package.json",
        "README.md": "backend\\README.md",
        "server.js": "backend\\server.js"
      },
      "skippedCount": 17
    }
  },
  "summary": {
    "totalFiles": 14,
    "totalDirectories": 0,
    "frontendFiles": 9,
    "backendFiles": 3,
    "rootFiles": 2
  }
}