{
  "name": "Mobile Detail Hub â€“ Cursor Rules",
  "description": "Feature-first architecture. Strong TS + linting discipline. Clear import boundaries. Clean UI with Tailwind + shadcn/ui.",
  "rules": [
    {
      "pattern": "**/*",
      "instructions": [
        "Architecture: feature-first. Each domain lives under frontend/src/features/<domain>/{components,hooks,api,state,types,pages,utils}.",
        "Boundaries: code inside one feature must NOT import from another feature directly. Only allowed paths are '@/features/<same-domain>/**' and '@/shared/**'. If a cross-feature need arises, extract to '@/shared/**'.",
        "Exports: prefer named exports. Only 'default export' allowed for top-level page components or small wrapper components.",
        "Types: keep Typescript strict. Avoid 'any', prefer zod schemas at boundaries. Co-locate types with the feature in 'types/'.",
        "State: use Zustand stores in 'state/'. Keep stores minimal; side-effects live in hooks.",
        "Hooks: data-fetching hooks use React Query under 'hooks/'. Query keys are namespaced by feature, e.g. ['affiliate','bySlug',slug].",
        "API layer: feature-local clients in 'api/'. No direct fetch in components. Centralize endpoints & DTO mapping here.",
        "UI: presentational components in 'components/'. Pure, no side-effects. Style with Tailwind; prefer shadcn/ui primitives.",
        "Utils: put pure helpers in 'utils/'. No IO, no DOM. Tested in isolation.",
        "Routing: pages go in 'pages/'. Pages compose feature components; avoid business logic in pages.",
        "Accessibility: follow jsx-a11y. Interactive elements use buttons/links properly. Labels on inputs.",
        "Testing: vitest + @testing-library/react. Tests live next to files or under __tests__ per feature.",
        "Filesize: split long components. If a file >200 lines or a component has >3 responsibilities, extract.",
        "Naming: components PascalCase, hooks start with use*, stores end with Store, types end with .types.ts, schema .schema.ts, API clients .api.ts.",
        "Imports: use path alias '@/'. Avoid relative traversals like '../../../'. Barrel files are allowed only inside a feature.",
        "CSS: Tailwind only; avoid ad-hoc inline styles except dynamic calculations.",
        "Lint: fix eslint warnings unless explicitly documented with a comment.",
        "Comments: add a top-of-file comment block when logic is non-trivial (why > what)."
      ]
    },
    {
      "pattern": "frontend/src/features/**/components/**/*.{ts,tsx}",
      "instructions": [
        "Components must be pure and stateless except for local UI state.",
        "No fetch, no direct API calls here; get data via props or feature hooks.",
        "Tailwind classes only; keep classNames short and readable. Extract reusable styles into small components."
      ]
    },
    {
      "pattern": "frontend/src/features/**/hooks/**/*.{ts,tsx}",
      "instructions": [
        "Encapsulate side-effects (fetching, subscriptions, timers).",
        "Use React Query for server cache; include robust error/loading states.",
        "All hooks must be testable; inject API clients when helpful."
      ]
    },
    {
      "pattern": "frontend/src/features/**/api/**/*.{ts,tsx}",
      "instructions": [
        "Single responsibility: HTTP calls + data mapping.",
        "Zod-validate external data at the boundary; return typed objects.",
        "No UI imports, no DOM usage."
      ]
    },
    {
      "pattern": "frontend/src/features/**/state/**/*.{ts,tsx}",
      "instructions": [
        "Use Zustand create() with explicit types.",
        "No async side-effects inside the store; put them in hooks that update store."
      ]
    },
    {
      "pattern": "frontend/src/shared/**/*",
      "instructions": [
        "Shared is the ONLY place cross-feature code may live.",
        "Keep shared utilities pure and generically useful. No feature-specific naming."
      ]
    },
    {
      "pattern": "frontend/src/**/*.{ts,tsx}",
      "instructions": [
        "TypeScript: no implicit any; no eslint-disable unless justified.",
        "Named exports by default; avoid default exports except for pages/components that are consumed by routers.",
        "Use absolute imports with '@/' alias."
      ]
    }
  ]
}
