FAQ-RELATED FILES
========================================

FILE: frontend/src/FAQContext.tsx
------------------------------
import type { ReactNode } from 'react';
import React, { createContext, useState, useEffect, useRef } from 'react';

export interface FAQContextType {
  isExpanded: boolean;
  setIsExpanded: (expanded: boolean) => void;
  expandFAQ: () => void;
  collapseFAQ: () => void;
  toggleFAQ: () => void;
}

export const FAQContext = createContext<FAQContextType | null>(null);

interface FAQProviderProps {
  children: ReactNode;
}

export const FAQProvider: React.FC<FAQProviderProps> = ({ children }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const scrollTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const lastScrollY = useRef(0);

  const expandFAQ = () => {
    setIsExpanded(true);
    // Scroll to FAQ section after a brief delay to ensure it's expanded
    setTimeout(() => {
      const faqSection = document.getElementById('faq');
      if (faqSection) {
        faqSection.scrollIntoView({ behavior: 'smooth' });
      }
    }, 100);
  };

  const collapseFAQ = () => { setIsExpanded(false); };
  
  const toggleFAQ = () => { setIsExpanded(prev => !prev); };

  // Add scroll detection to collapse FAQ when scrolling away
  useEffect(() => {
    const handleScroll = () => {
      if (!isExpanded) return;

      const faqSection = document.getElementById('faq');
      if (!faqSection) return;

      const faqRect = faqSection.getBoundingClientRect();
      const currentScrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      

// ... (truncated 11 lines) ...

        // Clear any existing timeout
        if (scrollTimeoutRef.current) {
          clearTimeout(scrollTimeoutRef.current);
        }
        
        // Add a small delay to prevent immediate collapse during smooth scrolling
        scrollTimeoutRef.current = setTimeout(() => {
          setIsExpanded(false);
        }, 300);
      }
    };

    // Throttle scroll events for better performance
    let ticking = false;
    const throttledHandleScroll = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          handleScroll();
          ticking = false;
        });
        ticking = true;
      }
    };

    window.addEventListener('scroll', throttledHandleScroll, { passive: true });

    return () => {
      window.removeEventListener('scroll', throttledHandleScroll);
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current);
      }
    };
  }, [isExpanded]);

  const value: FAQContextType = {
    isExpanded,
    setIsExpanded,
    expandFAQ,
    collapseFAQ,
    toggleFAQ,
  };

  return (
    <FAQContext.Provider value={value}>
      {children}
    </FAQContext.Provider>
  );
};



FILE: frontend/src/LocationPage.tsx
------------------------------
import { useEffect } from "react";

import { FAQ } from '@/features/faq';
import { Footer } from '@/features/footer';
import { Hero } from '@/features/hero';
import { RequestQuoteModal } from '@/features/quotes';
import { Reviews } from '@/features/reviews';
import { Services } from '@/features/services';

import { useHomePageState } from '@/features/home/hooks';
import HomePageLayout from '@/features/home/components/HomePageLayout';
import { getAbsoluteUrl } from '@/shared/utils';

type AreaImage = { 
  url: string; 
  alt: string; 
  caption?: string; 
  role?: "hero" | "gallery" 
};

type Area = {
  slug: string;
  city: string;
  stateCode: string;
  state?: string;
  urlPath: string;
  affiliate?: string;
  headings?: { h1?: string; sub?: string };
  intro?: string;
  images?: AreaImage[];
  faqs?: Array<{ q: string; a: string }>;
  "faq-intro"?: string;
  reviewsSection?: {
    heading?: string;
    intro?: string;
  };
  seo?: {
    title?: string;
    description?: string;
    ogImage?: string;
  };
};

export default function LocationPage({ area }: { area: Area }) {
  console.log('LocationPage rendered with area:', area);
  
  const {
    isAffiliate,
    businessSlug,
    isQuoteModalOpen,

// ... (truncated 29 lines) ...

  return (
    <HomePageLayout>
      <section id="hero">
        <Hero 
          onRequestQuote={handleOpenQuoteModal} 
          onBookNow={handleBookNow}
          onQuoteHover={handleQuoteModalPrefetch}
          {...(area.headings?.h1 || area.headings?.sub ? {
            customContent: {
              ...(area.headings?.h1 && { title: area.headings.h1 }),
              ...(area.headings?.sub && { subtitle: area.headings.sub })
            }
          } : {})}
        />
      </section>

      <section id="services">
        <Services />
      </section>
      <section id="reviews">
        <Reviews 
          reviewType={isAffiliate ? 'affiliate' : 'mdh'}
          businessSlug={businessSlug ?? ''}
          {...(area["reviewsSection"]?.heading && { customHeading: area["reviewsSection"].heading })}
          {...(area["reviewsSection"]?.intro && { customIntro: area["reviewsSection"].intro })}
        />
      </section>
      <FAQ 
        {...(area.faqs && { customFAQs: area.faqs })}
        {...(area["faq-intro"] && { customFAQIntro: area["faq-intro"] })}
      />
      <section id="footer">
        <Footer 
          onRequestQuote={handleOpenQuoteModal} 
          onBookNow={handleBookNow}
          onQuoteHover={handleQuoteModalPrefetch}
        />
      </section>
      
      {/* Centralized Modals - Now using lazy loading */}
      {isAffiliate && (
        <RequestQuoteModal
          isOpen={isQuoteModalOpen}
          onClose={handleCloseQuoteModal}
        />
      )}
    </HomePageLayout>
  );
}


FILE: frontend/src/Header.tsx
------------------------------
import React, { useState, useEffect } from 'react';
import { getContext } from '@/shared/utils/siteContext';
import { Menu, X } from 'lucide-react';

import Logo from './Logo';
import BusinessInfo from './BusinessInfo';
import Navigation from './Navigation';
import SocialMediaIcons from './SocialMediaIcons';
import LoginButton from './LoginButton';
import UserMenu from './UserMenu';
import { NAV_LINKS } from '@/features/header/utils/constants';
import { handleSectionClick } from '@/features/header/utils/navigation';

interface HeaderProps {
  locationData?: any; // Will type this properly later
  employeeData?: any; // Will type this properly later
}

const Header: React.FC<HeaderProps> = ({ locationData, employeeData }) => {
  // Get context for consistent behavior
  const context = getContext(locationData);
  const [activeSection, setActiveSection] = useState<string>('');

  // Determine which section is currently in view
  useEffect(() => {
    const handleScroll = () => {
      const sections = ['top', 'services', 'reviews', 'faq', 'footer'];
      const scrollPosition = window.scrollY + 100; // Offset for better detection
      let currentSection = '';

      for (const section of sections) {
        const element = document.getElementById(section);
        if (element) {
          const rect = element.getBoundingClientRect();
          const elementTop = rect.top + window.scrollY;
          const elementBottom = elementTop + rect.height;

          if (scrollPosition >= elementTop && scrollPosition < elementBottom) {
            currentSection = section;
            break;
          }
        }
      }

      // If no section is found and we're at the top, default to 'top'
      if (!currentSection && window.scrollY < 200) {
        currentSection = 'top';
      }
      
      setActiveSection(currentSection);

// ... (truncated 136 lines) ...

                    }`}
                    aria-label={`Scroll to ${link.name} section`}
                  >
                    {link.name}
                  </button>
                ) : link.name === 'Home' ? (
                  <button
                    key={link.name}
                    onClick={() => handleSectionClick('#top')}
                    className={`nav-link w-full text-left px-4 py-3 rounded-lg hover:text-orange-400 hover:bg-orange-500/10 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200 ${
                      isActive(link) ? 'text-orange-400 bg-transparent ring-2 ring-orange-400 ring-offset-2 ring-offset-black/20' : 'text-white bg-transparent'
                    }`}
                    aria-label={`Scroll to ${link.name} section`}
                  >
                    {link.name}
                  </button>
                ) : link.name === 'Services' ? (
                  <button
                    key={link.name}
                    onClick={() => handleSectionClick('#services')}
                    className={`nav-link w-full text-left px-4 py-3 rounded-lg hover:text-orange-400 hover:bg-orange-500/10 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200 ${
                      isActive(link) ? 'text-orange-400 bg-transparent ring-2 ring-orange-400 ring-offset-2 ring-offset-black/20' : 'text-white bg-transparent'
                    }`}
                    aria-label={`Scroll to ${link.name} section`}
                  >
                    {link.name}
                  </button>
                ) : (
                  <a
                    key={link.name}
                    href={link.href}
                    className={`nav-link w-full text-left px-4 py-3 rounded-lg hover:text-orange-400 hover:bg-orange-500/10 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200 ${
                      isActive(link) ? 'text-orange-400 bg-transparent ring-2 ring-orange-400 ring-offset-2 ring-offset-black/20' : 'text-white bg-transparent'
                    }`}
                    aria-label={`Navigate to ${link.name} page`}
                  >
                    {link.name}
                  </a>
                )
              ))}
            </nav>
          </div>
        </div>
      )}
    </header>
  );
};

export default Header;


FILE: frontend/src/Navigation.tsx
------------------------------
import React from 'react';
import { NAV_LINKS } from '@/features/header/utils/constants';
import { handleSectionClick } from '@/features/header/utils/navigation';

interface NavigationProps {
  activeSection: string;
}

const Navigation: React.FC<NavigationProps> = ({ activeSection }) => {
  // Determine if a nav item is active based on visible section
  const isActive = (link: typeof NAV_LINKS[0]) => {
    const isLinkActive = (
      (link.name === 'Home' && activeSection === 'top') ||
      (link.name === 'Services' && activeSection === 'services') ||
      (link.name === 'Reviews' && activeSection === 'reviews') ||
      (link.name === 'FAQ' && activeSection === 'faq') ||
      (link.name === 'Gallery' && activeSection === 'footer')
    );
    
    return isLinkActive;
  };

  // Base classes for nav items
  const getNavItemClasses = (link: typeof NAV_LINKS[0]) => {
    const isLinkActive = isActive(link);
    
    const baseClasses = "nav-link hover:text-orange-400 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200 p-2 font-inherit cursor-pointer rounded";
    
    const finalClasses = isLinkActive 
      ? `${baseClasses} text-orange-400 bg-transparent border-none ring-2 ring-orange-400 ring-offset-2 ring-offset-black/20` 
      : `${baseClasses} text-white bg-transparent border-none`;
    
    return finalClasses;
  };

  return (
    <nav aria-label="Primary navigation" className="hidden md:flex space-x-6">
      {NAV_LINKS.map(link => (
        link.isFAQ ? (
          <button
            key={link.name}
            onClick={() => handleSectionClick('#faq')}
            className={getNavItemClasses(link)}
            aria-label={`Scroll to ${link.name} section`}
          >
            {link.name}
          </button>
        ) : link.isGallery ? (
          <button
            key={link.name}

// ... (truncated 0 lines) ...

            onClick={() => handleSectionClick('#footer')}
            className={getNavItemClasses(link)}
            aria-label={`Scroll to ${link.name} section`}
          >
            {link.name}
          </button>
        ) : link.name === 'Reviews' ? (
          <button
            key={link.name}
            onClick={() => handleSectionClick('#reviews')}
            className={getNavItemClasses(link)}
            aria-label={`Scroll to ${link.name} section`}
          >
            {link.name}
          </button>
        ) : link.name === 'Home' ? (
          <button
            key={link.name}
            onClick={() => handleSectionClick('#top')}
            className={getNavItemClasses(link)}
            aria-label={`Scroll to ${link.name} section`}
          >
            {link.name}
          </button>
        ) : link.name === 'Services' ? (
          <button
            key={link.name}
            onClick={() => handleSectionClick('#services')}
            className={getNavItemClasses(link)}
            aria-label={`Scroll to ${link.name} section`}
          >
            {link.name}
          </button>
        ) : (
          <a
            key={link.name}
            href={link.href}
            className={getNavItemClasses(link)}
            aria-label={`Navigate to ${link.name} page`}
          >
            {link.name}
          </a>
        )
      ))}
    </nav>
  );
};

export default Navigation;


FILE: frontend/src/faq.tsx
------------------------------
import React, { useState } from 'react';
import { getImageOpacityClasses, getTransitionStyles } from '@/shared/utils';

import { MDH_FAQ_ITEMS } from '@/features/faq/utils';
import { useRotatingBackground } from '@/features/faq/hooks';
import FAQSearchBar from './FAQSearchBar';
import FAQCategoryFilter from './FAQCategoryFilter';
import FAQList from './FAQList';
import FAQEmptyState from './FAQEmptyState';

const FAQ: React.FC = () => {
  const [selectedCategory, setSelectedCategory] = useState('Services & Packages');
  const [expandedFaq, setExpandedFaq] = useState<string | number | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  
  // Rotating background
  const { images, currentIndex, loading: backgroundLoading, error: backgroundError } = useRotatingBackground();

  // Extract unique categories from FAQ data
  const categories = ['All', ...Array.from(new Set(MDH_FAQ_ITEMS.map(faq => faq.category)))];

  // Filter FAQs based on category and search
  const filteredFaqs = MDH_FAQ_ITEMS.filter(faq => {
    const matchesCategory = selectedCategory === 'All' || faq.category === selectedCategory;
    const matchesSearch = faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         faq.answer.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  const toggleFaq = (id: string | number) => {
    setExpandedFaq(expandedFaq === id ? null : id);
  };

  return (
    <section id="faq" className="relative h-screen snap-start snap-always overflow-hidden">
      {/* Rotating Background Images with Overlay */}
      <div className="absolute inset-0 z-0">
        {/* Render all images to test if performance optimization causes the pop */}
        {images.map((image, index) => {
          return (
            <img
              key={image.id}
              src={image.src}
              alt={image.alt || `FAQ background image ${index + 1}`}
              className={`absolute inset-0 w-full h-full object-cover ${getImageOpacityClasses(index, currentIndex, 2000)}`}
              style={getTransitionStyles(2000)}
              decoding={index === 0 ? 'sync' : 'async'}
              loading={index === 0 ? 'eager' : 'lazy'}
            />
          );

// ... (truncated 15 lines) ...

        {/* Dark overlay */}
        <div className="absolute inset-0 bg-stone-900/85"></div>
      </div>

      {/* Content */}
      <div className="relative z-10 h-full overflow-y-auto pt-20">
        <div className="max-w-6xl mx-auto w-full px-4 py-8">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-4xl md:text-5xl font-bold text-white mb-3 drop-shadow-lg">
              Frequently Asked Questions
            </h1>
            <p className="text-stone-200 text-lg max-w-2xl mx-auto drop-shadow-md">
              Find answers to common questions about our mobile detailing services
            </p>
          </div>

          {/* Search and Filter Controls */}
          <div className="mb-8">
            <FAQSearchBar 
              searchTerm={searchTerm}
              onSearchChange={setSearchTerm}
            />

            <FAQCategoryFilter
              selectedCategory={selectedCategory}
              onCategoryChange={setSelectedCategory}
            />
          </div>

          {/* FAQ Content */}
          <div className="max-w-4xl mx-auto">
            {filteredFaqs.length === 0 ? (
              <FAQEmptyState />
            ) : (
              <FAQList
                faqs={filteredFaqs}
                expandedFaq={expandedFaq}
                onToggleFaq={toggleFaq}
              />
            )}
          </div>
        </div>
      </div>
    </section>
  );
};

export default FAQ;


FILE: frontend/src/FAQCategoryFilter.tsx
------------------------------
import React from 'react';
import { Car, Settings, Shield, CreditCard } from 'lucide-react';

import { FilterChip } from '@/shared/ui';

interface FAQCategoryFilterProps {
  selectedCategory: string;
  onCategoryChange: (category: string) => void;
}

// Mapping from display names to actual category names
const categoryMapping = {
  'All': 'All',
  'General': 'General',
  'Services': 'Services & Packages',
  'Scheduling': 'Scheduling & Location',
  'Pricing': 'Pricing & Payment',
  'Preparation': 'Preparation & Aftercare',
  'RV': 'RV & Boat Services',
  'Locations': 'Locations',
  'Payments': 'Payments & Deposits',
  'Warranty': 'Warranty & Guarantee',
};

const categoryIcons = {
  All: Car,
  General: Car,
  Services: Car,
  Scheduling: Settings,
  Pricing: CreditCard,
  Preparation: Shield,
  RV: Car,
  Locations: Settings,
  Payments: CreditCard,
  Warranty: Shield,
};

const FAQCategoryFilter: React.FC<FAQCategoryFilterProps> = ({ 
  selectedCategory, 
  onCategoryChange 
}) => {
  // Create display categories from the mapping
  const displayCategories = Object.keys(categoryMapping);
  
  // Split into two rows: 5 in first row, 4 in second row
  const firstRow = displayCategories.slice(0, 5);
  const secondRow = displayCategories.slice(5);
  
  const renderChip = (displayName: string) => {
    const actualCategory = categoryMapping[displayName as keyof typeof categoryMapping];

// ... (truncated -17 lines) ...

  Payments: CreditCard,
  Warranty: Shield,
};

const FAQCategoryFilter: React.FC<FAQCategoryFilterProps> = ({ 
  selectedCategory, 
  onCategoryChange 
}) => {
  // Create display categories from the mapping
  const displayCategories = Object.keys(categoryMapping);
  
  // Split into two rows: 5 in first row, 4 in second row
  const firstRow = displayCategories.slice(0, 5);
  const secondRow = displayCategories.slice(5);
  
  const renderChip = (displayName: string) => {
    const actualCategory = categoryMapping[displayName as keyof typeof categoryMapping];
    const IconComponent = categoryIcons[displayName as keyof typeof categoryIcons] || Car;
    const isSelected = selectedCategory === actualCategory;
    
    return (
      <FilterChip
        key={displayName}
        onClick={() => onCategoryChange(actualCategory)}
        isSelected={isSelected}
        icon={IconComponent}
        className="transform hover:scale-105 backdrop-blur-sm"
      >
        {displayName}
      </FilterChip>
    );
  };
  
  return (
    <div className="flex flex-col items-center gap-3">
      {/* First row - 5 chips */}
      <div className="flex justify-center gap-3">
        {firstRow.map(renderChip)}
      </div>
      
      {/* Second row - 4 chips */}
      <div className="flex justify-center gap-3">
        {secondRow.map(renderChip)}
      </div>
    </div>
  );
};

export default FAQCategoryFilter;


FILE: frontend/src/FAQEmptyState.tsx
------------------------------
import React from 'react';
import { Search } from 'lucide-react';

const FAQEmptyState: React.FC = () => {
  return (
    <div className="text-center py-12">
      <div className="bg-stone-800/80 backdrop-blur-sm rounded-lg p-8 border border-stone-700/50 shadow-xl">
        <Search className="h-12 w-12 text-stone-400 mx-auto mb-4" />
        <h3 className="text-xl font-semibold text-white mb-2">No FAQs Found</h3>
        <p className="text-stone-400">
          Try adjusting your search or selecting a different category.
        </p>
      </div>
    </div>
  );
};

export default FAQEmptyState;


FILE: frontend/src/FAQItem.tsx
------------------------------
import React from 'react';
import { ChevronDown } from 'lucide-react';

import type { FAQItem } from '@/features/faq/types';

interface FAQItemProps {
  faq: FAQItem;
  isExpanded: boolean;
  onToggle: () => void;
}

const FAQItem: React.FC<FAQItemProps> = ({ faq, isExpanded, onToggle }) => {
  return (
    <div className="bg-stone-800/80 backdrop-blur-sm rounded-lg border border-stone-700/50 overflow-hidden hover:shadow-xl hover:shadow-black/30 transition-all duration-300 h-fit">
      <button
        onClick={onToggle}
        className="w-full px-4 py-4 text-left flex justify-between items-start hover:bg-stone-700/40 transition-colors duration-200 group"
      >
        <div className="flex-1 pr-2">
          <h3 className="text-white font-semibold text-base group-hover:text-orange-400 transition-colors duration-200 leading-tight">
            {faq.question}
          </h3>
        </div>
        <ChevronDown
          className={`h-4 w-4 text-stone-400 transition-transform duration-200 flex-shrink-0 mt-1 ${
            isExpanded ? 'rotate-180 text-orange-400' : ''
          }`}
        />
      </button>
      
      <div
        className={`overflow-hidden transition-all duration-300 ease-in-out ${
          isExpanded ? 'max-h-48 opacity-100' : 'max-h-0 opacity-0'
        }`}
      >
        <div className="px-4 pb-4 border-t border-stone-700/30">
          <div className="pt-3">
            <p className="text-stone-300 text-sm leading-relaxed">
              {faq.answer}
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FAQItem;


