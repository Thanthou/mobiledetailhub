FAQ-RELATED FILES
========================================

FILE: frontend/src/FAQContext.tsx
------------------------------
import type { ReactNode } from 'react';
import React, { createContext, useState, useEffect, useRef } from 'react';

export interface FAQContextType {
  isExpanded: boolean;
  setIsExpanded: (expanded: boolean) => void;
  expandFAQ: () => void;
  collapseFAQ: () => void;
  toggleFAQ: () => void;
}

export const FAQContext = createContext<FAQContextType | null>(null);

interface FAQProviderProps {
  children: ReactNode;
}

export const FAQProvider: React.FC<FAQProviderProps> = ({ children }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const scrollTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const lastScrollY = useRef(0);

  const expandFAQ = () => {
    setIsExpanded(true);
    // Scroll to FAQ section after a brief delay to ensure it's expanded
    setTimeout(() => {
      const faqSection = document.getElementById('faq');
      if (faqSection) {
        faqSection.scrollIntoView({ behavior: 'smooth' });
      }
    }, 100);
  };

  const collapseFAQ = () => { setIsExpanded(false); };
  
  const toggleFAQ = () => { setIsExpanded(prev => !prev); };

  // Add scroll detection to collapse FAQ when scrolling away
  useEffect(() => {
    const handleScroll = () => {
      if (!isExpanded) return;

      const faqSection = document.getElementById('faq');
      if (!faqSection) return;

      const faqRect = faqSection.getBoundingClientRect();
      const currentScrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      

// ... (truncated 11 lines) ...

        // Clear any existing timeout
        if (scrollTimeoutRef.current) {
          clearTimeout(scrollTimeoutRef.current);
        }
        
        // Add a small delay to prevent immediate collapse during smooth scrolling
        scrollTimeoutRef.current = setTimeout(() => {
          setIsExpanded(false);
        }, 300);
      }
    };

    // Throttle scroll events for better performance
    let ticking = false;
    const throttledHandleScroll = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          handleScroll();
          ticking = false;
        });
        ticking = true;
      }
    };

    window.addEventListener('scroll', throttledHandleScroll, { passive: true });

    return () => {
      window.removeEventListener('scroll', throttledHandleScroll);
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current);
      }
    };
  }, [isExpanded]);

  const value: FAQContextType = {
    isExpanded,
    setIsExpanded,
    expandFAQ,
    collapseFAQ,
    toggleFAQ,
  };

  return (
    <FAQContext.Provider value={value}>
      {children}
    </FAQContext.Provider>
  );
};



FILE: frontend/src/Information.tsx
------------------------------
import React from "react";

import type { SectionProps } from "../../types/service";
import { SECTION_IDS } from "../../utils/sectionIds";

const Row = ({ q, a }: { q: string; a: string }) => (
  <details className="rounded-2xl bg-stone-700 ring-1 ring-white/10 p-4 open:bg-stone-600/60">
    <summary className="cursor-pointer text-white font-semibold">{q}</summary>
    <p className="mt-2 text-slate-300">{a}</p>
  </details>
);

const Information: React.FC<SectionProps> = ({ id = SECTION_IDS.INFO, className, serviceData }) => {
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  const faqs = serviceData.information.faqs || [
    { question: "Do I need water or power?", answer: "Placeholder answer text for this FAQ item." },
    { question: "How long does it take?", answer: "Placeholder answer text for this FAQ item." },
    { question: "What prep is required?", answer: "Placeholder answer text for this FAQ item." }
  ];

  return (
    <section id={id} className={`bg-stone-900 py-16 ${className || ""}`}>
      <div className="container mx-auto max-w-6xl px-4 sm:px-6 lg:px-8">
        <h2 className="text-2xl sm:text-3xl font-bold text-white">
          {serviceData.information.title || "Information"}
        </h2>
        <div className="mt-6 space-y-3">
          {faqs.map((faq, index) => (
            <Row key={index} q={faq.question} a={faq.answer} />
          ))}
        </div>
      </div>
    </section>
  );
};
export default Information;


FILE: frontend/src/ServiceFAQ.tsx
------------------------------
import React, { useState } from 'react';

import { Button } from '@/shared/ui';

import type { SectionProps } from '../../types/service';
import { isServiceData, isServiceFAQ } from '../../utils/typeGuards';

const ServiceFAQ: React.FC<SectionProps> = ({ serviceData }: SectionProps) => {
  const [openItems, setOpenItems] = useState<Set<number>>(new Set());

  const toggleItem = (id: number) => {
    const newOpenItems = new Set(openItems);
    if (newOpenItems.has(id)) {
      newOpenItems.delete(id);
    } else {
      newOpenItems.add(id);
    }
    setOpenItems(newOpenItems);
  };

  // Type guard checks
  if (!isServiceData(serviceData)) {
    return null;
  }

  if (!isServiceFAQ(serviceData.faq)) {
    return null;
  }

  return (
    <section className="py-16 bg-white">
      <div className="max-w-4xl mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            {serviceData.faq.title}
          </h2>
          <p className="text-lg text-gray-600">
            Common questions about our {serviceData.title.toLowerCase()} services
          </p>
        </div>

        <div className="space-y-4">
          {serviceData.faq.questions.map((item) => (
            <div key={item.id} className="bg-gray-50 rounded-lg">
              <Button
                variant="ghost"
                size="lg"
                className="w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-100"
                onClick={() => {
                  toggleItem(item.id);

// ... (truncated -15 lines) ...

          </h2>
          <p className="text-lg text-gray-600">
            Common questions about our {serviceData.title.toLowerCase()} services
          </p>
        </div>

        <div className="space-y-4">
          {serviceData.faq.questions.map((item) => (
            <div key={item.id} className="bg-gray-50 rounded-lg">
              <Button
                variant="ghost"
                size="lg"
                className="w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-100"
                onClick={() => {
                  toggleItem(item.id);
                }}
                rightIcon={
                  <svg
                    className={`w-5 h-5 text-gray-500 transition-transform ${
                      openItems.has(item.id) ? 'rotate-180' : ''
                    }`}
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                  </svg>
                }
              >
                <h3 className="text-lg font-semibold text-gray-900">
                  {item.question}
                </h3>
              </Button>
              {openItems.has(item.id) && (
                <div className="px-6 pb-4">
                  <p className="text-gray-700">
                    {item.answer}
                  </p>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default ServiceFAQ;


FILE: frontend/src/LocationPage.tsx
------------------------------
import { useEffect } from "react";

import { FAQ } from '@/features/faq';
import { Footer } from '@/features/footer';
import { Hero } from '@/features/hero';
import { RequestQuoteModal } from '@/features/quotes';
import { Reviews } from '@/features/reviews';
import { Services } from '@/features/services';

import { useHomePageState } from '@/features/home/hooks';
import HomePageLayout from '@/features/home/components/HomePageLayout';
import { getAbsoluteUrl } from '@/shared/utils';

type AreaImage = { 
  url: string; 
  alt: string; 
  caption?: string; 
  role?: "hero" | "gallery" 
};

type Area = {
  slug: string;
  city: string;
  stateCode: string;
  state?: string;
  urlPath: string;
  affiliate?: string;
  headings?: { h1?: string; sub?: string };
  intro?: string;
  images?: AreaImage[];
  faqs?: Array<{ q: string; a: string }>;
  "faq-intro"?: string;
  reviewsSection?: {
    heading?: string;
    intro?: string;
  };
  seo?: {
    title?: string;
    description?: string;
    ogImage?: string;
  };
};

export default function LocationPage({ area }: { area: Area }) {
  console.log('LocationPage rendered with area:', area);
  
  const {
    isAffiliate,
    businessSlug,
    isQuoteModalOpen,

// ... (truncated 31 lines) ...

      <section id="hero">
        <Hero 
          onRequestQuote={handleOpenQuoteModal} 
          onBookNow={handleBookNow}
          onQuoteHover={handleQuoteModalPrefetch}
          {...(area.headings?.h1 || area.headings?.sub ? {
            customContent: {
              ...(area.headings?.h1 && { title: area.headings.h1 }),
              ...(area.headings?.sub && { subtitle: area.headings.sub })
            }
          } : {})}
        />
      </section>

      <section id="services">
        <Services />
      </section>
      <section id="reviews">
        <Reviews 
          reviewType={isAffiliate ? 'affiliate' : 'mdh'}
          businessSlug={businessSlug ?? ''}
          {...(area["reviewsSection"]?.heading && { customHeading: area["reviewsSection"].heading })}
          {...(area["reviewsSection"]?.intro && { customIntro: area["reviewsSection"].intro })}
        />
      </section>
      <section id="faq">
        <FAQ 
          {...(area.faqs && { customFAQs: area.faqs })}
          {...(area["faq-intro"] && { customFAQIntro: area["faq-intro"] })}
        />
      </section>
      <section id="footer">
        <Footer 
          onRequestQuote={handleOpenQuoteModal} 
          onBookNow={handleBookNow}
          onQuoteHover={handleQuoteModalPrefetch}
        />
      </section>
      
      {/* Centralized Modals - Now using lazy loading */}
      {isAffiliate && (
        <RequestQuoteModal
          isOpen={isQuoteModalOpen}
          onClose={handleCloseQuoteModal}
        />
      )}
    </HomePageLayout>
  );
}


FILE: frontend/src/HomePage.tsx
------------------------------
import React from 'react';

import { FAQ } from '@/features/faq';
import { Footer } from '@/features/footer';
import { Hero } from '@/features/hero';
import { RequestQuoteModal } from '@/features/quotes';
import { Reviews } from '@/features/reviews';
import { Services } from '@/features/services';

import { useHomePageState } from '../hooks';
import HomePageLayout from './HomePageLayout';

const HomePage: React.FC = () => {
  const {
    isAffiliate,
    businessSlug,
    isQuoteModalOpen,
    handleOpenQuoteModal,
    handleCloseQuoteModal,
    handleBookNow,
    handleQuoteModalPrefetch
  } = useHomePageState();
  
  return (
    <HomePageLayout>
      <section id="hero">
        <Hero 
          onRequestQuote={handleOpenQuoteModal} 
          onBookNow={handleBookNow}
          onQuoteHover={handleQuoteModalPrefetch}
        />
      </section>
      <section id="services">
        <Services />
      </section>
      <section id="reviews">
        <Reviews 
          reviewType={isAffiliate ? 'affiliate' : 'mdh'}
          businessSlug={businessSlug ?? ''}
        />
      </section>
      <section id="faq">
        <FAQ />
      </section>
      <section id="footer">
        <Footer 
          onRequestQuote={handleOpenQuoteModal} 
          onBookNow={handleBookNow}
          onQuoteHover={handleQuoteModalPrefetch}
        />
      </section>
      
      {/* Centralized Modals - Now using lazy loading */}
      {isAffiliate && (
        <RequestQuoteModal
          isOpen={isQuoteModalOpen}
          onClose={handleCloseQuoteModal}
        />
      )}
    </HomePageLayout>
  );
};

export default HomePage;


FILE: frontend/src/HeaderAffiliate.tsx
------------------------------
import React from 'react';

import { useBusinessData, useMDHConfig, useAuth } from '@/shared/hooks';
import BusinessInfo from './BusinessInfo';
import HeaderNavigation from './HeaderNavigation';
import LoginButton from './LoginButton';
import UserMenu from './UserMenu';

const HeaderAffiliate: React.FC = () => {
  // Get business data from employees.json for location-specific display
  const { businessName, businessPhone, city, state } = useBusinessData();
  const { mdhConfig } = useMDHConfig();
  const { user } = useAuth();

  console.log('🔍 HeaderAffiliate Debug:', {
    businessName,
    businessPhone,
    city,
    state,
    mdhConfig: mdhConfig ? 'loaded' : 'not loaded'
  });

  // Check if we're on a service page
  const isServicePage = window.location.pathname.includes('/service/');

  return (
    <header className="fixed top-0 z-50 bg-black/20 backdrop-blur-sm w-full">
      <div className="w-full py-4">
        <div className="max-w-7xl mx-auto flex items-center px-4">
          {/* Logo/Business Name/Info */}
          <BusinessInfo
            logoUrl={mdhConfig?.logo_url}
            businessName={businessName || 'Business Name'}
            phone={businessPhone || 'No phone data'}
            displayLocation={city && state ? {
              city,
              state,
              zipCode: '',
              fullLocation: `${city}, ${state}`
            } : null}
          />

          {/* Navigation/Social Media */}
          <HeaderNavigation
            socialMedia={{
              facebook: mdhConfig?.facebook || '',
              instagram: mdhConfig?.instagram || '',
              tiktok: mdhConfig?.tiktok || '',
              youtube: mdhConfig?.youtube || '',
            }}
            onFAQClick={() => {}}
          />

          {/* Login/User */}
          <div className="ml-6">
            {user ? <UserMenu /> : <LoginButton />}
          </div>
        </div>
      </div>
    </header>
  );
};

export default HeaderAffiliate;


FILE: frontend/src/HeaderMDH.tsx
------------------------------
import React from 'react';
import { useLocation, useNavigate } from 'react-router-dom';

import { useAuth, useFAQ } from '@/shared/hooks';
import { Button } from '@/shared/ui';
import { scrollToTop } from '@/shared/utils';
import siteData from '@/data/mdh/site.json';

import { NAV_LINKS } from '../constants';
import LoginButton from './LoginButton';
import SocialMediaIcons from './SocialMediaIcons';
import UserMenu from './UserMenu';

const HeaderMDH: React.FC = () => {
  const authContext = useAuth();
  const { user, loading: authLoading } = authContext;
  
  const faqContext = useFAQ();
  const { expandFAQ } = faqContext;
  const navigate = useNavigate();
  const location = useLocation();
  
  // Check if we're on a service page
  const isServicePage = location.pathname.includes('/service/');
  
  // Always render header immediately - never wait for network
  return (
    <header className="fixed top-0 z-50 bg-black/20 backdrop-blur-sm w-full">
      <div className="w-full py-4">
        <div className="max-w-7xl mx-auto flex items-center px-4">
          {/* Back button for service pages */}
          {isServicePage && (
            <Button
              onClick={() => {
                void navigate('/');
              }}
              variant="ghost"
              size="sm"
              className="flex items-center text-white hover:text-orange-400 mr-4"
              leftIcon={
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              }
            >
              Back
            </Button>
          )}
          
          {/* 1. Logo/Business Name - Always show immediately */}

// ... (truncated 30 lines) ...

              {NAV_LINKS.map(link => (
                link.isFAQ ? (
                  <button
                    key={link.name}
                    onClick={() => { expandFAQ(); }}
                    className="text-white hover:text-orange-400 transition-colors duration-200 bg-transparent border-none p-0 font-inherit cursor-pointer"
                  >
                    {link.name}
                  </button>
                ) : (
                  <a
                    key={link.name}
                    href={link.href}
                    className="text-white hover:text-orange-400 transition-colors duration-200"
                  >
                    {link.name}
                  </a>
                )
              ))}
            </nav>
            {/* Social media icons - show if available in site data */}
            {(siteData?.socials?.facebook || siteData?.socials?.instagram || siteData?.socials?.tiktok || siteData?.socials?.youtube) && (
              <SocialMediaIcons socialMedia={{
                facebook: siteData?.socials?.facebook ?? '',
                instagram: siteData?.socials?.instagram ?? '',
                tiktok: siteData?.socials?.tiktok ?? '',
                youtube: siteData?.socials?.youtube ?? '',
              }} />
            )}
          </div>

          {/* 3. Login/User - Show loading state while auth is loading */}
          <div className="ml-6">
            {authLoading ? (
              <div className="text-white text-sm">Loading...</div>
            ) : user ? (
              <UserMenu />
            ) : (
              <LoginButton />
            )}
          </div>

        </div>
      </div>
    </header>
  );
};

export default HeaderMDH;


FILE: frontend/src/HeaderNavigation.tsx
------------------------------
import React from 'react';

import { NAV_LINKS } from '../constants';
import SocialMediaIcons from './SocialMediaIcons';

interface SocialMediaConfig {
  facebook?: string;
  instagram?: string;
  tiktok?: string;
  youtube?: string;
}

interface HeaderNavigationProps {
  socialMedia?: SocialMediaConfig;
  onFAQClick: () => void;
}

const HeaderNavigation: React.FC<HeaderNavigationProps> = ({ socialMedia, onFAQClick }) => {
  return (
    <div className="flex items-center space-x-4 ml-auto">
      <nav className="flex space-x-4">
        {NAV_LINKS.map(link => (
          link.isFAQ ? (
            <button
              key={link.name}
              onClick={onFAQClick}
              className="text-white hover:text-orange-400 transition-colors duration-200 bg-transparent border-none p-0 font-inherit cursor-pointer"
            >
              {link.name}
            </button>
          ) : (
            <a
              key={link.name}
              href={link.href}
              className="text-white hover:text-orange-400 transition-colors duration-200"
            >
              {link.name}
            </a>
          )
        ))}
      </nav>
      {socialMedia && (socialMedia.facebook || socialMedia.instagram || socialMedia.tiktok || socialMedia.youtube) && (
        <SocialMediaIcons socialMedia={socialMedia} />
      )}
    </div>
  );
};

export default HeaderNavigation;


