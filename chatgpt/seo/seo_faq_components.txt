FAQ-RELATED FILES
========================================

FILE: frontend/src/FAQContext.tsx
------------------------------
import type { ReactNode } from 'react';
import React, { createContext, useState, useEffect, useRef } from 'react';

export interface FAQContextType {
  isExpanded: boolean;
  setIsExpanded: (expanded: boolean) => void;
  expandFAQ: () => void;
  collapseFAQ: () => void;
  toggleFAQ: () => void;
}

export const FAQContext = createContext<FAQContextType | null>(null);

interface FAQProviderProps {
  children: ReactNode;
}

export const FAQProvider: React.FC<FAQProviderProps> = ({ children }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const scrollTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const lastScrollY = useRef(0);

  const expandFAQ = () => {
    setIsExpanded(true);
    // Scroll to FAQ section after a brief delay to ensure it's expanded
    setTimeout(() => {
      const faqSection = document.getElementById('faq');
      if (faqSection) {
        faqSection.scrollIntoView({ behavior: 'smooth' });
      }
    }, 100);
  };

  const collapseFAQ = () => { setIsExpanded(false); };
  
  const toggleFAQ = () => { setIsExpanded(prev => !prev); };

  // Add scroll detection to collapse FAQ when scrolling away
  useEffect(() => {
    const handleScroll = () => {
      if (!isExpanded) return;

      const faqSection = document.getElementById('faq');
      if (!faqSection) return;

      const faqRect = faqSection.getBoundingClientRect();
      const currentScrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      

// ... (truncated 11 lines) ...

        // Clear any existing timeout
        if (scrollTimeoutRef.current) {
          clearTimeout(scrollTimeoutRef.current);
        }
        
        // Add a small delay to prevent immediate collapse during smooth scrolling
        scrollTimeoutRef.current = setTimeout(() => {
          setIsExpanded(false);
        }, 300);
      }
    };

    // Throttle scroll events for better performance
    let ticking = false;
    const throttledHandleScroll = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          handleScroll();
          ticking = false;
        });
        ticking = true;
      }
    };

    window.addEventListener('scroll', throttledHandleScroll, { passive: true });

    return () => {
      window.removeEventListener('scroll', throttledHandleScroll);
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current);
      }
    };
  }, [isExpanded]);

  const value: FAQContextType = {
    isExpanded,
    setIsExpanded,
    expandFAQ,
    collapseFAQ,
    toggleFAQ,
  };

  return (
    <FAQContext.Provider value={value}>
      {children}
    </FAQContext.Provider>
  );
};



FILE: frontend/src/FAQSchemaDemo.tsx
------------------------------
/**
 * Demo component for FAQ schema functionality
 * Shows FAQ schema generation and statistics
 */

import React, { useState } from 'react';
import { useFAQSchema, useFAQSchemaStats } from '@/shared/hooks/useFAQSchema';
import { MDH_FAQ_ITEMS } from '@/features/faq/utils';
import bullheadCityData from '@/data/locations/az/bullhead-city.json';
import lasVegasData from '@/data/locations/nv/las-vegas.json';

interface FAQSchemaDemoProps {
  className?: string;
}

export const FAQSchemaDemo: React.FC<FAQSchemaDemoProps> = ({ className = '' }) => {
  const [selectedDataset, setSelectedDataset] = useState<'general' | 'bullhead' | 'lasvegas'>('general');
  
  const currentFAQs = selectedDataset === 'general' 
    ? MDH_FAQ_ITEMS 
    : selectedDataset === 'bullhead' 
      ? (bullheadCityData.faqs || []).map(faq => ({
          id: faq.id,
          category: 'Location',
          question: faq.q,
          answer: faq.a
        }))
      : (lasVegasData.faqs || []).map(faq => ({
          id: faq.id,
          category: 'Location',
          question: faq.q,
          answer: faq.a
        }));

  const { schema, hasSchema, faqCount, method } = useFAQSchema(currentFAQs);
  const stats = useFAQSchemaStats(currentFAQs);

  if (process.env.NODE_ENV === 'production') {
    return null;
  }

  return (
    <div className={`p-6 bg-gray-50 border rounded-lg ${className}`}>
      <h3 className="text-lg font-semibold mb-4">ðŸ”§ FAQ Schema Demo</h3>
      
      {/* Dataset Selector */}
      <div className="mb-4">
        <label className="block text-sm font-medium mb-2">Select FAQ Dataset:</label>
        <div className="flex gap-2">
          <button

// ... (truncated 120 lines) ...

      )}

      {/* Generated Schema */}
      {hasSchema && schema && (
        <div>
          <h4 className="font-medium mb-2">Generated FAQPage Schema:</h4>
          <div className="bg-white p-3 rounded border">
            <pre className="text-xs overflow-auto max-h-64 bg-gray-50 p-2 rounded">
              {JSON.stringify(schema, null, 2)}
            </pre>
          </div>
        </div>
      )}

      {/* FAQ Preview */}
      <div className="mt-4">
        <h4 className="font-medium mb-2">FAQ Preview:</h4>
        <div className="bg-white p-3 rounded border">
          <div className="space-y-3 max-h-64 overflow-auto">
            {currentFAQs.slice(0, 3).map((faq, index) => (
              <div key={index} className="border-b border-gray-100 pb-2">
                <div className="flex items-start gap-2">
                  <span className="text-gray-500 text-sm">#{index + 1}</span>
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <span className="font-mono text-xs bg-gray-100 px-1 rounded">{faq.id || 'no-id'}</span>
                      {faq.category && (
                        <span className="text-xs bg-blue-100 text-blue-800 px-1 rounded">{faq.category}</span>
                      )}
                    </div>
                    <div className="font-medium text-sm">{faq.question}</div>
                    <div className="text-gray-600 text-xs mt-1 line-clamp-2">{faq.answer}</div>
                  </div>
                </div>
              </div>
            ))}
            {currentFAQs.length > 3 && (
              <div className="text-center text-gray-500 text-sm">
                ... and {currentFAQs.length - 3} more FAQs
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default FAQSchemaDemo;


FILE: frontend/src/MergeDemo.tsx
------------------------------
/**
 * Demo component showing deep merge functionality
 * Useful for development and testing merge behavior
 */

import React, { useState } from 'react';
import { useMergedLocationData, useMergedLocationDataDebug } from '@/shared/hooks/useMergedLocationData';
import { ValidationStatus } from '@/shared/ui';
import siteData from '@/data/mdh/site.json';
import bullheadCityData from '@/data/locations/az/bullhead-city.json';
import lasVegasData from '@/data/locations/nv/las-vegas.json';
import type { LocationPage } from '@/shared/types/location';

interface MergeDemoProps {
  className?: string;
}

export const MergeDemo: React.FC<MergeDemoProps> = ({ className = '' }) => {
  const [selectedLocation, setSelectedLocation] = useState<'bullhead' | 'lasvegas'>('bullhead');
  
  const currentLocationData: LocationPage = selectedLocation === 'bullhead' 
    ? bullheadCityData 
    : lasVegasData;
  
  const { mergedData, validation, statistics, wasMerged } = useMergedLocationDataDebug(
    siteData,
    currentLocationData,
    `Merge Demo - ${selectedLocation === 'bullhead' ? 'Bullhead City' : 'Las Vegas'}`
  );

  if (process.env.NODE_ENV === 'production') {
    return null;
  }

  return (
    <div className={`p-6 bg-gray-50 border rounded-lg ${className}`}>
      <h3 className="text-lg font-semibold mb-4">ðŸ”§ Deep Merge Demo</h3>
      
      {/* Location Selector */}
      <div className="mb-4">
        <label className="block text-sm font-medium mb-2">Select Location:</label>
        <div className="flex gap-2">
          <button
            onClick={() => setSelectedLocation('bullhead')}
            className={`px-3 py-1 rounded text-sm ${
              selectedLocation === 'bullhead'
                ? 'bg-blue-500 text-white'
                : 'bg-white border border-gray-300'
            }`}
          >

// ... (truncated 76 lines) ...

              ))}
            </div>
          </div>
        </div>

        <div>
          <h4 className="font-medium mb-2">FAQs (Deduplicated):</h4>
          <div className="bg-white p-3 rounded border">
            <div className="text-sm space-y-1">
              {mergedData.faqs?.map((faq, index) => (
                <div key={index} className="flex items-center gap-2">
                  <span className="text-gray-500">#{index + 1}</span>
                  <span className="font-mono text-xs bg-gray-100 px-1 rounded">{faq.id || 'no-id'}</span>
                  <span className="text-gray-700">{faq.q}</span>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div>
          <h4 className="font-medium mb-2">Location-Specific Fields:</h4>
          <div className="bg-white p-3 rounded border">
            <div className="grid grid-cols-2 gap-2 text-sm">
              <div><span className="text-gray-600">City:</span> {mergedData.city}</div>
              <div><span className="text-gray-600">State:</span> {mergedData.stateCode}</div>
              <div><span className="text-gray-600">Postal Code:</span> {mergedData.postalCode}</div>
              <div><span className="text-gray-600">URL Path:</span> {mergedData.urlPath}</div>
            </div>
          </div>
        </div>
      </div>

      {/* Raw Data (Collapsible) */}
      <details className="mt-4">
        <summary className="cursor-pointer font-medium text-sm text-gray-600 hover:text-gray-800">
          Show Raw Merged Data
        </summary>
        <div className="mt-2 bg-white p-3 rounded border">
          <pre className="text-xs overflow-auto max-h-64">
            {JSON.stringify(mergedData, null, 2)}
          </pre>
        </div>
      </details>
    </div>
  );
};

export default MergeDemo;


FILE: frontend/src/LocationPage.tsx
------------------------------
import { useEffect } from "react";

import { FAQ } from '@/features/faq';
import { Footer } from '@/features/footer';
import { Hero } from '@/features/hero';
import { RequestQuoteModal } from '@/features/quotes';
import { Reviews } from '@/features/reviews';
import { Services } from '@/features/services';

import { useHomePageState } from '@/features/home/hooks';
import HomePageLayout from '@/features/home/components/HomePageLayout';
import { getAbsoluteUrl } from '@/shared/utils';
import { generateAllSchemas, injectAllSchemas } from '@/shared/utils/schemaUtils';

type AreaImage = { 
  url: string; 
  alt: string; 
  caption?: string; 
  role?: "hero" | "gallery" 
};

type Area = {
  slug: string;
  city: string;
  stateCode: string;
  state?: string;
  urlPath: string;
  affiliate?: string;
  headings?: { h1?: string; sub?: string };
  intro?: string;
  images?: AreaImage[];
  faqs?: Array<{ q: string; a: string }>;
  "faq-intro"?: string;
  reviewsSection?: {
    heading?: string;
    intro?: string;
  };
  seo?: {
    title?: string;
    description?: string;
    ogImage?: string;
  };
};

export default function LocationPage({ area }: { area: Area }) {
  console.log('LocationPage rendered with area:', area);
  
  const {
    isAffiliate,
    businessSlug,

// ... (truncated 37 lines) ...

    <HomePageLayout>
      <section id="hero">
        <Hero 
          onRequestQuote={handleOpenQuoteModal} 
          onBookNow={handleBookNow}
          onQuoteHover={handleQuoteModalPrefetch}
          {...(area.headings?.h1 || area.headings?.sub ? {
            customContent: {
              ...(area.headings?.h1 && { title: area.headings.h1 }),
              ...(area.headings?.sub && { subtitle: area.headings.sub })
            }
          } : {})}
        />
      </section>

      <section id="services">
        <Services />
      </section>
      <section id="reviews">
        <Reviews 
          reviewType={isAffiliate ? 'affiliate' : 'mdh'}
          businessSlug={businessSlug ?? ''}
          {...(area["reviewsSection"]?.heading && { customHeading: area["reviewsSection"].heading })}
          {...(area["reviewsSection"]?.intro && { customIntro: area["reviewsSection"].intro })}
          {...(area["reviewsSection"]?.feedKey && { feedKey: area["reviewsSection"].feedKey })}
        />
      </section>
      <FAQ 
        {...(area.faqs && { customFAQs: area.faqs })}
        {...(area["faq-intro"] && { customFAQIntro: area["faq-intro"] })}
      />
      <section id="footer">
        <Footer 
          onRequestQuote={handleOpenQuoteModal} 
          onBookNow={handleBookNow}
          onQuoteHover={handleQuoteModalPrefetch}
        />
      </section>
      
      {/* Centralized Modals - Now using lazy loading */}
      {isAffiliate && (
        <RequestQuoteModal
          isOpen={isQuoteModalOpen}
          onClose={handleCloseQuoteModal}
        />
      )}
    </HomePageLayout>
  );
}


FILE: frontend/src/Header.tsx
------------------------------
import React, { useState, useEffect } from 'react';
import { useSiteContext } from '@/shared/utils/siteContext';
import { Menu, X } from 'lucide-react';

import Logo from './Logo';
import BusinessInfo from './BusinessInfo';
import Navigation from './Navigation';
import SocialMediaIcons from './SocialMediaIcons';
import LoginButton from './LoginButton';
import UserMenu from './UserMenu';
import { NAV_LINKS } from '@/features/header/utils/constants';
import { handleSectionClick } from '@/features/header/utils/navigation';

interface HeaderProps {
  locationData?: any; // Will type this properly later
  employeeData?: any; // Will type this properly later
}

const Header: React.FC<HeaderProps> = ({ locationData, employeeData }) => {
  // Get context for consistent behavior
  const context = useSiteContext();
  const [activeSection, setActiveSection] = useState<string>('');

  // Determine which section is currently in view
  useEffect(() => {
    const handleScroll = () => {
      const sections = ['top', 'services', 'reviews', 'faq', 'footer'];
      const scrollPosition = window.scrollY + 100; // Offset for better detection
      let currentSection = '';

      for (const section of sections) {
        const element = document.getElementById(section);
        if (element) {
          const rect = element.getBoundingClientRect();
          const elementTop = rect.top + window.scrollY;
          const elementBottom = elementTop + rect.height;

          if (scrollPosition >= elementTop && scrollPosition < elementBottom) {
            currentSection = section;
            break;
          }
        }
      }

      // If no section is found and we're at the top, default to 'top'
      if (!currentSection && window.scrollY < 200) {
        currentSection = 'top';
      }
      
      setActiveSection(currentSection);

// ... (truncated 136 lines) ...

                    }`}
                    aria-label={`Scroll to ${link.name} section`}
                  >
                    {link.name}
                  </button>
                ) : link.name === 'Home' ? (
                  <button
                    key={link.name}
                    onClick={() => handleSectionClick('#top')}
                    className={`nav-link w-full text-left px-4 py-3 rounded-lg hover:text-orange-400 hover:bg-orange-500/10 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200 ${
                      isActive(link) ? 'text-orange-400 bg-transparent ring-2 ring-orange-400 ring-offset-2 ring-offset-black/20' : 'text-white bg-transparent'
                    }`}
                    aria-label={`Scroll to ${link.name} section`}
                  >
                    {link.name}
                  </button>
                ) : link.name === 'Services' ? (
                  <button
                    key={link.name}
                    onClick={() => handleSectionClick('#services')}
                    className={`nav-link w-full text-left px-4 py-3 rounded-lg hover:text-orange-400 hover:bg-orange-500/10 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200 ${
                      isActive(link) ? 'text-orange-400 bg-transparent ring-2 ring-orange-400 ring-offset-2 ring-offset-black/20' : 'text-white bg-transparent'
                    }`}
                    aria-label={`Scroll to ${link.name} section`}
                  >
                    {link.name}
                  </button>
                ) : (
                  <a
                    key={link.name}
                    href={link.href}
                    className={`nav-link w-full text-left px-4 py-3 rounded-lg hover:text-orange-400 hover:bg-orange-500/10 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200 ${
                      isActive(link) ? 'text-orange-400 bg-transparent ring-2 ring-orange-400 ring-offset-2 ring-offset-black/20' : 'text-white bg-transparent'
                    }`}
                    aria-label={`Navigate to ${link.name} page`}
                  >
                    {link.name}
                  </a>
                )
              ))}
            </nav>
          </div>
        </div>
      )}
    </header>
  );
};

export default Header;


FILE: frontend/src/Navigation.tsx
------------------------------
import React from 'react';
import { NAV_LINKS } from '@/features/header/utils/constants';
import { handleSectionClick } from '@/features/header/utils/navigation';

interface NavigationProps {
  activeSection: string;
}

const Navigation: React.FC<NavigationProps> = ({ activeSection }) => {
  // Determine if a nav item is active based on visible section
  const isActive = (link: typeof NAV_LINKS[0]) => {
    const isLinkActive = (
      (link.name === 'Home' && activeSection === 'top') ||
      (link.name === 'Services' && activeSection === 'services') ||
      (link.name === 'Reviews' && activeSection === 'reviews') ||
      (link.name === 'FAQ' && activeSection === 'faq') ||
      (link.name === 'Gallery' && activeSection === 'footer')
    );
    
    return isLinkActive;
  };

  // Base classes for nav items
  const getNavItemClasses = (link: typeof NAV_LINKS[0]) => {
    const isLinkActive = isActive(link);
    
    const baseClasses = "nav-link hover:text-orange-400 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200 p-2 font-inherit cursor-pointer rounded";
    
    const finalClasses = isLinkActive 
      ? `${baseClasses} text-orange-400 bg-transparent border-none ring-2 ring-orange-400 ring-offset-2 ring-offset-black/20` 
      : `${baseClasses} text-white bg-transparent border-none`;
    
    return finalClasses;
  };

  return (
    <nav aria-label="Primary navigation" className="hidden md:flex space-x-6">
      {NAV_LINKS.map(link => (
        link.isFAQ ? (
          <button
            key={link.name}
            onClick={() => handleSectionClick('#faq')}
            className={getNavItemClasses(link)}
            aria-label={`Scroll to ${link.name} section`}
          >
            {link.name}
          </button>
        ) : link.isGallery ? (
          <button
            key={link.name}

// ... (truncated 0 lines) ...

            onClick={() => handleSectionClick('#footer')}
            className={getNavItemClasses(link)}
            aria-label={`Scroll to ${link.name} section`}
          >
            {link.name}
          </button>
        ) : link.name === 'Reviews' ? (
          <button
            key={link.name}
            onClick={() => handleSectionClick('#reviews')}
            className={getNavItemClasses(link)}
            aria-label={`Scroll to ${link.name} section`}
          >
            {link.name}
          </button>
        ) : link.name === 'Home' ? (
          <button
            key={link.name}
            onClick={() => handleSectionClick('#top')}
            className={getNavItemClasses(link)}
            aria-label={`Scroll to ${link.name} section`}
          >
            {link.name}
          </button>
        ) : link.name === 'Services' ? (
          <button
            key={link.name}
            onClick={() => handleSectionClick('#services')}
            className={getNavItemClasses(link)}
            aria-label={`Scroll to ${link.name} section`}
          >
            {link.name}
          </button>
        ) : (
          <a
            key={link.name}
            href={link.href}
            className={getNavItemClasses(link)}
            aria-label={`Navigate to ${link.name} page`}
          >
            {link.name}
          </a>
        )
      ))}
    </nav>
  );
};

export default Navigation;


FILE: frontend/src/faq.tsx
------------------------------
import React, { useState } from 'react';
import { getImageOpacityClasses, getTransitionStyles } from '@/shared/utils';

import { MDH_FAQ_ITEMS } from '@/features/faq/utils';
import { useRotatingBackground } from '@/features/faq/hooks';
import FAQSearchBar from './FAQSearchBar';
import FAQCategoryFilter from './FAQCategoryFilter';
import FAQList from './FAQList';
import FAQEmptyState from './FAQEmptyState';

interface FAQProps {
  locationData?: any;
}

const FAQ: React.FC<FAQProps> = ({ locationData }) => {
  const [selectedCategory, setSelectedCategory] = useState('Services & Packages');
  const [expandedFaq, setExpandedFaq] = useState<string | number | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  
  // Rotating background
  const { images, currentIndex, loading: backgroundLoading, error: backgroundError } = useRotatingBackground();

  // Convert location FAQs to FAQItem format if available
  const locationFAQs = locationData?.faqs?.map((faq: any) => ({
    id: faq.id,
    question: faq.q,
    answer: faq.a,
    category: locationData.city ? locationData.city : 'Location'
  })) || [];

  // Combine location FAQs with existing FAQs
  const allFAQs = [...MDH_FAQ_ITEMS, ...locationFAQs];

  // Extract unique categories from combined FAQ data
  const allCategories = ['All', ...Array.from(new Set(allFAQs.map(faq => faq.category)))];
  
  // Map full category names to short display names
  const categoryDisplayMapping = {
    'All': 'All',
    'General': 'General',
    'Services & Packages': 'Services',
    'Scheduling & Location': 'Scheduling',
    'Pricing & Payment': 'Pricing',
    'Preparation & Aftercare': 'Preparation',
    'RV & Boat Services': 'RV',
    'Locations': 'Locations',
    'Payments & Deposits': 'Payments',
    'Warranty & Guarantee': 'Warranty',
  };
  

// ... (truncated 74 lines) ...

        <div className="absolute inset-0 bg-stone-900/85"></div>
      </div>

      {/* Content */}
      <div className="relative z-10 h-full overflow-y-auto pt-20">
        <div className="max-w-6xl mx-auto w-full px-4 py-8">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-4xl md:text-5xl font-bold text-white mb-3 drop-shadow-lg">
              Frequently Asked Questions
            </h1>
            <p className="text-stone-200 text-lg max-w-2xl mx-auto drop-shadow-md">
              {locationData?.faqIntro || "Find answers to common questions about our mobile detailing services"}
            </p>
          </div>

          {/* Search and Filter Controls */}
          <div className="mb-8">
            <FAQSearchBar 
              searchTerm={searchTerm}
              onSearchChange={setSearchTerm}
            />

            <FAQCategoryFilter
              selectedCategory={selectedCategory}
              onCategoryChange={setSelectedCategory}
              categories={categories}
            />
          </div>

          {/* FAQ Content */}
          <div className="max-w-4xl mx-auto">
            {filteredFaqs.length === 0 ? (
              <FAQEmptyState />
            ) : (
              <FAQList
                faqs={filteredFaqs}
                expandedFaq={expandedFaq}
                onToggleFaq={toggleFaq}
              />
            )}
          </div>
        </div>
      </div>
    </section>
  );
};

export default FAQ;


FILE: frontend/src/FAQCategoryFilter.tsx
------------------------------
import React from 'react';
import { Car, Settings, Shield, CreditCard, MapPin } from 'lucide-react';

import { FilterChip } from '@/shared/ui';

interface FAQCategoryFilterProps {
  selectedCategory: string;
  onCategoryChange: (category: string) => void;
  categories: string[];
}

// Mapping from display names to actual category names
const categoryMapping = {
  'All': 'All',
  'General': 'General',
  'Services': 'Services & Packages',
  'Scheduling': 'Scheduling & Location',
  'Pricing': 'Pricing & Payment',
  'Preparation': 'Preparation & Aftercare',
  'RV': 'RV & Boat Services',
  'Locations': 'Locations',
  'Payments': 'Payments & Deposits',
  'Warranty': 'Warranty & Guarantee',
};

const categoryIcons = {
  All: Car,
  General: Car,
  Services: Car,
  Scheduling: Settings,
  Pricing: CreditCard,
  Preparation: Shield,
  RV: Car,
  Locations: Settings,
  Payments: CreditCard,
  Warranty: Shield,
};

const FAQCategoryFilter: React.FC<FAQCategoryFilterProps> = ({ 
  selectedCategory, 
  onCategoryChange,
  categories
}) => {
  // Split into two rows: 5 in first row, remaining in second row
  const firstRow = categories.slice(0, 5);
  const secondRow = categories.slice(5);
  
  const renderChip = (categoryName: string) => {
    // For categories not in mapping (like location-specific ones), use the category name as-is
    const actualCategory = categoryMapping[categoryName as keyof typeof categoryMapping] || categoryName;

// ... (truncated -16 lines) ...

  Payments: CreditCard,
  Warranty: Shield,
};

const FAQCategoryFilter: React.FC<FAQCategoryFilterProps> = ({ 
  selectedCategory, 
  onCategoryChange,
  categories
}) => {
  // Split into two rows: 5 in first row, remaining in second row
  const firstRow = categories.slice(0, 5);
  const secondRow = categories.slice(5);
  
  const renderChip = (categoryName: string) => {
    // For categories not in mapping (like location-specific ones), use the category name as-is
    const actualCategory = categoryMapping[categoryName as keyof typeof categoryMapping] || categoryName;
    // Use MapPin icon for location categories (city names or 'Location')
    const IconComponent = (categoryName !== 'All' && categoryName !== 'General' && categoryName !== 'Services' && categoryName !== 'Scheduling' && categoryName !== 'Pricing' && categoryName !== 'Preparation' && categoryName !== 'RV' && categoryName !== 'Locations' && categoryName !== 'Payments' && categoryName !== 'Warranty') ? MapPin : (categoryIcons[categoryName as keyof typeof categoryIcons] || Car);
    const isSelected = selectedCategory === actualCategory;
    
    return (
      <FilterChip
        key={categoryName}
        onClick={() => onCategoryChange(actualCategory)}
        isSelected={isSelected}
        icon={IconComponent}
        className="transform hover:scale-105 backdrop-blur-sm"
      >
        {categoryName}
      </FilterChip>
    );
  };
  
  return (
    <div className="flex flex-col items-center gap-3">
      {/* First row - 5 chips */}
      <div className="flex justify-center gap-3">
        {firstRow.map(renderChip)}
      </div>
      
      {/* Second row - 4 chips */}
      <div className="flex justify-center gap-3">
        {secondRow.map(renderChip)}
      </div>
    </div>
  );
};

export default FAQCategoryFilter;


