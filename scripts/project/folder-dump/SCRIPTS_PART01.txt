
============================
FILE: frontend\src\admin-app\AdminApp.tsx
============================
import { lazy, Suspense } from 'react';
import { Navigate, Route, Routes } from 'react-router-dom';

import { DashboardPage as AdminDashboard } from '@/features/adminDashboard';
import { PreviewGeneratorPage, PreviewPage } from '@/features/preview';
import { LoginPage, ProtectedRoute } from '@/shared/ui';

// Heavy modules are NOT imported here - they stay out of the initial bundle
const Booking = lazy(() => import('../features/booking/BookingApp'));

export default function AdminApp() {
  const routes = (
    <Suspense fallback={<div className="p-8 text-white">Loading…</div>}>
      <Routes>
        {/* Admin Dashboard - redirect root to admin dashboard */}
        <Route path="/" element={<Navigate to="/admin-dashboard" replace />} />
        
        {/* Login route */}
        <Route path="/login" element={<LoginPage />} />
        
        {/* Admin Dashboard - protected route */}
        <Route path="/admin-dashboard" element={
          <ProtectedRoute requiredRole="admin" fallbackPath="/login">
            <AdminDashboard />
          </ProtectedRoute>
        } />
        
        {/* Preview routes */}
        <Route path="/preview-generator" element={<PreviewGeneratorPage />} />
        <Route path="/preview/:tenantSlug" element={<PreviewPage />} />
        
        {/* Booking route for admin testing */}
        <Route path="/booking" element={<Booking />} />
        
        {/* Catch all - redirect to admin dashboard */}
        <Route path="*" element={<Navigate to="/admin-dashboard" replace />} />
      </Routes>
    </Suspense>
  );

  return (
    <div className="min-h-screen bg-gray-900">
      {routes}
    </div>
  );
}


============================
FILE: frontend\src\admin-app\AdminProviders.tsx
============================
import React from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';

import { AuthProvider } from '@/shared/contexts';
import { ErrorBoundary } from '@/shared/ui';

// Create a client
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      gcTime: 10 * 60 * 1000, // 10 minutes (formerly cacheTime)
      retry: 1,
      refetchOnWindowFocus: false,
    },
  },
});

interface AdminProvidersProps {
  children: React.ReactNode;
}

export const AdminProviders: React.FC<AdminProvidersProps> = ({ children }) => {
  return (
    <ErrorBoundary>
      <QueryClientProvider client={queryClient}>
        <AuthProvider>
          {children}
        </AuthProvider>
      </QueryClientProvider>
    </ErrorBoundary>
  );
};


============================
FILE: frontend\src\admin-app\index.html
============================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/shared/icons/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="theme-color" content="#0b0b0b" />
    <title>Admin Dashboard - That Smart Site</title>
    <meta name="description" content="Admin dashboard for managing tenant websites and business data." />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/admin-app/main.tsx"></script>
  </body>
</html>


============================
FILE: frontend\src\admin-app\main.tsx
============================
import React, { useEffect } from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';

import { AdminProviders } from './AdminProviders';
import AdminApp from './AdminApp';
import { injectAllSchemas } from '@/shared/utils/schemaUtils';
import { defaultOrganizationSchema, defaultWebsiteSchema } from '@/shared/seo/defaultSchemas';
import '../index.css';

// Component to inject schemas
const SchemaInjector: React.FC = () => {
  useEffect(() => {
    injectAllSchemas([defaultOrganizationSchema, defaultWebsiteSchema]);
  }, []);
  return null;
};

const container = document.getElementById('root');
if (!container) {
  throw new Error('Root element not found');
}

const root = createRoot(container);

root.render(
  <React.StrictMode>
    <BrowserRouter>
      <AdminProviders>
        <SchemaInjector />
        <AdminApp />
      </AdminProviders>
    </BrowserRouter>
  </React.StrictMode>
);


============================
FILE: frontend\src\data\index.ts
============================
// Export all vehicle data
export * from './mobile-detailing/vehicle_data';

// Future data exports can be added here
// export * from './services';
// export * from './business';
// export * from './locations';


============================
FILE: frontend\src\data\lawncare\assets.json
============================
{
  "description": "Image assets and their metadata for lawncare industry - placeholder for future implementation",
  "logo": {},
  "hero": [],
  "services": {
    "grid": [],
    "thumbnails": {}
  }
}



============================
FILE: frontend\src\data\lawncare\content-defaults.json
============================
{
  "description": "Default text content for new lawncare tenants - placeholder for future implementation",
  "hero": {
    "h1": "",
    "subTitle": ""
  },
  "reviews": {
    "title": "",
    "subtitle": ""
  },
  "faq": {
    "title": "",
    "subtitle": ""
  }
}



============================
FILE: frontend\src\data\lawncare\defaults\content.json
============================
{
  "$schema": "../../schemas/defaults-content.schema.json",
  "description": "Default content for new lawn care tenants - used during provisioning",
  
  "hero": {
    "h1": "Professional Lawn Care Services",
    "subtitle": "Expert lawn maintenance and landscaping services to keep your property looking its best year-round.",
    "cta": {
      "primary": {
        "label": "Get a Quote",
        "href": "/quote"
      },
      "secondary": {
        "label": "View Services",
        "href": "/services"
      }
    }
  },

  "about": {
    "title": "About Our Lawn Care Service",
    "content": "We provide professional lawn care and landscaping services to residential and commercial properties. Our experienced team delivers reliable, high-quality service that keeps your lawn healthy and beautiful throughout the year.\n\nFrom routine mowing and edging to seasonal cleanups and landscape maintenance, we offer comprehensive lawn care solutions tailored to your property's specific needs.",
    "highlights": [
      "Reliable weekly or bi-weekly service",
      "Experienced and professional team",
      "Comprehensive lawn care solutions",
      "Commercial and residential services"
    ]
  },

  "footer": {
    "tagline": "Professional lawn care for beautiful properties",
    "description": "Reliable lawn maintenance and landscaping services for residential and commercial properties."
  },

  "contact": {
    "callToAction": "Ready for a beautiful, healthy lawn?",
    "description": "Contact us today for a free quote or to schedule your lawn care service."
  }
}



============================
FILE: frontend\src\data\lawncare\defaults\faq.json
============================
{
  "$schema": "../../schemas/defaults-faq.schema.json",
  "description": "Default FAQ content for lawn care tenants",
  
  "faqs": [
    {
      "category": "general",
      "question": "What areas do you service?",
      "answer": "We provide lawn care services throughout the local area. Contact us to confirm service availability for your specific location."
    },
    {
      "category": "general",
      "question": "How often should I have my lawn mowed?",
      "answer": "Most lawns benefit from weekly mowing during the growing season. In peak growth periods, weekly service maintains optimal lawn health and appearance. We can adjust frequency based on your lawn's needs and your budget."
    },
    {
      "category": "services",
      "question": "Do you provide all your own equipment?",
      "answer": "Yes! We bring all necessary equipment including mowers, trimmers, edgers, and blowers. You don't need to provide anything."
    },
    {
      "category": "services",
      "question": "What happens to grass clippings?",
      "answer": "We typically mulch clippings back into the lawn as natural fertilizer. If you prefer bagging and removal, we offer that service as well."
    },
    {
      "category": "services",
      "question": "Do you offer fertilization programs?",
      "answer": "Yes! We provide customized fertilization and treatment programs designed for your specific grass type and local climate conditions."
    },
    {
      "category": "booking",
      "question": "How do I schedule service?",
      "answer": "You can schedule service through our website, by phone, or by email. We'll set up a regular schedule that works for your property."
    },
    {
      "category": "booking",
      "question": "What if it rains on my scheduled day?",
      "answer": "If weather prevents service on your scheduled day, we'll reschedule and complete your service as soon as conditions allow."
    },
    {
      "category": "booking",
      "question": "Do I need to be home during service?",
      "answer": "No, you don't need to be home. As long as we have access to your property, we can complete the work and leave an invoice."
    },
    {
      "category": "maintenance",
      "question": "When is the best time to aerate my lawn?",
      "answer": "For cool-season grasses, fall is ideal. For warm-season grasses, late spring to early summer is best. We can recommend the optimal timing for your specific lawn type."
    },
    {
      "category": "maintenance",
      "question": "How can I improve my lawn's health?",
      "answer": "Regular mowing, proper fertilization, adequate watering, and annual aeration are key. We offer comprehensive lawn care programs that address all these factors."
    }
  ]
}



============================
FILE: frontend\src\data\lawncare\defaults\metadata.json
============================
{
  "$schema": "../../schemas/defaults-metadata.schema.json",
  "description": "Default SEO metadata for lawn care tenants",
  
  "seo": {
    "titleTemplate": "{businessName} | Professional Lawn Care Services",
    "defaultTitle": "Professional Lawn Care & Landscaping",
    "description": "Professional lawn care and landscaping services for residential and commercial properties. Reliable mowing, fertilization, seasonal cleanup, and landscape maintenance.",
    "keywords": [
      "lawn care",
      "lawn mowing",
      "landscaping",
      "lawn maintenance",
      "fertilization",
      "aeration",
      "seasonal cleanup",
      "landscape maintenance"
    ],
    "openGraph": {
      "type": "website",
      "locale": "en_US",
      "siteName": "Professional Lawn Care Services"
    },
    "twitter": {
      "card": "summary_large_image",
      "site": "@lawncare"
    }
  },

  "pages": {
    "home": {
      "title": "Professional Lawn Care Services | {businessName}",
      "description": "Expert lawn maintenance and landscaping services for beautiful, healthy lawns. Serving {serviceArea} with reliable, professional lawn care."
    },
    "services": {
      "title": "Our Services | {businessName}",
      "description": "Explore our comprehensive lawn care services including mowing, fertilization, aeration, seasonal cleanup, and landscape maintenance."
    },
    "about": {
      "title": "About Us | {businessName}",
      "description": "Learn about our professional lawn care team and our commitment to keeping your property looking its best year-round."
    },
    "contact": {
      "title": "Contact Us | {businessName}",
      "description": "Get in touch to schedule your lawn care service or request a free quote. Serving {serviceArea} and surrounding areas."
    },
    "quote": {
      "title": "Request a Quote | {businessName}",
      "description": "Get a free quote for professional lawn care services. Tell us about your property and we'll provide a detailed estimate."
    }
  },

  "structuredData": {
    "organizationType": "LocalBusiness",
    "additionalTypes": [
      "LandscapingBusiness",
      "LawnAndGardenStore"
    ],
    "defaultServiceArea": {
      "type": "radius",
      "value": 15,
      "unit": "miles"
    }
  }
}



============================
FILE: frontend\src\data\lawncare\defaults\services.json
============================
{
  "$schema": "../../schemas/defaults-services.schema.json",
  "description": "Default service descriptions for lawn care tenants (informational only, no pricing)",
  
  "services": [
    {
      "slug": "lawn-mowing",
      "title": "Lawn Mowing & Edging",
      "shortDescription": "Regular lawn maintenance and trimming",
      "description": "Professional lawn mowing and edging services to keep your grass healthy and your property looking sharp. We provide consistent, reliable service on a weekly or bi-weekly schedule that fits your needs.",
      "benefits": [
        "Regular mowing schedule",
        "Professional edging and trimming",
        "Grass clippings removal",
        "Walkway and driveway cleanup"
      ],
      "duration": "30-60 minutes",
      "category": "maintenance"
    },
    {
      "slug": "landscape-maintenance",
      "title": "Landscape Maintenance",
      "shortDescription": "Complete property landscaping services",
      "description": "Comprehensive landscape maintenance including hedge trimming, mulch bed care, weeding, and seasonal plantings. We keep your entire property looking professionally maintained year-round.",
      "benefits": [
        "Hedge and shrub trimming",
        "Mulch bed maintenance",
        "Weed control and removal",
        "Seasonal flower planting"
      ],
      "duration": "1-2 hours",
      "category": "landscaping"
    },
    {
      "slug": "fertilization",
      "title": "Lawn Fertilization & Treatment",
      "shortDescription": "Healthy lawn care programs",
      "description": "Professional fertilization and treatment programs designed to promote healthy, lush grass growth while controlling weeds and pests. We customize treatment plans based on your lawn's specific needs and local climate.",
      "benefits": [
        "Season-appropriate fertilization",
        "Weed control treatments",
        "Pest management",
        "Soil health improvement"
      ],
      "duration": "30-45 minutes",
      "category": "treatment"
    },
    {
      "slug": "seasonal-cleanup",
      "title": "Seasonal Cleanup",
      "shortDescription": "Spring and fall property cleanup",
      "description": "Thorough spring and fall cleanup services to prepare your property for the changing seasons. We remove leaves, trim back perennials, clean beds, and get your yard ready for the months ahead.",
      "benefits": [
        "Leaf removal and disposal",
        "Perennial trimming",
        "Bed cleaning and mulching",
        "Debris removal"
      ],
      "duration": "2-4 hours",
      "category": "seasonal"
    },
    {
      "slug": "aeration-seeding",
      "title": "Aeration & Overseeding",
      "shortDescription": "Lawn renovation and improvement",
      "description": "Core aeration and overseeding services to improve lawn health and thickness. Aeration relieves soil compaction while overseeding fills in bare spots and improves grass density.",
      "benefits": [
        "Improved soil air circulation",
        "Better nutrient absorption",
        "Thicker, healthier grass",
        "Reduced thatch buildup"
      ],
      "duration": "1-2 hours",
      "category": "renovation"
    }
  ]
}



============================
FILE: frontend\src\data\lawncare\index.ts
============================
/**
 * Lawncare Industry Config Loader
 * Assembles modular config files into MainSiteConfig structure
 * 
 * NOTE: This industry is not yet fully configured. Placeholder files are used
 * to establish the modular architecture pattern. The old site.json is still
 * available as a reference/backup.
 */

import type { MainSiteConfig } from '@/shared/types/location';

/**
 * Load and assemble lawncare config from modular files
 * Falls back to legacy site.json data structure for now
 */
export async function loadLawncareConfig(): Promise<MainSiteConfig> {
  // TODO: Populate modular files with actual lawncare data
  // For now, import the legacy site.json from archive as fallback
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Legacy JSON import, typing refactor planned
  const legacyConfig = await import('./_archive/site.json.legacy');
  
  // Return legacy config until modular files are populated
  // Once populated, replace with assembled config like mobile-detailing
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- Legacy JSON import, typing refactor planned
  return legacyConfig.default as MainSiteConfig;
}



============================
FILE: frontend\src\data\lawncare\seo-defaults.json
============================
{
  "title": "Professional Lawn Care & Landscaping Services",
  "description": "Expert lawn care, landscaping, and yard maintenance services. Mowing, fertilization, weed control, and seasonal cleanup for beautiful lawns.",
  "keywords": "lawn care, landscaping, lawn mowing, yard maintenance, fertilization, weed control, grass cutting, lawn service, landscape design, seasonal cleanup",
  "ogImage": "/lawncare/images/hero/hero1.png",
  "twitterImage": "/lawncare/images/hero/hero1.png",
  "canonicalPath": "/",
  "robots": "index,follow"
}



============================
FILE: frontend\src\data\lawncare\_archive\site.json.legacy
============================
{
  "brand": "GreenScape Pro",
  "slug": "site",
  "urlPath": "/",

  "logo": {
    "url": "/icons/lawncare-logo.webp",
    "alt": "GreenScape Pro Logo",
    "darkUrl": "/icons/lawncare-logo-dark.webp",
    "lightUrl": "/icons/lawncare-logo.webp"
  },

  "seo": {
    "title": "Professional Lawn Care — Mowing, Landscaping & Maintenance",
    "description": "Expert lawn care and landscaping services. Weekly mowing, fertilization, weed control, and seasonal maintenance for beautiful lawns year-round.",
    "keywords": [
      "lawn care",
      "landscaping",
      "lawn mowing",
      "fertilization",
      "weed control",
      "lawn maintenance",
      "grass cutting",
      "yard maintenance"
    ],
    "canonicalPath": "/",
    "ogImage": "/images/lawncare/hero/hero1.png",
    "twitterImage": "/images/lawncare/hero/hero1.png",
    "robots": "index,follow"
  },

  "hero": {
    "h1": "Professional Lawn Care",
    "sub": "Weekly mowing, landscaping & maintenance for beautiful lawns.",
    "images": [
      { 
        "url": "/images/lawncare/hero/hero1.png", 
        "alt": "Professional lawn mowing service in action",
        "width": 1920,
        "height": 1080,
        "priority": true
      },
      { 
        "url": "/images/lawncare/hero/hero2.png", 
        "alt": "Perfectly manicured lawn after professional care",
        "width": 1920,
        "height": 1080,
        "priority": true
      }
    ],
    "ctas": [
      { "label": "Get Quote", "href": "/quote" },
      { "label": "Schedule Service", "href": "/book" }
    ]
  },

  "finder": {
    "placeholder": "Enter your ZIP to check availability",
    "sub": "Book directly with our lawn care professionals (no middlemen)."
  },

  "servicesGrid": [
    {
      "slug": "weekly-mowing",
      "title": "Weekly Mowing",
      "image": "/images/lawncare/services/mowing.png",
      "alt": "Professional lawn mowing service",
      "href": "/services/weekly-mowing",
      "width": 400,
      "height": 300,
      "priority": false
    },
    {
      "slug": "fertilization",
      "title": "Fertilization",
      "image": "/images/lawncare/services/fertilization.png",
      "alt": "Professional lawn fertilization",
      "href": "/services/fertilization",
      "width": 400,
      "height": 300,
      "priority": false
    },
    {
      "slug": "weed-control",
      "title": "Weed Control",
      "image": "/images/lawncare/services/weed-control.png",
      "alt": "Professional weed control treatment",
      "href": "/services/weed-control",
      "width": 400,
      "height": 300,
      "priority": false
    },
    {
      "slug": "landscaping",
      "title": "Landscaping",
      "image": "/images/lawncare/services/landscaping.png",
      "alt": "Professional landscaping design",
      "href": "/services/landscaping",
      "width": 400,
      "height": 300,
      "priority": false
    },
    {
      "slug": "aeration",
      "title": "Aeration",
      "image": "/images/lawncare/services/aeration.png",
      "alt": "Professional lawn aeration service",
      "href": "/services/aeration",
      "width": 400,
      "height": 300,
      "priority": false
    },
    {
      "slug": "seasonal-cleanup",
      "title": "Seasonal Cleanup",
      "image": "/images/lawncare/services/cleanup.png",
      "alt": "Professional seasonal yard cleanup",
      "href": "/services/seasonal-cleanup",
      "width": 400,
      "height": 300,
      "priority": false
    }
  ],

  "reviews": {
    "title": "What Homeowners Say",
    "subtitle": "Don't just take our word for it. See what satisfied homeowners have to say about our lawn care services.",
    "ratingValue": "4.8",
    "reviewCount": 156,
    "source": "Google"
  },

  "faq": {
    "title": "Frequently Asked Questions",
    "subtitle": "Find answers to common questions about our lawn care services"
  },

  "contact": {
    "email": "service@greenscapepro.com",
    "phone": "(555) 123-GREEN"
  },

  "socials": {
    "facebook": "https://www.facebook.com/greenscapepro",
    "instagram": "https://www.instagram.com/greenscapepro",
    "tiktok": "https://www.tiktok.com/@greenscapepro",
    "youtube": "https://www.youtube.com/@greenscapepro",
    "googleBusiness": "https://share.google/lawncare"
  }
}


============================
FILE: frontend\src\data\maid-service\assets.json
============================
{
  "description": "Image assets and their metadata for maid service industry - placeholder for future implementation",
  "logo": {},
  "hero": [],
  "services": {
    "grid": [],
    "thumbnails": {}
  }
}



============================
FILE: frontend\src\data\maid-service\content-defaults.json
============================
{
  "description": "Default text content for new maid service tenants - placeholder for future implementation",
  "hero": {
    "h1": "",
    "subTitle": ""
  },
  "reviews": {
    "title": "",
    "subtitle": ""
  },
  "faq": {
    "title": "",
    "subtitle": ""
  }
}



============================
FILE: frontend\src\data\maid-service\defaults\content.json
============================
{
  "$schema": "../../schemas/defaults-content.schema.json",
  "description": "Default content for new maid service tenants - used during provisioning",
  
  "hero": {
    "h1": "Professional House Cleaning Services",
    "subtitle": "Reliable, thorough cleaning services for your home. From regular maintenance to deep cleaning, we deliver spotless results every time.",
    "cta": {
      "primary": {
        "label": "Book Cleaning",
        "href": "/quote"
      },
      "secondary": {
        "label": "View Services",
        "href": "/services"
      }
    }
  },

  "about": {
    "title": "About Our Cleaning Service",
    "content": "We provide professional residential cleaning services with attention to detail and commitment to customer satisfaction. Our trained, insured team members use quality products and proven techniques to deliver consistently excellent results.\n\nWhether you need regular maintenance cleaning or a thorough deep clean, we customize our service to meet your specific needs and preferences.",
    "highlights": [
      "Background-checked, trained professionals",
      "Eco-friendly cleaning products available",
      "Flexible scheduling options",
      "Satisfaction guaranteed"
    ]
  },

  "footer": {
    "tagline": "Professional house cleaning you can trust",
    "description": "Reliable residential cleaning services with attention to detail and commitment to your satisfaction."
  },

  "contact": {
    "callToAction": "Ready for a spotlessly clean home?",
    "description": "Contact us today for a free quote or to schedule your cleaning service."
  }
}



============================
FILE: frontend\src\data\maid-service\defaults\faq.json
============================
{
  "$schema": "../../schemas/defaults-faq.schema.json",
  "description": "Default FAQ content for maid service tenants",
  
  "faqs": [
    {
      "category": "general",
      "question": "What areas do you serve?",
      "answer": "We provide cleaning services throughout the local area. Contact us to confirm service availability for your specific location."
    },
    {
      "category": "general",
      "question": "Are your cleaners insured and background-checked?",
      "answer": "Yes! All our team members are thoroughly background-checked, trained, and insured for your peace of mind and protection."
    },
    {
      "category": "general",
      "question": "Do you bring your own cleaning supplies?",
      "answer": "Yes, we bring all necessary cleaning supplies and equipment. If you prefer we use specific products, just let us know and we're happy to accommodate."
    },
    {
      "category": "services",
      "question": "What's the difference between standard and deep cleaning?",
      "answer": "Standard cleaning covers regular maintenance tasks like dusting, vacuuming, and surface cleaning. Deep cleaning includes all standard tasks plus detailed work like baseboards, cabinet fronts, inside appliances, and areas typically cleaned less frequently."
    },
    {
      "category": "services",
      "question": "Do you clean windows?",
      "answer": "Standard cleaning includes interior window sills. Interior window washing is included in deep cleaning and move-in/out services. Exterior window cleaning is available as an add-on service."
    },
    {
      "category": "services",
      "question": "Can I customize the cleaning tasks?",
      "answer": "Absolutely! We're happy to customize our service to focus on your priorities and skip tasks you handle yourself."
    },
    {
      "category": "services",
      "question": "Do you use eco-friendly cleaning products?",
      "answer": "Yes, we offer eco-friendly and green cleaning products upon request at no additional charge."
    },
    {
      "category": "booking",
      "question": "Do I need to be home during the cleaning?",
      "answer": "No, you don't need to be home. Many clients provide access and we securely lock up when finished. We'll leave an invoice and checklist of completed tasks."
    },
    {
      "category": "booking",
      "question": "How do I schedule a cleaning?",
      "answer": "You can schedule service through our website, by phone, or by email. We offer flexible scheduling including evenings and weekends."
    },
    {
      "category": "booking",
      "question": "What is your cancellation policy?",
      "answer": "We require 24-48 hours notice for cancellations or rescheduling. Late cancellations may incur a fee."
    },
    {
      "category": "payment",
      "question": "How much does cleaning cost?",
      "answer": "Pricing depends on home size, service type, and frequency. Contact us for a free, customized quote based on your specific needs."
    },
    {
      "category": "payment",
      "question": "What payment methods do you accept?",
      "answer": "We accept cash, checks, all major credit cards, and digital payment methods. Payment is due upon completion of service or can be set up for automatic billing with recurring service."
    }
  ]
}



============================
FILE: frontend\src\data\maid-service\defaults\metadata.json
============================
{
  "$schema": "../../schemas/defaults-metadata.schema.json",
  "description": "Default SEO metadata for maid service tenants",
  
  "seo": {
    "titleTemplate": "{businessName} | Professional House Cleaning",
    "defaultTitle": "Professional House Cleaning Services",
    "description": "Professional residential cleaning services you can trust. Standard cleaning, deep cleaning, and move-in/out services. Background-checked, insured team members.",
    "keywords": [
      "house cleaning",
      "maid service",
      "home cleaning",
      "residential cleaning",
      "deep cleaning",
      "move in cleaning",
      "move out cleaning",
      "recurring cleaning"
    ],
    "openGraph": {
      "type": "website",
      "locale": "en_US",
      "siteName": "Professional House Cleaning Services"
    },
    "twitter": {
      "card": "summary_large_image",
      "site": "@housecleaning"
    }
  },

  "pages": {
    "home": {
      "title": "Professional House Cleaning Services | {businessName}",
      "description": "Reliable, thorough house cleaning services for your home. Standard cleaning, deep cleaning, and move-in/out services in {serviceArea}."
    },
    "services": {
      "title": "Our Cleaning Services | {businessName}",
      "description": "Explore our comprehensive cleaning services including standard cleaning, deep cleaning, move-in/out cleaning, and recurring service options."
    },
    "about": {
      "title": "About Us | {businessName}",
      "description": "Learn about our professional cleaning team and our commitment to delivering spotless results with every visit."
    },
    "contact": {
      "title": "Contact Us | {businessName}",
      "description": "Get in touch to schedule your house cleaning service or request a free quote. Serving {serviceArea} and surrounding areas."
    },
    "quote": {
      "title": "Request a Quote | {businessName}",
      "description": "Get a free, customized quote for house cleaning services. Tell us about your home and we'll provide a detailed estimate."
    }
  },

  "structuredData": {
    "organizationType": "LocalBusiness",
    "additionalTypes": [
      "HousePainter",
      "HomeAndConstructionBusiness"
    ],
    "defaultServiceArea": {
      "type": "radius",
      "value": 20,
      "unit": "miles"
    }
  }
}



============================
FILE: frontend\src\data\maid-service\defaults\services.json
============================
{
  "$schema": "../../schemas/defaults-services.schema.json",
  "description": "Default service descriptions for maid service tenants (informational only, no pricing)",
  
  "services": [
    {
      "slug": "standard-cleaning",
      "title": "Standard Cleaning",
      "shortDescription": "Regular maintenance cleaning for your home",
      "description": "Our standard cleaning service covers all the essential areas of your home with thorough attention to detail. Perfect for regular maintenance to keep your home consistently clean and fresh.",
      "benefits": [
        "All rooms dusted and vacuumed",
        "Bathrooms cleaned and sanitized",
        "Kitchen surfaces cleaned",
        "Floors mopped and vacuumed",
        "Trash removed"
      ],
      "duration": "2-3 hours",
      "category": "maintenance"
    },
    {
      "slug": "deep-cleaning",
      "title": "Deep Cleaning",
      "shortDescription": "Thorough, detailed cleaning service",
      "description": "Our deep cleaning service goes beyond standard maintenance to address areas that need extra attention. Ideal for spring cleaning, move-in preparation, or when your home needs a thorough refresh.",
      "benefits": [
        "Everything in standard cleaning",
        "Baseboards and trim cleaned",
        "Cabinet fronts and appliance exteriors",
        "Window sills and tracks",
        "Light fixtures and ceiling fans",
        "Behind furniture cleaning"
      ],
      "duration": "4-6 hours",
      "category": "deep-clean"
    },
    {
      "slug": "move-in-out-cleaning",
      "title": "Move In/Out Cleaning",
      "shortDescription": "Comprehensive cleaning for moving",
      "description": "Specialized cleaning service for move-in or move-out situations. We ensure the property is spotless and ready for new occupants, covering areas that are typically inaccessible during regular cleaning.",
      "benefits": [
        "All deep cleaning tasks",
        "Interior windows",
        "Inside cabinets and drawers",
        "Oven and refrigerator interior",
        "Closets cleaned",
        "Wall washing"
      ],
      "duration": "Full day",
      "category": "specialized"
    },
    {
      "slug": "recurring-cleaning",
      "title": "Recurring Cleaning Service",
      "shortDescription": "Regular scheduled cleaning",
      "description": "Consistent, reliable cleaning on your schedule. Choose weekly, bi-weekly, or monthly service to maintain a consistently clean home without the hassle of scheduling each visit.",
      "benefits": [
        "Same team each visit",
        "Consistent quality",
        "Flexible scheduling",
        "Priority booking",
        "Discounted rates"
      ],
      "duration": "2-3 hours",
      "category": "maintenance"
    },
    {
      "slug": "post-event-cleaning",
      "title": "Post-Event Cleaning",
      "shortDescription": "Cleanup after parties and events",
      "description": "Quick turnaround cleaning after parties, gatherings, or special events. We handle the cleanup so you can enjoy your event and relax afterward.",
      "benefits": [
        "Fast turnaround",
        "Flexible scheduling",
        "Complete cleanup",
        "Trash and recycling removal",
        "Kitchen and bathroom focus"
      ],
      "duration": "2-4 hours",
      "category": "specialized"
    }
  ]
}



============================
FILE: frontend\src\data\maid-service\index.ts
============================
/**
 * Maid Service Industry Config Loader
 * Assembles modular config files into MainSiteConfig structure
 * 
 * NOTE: This industry is not yet fully configured. Placeholder files are used
 * to establish the modular architecture pattern. The old site.json is still
 * available as a reference/backup.
 */

import type { MainSiteConfig } from '@/shared/types/location';

/**
 * Load and assemble maid-service config from modular files
 * Falls back to legacy site.json data structure for now
 */
export async function loadMaidServiceConfig(): Promise<MainSiteConfig> {
  // TODO: Populate modular files with actual maid service data
  // For now, import the legacy site.json from archive as fallback
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Legacy JSON import, typing refactor planned
  const legacyConfig = await import('./_archive/site.json.legacy');
  
  // Return legacy config until modular files are populated
  // Once populated, replace with assembled config like mobile-detailing
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- Legacy JSON import, typing refactor planned
  return legacyConfig.default as MainSiteConfig;
}



============================
FILE: frontend\src\data\maid-service\seo-defaults.json
============================
{
  "title": "Professional House Cleaning & Maid Services",
  "description": "Reliable house cleaning and maid services. Regular cleaning, deep cleaning, move-in/out cleaning, and specialized cleaning services.",
  "keywords": "maid service, house cleaning, residential cleaning, professional cleaners, deep cleaning, move in cleaning, move out cleaning, housekeeping",
  "ogImage": "/maid-service/images/hero/hero1.png",
  "twitterImage": "/maid-service/images/hero/hero1.png",
  "canonicalPath": "/",
  "robots": "index,follow"
}



============================
FILE: frontend\src\data\maid-service\_archive\site.json.legacy
============================
{
  "brand": "Sparkle & Shine",
  "slug": "site",
  "urlPath": "/",

  "logo": {
    "url": "/icons/maid-service-logo.webp",
    "alt": "Sparkle & Shine Logo",
    "darkUrl": "/icons/maid-service-logo-dark.webp",
    "lightUrl": "/icons/maid-service-logo.webp"
  },

  "seo": {
    "title": "Professional House Cleaning — Residential & Commercial",
    "description": "Trusted house cleaning and maid services. Weekly, bi-weekly, and one-time deep cleaning for homes and offices. Bonded, insured, and background-checked cleaners.",
    "keywords": [
      "house cleaning",
      "maid service",
      "residential cleaning",
      "commercial cleaning",
      "deep cleaning",
      "weekly cleaning",
      "move-in cleaning",
      "office cleaning"
    ],
    "canonicalPath": "/",
    "ogImage": "/images/maid-service/hero/hero1.png",
    "twitterImage": "/images/maid-service/hero/hero1.png",
    "robots": "index,follow"
  },

  "hero": {
    "h1": "Professional House Cleaning",
    "sub": "Weekly cleaning, deep cleaning & move-in services.",
    "images": [
      { 
        "url": "/images/maid-service/hero/hero1.png", 
        "alt": "Professional house cleaning service in action",
        "width": 1920,
        "height": 1080,
        "priority": true
      },
      { 
        "url": "/images/maid-service/hero/hero2.png", 
        "alt": "Spotless kitchen after professional cleaning",
        "width": 1920,
        "height": 1080,
        "priority": true
      }
    ],
    "ctas": [
      { "label": "Get Quote", "href": "/quote" },
      { "label": "Schedule Cleaning", "href": "/book" }
    ]
  },

  "finder": {
    "placeholder": "Enter your ZIP to check availability",
    "sub": "Book directly with our professional cleaning team (no third-party fees)."
  },

  "servicesGrid": [
    {
      "slug": "weekly-cleaning",
      "title": "Weekly Cleaning",
      "image": "/images/maid-service/services/weekly-cleaning.png",
      "alt": "Professional weekly house cleaning",
      "href": "/services/weekly-cleaning",
      "width": 400,
      "height": 300,
      "priority": false
    },
    {
      "slug": "deep-cleaning",
      "title": "Deep Cleaning",
      "image": "/images/maid-service/services/deep-cleaning.png",
      "alt": "Professional deep house cleaning",
      "href": "/services/deep-cleaning",
      "width": 400,
      "height": 300,
      "priority": false
    },
    {
      "slug": "move-in-cleaning",
      "title": "Move-in Cleaning",
      "image": "/images/maid-service/services/move-in-cleaning.png",
      "alt": "Professional move-in cleaning service",
      "href": "/services/move-in-cleaning",
      "width": 400,
      "height": 300,
      "priority": false
    },
    {
      "slug": "office-cleaning",
      "title": "Office Cleaning",
      "image": "/images/maid-service/services/office-cleaning.png",
      "alt": "Professional commercial office cleaning",
      "href": "/services/office-cleaning",
      "width": 400,
      "height": 300,
      "priority": false
    },
    {
      "slug": "post-construction",
      "title": "Post-Construction",
      "image": "/images/maid-service/services/post-construction.png",
      "alt": "Professional post-construction cleanup",
      "href": "/services/post-construction",
      "width": 400,
      "height": 300,
      "priority": false
    },
    {
      "slug": "eco-friendly",
      "title": "Eco-Friendly",
      "image": "/images/maid-service/services/eco-friendly.png",
      "alt": "Eco-friendly green cleaning service",
      "href": "/services/eco-friendly",
      "width": 400,
      "height": 300,
      "priority": false
    }
  ],

  "reviews": {
    "title": "What Our Clients Say",
    "subtitle": "Don't just take our word for it. See what our satisfied clients have to say about our cleaning services.",
    "ratingValue": "4.9",
    "reviewCount": 203,
    "source": "Google"
  },

  "faq": {
    "title": "Frequently Asked Questions",
    "subtitle": "Find answers to common questions about our house cleaning services"
  },

  "contact": {
    "email": "service@sparkleandshine.com",
    "phone": "(555) 123-CLEAN"
  },

  "socials": {
    "facebook": "https://www.facebook.com/sparkleandshine",
    "instagram": "https://www.instagram.com/sparkleandshine",
    "tiktok": "https://www.tiktok.com/@sparkleandshine",
    "youtube": "https://www.youtube.com/@sparkleandshine",
    "googleBusiness": "https://share.google/maidservice"
  }
}


============================
FILE: frontend\src\data\mobile-detailing\assets.json
============================
{
  "description": "Image assets and their metadata for mobile detailing industry",

  "logo": {
    "default": {
      "url": "/mobile-detailing/icons/logo.webp",
      "alt": "Mobile Detailing Logo"
    },
    "dark": {
      "url": "/mobile-detailing/icons/logo.webp",
      "alt": "Mobile Detailing Logo (Dark Mode)"
    },
    "light": {
      "url": "/mobile-detailing/icons/logo.webp",
      "alt": "Mobile Detailing Logo (Light Mode)"
    }
  },

  "hero": [
    {
      "id": "hero-1",
      "desktop": {
        "url": "/mobile-detailing/images/hero/hero1.png",
        "width": 1536,
        "height": 1024,
        "aspectRatio": 1.5
      },
      "mobile": {
        "url": "/mobile-detailing/images/hero/hero1-mobile.png",
        "width": 1024,
        "height": 1536,
        "aspectRatio": 0.666
      },
      "alt": "Professional mobile detailing service in action",
      "priority": true
    },
    {
      "id": "hero-2",
      "desktop": {
        "url": "/mobile-detailing/images/hero/hero2.png",
        "width": 1536,
        "height": 1024,
        "aspectRatio": 1.5
      },
      "mobile": {
        "url": "/mobile-detailing/images/hero/hero2-mobile.png",
        "width": 1024,
        "height": 1536,
        "aspectRatio": 0.666
      },
      "alt": "High-quality car detailing and ceramic coating",
      "priority": true
    },
    {
      "id": "hero-3",
      "desktop": {
        "url": "/mobile-detailing/images/hero/hero3.png",
        "width": 1536,
        "height": 1024,
        "aspectRatio": 1.5
      },
      "mobile": {
        "url": "/mobile-detailing/images/hero/hero3-mobile.png",
        "width": 1024,
        "height": 1536,
        "aspectRatio": 0.666
      },
      "alt": "High-quality car detailing, paint correction, and ceramic coating",
      "priority": true
    },
    {
      "id": "hero-4",
      "desktop": {
        "url": "/mobile-detailing/images/hero/hero4.png",
        "width": 1536,
        "height": 1024,
        "aspectRatio": 1.5
      },
      "mobile": {
        "url": "/mobile-detailing/images/hero/hero4-mobile.png",
        "width": 1024,
        "height": 1536,
        "aspectRatio": 0.666
      },
      "alt": "High-quality car detailing, paint correction, and ceramic coating",
      "priority": true
    },
    {
      "id": "hero-5",
      "desktop": {
        "url": "/mobile-detailing/images/hero/hero5.png",
        "width": 1536,
        "height": 1024,
        "aspectRatio": 1.5
      },
      "mobile": {
        "url": "/mobile-detailing/images/hero/hero5-mobile.png",
        "width": 1024,
        "height": 1536,
        "aspectRatio": 0.666
      },
      "alt": "High-quality car detailing, paint correction, and ceramic coating",
      "priority": true
    }
  ],

  "services": {
    "grid": [
      {
        "slug": "auto-detailing",
        "title": "Auto",
        "href": "/services/auto-detailing",
        "priority": false
      },
      {
        "slug": "marine-detailing",
        "title": "Marine",
        "href": "/services/marine-detailing",
        "priority": false
      },
      {
        "slug": "rv-detailing",
        "title": "RV",
        "href": "/services/rv-detailing",
        "priority": false
      },
      {
        "slug": "ceramic-coating",
        "title": "Ceramic Coating",
        "href": "/services/ceramic-coating",
        "priority": false
      },
      {
        "slug": "paint-correction",
        "title": "Paint Correction",
        "href": "/services/paint-correction",
        "priority": false
      },
      {
        "slug": "paint-protection-film",
        "title": "Paint Protection Film",
        "href": "/services/paint-protection-film",
        "priority": false
      }
    ],
    "thumbnails": {
      "auto-detailing": {
        "url": "/mobile-detailing/images/services/thumbnails/auto.png",
        "alt": "Professional auto detailing service",
        "width": 1536,
        "height": 1024
      },
      "marine-detailing": {
        "url": "/mobile-detailing/images/services/thumbnails/boat.png",
        "alt": "Professional boat and marine detailing service",
        "width": 1536,
        "height": 1024
      },
      "rv-detailing": {
        "url": "/mobile-detailing/images/services/thumbnails/rv.png",
        "alt": "Professional RV and motorhome detailing service",
        "width": 1536,
        "height": 1024
      },
      "ceramic-coating": {
        "url": "/mobile-detailing/images/services/thumbnails/ceramic.png",
        "alt": "Ceramic coating application",
        "width": 1024,
        "height": 1024
      },
      "paint-correction": {
        "url": "/mobile-detailing/images/services/thumbnails/paint.png",
        "alt": "Professional paint correction and restoration service",
        "width": 1204,
        "height": 1024
      },
      "paint-protection-film": {
        "url": "/mobile-detailing/images/services/thumbnails/ppf.png",
        "alt": "Paint protection film installation",
        "width": 1024,
        "height": 1024
      }
    }
  }
}



============================
FILE: frontend\src\data\mobile-detailing\content-defaults.json
============================
{
  "description": "Default text content for new mobile detailing tenants - used during provisioning to populate website.content table",
  
  "hero": {
    "h1": "Professional Mobile Detailing",
    "subTitle": "Mobile detailing for cars, boats, & RVs."
  },

  "reviews": {
    "title": "What Our Customers Say",
    "subtitle": "Don't just take our word for it. See what our satisfied customers have to say about our premium mobile detailing services."
  },

  "faq": {
    "title": "Frequently Asked Questions",
    "subtitle": "Find answers to common questions about our mobile detailing services"
  }
}



============================
FILE: frontend\src\data\mobile-detailing\faq\aftercare.json
============================
[
  {
    "category": "Aftercare",
    "question": "How should I maintain my vehicle after a detail?",
    "answer": "To keep your vehicle looking its best, wash it regularly using a pH-neutral shampoo, clean microfiber mitts, and soft drying towels. Avoid automatic car washes with brushes, as they can introduce swirl marks and micro-scratches."
  },
  {
    "category": "Aftercare",
    "question": "How do I care for a ceramic-coated vehicle?",
    "answer": "Always use pH-balanced soaps and clean microfiber towels. Avoid harsh degreasers or abrasive sponges. For best results, apply a ceramic spray topper every few months to maintain gloss and hydrophobic performance."
  },
  {
    "category": "Aftercare",
    "question": "What's the best way to care for Paint Protection Film (PPF)?",
    "answer": "Wash gently using a microfiber wash mitt and avoid directing high-pressure water at the film edges. You can apply a wax or ceramic coating made for PPF to enhance shine and make cleaning easier."
  },
  {
    "category": "Aftercare",
    "question": "When should I schedule my next detail?",
    "answer": "We recommend a maintenance detail every 2–3 months depending on your driving habits, storage conditions, and local environment. Regular upkeep helps protect finishes and maintain resale value."
  },
  {
    "category": "Aftercare",
    "question": "Can I wax or polish my vehicle after detailing?",
    "answer": "You can apply a non-abrasive wax or sealant once the existing protection begins to fade. However, if you have a ceramic coating or PPF, confirm with your detailer before adding additional products."
  },
  {
    "category": "Aftercare",
    "question": "Do you offer maintenance plans?",
    "answer": "Many providers offer recurring maintenance packages that include regular washes, interior cleaning, and protective treatments at a discounted rate. These plans help preserve your vehicle year-round."
  }
]



============================
FILE: frontend\src\data\mobile-detailing\faq\general.json
============================
[
  {
    "category": "General",
    "question": "What is mobile detailing?",
    "answer": "Mobile detailing brings the car wash and detailing service directly to you. We come equipped with professional tools, products, and water (if needed) to clean and protect your vehicle at your home, office, or other convenient location."
  },
  {
    "category": "General",
    "question": "What types of vehicles do you detail?",
    "answer": "We detail cars, trucks, SUVs, motorcycles, boats, and RVs. Each type of vehicle can be customized with the appropriate service package."
  },
  {
    "category": "General",
    "question": "Do you need access to water or electricity?",
    "answer": "In most cases, no. Our mobile units are self-contained and equipped with water and power. If we ever need to connect to your utilities, we'll let you know ahead of time."
  },
  {
    "category": "General",
    "question": "How long does a typical detail take?",
    "answer": "Most standard details take 2–4 hours depending on vehicle size, condition, and selected service. Premium services such as paint correction or ceramic coating may take longer."
  },
  {
    "category": "General",
    "question": "Do you use professional products?",
    "answer": "Absolutely. We only use high-quality, industry-approved detailing products that are safe for your paint, interior surfaces, and the environment."
  },
  {
    "category": "General",
    "question": "How can I book an appointment?",
    "answer": "You can book by calling or texting us, or send a message through our website. We'll confirm your appointment and arrival window right away."
  }
]



============================
FILE: frontend\src\data\mobile-detailing\faq\locations.json
============================
[
  {
    "category": "Locations",
    "question": "What areas do you service?",
    "answer": "We proudly serve the following. If you're located just outside our standard service area, contact us — we can often accommodate for a small travel fee."
  },
  {
    "category": "Locations",
    "question": "Can you detail my car at my home or workplace?",
    "answer": "Yes. We offer fully mobile service and can perform detailing at your home, workplace, or any location with safe and legal access to your vehicle."
  },
  {
    "category": "Locations",
    "question": "Do you charge travel fees?",
    "answer": "Travel within our main service area is included. A small fee may apply for locations beyond our normal radius, and we'll always let you know upfront before confirming your appointment."
  },
  {
    "category": "Locations",
    "question": "Do you service apartment complexes or gated communities?",
    "answer": "Yes, as long as the property allows mobile detailing and grants access to water or parking space as needed. We recommend confirming with your property manager before booking."
  },
  {
    "category": "Locations",
    "question": "Can you detail vehicles in public parking lots?",
    "answer": "In most cases, public parking areas require prior permission. We recommend scheduling at a private residence, business lot, or another approved location for best results."
  },
  {
    "category": "Locations",
    "question": "How can I check if you serve my area?",
    "answer": "Simply enter your address or ZIP code during booking. Our system will instantly confirm availability and show the nearest available time slots for your location."
  }
]



============================
FILE: frontend\src\data\mobile-detailing\faq\payments.json
============================
[
  {
    "category": "Payments",
    "question": "What payment methods do you accept?",
    "answer": "Our providers accept major credit cards, debit cards, and in many cases, digital wallets like Apple Pay or Google Pay. Some may also accept cash upon completion."
  },
  {
    "category": "Payments",
    "question": "Is a deposit required to book an appointment?",
    "answer": "Many services require a small deposit to secure your booking. This deposit is applied toward your total service cost and helps ensure appointment availability."
  },
  {
    "category": "Payments",
    "question": "Is my payment information secure?",
    "answer": "Yes. All online payments are processed via secure, PCI-compliant payment gateways. We do not store your sensitive card information."
  },
  {
    "category": "Payments",
    "question": "When is the remaining balance due?",
    "answer": "Unless paid in full at booking, the remaining balance is typically due immediately upon service completion. Your provider will confirm the total before starting work."
  },
  {
    "category": "Payments",
    "question": "Can I get a refund if I cancel?",
    "answer": "Refund eligibility depends on the provider's cancellation policy, which is displayed before you confirm your booking. Many allow full refunds for cancellations made at least 24 hours in advance."
  }
]



============================
FILE: frontend\src\data\mobile-detailing\faq\preparation.json
============================
[
  {
    "category": "Preparation",
    "question": "How should I prepare my vehicle before a detailing appointment?",
    "answer": "Please remove personal items, valuables, and loose trash from your vehicle so we can access all surfaces. If possible, park in a shaded area or garage to help maintain ideal working conditions."
  },
  {
    "category": "Preparation",
    "question": "Do I need to wash my car before the appointment?",
    "answer": "No need — we handle all exterior cleaning as part of the service. However, removing excessive mud or large debris ahead of time can help speed up the process."
  },
  {
    "category": "Preparation",
    "question": "Should I clear space around my vehicle?",
    "answer": "Yes. Please make sure there's enough room for us to move around your vehicle and open all doors fully. This ensures a thorough and efficient detail."
  },
  {
    "category": "Preparation",
    "question": "Do you need access to water or electricity?",
    "answer": "Most of our setups are fully self-contained with on-board water and power. If a particular service requires access to your utilities, we'll let you know before your appointment."
  },
  {
    "category": "Preparation",
    "question": "Can I leave my vehicle unattended during the service?",
    "answer": "Yes, as long as the vehicle is unlocked or keys are accessible at the scheduled time. Please arrange this with us in advance if you won't be present."
  },
  {
    "category": "Preparation",
    "question": "Will you need access to my garage or workspace?",
    "answer": "Only for specific services that require a covered or temperature-controlled area, such as ceramic coating or paint protection film installation. We'll note any special requirements in your booking confirmation."
  }
]



============================
FILE: frontend\src\data\mobile-detailing\faq\pricing.json
============================
[
  {
    "category": "Pricing",
    "question": "How can I get a quote?",
    "answer": "You can request a quote online by selecting your vehicle type and services you need. We'll respond with a quick custom quote based on your needs."
  },
  {
    "category": "Pricing",
    "question": "How much does mobile detailing cost?",
    "answer": "Pricing depends on your vehicle size, condition, and the services selected. Basic interior or exterior details typically start around $75–$150, while full details usually range from $150–$300. Premium services like ceramic coating or paint protection film are quoted separately."
  },
  {
    "category": "Pricing",
    "question": "Are ceramic coating and paint protection film priced differently?",
    "answer": "Yes. Ceramic coating packages often range from $500–$2,000 depending on prep work, coating type, and warranty length. Paint protection film (PPF) pricing is based on coverage area — from partial front-end protection to full-vehicle wraps."
  },
  {
    "category": "Pricing",
    "question": "Do you offer fleet or commercial discounts?",
    "answer": "Absolutely. We offer competitive rates for fleets, dealerships, and commercial clients. Multi-vehicle packages can be customized to your needs with simplified scheduling and billing."
  },
  {
    "category": "Pricing",
    "question": "Are there any extra fees I should know about?",
    "answer": "In rare cases, additional fees may apply for excessive dirt, pet hair, biohazard cleanup, or extended travel outside our normal service area. Any applicable fees are always discussed before your appointment is confirmed."
  },
  {
    "category": "Pricing",
    "question": "Do you offer package deals or bundled services?",
    "answer": "Yes. You can combine interior and exterior services, add extras like headlight restoration or odor removal, and save compared to booking separately. We also run seasonal promotions throughout the year."
  }
]



============================
FILE: frontend\src\data\mobile-detailing\faq\scheduling.json
============================
[
  {
    "category": "Scheduling",
    "question": "How do I book a mobile detailing appointment?",
    "answer": "You can book online anytime by selecting your vehicle type, location, and preferred service package. Choose an available time slot and confirm your appointment instantly — no phone call required."
  },
  {
    "category": "Scheduling",
    "question": "How far in advance should I schedule my service?",
    "answer": "For the best availability, we recommend scheduling at least 3–5 days in advance. Same-day or next-day appointments may be available depending on current workload and location."
  },
  {
    "category": "Scheduling",
    "question": "What happens if it rains on my appointment day?",
    "answer": "If rain or severe weather is expected, we'll contact you to reschedule or relocate the service to a covered area. Light rain can sometimes be managed with a canopy, but heavy rain or storms may require rescheduling."
  },
  {
    "category": "Scheduling",
    "question": "Do you work in extreme heat or cold?",
    "answer": "Yes, we operate year-round. However, certain services like ceramic coating or paint correction may need to be postponed if temperatures fall outside safe application ranges. We'll help you find the best time for your vehicle's needs."
  },
  {
    "category": "Scheduling",
    "question": "Can I change or cancel my booking?",
    "answer": "Absolutely. You can modify or cancel your appointment up to 24 hours in advance without penalty. Late changes or cancellations may incur a small fee depending on our policy."
  },
  {
    "category": "Scheduling",
    "question": "Do you offer weekend or evening appointments?",
    "answer": "Yes, we offer flexible scheduling, including weekends and limited evening appointments. Check our online calendar for available time slots in your area."
  }
]



============================
FILE: frontend\src\data\mobile-detailing\faq\services.json
============================
[
  {
    "category": "Services",
    "question": "What services do you offer?",
    "answer": "We provide complete mobile detailing services including exterior and interior detailing, paint decontamination, polishing, ceramic coating, paint protection film (PPF), headlight restoration, odor removal, and RV or boat detailing. All services are performed on-site at your location."
  },
  {
    "category": "Services",
    "question": "How does mobile detailing work?",
    "answer": "You choose the service package that fits your needs, select a time, and we come to you — whether that's your driveway, garage, or workplace. Our setup is fully mobile, and we bring everything needed to complete the job professionally on-site."
  },
  {
    "category": "Services",
    "question": "Do you need water or electricity at my location?",
    "answer": "In most cases, no. Our mobile units are fully self-contained with water tanks and generators. If a specific service requires access to utilities, we'll let you know before the appointment."
  },
  {
    "category": "Services",
    "question": "What's included in a standard full detail?",
    "answer": "A full detail typically includes foam pre-wash, hand wash, iron and tar removal, clay bar decontamination, wheel and tire cleaning, interior vacuuming, surface and crevice cleaning, interior glass, and protective finishing. Add-ons like polishing or ceramic coating are available at checkout."
  },
  {
    "category": "Services",
    "question": "Do you offer polishing or paint correction?",
    "answer": "Yes. We provide single-stage or multi-stage machine polishing to remove oxidation, swirl marks, and light scratches. For lasting protection and enhanced gloss, many customers pair polishing with a ceramic coating."
  },
  {
    "category": "Services",
    "question": "Can I book ceramic coating services?",
    "answer": "Absolutely. We install professional-grade ceramic coatings that add gloss, chemical resistance, and make washing easier. Durability options range from 1–5+ years depending on the product and preparation level."
  },
  {
    "category": "Services",
    "question": "Do you install Paint Protection Film (PPF)?",
    "answer": "Yes. We install self-healing paint protection film on high-impact areas like bumpers, hoods, and mirrors, or across full panels. PPF protects against rock chips and road debris and can be combined with ceramic coating for maximum protection."
  },
  {
    "category": "Services",
    "question": "Do you service RVs, boats, and specialty vehicles?",
    "answer": "Yes. We provide RV and marine detailing including washing, oxidation removal, polishing, and protective coatings. Larger or specialty vehicles may require a custom quote based on size and condition."
  },
  {
    "category": "Services",
    "question": "Are your products safe for modern finishes and interiors?",
    "answer": "Yes. We use only professional-grade, surface-safe products — pH-balanced washes, microfiber drying, proper decontamination methods, and interior cleaners safe for leather, vinyl, fabric, and touchscreen displays."
  },
  {
    "category": "Services",
    "question": "Can I request eco-friendly or low-odor products?",
    "answer": "Yes. We offer eco-friendly, water-efficient, and low-fragrance options upon request. Just mention your preference in the booking notes and we'll make sure to use the appropriate products."
  },
  {
    "category": "Services",
    "question": "How long does a typical service take?",
    "answer": "Standard detailing takes about 2–4 hours. Polishing or ceramic coating can take 4–8+ hours depending on the service level. PPF installation times vary by coverage area."
  },
  {
    "category": "Services",
    "question": "Do you offer fleet or commercial detailing?",
    "answer": "Yes. We can coordinate recurring or multi-vehicle fleet services with simplified scheduling and consolidated billing. Let us know your fleet size and frequency for a custom plan."
  },
  {
    "category": "Services",
    "question": "Can I combine services in one visit?",
    "answer": "Definitely. You can bundle interior and exterior detailing, add polishing, ceramic coating, PPF, headlight restoration, and odor removal. We'll estimate time and pricing before confirming your appointment."
  }
]



============================
FILE: frontend\src\data\mobile-detailing\faq\warranty.json
============================
[
  {
    "category": "Warranty",
    "question": "Do you offer a satisfaction guarantee?",
    "answer": "Yes. We stand behind our work and strive for complete customer satisfaction. If you're not happy with the results, please contact us within 24 hours so we can review the concern and, if needed, arrange a re-service."
  },
  {
    "category": "Warranty",
    "question": "Are ceramic coatings covered by a warranty?",
    "answer": "Yes. Professional ceramic coatings include written warranties ranging from 1 to 5+ years, depending on the product and maintenance requirements. Warranty terms are explained before installation and included in your service paperwork."
  },
  {
    "category": "Warranty",
    "question": "Does Paint Protection Film (PPF) come with a warranty?",
    "answer": "Absolutely. Paint protection film typically includes a manufacturer warranty against yellowing, cracking, or delamination for 5–10 years, along with workmanship coverage from the installer."
  },
  {
    "category": "Warranty",
    "question": "What is not covered under warranty?",
    "answer": "Warranties do not cover damage caused by neglect, improper maintenance, accidents, or environmental fallout such as tree sap, bird droppings, or industrial contamination. Full warranty terms are reviewed before installation or service completion."
  },
  {
    "category": "Warranty",
    "question": "How do I make a warranty claim?",
    "answer": "If you ever have an issue, contact us with your service details and photos of the affected area. We'll help review your warranty and coordinate with the installer or manufacturer to resolve the concern as quickly as possible."
  }
]



============================
FILE: frontend\src\data\mobile-detailing\gallery\gallery.json
============================
[
    {"alt": "Grigio Telesto BMW M4 Competition in a professional studio",
  "author": "Mobile Detail Hub",
  "caption": "Grigio Telesto • Glossy Finish",
  "dateModified": "2025-09-18",
  "datePublished": "2025-09-18",
  "fetchPriority": "high",
  "hash": "sha256-f49acb644cb22ddc…",
  "height": 768,
  "id": "bmw-m4-competition-grigio-telesto-studio",
  "license": "https://thatsmartsite.com/license",
  "loading": "eager",
  "src": "/images/gallery/bmw-m4-competition-grigio-telesto-studio.png",
  "tags": ["ai generated", "studio", "Grigio Telesto", "BMW M4 Competition"],
  "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/bmw-m4-competition-grigio-telesto-studio.webp",
  "title": "BMW M4 Competition – Studio Render",
  "type": "image/jpeg",
  "variants": [{"height": 768,
           "type": "image/avif",
           "url": "https://thatsmartsite.com/paint-correction/bmw-m4-competition-grigio-telesto-studio.avif",
           "width": 768},
          {"height": 512,
           "type": "image/webp",
           "url": "https://thatsmartsite.com/paint-correction/bmw-m4-competition-grigio-telesto-studio.webp",
           "width": 512}],
  "width": 768},
  
  {
    "id": "bugatti-chiron-blu-nila-studio",
    "src": "/images/gallery/bugatti-chiron-blu-nila-studio.png",
    "type": "image/jpeg",
    "alt": "Blu Nila Bugatti Chiron in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Blu Nila \u2022 Matte finish",
    "title": "Bugatti Chiron \u2013 Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/bugatti-chiron-blu-nila-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/bugatti-chiron-blu-nila-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/bugatti-chiron-blu-nila-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Blu Nila",
      "Bugatti Chiron"
    ],
    "hash": "sha256-747f31c6d6e8fd4d\u2026"
  },
  {
    "id": "1970-chevy-camaro-z28-magnetic-black-studio",
    "src": "/images/gallery/1970-chevy-camaro-z28-magnetic-black-studio.png",
    "type": "image/jpeg",
    "alt": "Magnetic Black 1970 Chevy Camaro Z/28 in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Magnetic Black • Matte finish",
    "title": "1970 Chevy Camaro Z/28 – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/1970-chevy-camaro-z28-magnetic-black-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/1970-chevy-camaro-z28-magnetic-black-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/1970-chevy-camaro-z28-magnetic-black-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-19",
    "dateModified": "2025-09-19",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Magnetic Black",
      "1970 Chevy Camaro Z/28"
    ],
    "hash": "sha256-17dce22ec7a2f30a…"
  },
  {
    "id": "1967-chevy-camaro-rsss-350-frozen-black-studio",
    "src": "/images/gallery/1967-chevy-camaro-rsss-350-frozen-black-studio.PNG",
    "type": "image/jpeg",
    "alt": "Frozen Black 1967 Chevy Camaro RS/SS 350 in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Frozen Black • Matte finish",
    "title": "1967 Chevy Camaro RS/SS 350 – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/1967-chevy-camaro-rsss-350-frozen-black-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/1967-chevy-camaro-rsss-350-frozen-black-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/1967-chevy-camaro-rsss-350-frozen-black-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Frozen Black",
      "1967 Chevy Camaro RS/SS 350"
    ],
    "hash": "sha256-5ba7c1938a45c4d0…"
  },
  {
    "id": "1967-chevy-camaro-rsss-350-magnetic-black-studio2",
    "src": "/images/gallery/1967-chevy-camaro-rsss-350-magnetic-black-studio2.PNG",
    "type": "image/jpeg",
    "alt": "Magnetic Black 1967 Chevy Camaro RS/SS 350 in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Magnetic Black • Matte finish",
    "title": "1967 Chevy Camaro RS/SS 350 – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/1967-chevy-camaro-rsss-350-magnetic-black-studio2.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/1967-chevy-camaro-rsss-350-magnetic-black-studio2.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/1967-chevy-camaro-rsss-350-magnetic-black-studio2.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Magnetic Black",
      "1967 Chevy Camaro RS/SS 350"
    ],
    "hash": "sha256-3fef780e678ac399…"
  },
  
  {
    "id": "1967-chevy-camaro-rsss-350-magnetic-black-studio",
    "src": "/images/gallery/1967-chevy-camaro-rsss-350-magnetic-black-studio.PNG",
    "type": "image/jpeg",
    "alt": "Magnetic Black 1967 Chevy Camaro RS/SS 350 in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Magnetic Black • Glossy finish",
    "title": "1967 Chevy Camaro RS/SS 350 – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/1967-chevy-camaro-rsss-350-magnetic-black-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/1967-chevy-camaro-rsss-350-magnetic-black-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/1967-chevy-camaro-rsss-350-magnetic-black-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Magnetic Black",
      "1967 Chevy Camaro RS/SS 350"
    ],
    "hash": "sha256-3fef780e678ac399…"
  },
  {
    "id": "1970-chevy-camaro-z28-nardo-grey-studio",
    "src": "/images/gallery/1970-chevy-camaro-z28-nardo-grey-studio.png",
    "type": "image/jpeg",
    "alt": "Nardo Grey 1970 Chevy Camaro Z/28 in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Nardo Grey • Matte finish",
    "title": "1970 Chevy Camaro Z/28 – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/1970-chevy-camaro-z28-nardo-grey-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/1970-chevy-camaro-z28-nardo-grey-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/1970-chevy-camaro-z28-nardo-grey-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Nardo Grey",
      "1970 Chevy Camaro Z/28"
    ],
    "hash": "sha256-0ce79a1e78d9c675…"
  },
  {
    "id": "1967-shelby-gt350-miami-blue-studio",
    "src": "/images/gallery/1967-shelby-gt350-miami-blue-studio.png",
    "type": "image/jpeg",
    "alt": "Miami Blue 1967 Shelby GT350 in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Miami Blue • Matte finish",
    "title": "1967 Shelby GT350 – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/1967-shelby-gt350-miami-blue-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/1967-shelby-gt350-miami-blue-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/1967-shelby-gt350-miami-blue-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Miami Blue",
      "1967 Shelby GT350"
    ],
    "hash": "sha256-24e5c0f17f5143b3…"
  },
  {
    "id": "1969-chevrolet-camaro-z28-rosso-mugello-studio",
    "src": "/images/gallery/1969-chevrolet-camaro-z28-rosso-mugello-studio.png",
    "type": "image/jpeg",
    "alt": "Rosso Mugello 1969 Chevrolet Camaro Z/28 in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Rosso Mugello • Satin finish",
    "title": "1969 Chevrolet Camaro Z/28 – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/1969-chevrolet-camaro-z28-rosso-mugello-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/1969-chevrolet-camaro-z28-rosso-mugello-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/1969-chevrolet-camaro-z28-rosso-mugello-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Rosso Mugello",
      "1969 Chevrolet Camaro Z/28"
    ],
    "hash": "sha256-7812ab46e1134d7e…"
  },
  {
    "id": "1970-ford-torino-cobra-429-electric-lime-studio",
    "src": "/images/gallery/1970-ford-torino-cobra-429-electric-lime-studio.png",
    "type": "image/jpeg",
    "alt": "Electric Lime 1970 Ford Torino Cobra 429 in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Electric Lime • Satin finish",
    "title": "1970 Ford Torino Cobra 429 – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/1970-ford-torino-cobra-429-electric-lime-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/1970-ford-torino-cobra-429-electric-lime-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/1970-ford-torino-cobra-429-electric-lime-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Electric Lime",
      "1970 Ford Torino Cobra 429"
    ],
    "hash": "sha256-b006447a25b34ad9…"
  },
  {
    "id": "1969-ford-mustang-boss-429-grigio-telesto-studio",
    "src": "/images/gallery/1969-ford-mustang-boss-429-grigio-telesto-studio.png",
    "type": "image/jpeg",
    "alt": "Grigio Telesto 1969 Ford Mustang Boss 429 in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Grigio Telesto • Satin finish",
    "title": "1969 Ford Mustang Boss 429 – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/1969-ford-mustang-boss-429-grigio-telesto-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/1969-ford-mustang-boss-429-grigio-telesto-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/1969-ford-mustang-boss-429-grigio-telesto-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Grigio Telesto",
      "1969 Ford Mustang Boss 429"
    ],
    "hash": "sha256-03bb0fd4d5b6362e…"
  },
  {
    "id": "1971-chevrolet-nova-ss-350-daytona-yellow-studio",
    "src": "/images/gallery/1971-chevrolet-nova-ss-350-daytona-yellow-studio.png",
    "type": "image/jpeg",
    "alt": "Daytona Yellow 1971 Chevrolet Nova SS 350 in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Daytona Yellow • Satin finish",
    "title": "1971 Chevrolet Nova SS 350 – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/1971-chevrolet-nova-ss-350-daytona-yellow-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/1971-chevrolet-nova-ss-350-daytona-yellow-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/1971-chevrolet-nova-ss-350-daytona-yellow-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Daytona Yellow",
      "1971 Chevrolet Nova SS 350"
    ],
    "hash": "sha256-82cde3403e12d400…"
  },
  {
    "id": "1968-dodge-dart-gts-340-royal-purple-studio",
    "src": "/images/gallery/1968-dodge-dart-gts-340-royal-purple-studio.png",
    "type": "image/jpeg",
    "alt": "Royal Purple 1968 Dodge Dart GTS 340 in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Royal Purple • Matte finish",
    "title": "1968 Dodge Dart GTS 340 – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/1968-dodge-dart-gts-340-royal-purple-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/1968-dodge-dart-gts-340-royal-purple-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/1968-dodge-dart-gts-340-royal-purple-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Royal Purple",
      "1968 Dodge Dart GTS 340"
    ],
    "hash": "sha256-ba0e69a7f4bdf69e…"
  },
  {
    "id": "koenigsegg-jesko-shadow-grey-studio",
    "src": "/images/gallery/koenigsegg-jesko-shadow-grey-studio.png",
    "type": "image/jpeg",
    "alt": "Shadow Grey Koenigsegg Jesko in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Shadow Grey • Matte finish",
    "title": "Koenigsegg Jesko – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/koenigsegg-jesko-shadow-grey-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/koenigsegg-jesko-shadow-grey-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/koenigsegg-jesko-shadow-grey-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-19",
    "dateModified": "2025-09-19",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Shadow Grey",
      "Koenigsegg Jesko"
    ],
    "hash": "sha256-c6840e33a62b7eb2…"
  },
  {
    "id": "1969-pontiac-gto-judge-zenith-red-studio",
    "src": "/images/gallery/1969-pontiac-gto-judge-zenith-red-studio.png",
    "type": "image/jpeg",
    "alt": "Zenith Red 1969 Pontiac GTO Judge in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Zenith Red • Glossy finish",
    "title": "1969 Pontiac GTO Judge – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/1969-pontiac-gto-judge-zenith-red-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/1969-pontiac-gto-judge-zenith-red-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/1969-pontiac-gto-judge-zenith-red-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Zenith Red",
      "1969 Pontiac GTO Judge"
    ],
    "hash": "sha256-1993d523257eae84…"
  },
  {
    "id": "maserati-granturismo-pearl-white-studio",
    "src": "/images/gallery/maserati-granturismo-pearl-white-studio.png",
    "type": "image/jpeg",
    "alt": "Pearl White Maserati GranTurismo in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Pearl White • Matte finish",
    "title": "Maserati GranTurismo – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/maserati-granturismo-pearl-white-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/maserati-granturismo-pearl-white-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/maserati-granturismo-pearl-white-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Pearl White",
      "Maserati GranTurismo"
    ],
    "hash": "sha256-d45a806c329bae56…"
  },
  {
    "id": "chevrolet-camaro-ss-1le-bianco-avus-studio",
    "src": "/images/gallery/chevrolet-camaro-ss-1le-bianco-avus-studio.png",
    "type": "image/jpeg",
    "alt": "Bianco Avus Chevrolet Camaro SS 1LE in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Bianco Avus • Glossy finish",
    "title": "Chevrolet Camaro SS 1LE – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/chevrolet-camaro-ss-1le-bianco-avus-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/chevrolet-camaro-ss-1le-bianco-avus-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/chevrolet-camaro-ss-1le-bianco-avus-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Bianco Avus",
      "Chevrolet Camaro SS 1LE"
    ],
    "hash": "sha256-dd79c1507819bf6a…"
  },
  {
    "id": "dodge-challenger-srt-demon-bianco-avus-studio",
    "src": "/images/gallery/dodge-challenger-srt-demon-bianco-avus-studio.png",
    "type": "image/jpeg",
    "alt": "Bianco Avus Dodge Challenger SRT Demon in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Bianco Avus • Matte finish",
    "title": "Dodge Challenger SRT Demon – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/dodge-challenger-srt-demon-bianco-avus-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/dodge-challenger-srt-demon-bianco-avus-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/dodge-challenger-srt-demon-bianco-avus-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Bianco Avus",
      "Dodge Challenger SRT Demon"
    ],
    "hash": "sha256-9991a9346aa23bd4…"
  },
  {
    "id": "toyota-gr-supra-hyper-red-studio",
    "src": "/images/gallery/toyota-gr-supra-hyper-red-studio.png",
    "type": "image/jpeg",
    "alt": "Hyper Red Toyota GR Supra in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Hyper Red • Glossy finish",
    "title": "Toyota GR Supra – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/toyota-gr-supra-hyper-red-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/toyota-gr-supra-hyper-red-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/toyota-gr-supra-hyper-red-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Hyper Red",
      "Toyota GR Supra"
    ],
    "hash": "sha256-2d7c9ec2387c6c0b…"
  },
  {
    "id": "dodge-viper-gts-daytona-yellow-studio",
    "src": "/images/gallery/dodge-viper-gts-daytona-yellow-studio.png",
    "type": "image/jpeg",
    "alt": "Daytona Yellow Dodge Viper GTS in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Daytona Yellow • Matte finish",
    "title": "Dodge Viper GTS – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/dodge-viper-gts-daytona-yellow-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/dodge-viper-gts-daytona-yellow-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/dodge-viper-gts-daytona-yellow-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Daytona Yellow",
      "Dodge Viper GTS"
    ],
    "hash": "sha256-0eefc46aa5f1a99d…"
  },
  {
    "id": "mclaren-p1-electric-lime-studio",
    "src": "/images/gallery/mclaren-p1-electric-lime-studio.png",
    "type": "image/jpeg",
    "alt": "Electric Lime McLaren P1 in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Electric Lime • Glossy finish",
    "title": "McLaren P1 – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/mclaren-p1-electric-lime-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/mclaren-p1-electric-lime-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/mclaren-p1-electric-lime-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Electric Lime",
      "McLaren P1"
    ],
    "hash": "sha256-48b74f5671d25bd1…"
  },
  {
    "id": "pagani-huayra-bianco-avus-studio",
    "src": "/images/gallery/pagani-huayra-bianco-avus-studio.png",
    "type": "image/jpeg",
    "alt": "Bianco Avus Pagani Huayra in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Bianco Avus • Glossy finish",
    "title": "Pagani Huayra – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/pagani-huayra-bianco-avus-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/pagani-huayra-bianco-avus-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/pagani-huayra-bianco-avus-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Bianco Avus",
      "Pagani Huayra"
    ],
    "hash": "sha256-4dcac1cb6cce9cbe…"
  },
  {
    "id": "lexus-lc-500-grigio-telesto-studio",
    "src": "/images/gallery/lexus-lc-500-grigio-telesto-studio.png",
    "type": "image/jpeg",
    "alt": "Grigio Telesto Lexus LC 500 in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Grigio Telesto • Matte finish",
    "title": "Lexus LC 500 – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/lexus-lc-500-grigio-telesto-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/lexus-lc-500-grigio-telesto-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/lexus-lc-500-grigio-telesto-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Grigio Telesto",
      "Lexus LC 500"
    ],
    "hash": "sha256-dd1d06648202f71f…"
  },
  {
    "id": "chevrolet-corvette-z06-c8-liquid-silver-studio",
    "src": "/images/gallery/chevrolet-corvette-z06-c8-liquid-silver-studio.png",
    "type": "image/jpeg",
    "alt": "Liquid Silver Chevrolet Corvette Z06 (C8) in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Liquid Silver • Satin finish",
    "title": "Chevrolet Corvette Z06 (C8) – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/chevrolet-corvette-z06-c8-liquid-silver-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/chevrolet-corvette-z06-c8-liquid-silver-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/chevrolet-corvette-z06-c8-liquid-silver-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Liquid Silver",
      "Chevrolet Corvette Z06 (C8)"
    ],
    "hash": "sha256-0d27e36376c6d01f…"
  },
  {
    "id": "dodge-viper-gts-grigio-telesto-studio",
    "src": "/images/gallery/dodge-viper-gts-grigio-telesto-studio.png",
    "type": "image/jpeg",
    "alt": "Grigio Telesto Dodge Viper GTS in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Grigio Telesto • Glossy finish",
    "title": "Dodge Viper GTS – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/dodge-viper-gts-grigio-telesto-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/dodge-viper-gts-grigio-telesto-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/dodge-viper-gts-grigio-telesto-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Grigio Telesto",
      "Dodge Viper GTS"
    ],
    "hash": "sha256-fd77d79a60dac0a6…"
  },
  {
    "id": "nissan-gt-r-nismo-shadow-grey-studio",
    "src": "/images/gallery/nissan-gt-r-nismo-shadow-grey-studio.png",
    "type": "image/jpeg",
    "alt": "Shadow Grey Nissan GT-R Nismo in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Shadow Grey • Matte finish",
    "title": "Nissan GT-R Nismo – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/nissan-gt-r-nismo-shadow-grey-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/nissan-gt-r-nismo-shadow-grey-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/nissan-gt-r-nismo-shadow-grey-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Shadow Grey",
      "Nissan GT-R Nismo"
    ],
    "hash": "sha256-67ffdcaa0dfc0a60…"
  },
  {
    "id": "mclaren-720s-competition-orange-studio",
    "src": "/images/gallery/mclaren-720s-competition-orange-studio.png",
    "type": "image/jpeg",
    "alt": "Competition Orange McLaren 720S in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Competition Orange • Matte finish",
    "title": "McLaren 720S – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/mclaren-720s-competition-orange-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/mclaren-720s-competition-orange-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/mclaren-720s-competition-orange-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Competition Orange",
      "McLaren 720S"
    ],
    "hash": "sha256-1ba20343618846b3…"
  },
  {
    "id": "bmw-m4-competition-volcano-yellow-studio",
    "src": "/images/gallery/bmw-m4-competition-volcano-yellow-studio.png",
    "type": "image/jpeg",
    "alt": "Volcano Yellow BMW M4 Competition in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Volcano Yellow • Matte finish",
    "title": "BMW M4 Competition – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/bmw-m4-competition-volcano-yellow-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/bmw-m4-competition-volcano-yellow-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/bmw-m4-competition-volcano-yellow-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Volcano Yellow",
      "BMW M4 Competition"
    ],
    "hash": "sha256-56565c228959902d…"
  },
  {
    "id": "lamborghini-revuelto-giallo-modena-studio",
    "src": "/images/gallery/lamborghini-revuelto-giallo-modena-studio.png",
    "type": "image/jpeg",
    "alt": "Giallo Modena Lamborghini Revuelto in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Giallo Modena • Matte finish",
    "title": "Lamborghini Revuelto – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/lamborghini-revuelto-giallo-modena-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/lamborghini-revuelto-giallo-modena-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/lamborghini-revuelto-giallo-modena-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Giallo Modena",
      "Lamborghini Revuelto"
    ],
    "hash": "sha256-45cba0feefe84e8d…"
  },
  {
    "id": "porsche-taycan-turbo-s-verde-mantis-studio",
    "src": "/images/gallery/porsche-taycan-turbo-s-verde-mantis-studio.png",
    "type": "image/jpeg",
    "alt": "Verde Mantis Porsche Taycan Turbo S in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Verde Mantis • Glossy finish",
    "title": "Porsche Taycan Turbo S – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/porsche-taycan-turbo-s-verde-mantis-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/porsche-taycan-turbo-s-verde-mantis-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/porsche-taycan-turbo-s-verde-mantis-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Verde Mantis",
      "Porsche Taycan Turbo S"
    ],
    "hash": "sha256-c4054f0cf63cd2ba…"
  },
  {
    "id": "jaguar-f-type-r-ultraviolet-studio",
    "src": "/images/gallery/jaguar-f-type-r-ultraviolet-studio.png",
    "type": "image/jpeg",
    "alt": "Ultraviolet Jaguar F-Type R in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Ultraviolet • Glossy finish",
    "title": "Jaguar F-Type R – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/jaguar-f-type-r-ultraviolet-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/jaguar-f-type-r-ultraviolet-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/jaguar-f-type-r-ultraviolet-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Ultraviolet",
      "Jaguar F-Type R"
    ],
    "hash": "sha256-5f72d41e9799a65f…"
  },
  {
    "id": "audi-rs-e-tron-gt-giallo-modena-studio",
    "src": "/images/gallery/audi-rs-e-tron-gt-giallo-modena-studio.png",
    "type": "image/jpeg",
    "alt": "Giallo Modena Audi RS e-tron GT in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Giallo Modena • Matte finish",
    "title": "Audi RS e-tron GT – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/audi-rs-e-tron-gt-giallo-modena-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/audi-rs-e-tron-gt-giallo-modena-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/audi-rs-e-tron-gt-giallo-modena-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Giallo Modena",
      "Audi RS e-tron GT"
    ],
    "hash": "sha256-e2241ce6b6533d8b…"
  },
  {
    "id": "aston-martin-vantage-daytona-yellow-studio",
    "src": "/images/gallery/aston-martin-vantage-daytona-yellow-studio.png",
    "type": "image/jpeg",
    "alt": "Daytona Yellow Aston Martin Vantage in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Daytona Yellow • Satin finish",
    "title": "Aston Martin Vantage – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/aston-martin-vantage-daytona-yellow-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/aston-martin-vantage-daytona-yellow-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/aston-martin-vantage-daytona-yellow-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Daytona Yellow",
      "Aston Martin Vantage"
    ],
    "hash": "sha256-b778bfb25e260fc8…"
  },
  {
    "id": "koenigsegg-jesko-verde-mantis-studio",
    "src": "/images/gallery/koenigsegg-jesko-verde-mantis-studio.png",
    "type": "image/jpeg",
    "alt": "Verde Mantis Koenigsegg Jesko in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Verde Mantis • Glossy finish",
    "title": "Koenigsegg Jesko – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/koenigsegg-jesko-verde-mantis-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/koenigsegg-jesko-verde-mantis-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/koenigsegg-jesko-verde-mantis-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Verde Mantis",
      "Koenigsegg Jesko"
    ],
    "hash": "sha256-0488463914f928ac…"
  },
  {
    "id": "pagani-huayra-ultraviolet-studio",
    "src": "/images/gallery/pagani-huayra-ultraviolet-studio.png",
    "type": "image/jpeg",
    "alt": "Ultraviolet Pagani Huayra in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Ultraviolet • Matte finish",
    "title": "Pagani Huayra – Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/pagani-huayra-ultraviolet-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/pagani-huayra-ultraviolet-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/pagani-huayra-ultraviolet-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Ultraviolet",
      "Pagani Huayra"
    ],
    "hash": "sha256-b237f324c6d3a417…"
  },
  {
    "id": "lamborghini-huracán-sunburst-orange-studio",
    "src": "/images/gallery/lamborghini-huracán-sunburst-orange-studio.png",
    "type": "image/jpeg",
    "alt": "Sunburst Orange Lamborghini Huracán in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Sunburst Orange \u2022 Matte finish",
    "title": "Lamborghini Huracán \u2013 Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/lamborghini-huracán-sunburst-orange-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/lamborghini-huracán-sunburst-orange-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/lamborghini-huracán-sunburst-orange-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Sunburst Orange",
      "Lamborghini Huracán"
    ],
    "hash": "sha256-950904e01859af57\u2026"
  },
  {
    "id": "porsche-taycan-turbo-s-speed-yellow-studio",
    "src": "/images/gallery/porsche-taycan-turbo-s-speed-yellow-studio.png",
    "type": "image/jpeg",
    "alt": "Speed Yellow Porsche Taycan Turbo S in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Speed Yellow \u2022 Glossy finish",
    "title": "Porsche Taycan Turbo S \u2013 Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/porsche-taycan-turbo-s-speed-yellow-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/porsche-taycan-turbo-s-speed-yellow-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/porsche-taycan-turbo-s-speed-yellow-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Speed Yellow",
      "Porsche Taycan Turbo S"
    ],
    "hash": "sha256-43b647bdea96fa90\u2026"
  },
  {
    "id": "koenigsegg-jesko-magnetic-black-studio",
    "src": "/images/gallery/koenigsegg-jesko-magnetic-black-studio.png",
    "type": "image/jpeg",
    "alt": "Magnetic Black Koenigsegg Jesko in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Magnetic Black \u2022 Glossy finish",
    "title": "Koenigsegg Jesko \u2013 Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/koenigsegg-jesko-magnetic-black-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/koenigsegg-jesko-magnetic-black-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/koenigsegg-jesko-magnetic-black-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Magnetic Black",
      "Koenigsegg Jesko"
    ],
    "hash": "sha256-e84d8f8e573b8eb6\u2026"
  },
  
  {
    "id": "mercedes-benz-amg-gt-viola-pasifae-studio",
    "src": "/images/gallery/mercedes-benz-amg-gt-viola-pasifae-studio.png",
    "type": "image/jpeg",
    "alt": "Viola Pasifae Mercedes-Benz AMG GT in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Viola Pasifae \u2022 Glossy finish",
    "title": "Mercedes-Benz AMG GT \u2013 Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/mercedes-benz-amg-gt-viola-pasifae-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/mercedes-benz-amg-gt-viola-pasifae-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/mercedes-benz-amg-gt-viola-pasifae-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Viola Pasifae",
      "Mercedes-Benz AMG GT"
    ],
    "hash": "sha256-dc7ca8b71e079233\u2026"
  },
  {
    "id": "ford-mustang-shelby-gt500-shadow-grey-studio",
    "src": "/images/gallery/ford-mustang-shelby-gt500-shadow-grey-studio.png",
    "type": "image/jpeg",
    "alt": "Shadow Grey Ford Mustang Shelby GT500 in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Shadow Grey \u2022 Glossy finish",
    "title": "Ford Mustang Shelby GT500 \u2013 Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/ford-mustang-shelby-gt500-shadow-grey-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/ford-mustang-shelby-gt500-shadow-grey-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/ford-mustang-shelby-gt500-shadow-grey-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Shadow Grey",
      "Ford Mustang Shelby GT500"
    ],
    "hash": "sha256-110ee67d3f9322b8\u2026"
  },
  
  {
    "id": "mclaren-artura-hyper-red-studio",
    "src": "/images/gallery/mclaren-artura-hyper-red-studio.png",
    "type": "image/jpeg",
    "alt": "Hyper Red McLaren Artura in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Hyper Red \u2022 Matte finish",
    "title": "McLaren Artura \u2013 Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/mclaren-artura-hyper-red-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/mclaren-artura-hyper-red-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/mclaren-artura-hyper-red-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Hyper Red",
      "McLaren Artura"
    ],
    "hash": "sha256-faf29dbf4d6fbb90\u2026"
  },
  {
    "id": "bugatti-veyron-highland-green-studio",
    "src": "/images/gallery/bugatti-veyron-highland-green-studio.png",
    "type": "image/jpeg",
    "alt": "Highland Green Bugatti Veyron in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Highland Green \u2022 Matte finish",
    "title": "Bugatti Veyron \u2013 Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/bugatti-veyron-highland-green-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/bugatti-veyron-highland-green-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/bugatti-veyron-highland-green-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Highland Green",
      "Bugatti Veyron"
    ],
    "hash": "sha256-e38fb9b2100cbd74\u2026"
  },
  {
    "id": "lamborghini-huracán-hyper-red-studio",
    "src": "/images/gallery/lamborghini-huracán-hyper-red-studio.png",
    "type": "image/jpeg",
    "alt": "Hyper Red Lamborghini Huracán in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Hyper Red \u2022 Glossy finish",
    "title": "Lamborghini Huracán \u2013 Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/lamborghini-huracán-hyper-red-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/lamborghini-huracán-hyper-red-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/lamborghini-huracán-hyper-red-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Hyper Red",
      "Lamborghini Huracán"
    ],
    "hash": "sha256-3156511af1513c6e\u2026"
  },
  {
    "id": "chevrolet-corvette-stingray-c8-crimson-pearl-studio",
    "src": "/images/gallery/chevrolet-corvette-stingray-c8-crimson-pearl-studio.png",
    "type": "image/jpeg",
    "alt": "Crimson Pearl Chevrolet Corvette Stingray (C8) in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Crimson Pearl \u2022 Satin finish",
    "title": "Chevrolet Corvette Stingray (C8) \u2013 Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/chevrolet-corvette-stingray-c8-crimson-pearl-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/chevrolet-corvette-stingray-c8-crimson-pearl-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/chevrolet-corvette-stingray-c8-crimson-pearl-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Crimson Pearl",
      "Chevrolet Corvette Stingray (C8)"
    ],
    "hash": "sha256-037b6db25fc609c2\u2026"
  },
  
  {
    "id": "lexus-lc-500-azure-blue-studio",
    "src": "/images/gallery/lexus-lc-500-azure-blue-studio.png",
    "type": "image/jpeg",
    "alt": "Azure Blue Lexus LC 500 in a professional studio",
    "width": 768,
    "height": 768,
    "caption": "Azure Blue \u2022 Glossy finish",
    "title": "Lexus LC 500 \u2013 Studio Render",
    "thumbnailUrl": "https://thatsmartsite.com/paint-correction/thumbs/lexus-lc-500-azure-blue-studio.webp",
    "variants": [
      {
        "url": "https://thatsmartsite.com/paint-correction/lexus-lc-500-azure-blue-studio.avif",
        "width": 768,
        "height": 768,
        "type": "image/avif"
      },
      {
        "url": "https://thatsmartsite.com/paint-correction/lexus-lc-500-azure-blue-studio.webp",
        "width": 512,
        "height": 512,
        "type": "image/webp"
      }
    ],
    "loading": "eager",
    "fetchPriority": "high",
    "datePublished": "2025-09-18",
    "dateModified": "2025-09-18",
    "author": "Mobile Detail Hub",
    "license": "https://thatsmartsite.com/license",
    "tags": [
      "ai generated",
      "studio",
      "Azure Blue",
      "Lexus LC 500"
    ],
    "hash": "sha256-376a8a71c887f21e\u2026"
  }
        
  ]
    


============================
FILE: frontend\src\data\mobile-detailing\index.ts
============================
/**
 * Mobile Detailing Industry Config Loader
 * Assembles modular config files into MainSiteConfig structure
 */

import type { MainSiteConfig } from '@/shared/types/location';

import assetsData from './assets.json';
import contentDefaults from './content-defaults.json';
import seoDefaults from './seo-defaults.json';

/**
 * Load and assemble mobile-detailing config from modular files
 * This replaces the legacy site.json approach
 */
export function loadMobileDetailingConfig(): MainSiteConfig {
  // Transform assets.json hero images to match MainSiteConfig format
  const heroImages = assetsData.hero.map(heroItem => ({
    url: heroItem.desktop.url,
    mobileUrl: heroItem.mobile.url,
    alt: heroItem.alt,
    width: heroItem.desktop.width,
    height: heroItem.desktop.height,
    priority: heroItem.priority
  }));

  // Assemble the full config
  const config: MainSiteConfig = {
    brand: 'Mobile Detailing Hub',
    slug: 'site',
    urlPath: '/',
    
    logo: {
      url: assetsData.logo.default.url,
      alt: assetsData.logo.default.alt,
      darkUrl: assetsData.logo.dark.url,
      lightUrl: assetsData.logo.light.url
    },
    
    seo: {
      title: seoDefaults.title,
      description: seoDefaults.description,
      keywords: seoDefaults.keywords.split(', '),
      canonicalPath: seoDefaults.canonicalPath,
      ogImage: seoDefaults.ogImage,
      twitterImage: seoDefaults.twitterImage,
      robots: seoDefaults.robots
    },
    
    hero: {
      h1: contentDefaults.hero.h1,
      sub: contentDefaults.hero.subTitle,
      Images: heroImages, // Note: Capital 'I' for compatibility with ImageCarousel component
      images: heroImages, // Lowercase for type compliance
      ctas: [
        { label: 'Book Service', href: '/book' },
        { label: 'Get Quote', href: '/quote' }
      ]
    } as MainSiteConfig['hero'] & { Images: typeof heroImages },
    
    finder: {
      placeholder: 'Enter your ZIP to check availability',
      sub: 'Professional mobile detailing at your location'
    },
    
    servicesGrid: assetsData.services.grid.map(service => {
      const thumbnail = assetsData.services.thumbnails[service.slug as keyof typeof assetsData.services.thumbnails];
      return {
        slug: service.slug,
        title: service.title,
        image: thumbnail.url || '',
        alt: thumbnail.alt || service.title,
        href: service.href,
        width: thumbnail.width,
        height: thumbnail.height,
        priority: service.priority
      };
    }),
    
    reviews: {
      title: contentDefaults.reviews.title,
      subtitle: contentDefaults.reviews.subtitle,
      ratingValue: '4.9',
      reviewCount: 127,
      source: 'Google'
    },
    
    faq: {
      title: contentDefaults.faq.title,
      subtitle: contentDefaults.faq.subtitle
    },
    
    contact: {
      email: 'hello@thatsmartsite.com',
      phone: '(555) 123-4567'
    },
    
    socials: {
      facebook: 'https://www.facebook.com/thatsmartsite',
      instagram: 'https://www.instagram.com/thatsmartsite',
      googleBusiness: 'https://share.google/mobiledetailing'
    }
  };

  return config;
}



============================
FILE: frontend\src\data\mobile-detailing\pricing\boats\service\features.json
============================
{
  "basic-boat-cleaning": {
    "name": "Basic Boat Cleaning",
    "description": "Essential boat cleaning service",
    "explanation": "Basic cleaning for boat maintenance and appearance",
    "image": "/images/services/basic-boat-cleaning.jpg",
    "duration": 180,
    "features": ["Hull wash", "Deck cleaning", "Interior vacuum"]
  },
  "premium-boat-cleaning": {
    "name": "Premium Boat Cleaning",
    "description": "Advanced boat cleaning with protection",
    "explanation": "Comprehensive cleaning with waxing and protection",
    "image": "/images/services/premium-boat-cleaning.jpg",
    "duration": 240,
    "features": ["Hull wash", "Deck cleaning", "Interior vacuum", "Waxing", "Protection"]
  },
  "boat-restoration": {
    "name": "Boat Restoration",
    "description": "Complete boat restoration service",
    "explanation": "Full restoration with gel coat work and ceramic coating",
    "image": "/images/services/boat-restoration.jpg",
    "duration": 480,
    "features": ["Gel coat restoration", "Ceramic coating", "Interior restoration", "Hardware polishing"]
  }
}


============================
FILE: frontend\src\data\mobile-detailing\pricing\boats\service\services.json
============================
{
  "Basic Boat Cleaning": {
    "tier": 1,
    "cost": 400,
    "description": "Essential boat cleaning service for basic maintenance and appearance.",
    "features": [
      "basic-boat-cleaning"
    ]
  },
  "Premium Boat Detail": {
    "tier": 2,
    "cost": 600,
    "description": "Comprehensive boat detailing with advanced cleaning and protection.",
    "features": [
      "basic-boat-cleaning",
      "premium-boat-cleaning"
    ],
    "popular": true
  },
  "Complete Boat Restoration": {
    "tier": 3,
    "cost": 1000,
    "description": "Full boat restoration service with gel coat restoration and ceramic coating.",
    "features": [
      "basic-boat-cleaning",
      "premium-boat-cleaning",
      "boat-restoration"
    ]
  }
}


============================
FILE: frontend\src\data\mobile-detailing\pricing\cars\addons\engine\features.json
============================
{
    "engine-bay-cleaning": {
      "name": "Engine Bay Cleaning & Degreasing",
      "description": "Safe, low-moisture degreasing and rinse to remove oil, grime, and dust from the engine compartment.",
      "explanation": "We start with a careful dry blow-out and brush work, then apply targeted citrus/solvent-safe degreasers to dissolve oils and road grime. Sensitive electronics and intake areas are protected, while low-pressure rinsing and steam are used as appropriate to avoid moisture intrusion.",
      "image": "/images/services/engine-bay-cleaning.jpg",
      "duration": 90,
      "features": [
        "Dry blow-out and precision brushing",
        "Targeted degreasing of plastics, hoses, and painted metal",
        "Low-pressure rinse and/or steam where appropriate",
        "Masking of sensitive electrical components",
        "Wipe-down to a clean, residue-free finish"
      ]
    },
  
    "engine-bay-enhancement": {
      "name": "Engine Bay Enhancement",
      "description": "Detailing and refinement to restore a uniform, factory-fresh look across plastics, hoses, and painted surfaces.",
      "explanation": "After degreasing, we refine the bay with agitation tools and swabs for tight areas, remove water spots, and brighten painted and metal surfaces. Plastics and rubber are treated for an even, natural sheen without a greasy residue.",
      "image": "/images/services/engine-bay-enhancement.jpg",
      "duration": 120,
      "features": [
        "Tight-area detailing with boar-hair brushes and swabs",
        "Spot removal of residual stains and water spots",
        "Even, non-greasy finish on plastics and rubber",
        "Revives color depth on plastics and hoses",
        "Improves overall presentation for inspections or sale"
      ]
    },
  
    "engine-bay-protection": {
      "name": "Engine Bay Protection",
      "description": "UV- and heat-resistant protectants to keep plastics, rubber, and painted areas looking new longer.",
      "explanation": "We apply a heat-tolerant, UV-resistant dressing or polymer sealant to plastic, vinyl, rubber, and painted areas. This helps reduce fading, cracking, and dust adhesion while making future cleanings faster and safer.",
      "image": "/images/services/engine-bay-protection.jpg",
      "duration": 60,
      "features": [
        "UV-resistant dressing for plastics and rubber",
        "Heat-tolerant formula for engine environments",
        "Light hydrophobic protection on painted surfaces",
        "Reduces dust adhesion and future staining",
        "Natural, low-sheen OEM appearance"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\cars\addons\engine\service.json
============================
{
  "Essential Engine Bay Detail": {
    "tier": 1,
    "cost": 150,
    "description": "Thorough engine bay cleaning and protective dressing to remove grime and guard plastics, rubber, and painted surfaces.",
    "features": [
      "engine-bay-cleaning",
      "engine-bay-protection"
    ]
  },
  "Enduring Engine Bay Detail": {
    "tier": 2,
    "cost": 300,
    "popular": true,
    "description": "Deep engine bay cleaning with detailed enhancement and a heat-resistant protective finish for a like-new appearance that lasts.",
    "features": [
      "engine-bay-cleaning",
      "engine-bay-enhancement",
      "engine-bay-protection"
    ]
  },
  "Elite Engine Bay Detail": {
    "tier": 3,
    "cost": 450,
    "description": "Show-quality multi-step cleaning, enhancement, and premium protection for the ultimate engine compartment presentation and long-term defense.",
    "features": [
      "engine-bay-cleaning",
      "engine-bay-enhancement",
      "engine-bay-protection"
    ]
  }
}


============================
FILE: frontend\src\data\mobile-detailing\pricing\cars\addons\trim\features.json
============================
{
    "interior-trim-restoration": {
      "name": "Interior Trim Restoration",
      "description": "Comprehensive repair and re-dyeing of faded or discolored interior plastics, vinyl, and rubber.",
      "explanation": "Our Interior Trim Restoration service targets heavily faded, scratched, or discolored trim pieces. We deep clean, remove embedded grime, and professionally re-dye or refinish the material to restore factory color and texture, bringing worn interior panels back to life.",
      "image": "/images/services/interior-trim-restoration.jpg",
      "duration": 240,
      "features": [
        "Thorough cleaning and decontamination",
        "Color-matched re-dye or refinishing",
        "Repairs minor scratches and surface defects",
        "Restores OEM look and texture",
        "Ideal for older or sun-damaged interiors"
      ]
    },
  
    "interior-trim-enhancement": {
      "name": "Interior Trim Enhancement",
      "description": "Detailing and conditioning to refresh lightly worn interior trim and enhance factory appearance.",
      "explanation": "For interiors in good condition but lacking depth or richness, our Interior Trim Enhancement service revitalizes plastics, vinyl, and rubber surfaces. We perform a meticulous cleaning and apply specialized conditioners to enrich color, add subtle sheen, and revive the cabin’s overall look.",
      "image": "/images/services/interior-trim-enhancement.jpg",
      "duration": 180,
      "features": [
        "Gentle deep cleaning and surface preparation",
        "Application of premium interior conditioners",
        "Restores natural luster and color depth",
        "Reduces minor fading and dryness",
        "Leaves a non-greasy, factory-fresh finish"
      ]
    },
  
    "interior-trim-protection": {
      "name": "Interior Trim Protection",
      "description": "Long-term UV and stain protection for interior plastics, vinyl, and rubber components.",
      "explanation": "Our Interior Trim Protection service seals and defends interior surfaces with a high-quality ceramic or polymer coating. This invisible barrier guards against UV damage, fading, staining, and everyday wear, ensuring your freshly restored or new trim maintains its color and durability for years.",
      "image": "/images/services/interior-trim-protection.jpg",
      "duration": 120,
      "features": [
        "Final surface prep and inspection",
        "Application of UV-resistant ceramic/polymer coating",
        "Prevents fading, cracking, and staining",
        "Repels dust and makes future cleaning easier",
        "Maintains a natural, low-sheen appearance"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\cars\addons\trim\service.json
============================
{
  "Essential Trim Detail": {
    "tier": 1,
    "cost": 200,
    "description": "Gentle interior trim cleaning and conditioning with a protective ceramic/polymer coating to refresh color and guard against UV damage.",
    "features": [
      "interior-trim-enhancement",
      "interior-trim-protection"
    ]
  },
  "Enduring Trim Detail": {
    "tier": 2,
    "cost": 350,
    "popular": true,
    "description": "Professional restoration of faded or discolored trim followed by long-term UV-resistant protection for a factory-fresh look that lasts.",
    "features": [
      "interior-trim-restoration",
      "interior-trim-protection"
    ]
  },
  "Elite Trim Detail": {
    "tier": 3,
    "cost": 500,
    "description": "Comprehensive multi-step service combining full restoration, rich enhancement, and premium ceramic/polymer protection for the ultimate interior finish.",
    "features": [
      "interior-trim-restoration",
      "interior-trim-enhancement",
      "interior-trim-protection"
    ]
  }
}


============================
FILE: frontend\src\data\mobile-detailing\pricing\cars\addons\wheels\features.json
============================
{
    "1-stage-wheel-correction": {
      "name": "1-Stage Wheel Correction",
      "description": "Single-step machine polish to refine gloss and remove light swirls or haze from wheels.",
      "explanation": "Our 1-stage wheel correction is ideal for wheels with light swirl marks, brake-dust staining, or minor imperfections. After a thorough decontamination and iron fallout removal, we perform a single machine polish to restore depth and shine while preparing the surface for long-term protection.",
      "image": "/images/services/1-stage-wheel-correction.jpg",
      "duration": 240,
      "features": [
        "Thorough wheel cleaning and chemical decontamination",
        "Single-step machine polish",
        "Removes light swirl marks and haze",
        "Restores depth, gloss, and clarity",
        "Prepares wheels for ceramic or sealant protection"
      ]
    },
  
    "2-stage-wheel-correction": {
      "name": "2-Stage Wheel Correction",
      "description": "Compounding and polishing to remove moderate defects, brake dust etching, and restore depth on wheels.",
      "explanation": "Our 2-stage wheel correction targets wheels with noticeable swirl marks, oxidation, or moderate scratches. We start with a heavy-cut compound to level imperfections and remove embedded brake dust staining, followed by a refining polish to bring back a deep, reflective finish ready for ceramic coating.",
      "image": "/images/services/2-stage-wheel-correction.jpg",
      "duration": 360,
      "features": [
        "Intensive wheel cleaning and iron removal",
        "Heavy-cut compounding stage",
        "Refining polish for enhanced clarity",
        "Removes moderate swirl marks, scratches, and oxidation",
        "Restores rich gloss and color depth"
      ]
    },
  
    "3-stage-wheel-correction": {
      "name": "3-Stage Wheel Correction",
      "description": "Multi-step correction using heavy-cut, medium-cut, and final polish for near-perfect wheel finish.",
      "explanation": "Our 3-stage wheel correction is a premium multi-step process for wheels with heavy swirl marks, deeper scratches, or severe oxidation. After a full decontamination and iron fallout treatment, we perform a heavy cut to remove deep defects, a medium cut to refine, and a final polish to maximize gloss and clarity for a show-car result.",
      "image": "/images/services/3-stage-wheel-correction.jpg",
      "duration": 480,
      "features": [
        "Complete chemical and mechanical decontamination",
        "Heavy-cut compounding stage",
        "Medium-cut refining stage",
        "Final polish for extreme gloss",
        "Removes heavy swirl marks, scratches, and oxidation",
        "Ideal preparation for long-term ceramic protection"
      ]
    },
  
    "essential-wheel-ceramic-coating": {
      "name": "Essential Wheel Ceramic Coating",
      "description": "Entry-level ceramic coating for durable, easy-clean wheel protection.",
      "explanation": "Our Essential Wheel Ceramic Coating provides up to one year of protection against UV rays, brake dust, road salt, and water spotting. This affordable upgrade enhances gloss, creates a slick hydrophobic surface, and makes routine wheel cleaning significantly easier.",
      "image": "/images/services/essential-wheel-ceramic-coating.jpg",
      "duration": 300,
      "features": [
        "1-year protection",
        "Hydrophobic, self-cleaning effect",
        "UV and chemical resistance",
        "Enhanced gloss and shine",
        "Simplifies washing and maintenance"
      ]
    },
  
    "enduring-wheel-ceramic-coating": {
      "name": "Enduring Wheel Ceramic Coating",
      "description": "Premium multi-year ceramic coating for lasting wheel protection and deep gloss.",
      "explanation": "Our Enduring Wheel Ceramic Coating delivers 3–5 years of professional-grade protection. It forms a strong chemical bond to resist harsh road contaminants, brake dust, and high-temperature exposure while producing an ultra-slick hydrophobic finish that keeps wheels cleaner for longer.",
      "image": "/images/services/enduring-wheel-ceramic-coating.jpg",
      "duration": 420,
      "features": [
        "3–5 year durability",
        "Superior hydrophobic finish",
        "UV and high-temperature chemical resistance",
        "Extreme gloss and depth",
        "Reduces brake-dust adhesion"
      ]
    },
  
    "elite-wheel-ceramic-coating": {
      "name": "Elite Wheel Ceramic Coating",
      "description": "Ultimate 8-year ceramic coating for maximum wheel protection and show-car gloss.",
      "explanation": "Our Elite Wheel Ceramic Coating offers unmatched, long-term defense—up to eight years—against brake dust, road salt, and chemical exposure. This professional-grade treatment delivers a mirror-like finish, intense hydrophobic properties, and the highest level of UV and temperature resistance available.",
      "image": "/images/services/elite-wheel-ceramic-coating.jpg",
      "duration": 420,
      "features": [
        "Up to 8-year durability",
        "Elite hydrophobic and self-cleaning performance",
        "Maximum UV, chemical, and high-heat resistance",
        "Deep, show-quality gloss and color richness",
        "Professional-grade, long-term protection"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\cars\addons\wheels\service.json
============================
{
  "Essential Wheel Detail": {
    "tier": 1,
    "cost": 250,
    "description": "Single-stage wheel polishing and a one-year ceramic coating for a clean, glossy finish that resists brake dust and road grime.",
    "features": [
      "1-stage-wheel-correction",
      "essential-wheel-ceramic-coating"
    ]
  },
  "Enduring Wheel Detail": {
    "tier": 2,
    "cost": 500,
    "popular": true,
    "description": "Two-stage correction with compounding and polishing plus a multi-year ceramic coating for deep gloss and long-lasting protection.",
    "features": [
      "2-stage-wheel-correction",
      "enduring-wheel-ceramic-coating"
    ]
  },
  "Elite Wheel Detail": {
    "tier": 3,
    "cost": 750,
    "description": "Premium three-stage wheel correction and an elite eight-year ceramic coating for show-car brilliance and maximum durability.",
    "features": [
      "3-stage-wheel-correction",
      "elite-wheel-ceramic-coating"
    ]
  }
}


============================
FILE: frontend\src\data\mobile-detailing\pricing\cars\addons\windows\features.json
============================
{
    "1-stage-window-correction": {
        "name": "1-Stage Window Correction",
        "description": "Basic window cleaning and light correction",
        "explanation": "Professional window cleaning with light correction to remove minor imperfections",
        "features": [
            "Professional window cleaning",
            "Light correction",
            "Minor imperfection removal",
            "Glass preparation"
        ],
        "duration": "30-45 minutes"
    },
    "essential-window-ceramic-coating": {
        "name": "Essential Window Ceramic Coating",
        "description": "Basic window protection with 1-year durability",
        "explanation": "Entry-level window coating providing basic protection and water repellency",
        "features": [
            "1-year protection",
            "Water repellency",
            "Basic UV protection",
            "Easy maintenance"
        ],
        "duration": "15-30 minutes"
    },
    "enduring-window-ceramic-coating": {
        "name": "Enduring Window Ceramic Coating",
        "description": "Enhanced window protection with 2-year durability",
        "explanation": "Mid-tier window coating offering superior protection and longer-lasting results",
        "features": [
            "2-year protection",
            "Superior water repellency",
            "Advanced UV protection",
            "Hydrophobic properties",
            "Chemical resistance"
        ],
        "duration": "30-45 minutes"
    },
    "elite-window-ceramic-coating": {
        "name": "Elite Window Ceramic Coating",
        "description": "Premium window protection with 3-year durability",
        "explanation": "High-end window coating delivering exceptional protection and maximum clarity",
        "features": [
            "3-year protection",
            "Maximum clarity",
            "Superior UV protection",
            "Ultra hydrophobic properties",
            "Maximum chemical resistance",
            "Self-cleaning properties"
        ],
        "duration": "45-60 minutes"
    }
}


============================
FILE: frontend\src\data\mobile-detailing\pricing\cars\addons\windows\service.json
============================
{
    "Essential Window Detail": {
      "tier": 1,
      "cost": 250,
      "description": "Single-step glass polishing and a one-year ceramic coating for crystal-clear windows and easy water-beading maintenance.",
      "features": [
        "1-stage-window-correction",
        "essential-window-ceramic-coating"
      ]
    },
    "Enduring Window Detail": {
      "tier": 2,
      "cost": 500,
      "popular": true,
      "description": "Professional glass correction and a premium 3–5 year ceramic coating for superior clarity, UV protection, and long-lasting hydrophobic performance.",
      "features": [
        "1-stage-window-correction",
        "enduring-window-ceramic-coating"
      ]
    },
    "Elite Window Detail": {
      "tier": 3,
      "cost": 750,
      "description": "Ultimate window treatment with precision polishing and an elite eight-year ceramic coating for unmatched visibility and maximum durability.",
      "features": [
        "1-stage-window-correction",
        "elite-window-ceramic-coating"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\cars\service\features.json
============================
{
    "full-exterior-detail": {
      "name": "Full Exterior Detail",
      "description": "Meticulous exterior cleaning and decontamination for a flawless finish.",
      "explanation": "A comprehensive wash and surface prep to remove dirt, road film, and bonded contaminants. Ideal foundation for paint correction or ceramic coating.",
      "features": [
        "Hand wash with pH-balanced shampoo",
        "Reverse osmosis mineral free soak & rinse",
        "Iron and tar decontamination",
        "Clay bar treatment for bonded contaminants",
        "Wheel, tire, and wheel-well deep clean",
        "Surface prep for polishing or coating"
      ],
      "duration": 120
    },
  
    "full-interior-detail": {
      "name": "Full Interior Detail",
      "description": "Deep interior cleaning and rejuvenation of every surface.",
      "explanation": "Removes embedded dirt, allergens, and odors from carpets, seats, and hard surfaces to restore a fresh, like-new cabin environment.",
      "features": [
        "Vacuuming of carpets, mats, and upholstery",
        "Steam cleaning and shampoo extraction as needed",
        "Wipe-down of all plastics, vinyl, and leather",
        "UV-protective interior dressing",
        "Streak-free glass cleaning inside and out"
      ],
      "duration": 120
    },
  
    "fallout-removal": {
      "name": "Chemical Fallout & Iron Removal",
      "description": "Removes embedded rail dust, industrial fallout, and iron particles.",
      "explanation": "Specialized decontamination that dissolves metallic contaminants that washing and claying alone cannot fully remove, preventing long-term paint damage.",
      "features": [
        "Iron-reactive fallout remover",
        "Safe for paint, glass, and wheels",
        "Restores smoothness before correction"
      ],
      "duration": 45
    },
  
    "preparation-detail": {
      "name": "Paint Preparation Detail",
      "description": "Polish and surface inspection to ready paint for correction or coating.",
      "explanation": "Final prep step ensuring panels are perfectly clean and defect-free before machine polishing or ceramic application.",
      "features": [
        "Panel wipe with isopropyl or solvent-based cleaner",
        "Tape masking of sensitive edges and trim",
        "Lighting inspection for hidden defects"
      ],
      "duration": 30
    },
  
    "paint-enhancement": {
      "name": "Paint Enhancement",
      "description": "Single-step polish for added gloss without full correction.",
      "explanation": "A light machine polish to remove minor haze and boost depth, ideal when full correction isn’t required.",
      "features": [
        "Gloss-intensive finishing polish",
        "Removes micro-marring and light oxidation",
        "Enhances color depth and reflection"
      ],
      "duration": 90
    },
  
    "1-stage-paint-correction": {
      "name": "1-Stage Paint Correction",
      "description": "Single-step machine polishing to remove light swirls and boost clarity.",
      "explanation": "A balanced cut-and-polish process that safely removes light defects and restores a brilliant gloss in one pass.",
      "features": [
        "Cut-and-polish with finishing compound",
        "Removes light swirl marks and oxidation",
        "Enhances color vibrancy and gloss"
      ],
      "duration": 90
    },
  
    "2-stage-paint-correction": {
      "name": "2-Stage Paint Correction",
      "description": "Compounding and polishing to eliminate moderate defects.",
      "explanation": "First a heavier compound removes medium scratches and oxidation, followed by a refining polish for depth and clarity.",
      "features": [
        "Heavy cut to level moderate defects",
        "Finishing polish for mirror-like gloss",
        "Removes most wash-induced marring"
      ],
      "duration": 180
    },
  
    "3-stage-paint-correction": {
      "name": "3-Stage Paint Correction",
      "description": "Multi-step compounding, refining, and finishing for near-perfect paintwork.",
      "explanation": "Ideal for heavily marred finishes, this process delivers show-car gloss and extreme clarity through progressive cuts and final jeweling.",
      "features": [
        "Initial heavy cut for deep defects",
        "Intermediate polish for refined leveling",
        "Final jeweling polish for maximum depth and reflection"
      ],
      "duration": 270
    },
  
    "essential-ceramic-coating": {
      "name": "Essential Ceramic Coating",
      "description": "Entry-level ceramic protection with 1-year durability.",
      "explanation": "Adds hydrophobic protection, UV resistance, and a noticeable gloss boost for easy maintenance.",
      "features": [
        "1-year protection",
        "Enhanced gloss and slickness",
        "UV and chemical resistance",
        "Easier washing and drying"
      ],
      "duration": 45
    },
  
    "enduring-ceramic-coating": {
      "name": "Enduring Ceramic Coating",
      "description": "Mid-tier ceramic coating lasting up to 3 years.",
      "explanation": "Professional-grade protection with stronger hydrophobic effect and improved chemical/UV resistance.",
      "features": [
        "Up to 3-year durability",
        "Deep, rich gloss",
        "Superior UV and chemical resistance",
        "Extreme water beading"
      ],
      "duration": 45
    },
  
    "platinum-ceramic-coating": {
      "name": "Platinum Ceramic Coating",
      "description": "Premium 5-year ceramic coating for long-lasting defense.",
      "explanation": "High-end formula delivering exceptional hardness, deep gloss, and easy maintenance for years.",
      "features": [
        "5-year protection",
        "Show-quality finish",
        "Maximum UV shielding",
        "Advanced hydrophobic and self-cleaning properties",
        "High chemical and light scratch resistance"
      ],
      "duration": 45
    },
  
    "elite-ceramic-coating": {
      "name": "Elite Ceramic Coating",
      "description": "Ultimate 7+ year ceramic coating for maximum protection and depth.",
      "explanation": "Flagship coating providing unrivaled gloss, extreme hydrophobics, and the toughest environmental defense available.",
      "features": [
        "7+ year durability",
        "Concours-level gloss and depth",
        "Highest UV, chemical, and abrasion resistance",
        "Ultra-slick, self-cleaning surface"
      ],
      "duration": 45
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\cars\service\services.json
============================
{
    "Essential Detail": {
      "tier": 1,
      "cost": 500,
      "description": "Complete interior and exterior refresh with light paint enhancement and a one-year ceramic coating for lasting gloss.",
      "features": [
        "full-exterior-detail",
        "full-interior-detail",
        "fallout-removal",
        "preparation-detail",
        "paint-enhancement",
        "essential-ceramic-coating"
      ]
    },
    "Enduring Detail": {
      "tier": 2,
      "cost": 750,
      "description": "Thorough interior and exterior treatment plus single-stage paint correction and a multi-year ceramic coating for deeper shine and protection.",
      "popular": true,
      "features": [
        "full-exterior-detail",
        "full-interior-detail",
        "fallout-removal",
        "preparation-detail",
        "1-stage-paint-correction",
        "enduring-ceramic-coating"
      ]
    },
    "Platinum Detail": {
      "tier": 3,
      "cost": 1000,
      "description": "Comprehensive detailing with two-stage paint correction and a premium ceramic coating that delivers show-car gloss and extended durability.",
      "features": [
        "full-exterior-detail",
        "full-interior-detail",
        "fallout-removal",
        "preparation-detail",
        "2-stage-paint-correction",
        "platinum-ceramic-coating"
      ]
    },
    "Elite Detail": {
      "tier": 4,
      "cost": 1250,
      "description": "Ultimate multi-stage paint correction and our top ceramic coating for the highest level of gloss, depth, and long-term defense.",
      "features": [
        "full-exterior-detail",
        "full-interior-detail",
        "fallout-removal",
        "preparation-detail",
        "3-stage-paint-correction",
        "elite-ceramic-coating"
      ]
    }
  }

============================
FILE: frontend\src\data\mobile-detailing\pricing\rvs\service\features.json
============================
{
  "basic-rv-cleaning": {
    "name": "Basic RV Cleaning",
    "description": "Essential RV cleaning service",
    "explanation": "Basic cleaning for RV maintenance and appearance",
    "image": "/images/services/basic-rv-cleaning.jpg",
    "duration": 120,
    "features": ["Exterior wash", "Interior cleaning", "Window cleaning"]
  },
  "premium-rv-cleaning": {
    "name": "Premium RV Cleaning",
    "description": "Advanced RV cleaning with protection",
    "explanation": "Comprehensive cleaning with waxing and protection",
    "image": "/images/services/premium-rv-cleaning.jpg",
    "duration": 180,
    "features": ["Exterior wash", "Interior cleaning", "Window cleaning", "Waxing", "Protection"]
  },
  "rv-restoration": {
    "name": "RV Restoration",
    "description": "Complete RV restoration service",
    "explanation": "Full restoration with paint correction and ceramic coating",
    "image": "/images/services/rv-restoration.jpg",
    "duration": 300,
    "features": ["Paint correction", "Ceramic coating", "Interior restoration", "Hardware polishing"]
  }
}


============================
FILE: frontend\src\data\mobile-detailing\pricing\rvs\service\features.ts
============================
import serviceData from './features.json';

export interface ServiceOption {
  order: number;
  name: string;
  description: string;
  explanation: string;
  image: string;
  duration: number;
  features: string[];
}

export interface ServiceOptions {
  [key: string]: ServiceOption;
}

export const RV_SERVICE_OPTIONS: ServiceOptions = serviceData;


============================
FILE: frontend\src\data\mobile-detailing\pricing\rvs\service\services.json
============================
{
  "Basic RV Cleaning": {
    "tier": 1,
    "cost": 300,
    "description": "Essential RV cleaning service for basic maintenance and appearance.",
    "features": [
      "basic-rv-cleaning"
    ]
  },
  "Premium RV Detail": {
    "tier": 2,
    "cost": 500,
    "description": "Comprehensive RV detailing with advanced cleaning and protection.",
    "features": [
      "basic-rv-cleaning",
      "premium-rv-cleaning"
    ],
    "popular": true
  },
  "Complete RV Restoration": {
    "tier": 3,
    "cost": 800,
    "description": "Full RV restoration service with paint correction and ceramic coating.",
    "features": [
      "basic-rv-cleaning",
      "premium-rv-cleaning",
      "rv-restoration"
    ]
  }
}


============================
FILE: frontend\src\data\mobile-detailing\pricing\suvs\addons\engine\features.json
============================
{
    "engine-bay-cleaning": {
      "name": "Engine Bay Cleaning & Degreasing",
      "description": "Safe, low-moisture degreasing and rinse to remove oil, grime, and dust from the engine compartment.",
      "explanation": "We start with a careful dry blow-out and brush work, then apply targeted citrus/solvent-safe degreasers to dissolve oils and road grime. Sensitive electronics and intake areas are protected, while low-pressure rinsing and steam are used as appropriate to avoid moisture intrusion.",
      "image": "/images/services/engine-bay-cleaning.jpg",
      "duration": 90,
      "features": [
        "Dry blow-out and precision brushing",
        "Targeted degreasing of plastics, hoses, and painted metal",
        "Low-pressure rinse and/or steam where appropriate",
        "Masking of sensitive electrical components",
        "Wipe-down to a clean, residue-free finish"
      ]
    },
  
    "engine-bay-enhancement": {
      "name": "Engine Bay Enhancement",
      "description": "Detailing and refinement to restore a uniform, factory-fresh look across plastics, hoses, and painted surfaces.",
      "explanation": "After degreasing, we refine the bay with agitation tools and swabs for tight areas, remove water spots, and brighten painted and metal surfaces. Plastics and rubber are treated for an even, natural sheen without a greasy residue.",
      "image": "/images/services/engine-bay-enhancement.jpg",
      "duration": 120,
      "features": [
        "Tight-area detailing with boar-hair brushes and swabs",
        "Spot removal of residual stains and water spots",
        "Even, non-greasy finish on plastics and rubber",
        "Revives color depth on plastics and hoses",
        "Improves overall presentation for inspections or sale"
      ]
    },
  
    "engine-bay-protection": {
      "name": "Engine Bay Protection",
      "description": "UV- and heat-resistant protectants to keep plastics, rubber, and painted areas looking new longer.",
      "explanation": "We apply a heat-tolerant, UV-resistant dressing or polymer sealant to plastic, vinyl, rubber, and painted areas. This helps reduce fading, cracking, and dust adhesion while making future cleanings faster and safer.",
      "image": "/images/services/engine-bay-protection.jpg",
      "duration": 60,
      "features": [
        "UV-resistant dressing for plastics and rubber",
        "Heat-tolerant formula for engine environments",
        "Light hydrophobic protection on painted surfaces",
        "Reduces dust adhesion and future staining",
        "Natural, low-sheen OEM appearance"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\suvs\addons\engine\service.json
============================
{
    "Essential Engine Bay Detail": {
      "tier": 1,
      "cost": 150,
      "features": [
        "engine-bay-cleaning",
        "engine-bay-protection"
      ]
    },
    "Enduring Engine Bay Detail": {
      "tier": 2,
      "cost": 300,
      "popular": true,
      "features": [
        "engine-bay-cleaning",
        "engine-bay-enhancement",
        "engine-bay-protection"
      ]
    },
    "Elite Engine Bay Detail": {
      "tier": 3,
      "cost": 450,
      "features": [
        "engine-bay-cleaning",
        "engine-bay-enhancement",
        "engine-bay-protection"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\suvs\addons\trim\features.json
============================
{
    "interior-trim-restoration": {
      "name": "Interior Trim Restoration",
      "description": "Comprehensive repair and re-dyeing of faded or discolored interior plastics, vinyl, and rubber.",
      "explanation": "Our Interior Trim Restoration service targets heavily faded, scratched, or discolored trim pieces. We deep clean, remove embedded grime, and professionally re-dye or refinish the material to restore factory color and texture, bringing worn interior panels back to life.",
      "image": "/images/services/interior-trim-restoration.jpg",
      "duration": 240,
      "features": [
        "Thorough cleaning and decontamination",
        "Color-matched re-dye or refinishing",
        "Repairs minor scratches and surface defects",
        "Restores OEM look and texture",
        "Ideal for older or sun-damaged interiors"
      ]
    },
  
    "interior-trim-enhancement": {
      "name": "Interior Trim Enhancement",
      "description": "Detailing and conditioning to refresh lightly worn interior trim and enhance factory appearance.",
      "explanation": "For interiors in good condition but lacking depth or richness, our Interior Trim Enhancement service revitalizes plastics, vinyl, and rubber surfaces. We perform a meticulous cleaning and apply specialized conditioners to enrich color, add subtle sheen, and revive the cabin’s overall look.",
      "image": "/images/services/interior-trim-enhancement.jpg",
      "duration": 180,
      "features": [
        "Gentle deep cleaning and surface preparation",
        "Application of premium interior conditioners",
        "Restores natural luster and color depth",
        "Reduces minor fading and dryness",
        "Leaves a non-greasy, factory-fresh finish"
      ]
    },
  
    "interior-trim-protection": {
      "name": "Interior Trim Protection",
      "description": "Long-term UV and stain protection for interior plastics, vinyl, and rubber components.",
      "explanation": "Our Interior Trim Protection service seals and defends interior surfaces with a high-quality ceramic or polymer coating. This invisible barrier guards against UV damage, fading, staining, and everyday wear, ensuring your freshly restored or new trim maintains its color and durability for years.",
      "image": "/images/services/interior-trim-protection.jpg",
      "duration": 120,
      "features": [
        "Final surface prep and inspection",
        "Application of UV-resistant ceramic/polymer coating",
        "Prevents fading, cracking, and staining",
        "Repels dust and makes future cleaning easier",
        "Maintains a natural, low-sheen appearance"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\suvs\addons\trim\service.json
============================
{
    "Essential Trim Detail": {
      "tier": 1,
      "cost": 200,
      "features": [
        "interior-trim-enhancement",
        "interior-trim-protection"
      ]
    },
    "Enduring Trim Detail": {
      "tier": 2,
      "cost": 350,
      "popular": true,
      "features": [
        "interior-trim-restoration",
        "interior-trim-protection"
      ]
    },
    "Elite Trim Detail": {
      "tier": 3,
      "cost": 500,
      "features": [
        "interior-trim-restoration",
        "interior-trim-enhancement",
        "interior-trim-protection"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\suvs\addons\wheels\features.json
============================
{
    "1-stage-wheel-correction": {
      "name": "1-Stage Wheel Correction",
      "description": "Single-step machine polish to refine gloss and remove light swirls or haze from wheels.",
      "explanation": "Our 1-stage wheel correction is ideal for wheels with light swirl marks, brake-dust staining, or minor imperfections. After a thorough decontamination and iron fallout removal, we perform a single machine polish to restore depth and shine while preparing the surface for long-term protection.",
      "image": "/images/services/1-stage-wheel-correction.jpg",
      "duration": 240,
      "features": [
        "Thorough wheel cleaning and chemical decontamination",
        "Single-step machine polish",
        "Removes light swirl marks and haze",
        "Restores depth, gloss, and clarity",
        "Prepares wheels for ceramic or sealant protection"
      ]
    },
  
    "2-stage-wheel-correction": {
      "name": "2-Stage Wheel Correction",
      "description": "Compounding and polishing to remove moderate defects, brake dust etching, and restore depth on wheels.",
      "explanation": "Our 2-stage wheel correction targets wheels with noticeable swirl marks, oxidation, or moderate scratches. We start with a heavy-cut compound to level imperfections and remove embedded brake dust staining, followed by a refining polish to bring back a deep, reflective finish ready for ceramic coating.",
      "image": "/images/services/2-stage-wheel-correction.jpg",
      "duration": 360,
      "features": [
        "Intensive wheel cleaning and iron removal",
        "Heavy-cut compounding stage",
        "Refining polish for enhanced clarity",
        "Removes moderate swirl marks, scratches, and oxidation",
        "Restores rich gloss and color depth"
      ]
    },
  
    "3-stage-wheel-correction": {
      "name": "3-Stage Wheel Correction",
      "description": "Multi-step correction using heavy-cut, medium-cut, and final polish for near-perfect wheel finish.",
      "explanation": "Our 3-stage wheel correction is a premium multi-step process for wheels with heavy swirl marks, deeper scratches, or severe oxidation. After a full decontamination and iron fallout treatment, we perform a heavy cut to remove deep defects, a medium cut to refine, and a final polish to maximize gloss and clarity for a show-car result.",
      "image": "/images/services/3-stage-wheel-correction.jpg",
      "duration": 480,
      "features": [
        "Complete chemical and mechanical decontamination",
        "Heavy-cut compounding stage",
        "Medium-cut refining stage",
        "Final polish for extreme gloss",
        "Removes heavy swirl marks, scratches, and oxidation",
        "Ideal preparation for long-term ceramic protection"
      ]
    },
  
    "essential-wheel-ceramic-coating": {
      "name": "Essential Wheel Ceramic Coating",
      "description": "Entry-level ceramic coating for durable, easy-clean wheel protection.",
      "explanation": "Our Essential Wheel Ceramic Coating provides up to one year of protection against UV rays, brake dust, road salt, and water spotting. This affordable upgrade enhances gloss, creates a slick hydrophobic surface, and makes routine wheel cleaning significantly easier.",
      "image": "/images/services/essential-wheel-ceramic-coating.jpg",
      "duration": 300,
      "features": [
        "1-year protection",
        "Hydrophobic, self-cleaning effect",
        "UV and chemical resistance",
        "Enhanced gloss and shine",
        "Simplifies washing and maintenance"
      ]
    },
  
    "enduring-wheel-ceramic-coating": {
      "name": "Enduring Wheel Ceramic Coating",
      "description": "Premium multi-year ceramic coating for lasting wheel protection and deep gloss.",
      "explanation": "Our Enduring Wheel Ceramic Coating delivers 3–5 years of professional-grade protection. It forms a strong chemical bond to resist harsh road contaminants, brake dust, and high-temperature exposure while producing an ultra-slick hydrophobic finish that keeps wheels cleaner for longer.",
      "image": "/images/services/enduring-wheel-ceramic-coating.jpg",
      "duration": 420,
      "features": [
        "3–5 year durability",
        "Superior hydrophobic finish",
        "UV and high-temperature chemical resistance",
        "Extreme gloss and depth",
        "Reduces brake-dust adhesion"
      ]
    },
  
    "elite-wheel-ceramic-coating": {
      "name": "Elite Wheel Ceramic Coating",
      "description": "Ultimate 8-year ceramic coating for maximum wheel protection and show-car gloss.",
      "explanation": "Our Elite Wheel Ceramic Coating offers unmatched, long-term defense—up to eight years—against brake dust, road salt, and chemical exposure. This professional-grade treatment delivers a mirror-like finish, intense hydrophobic properties, and the highest level of UV and temperature resistance available.",
      "image": "/images/services/elite-wheel-ceramic-coating.jpg",
      "duration": 420,
      "features": [
        "Up to 8-year durability",
        "Elite hydrophobic and self-cleaning performance",
        "Maximum UV, chemical, and high-heat resistance",
        "Deep, show-quality gloss and color richness",
        "Professional-grade, long-term protection"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\suvs\addons\wheels\service.json
============================
{
    "Essential Wheel Detail": {
      "tier": 1,
      "cost": 250,
      "features": [
        "1-stage-wheel-correction",
        "essential-wheel-ceramic-coating"
      ]
    },
    "Enduring Wheel Detail": {
      "tier": 2,
      "cost": 500,
      "popular": true,
      "features": [
        "2-stage-wheel-correction",
        "enduring-wheel-ceramic-coating"
      ]
    },
    "Elite Wheel Detail": {
      "tier": 3,
      "cost": 750,
      "features": [
        "3-stage-wheel-correction",
        "elite-wheel-ceramic-coating"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\suvs\addons\windows\features.json
============================
{
    "1-stage-window-correction": {
        "name": "1-Stage Window Correction",
        "description": "Basic window cleaning and light correction",
        "explanation": "Professional window cleaning with light correction to remove minor imperfections",
        "features": [
            "Professional window cleaning",
            "Light correction",
            "Minor imperfection removal",
            "Glass preparation"
        ],
        "duration": "30-45 minutes"
    },
    "essential-window-ceramic-coating": {
        "name": "Essential Window Ceramic Coating",
        "description": "Basic window protection with 1-year durability",
        "explanation": "Entry-level window coating providing basic protection and water repellency",
        "features": [
            "1-year protection",
            "Water repellency",
            "Basic UV protection",
            "Easy maintenance"
        ],
        "duration": "15-30 minutes"
    },
    "enduring-window-ceramic-coating": {
        "name": "Enduring Window Ceramic Coating",
        "description": "Enhanced window protection with 2-year durability",
        "explanation": "Mid-tier window coating offering superior protection and longer-lasting results",
        "features": [
            "2-year protection",
            "Superior water repellency",
            "Advanced UV protection",
            "Hydrophobic properties",
            "Chemical resistance"
        ],
        "duration": "30-45 minutes"
    },
    "elite-window-ceramic-coating": {
        "name": "Elite Window Ceramic Coating",
        "description": "Premium window protection with 3-year durability",
        "explanation": "High-end window coating delivering exceptional protection and maximum clarity",
        "features": [
            "3-year protection",
            "Maximum clarity",
            "Superior UV protection",
            "Ultra hydrophobic properties",
            "Maximum chemical resistance",
            "Self-cleaning properties"
        ],
        "duration": "45-60 minutes"
    }
}


============================
FILE: frontend\src\data\mobile-detailing\pricing\suvs\addons\windows\service.json
============================
{
    "Essential Window Detail": {
        "tier": 1,
        "cost": 250,
        "features": [
            "1-stage-window-correction",
            "essential-window-ceramic-coating"
        ]
    },
    "Enduring Window Detail": {
        "tier": 2,
        "cost": 500,
        "popular": true,
        "features": [
            "1-stage-window-correction",
            "enduring-window-ceramic-coating"
        ]
    },
    "Elite Window Detail": {
        "tier": 3,
        "cost": 750,
        "features": [
            "1-stage-window-correction",
            "elite-window-ceramic-coating"
        ]
    }
}


============================
FILE: frontend\src\data\mobile-detailing\pricing\suvs\service\features.json
============================
{
    "full-exterior-detail": {
      "name": "Full Exterior Detail",
      "description": "Meticulous exterior cleaning and decontamination for a flawless finish.",
      "explanation": "A comprehensive wash and surface prep to remove dirt, road film, and bonded contaminants. Ideal foundation for paint correction or ceramic coating.",
      "features": [
        "Hand wash with pH-balanced shampoo",
        "Reverse osmosis mineral free soak & rinse",
        "Iron and tar decontamination",
        "Clay bar treatment for bonded contaminants",
        "Wheel, tire, and wheel-well deep clean",
        "Surface prep for polishing or coating"
      ],
      "duration": 180
    },
  
    "full-interior-detail": {
      "name": "Full Interior Detail",
      "description": "Deep interior cleaning and rejuvenation of every surface.",
      "explanation": "Removes embedded dirt, allergens, and odors from carpets, seats, and hard surfaces to restore a fresh, like-new cabin environment.",
      "features": [
        "Vacuuming of carpets, mats, and upholstery",
        "Steam cleaning and shampoo extraction as needed",
        "Wipe-down of all plastics, vinyl, and leather",
        "UV-protective interior dressing",
        "Streak-free glass cleaning inside and out"
      ],
      "duration": 180
    },
  
    "fallout-removal": {
      "name": "Chemical Fallout & Iron Removal",
      "description": "Removes embedded rail dust, industrial fallout, and iron particles.",
      "explanation": "Specialized decontamination that dissolves metallic contaminants that washing and claying alone cannot fully remove, preventing long-term paint damage.",
      "features": [
        "Iron-reactive fallout remover",
        "Safe for paint, glass, and wheels",
        "Restores smoothness before correction"
      ],
      "duration": 60
    },
  
    "preparation-detail": {
      "name": "Paint Preparation Detail",
      "description": "Polish and surface inspection to ready paint for correction or coating.",
      "explanation": "Final prep step ensuring panels are perfectly clean and defect-free before machine polishing or ceramic application.",
      "features": [
        "Panel wipe with isopropyl or solvent-based cleaner",
        "Tape masking of sensitive edges and trim",
        "Lighting inspection for hidden defects"
      ],
      "duration": 60
    },
  
    "paint-enhancement": {
      "name": "Paint Enhancement",
      "description": "Single-step polish for added gloss without full correction.",
      "explanation": "A light machine polish to remove minor haze and boost depth, ideal when full correction isn’t required.",
      "features": [
        "Gloss-intensive finishing polish",
        "Removes micro-marring and light oxidation",
        "Enhances color depth and reflection"
      ],
      "duration": 120
    },
  
    "1-stage-paint-correction": {
      "name": "1-Stage Paint Correction",
      "description": "Single-step machine polishing to remove light swirls and boost clarity.",
      "explanation": "A balanced cut-and-polish process that safely removes light defects and restores a brilliant gloss in one pass.",
      "features": [
        "Cut-and-polish with finishing compound",
        "Removes light swirl marks and oxidation",
        "Enhances color vibrancy and gloss"
      ],
      "duration": 240
    },
  
    "2-stage-paint-correction": {
      "name": "2-Stage Paint Correction",
      "description": "Compounding and polishing to eliminate moderate defects.",
      "explanation": "First a heavier compound removes medium scratches and oxidation, followed by a refining polish for depth and clarity.",
      "features": [
        "Heavy cut to level moderate defects",
        "Finishing polish for mirror-like gloss",
        "Removes most wash-induced marring"
      ],
      "duration": 360
    },
  
    "3-stage-paint-correction": {
      "name": "3-Stage Paint Correction",
      "description": "Multi-step compounding, refining, and finishing for near-perfect paintwork.",
      "explanation": "Ideal for heavily marred finishes, this process delivers show-car gloss and extreme clarity through progressive cuts and final jeweling.",
      "features": [
        "Initial heavy cut for deep defects",
        "Intermediate polish for refined leveling",
        "Final jeweling polish for maximum depth and reflection"
      ],
      "duration": 480
    },
  
    "essential-ceramic-coating": {
      "name": "Essential Ceramic Coating",
      "description": "Entry-level ceramic protection with 1-year durability.",
      "explanation": "Adds hydrophobic protection, UV resistance, and a noticeable gloss boost for easy maintenance.",
      "features": [
        "1-year protection",
        "Enhanced gloss and slickness",
        "UV and chemical resistance",
        "Easier washing and drying"
      ],
      "duration": 120
    },
  
    "enduring-ceramic-coating": {
      "name": "Enduring Ceramic Coating",
      "description": "Mid-tier ceramic coating lasting up to 3 years.",
      "explanation": "Professional-grade protection with stronger hydrophobic effect and improved chemical/UV resistance.",
      "features": [
        "Up to 3-year durability",
        "Deep, rich gloss",
        "Superior UV and chemical resistance",
        "Extreme water beading"
      ],
      "duration": 180
    },
  
    "platinum-ceramic-coating": {
      "name": "Platinum Ceramic Coating",
      "description": "Premium 5-year ceramic coating for long-lasting defense.",
      "explanation": "High-end formula delivering exceptional hardness, deep gloss, and easy maintenance for years.",
      "features": [
        "5-year protection",
        "Show-quality finish",
        "Maximum UV shielding",
        "Advanced hydrophobic and self-cleaning properties",
        "High chemical and light scratch resistance"
      ],
      "duration": 240
    },
  
    "elite-ceramic-coating": {
      "name": "Elite Ceramic Coating",
      "description": "Ultimate 7+ year ceramic coating for maximum protection and depth.",
      "explanation": "Flagship coating providing unrivaled gloss, extreme hydrophobics, and the toughest environmental defense available.",
      "features": [
        "7+ year durability",
        "Concours-level gloss and depth",
        "Highest UV, chemical, and abrasion resistance",
        "Ultra-slick, self-cleaning surface"
      ],
      "duration": 300
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\suvs\service\services.json
============================
{
    "Essential Detail": {
      "tier": 1,
      "cost": 500,
      "features": [
        "full-exterior-detail",
        "full-interior-detail",
        "fallout-removal",
        "preparation-detail",
        "paint-enhancement",
        "essential-ceramic-coating"
      ]
    },
    "Enduring Detail": {
      "tier": 2,
      "cost": 750,
      "popular": true,
      "features": [
        "full-exterior-detail",
        "full-interior-detail",
        "fallout-removal",
        "preparation-detail",
        "1-stage-paint-correction",
        "enduring-ceramic-coating"
      ]
    },
    "Platinum Detail": {
      "tier": 3,
      "cost": 1000,
      "features": [
        "full-exterior-detail",
        "full-interior-detail",
        "fallout-removal",
        "preparation-detail",
        "2-stage-paint-correction",
        "platinum-ceramic-coating"
      ]
    },
    "Elite Detail": {
      "tier": 4,
      "cost": 1250,
      "features": [
        "full-exterior-detail",
        "full-interior-detail",
        "fallout-removal",
        "preparation-detail",
        "3-stage-paint-correction",
        "elite-ceramic-coating"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\trucks\addons\engine\features.json
============================
{
    "engine-bay-cleaning": {
      "name": "Engine Bay Cleaning & Degreasing",
      "description": "Safe, low-moisture degreasing and rinse to remove oil, grime, and dust from the engine compartment.",
      "explanation": "We start with a careful dry blow-out and brush work, then apply targeted citrus/solvent-safe degreasers to dissolve oils and road grime. Sensitive electronics and intake areas are protected, while low-pressure rinsing and steam are used as appropriate to avoid moisture intrusion.",
      "image": "/images/services/engine-bay-cleaning.jpg",
      "duration": 90,
      "features": [
        "Dry blow-out and precision brushing",
        "Targeted degreasing of plastics, hoses, and painted metal",
        "Low-pressure rinse and/or steam where appropriate",
        "Masking of sensitive electrical components",
        "Wipe-down to a clean, residue-free finish"
      ]
    },
  
    "engine-bay-enhancement": {
      "name": "Engine Bay Enhancement",
      "description": "Detailing and refinement to restore a uniform, factory-fresh look across plastics, hoses, and painted surfaces.",
      "explanation": "After degreasing, we refine the bay with agitation tools and swabs for tight areas, remove water spots, and brighten painted and metal surfaces. Plastics and rubber are treated for an even, natural sheen without a greasy residue.",
      "image": "/images/services/engine-bay-enhancement.jpg",
      "duration": 120,
      "features": [
        "Tight-area detailing with boar-hair brushes and swabs",
        "Spot removal of residual stains and water spots",
        "Even, non-greasy finish on plastics and rubber",
        "Revives color depth on plastics and hoses",
        "Improves overall presentation for inspections or sale"
      ]
    },
  
    "engine-bay-protection": {
      "name": "Engine Bay Protection",
      "description": "UV- and heat-resistant protectants to keep plastics, rubber, and painted areas looking new longer.",
      "explanation": "We apply a heat-tolerant, UV-resistant dressing or polymer sealant to plastic, vinyl, rubber, and painted areas. This helps reduce fading, cracking, and dust adhesion while making future cleanings faster and safer.",
      "image": "/images/services/engine-bay-protection.jpg",
      "duration": 60,
      "features": [
        "UV-resistant dressing for plastics and rubber",
        "Heat-tolerant formula for engine environments",
        "Light hydrophobic protection on painted surfaces",
        "Reduces dust adhesion and future staining",
        "Natural, low-sheen OEM appearance"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\trucks\addons\engine\service.json
============================
{
    "Essential Engine Bay Detail": {
      "tier": 1,
      "cost": 150,
      "features": [
        "engine-bay-cleaning",
        "engine-bay-protection"
      ]
    },
    "Enduring Engine Bay Detail": {
      "tier": 2,
      "cost": 300,
      "popular": true,
      "features": [
        "engine-bay-cleaning",
        "engine-bay-enhancement",
        "engine-bay-protection"
      ]
    },
    "Elite Engine Bay Detail": {
      "tier": 3,
      "cost": 450,
      "features": [
        "engine-bay-cleaning",
        "engine-bay-enhancement",
        "engine-bay-protection"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\trucks\addons\trim\features.json
============================
{
    "interior-trim-restoration": {
      "name": "Interior Trim Restoration",
      "description": "Comprehensive repair and re-dyeing of faded or discolored interior plastics, vinyl, and rubber.",
      "explanation": "Our Interior Trim Restoration service targets heavily faded, scratched, or discolored trim pieces. We deep clean, remove embedded grime, and professionally re-dye or refinish the material to restore factory color and texture, bringing worn interior panels back to life.",
      "image": "/images/services/interior-trim-restoration.jpg",
      "duration": 240,
      "features": [
        "Thorough cleaning and decontamination",
        "Color-matched re-dye or refinishing",
        "Repairs minor scratches and surface defects",
        "Restores OEM look and texture",
        "Ideal for older or sun-damaged interiors"
      ]
    },
  
    "interior-trim-enhancement": {
      "name": "Interior Trim Enhancement",
      "description": "Detailing and conditioning to refresh lightly worn interior trim and enhance factory appearance.",
      "explanation": "For interiors in good condition but lacking depth or richness, our Interior Trim Enhancement service revitalizes plastics, vinyl, and rubber surfaces. We perform a meticulous cleaning and apply specialized conditioners to enrich color, add subtle sheen, and revive the cabin’s overall look.",
      "image": "/images/services/interior-trim-enhancement.jpg",
      "duration": 180,
      "features": [
        "Gentle deep cleaning and surface preparation",
        "Application of premium interior conditioners",
        "Restores natural luster and color depth",
        "Reduces minor fading and dryness",
        "Leaves a non-greasy, factory-fresh finish"
      ]
    },
  
    "interior-trim-protection": {
      "name": "Interior Trim Protection",
      "description": "Long-term UV and stain protection for interior plastics, vinyl, and rubber components.",
      "explanation": "Our Interior Trim Protection service seals and defends interior surfaces with a high-quality ceramic or polymer coating. This invisible barrier guards against UV damage, fading, staining, and everyday wear, ensuring your freshly restored or new trim maintains its color and durability for years.",
      "image": "/images/services/interior-trim-protection.jpg",
      "duration": 120,
      "features": [
        "Final surface prep and inspection",
        "Application of UV-resistant ceramic/polymer coating",
        "Prevents fading, cracking, and staining",
        "Repels dust and makes future cleaning easier",
        "Maintains a natural, low-sheen appearance"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\trucks\addons\trim\service.json
============================
{
    "Essential Trim Detail": {
      "tier": 1,
      "cost": 200,
      "features": [
        "interior-trim-enhancement",
        "interior-trim-protection"
      ]
    },
    "Enduring Trim Detail": {
      "tier": 2,
      "cost": 350,
      "popular": true,
      "features": [
        "interior-trim-restoration",
        "interior-trim-protection"
      ]
    },
    "Elite Trim Detail": {
      "tier": 3,
      "cost": 500,
      "features": [
        "interior-trim-restoration",
        "interior-trim-enhancement",
        "interior-trim-protection"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\trucks\addons\wheels\features.json
============================
{
    "1-stage-wheel-correction": {
      "name": "1-Stage Wheel Correction",
      "description": "Single-step machine polish to refine gloss and remove light swirls or haze from wheels.",
      "explanation": "Our 1-stage wheel correction is ideal for wheels with light swirl marks, brake-dust staining, or minor imperfections. After a thorough decontamination and iron fallout removal, we perform a single machine polish to restore depth and shine while preparing the surface for long-term protection.",
      "image": "/images/services/1-stage-wheel-correction.jpg",
      "duration": 240,
      "features": [
        "Thorough wheel cleaning and chemical decontamination",
        "Single-step machine polish",
        "Removes light swirl marks and haze",
        "Restores depth, gloss, and clarity",
        "Prepares wheels for ceramic or sealant protection"
      ]
    },
  
    "2-stage-wheel-correction": {
      "name": "2-Stage Wheel Correction",
      "description": "Compounding and polishing to remove moderate defects, brake dust etching, and restore depth on wheels.",
      "explanation": "Our 2-stage wheel correction targets wheels with noticeable swirl marks, oxidation, or moderate scratches. We start with a heavy-cut compound to level imperfections and remove embedded brake dust staining, followed by a refining polish to bring back a deep, reflective finish ready for ceramic coating.",
      "image": "/images/services/2-stage-wheel-correction.jpg",
      "duration": 360,
      "features": [
        "Intensive wheel cleaning and iron removal",
        "Heavy-cut compounding stage",
        "Refining polish for enhanced clarity",
        "Removes moderate swirl marks, scratches, and oxidation",
        "Restores rich gloss and color depth"
      ]
    },
  
    "3-stage-wheel-correction": {
      "name": "3-Stage Wheel Correction",
      "description": "Multi-step correction using heavy-cut, medium-cut, and final polish for near-perfect wheel finish.",
      "explanation": "Our 3-stage wheel correction is a premium multi-step process for wheels with heavy swirl marks, deeper scratches, or severe oxidation. After a full decontamination and iron fallout treatment, we perform a heavy cut to remove deep defects, a medium cut to refine, and a final polish to maximize gloss and clarity for a show-car result.",
      "image": "/images/services/3-stage-wheel-correction.jpg",
      "duration": 480,
      "features": [
        "Complete chemical and mechanical decontamination",
        "Heavy-cut compounding stage",
        "Medium-cut refining stage",
        "Final polish for extreme gloss",
        "Removes heavy swirl marks, scratches, and oxidation",
        "Ideal preparation for long-term ceramic protection"
      ]
    },
  
    "essential-wheel-ceramic-coating": {
      "name": "Essential Wheel Ceramic Coating",
      "description": "Entry-level ceramic coating for durable, easy-clean wheel protection.",
      "explanation": "Our Essential Wheel Ceramic Coating provides up to one year of protection against UV rays, brake dust, road salt, and water spotting. This affordable upgrade enhances gloss, creates a slick hydrophobic surface, and makes routine wheel cleaning significantly easier.",
      "image": "/images/services/essential-wheel-ceramic-coating.jpg",
      "duration": 300,
      "features": [
        "1-year protection",
        "Hydrophobic, self-cleaning effect",
        "UV and chemical resistance",
        "Enhanced gloss and shine",
        "Simplifies washing and maintenance"
      ]
    },
  
    "enduring-wheel-ceramic-coating": {
      "name": "Enduring Wheel Ceramic Coating",
      "description": "Premium multi-year ceramic coating for lasting wheel protection and deep gloss.",
      "explanation": "Our Enduring Wheel Ceramic Coating delivers 3–5 years of professional-grade protection. It forms a strong chemical bond to resist harsh road contaminants, brake dust, and high-temperature exposure while producing an ultra-slick hydrophobic finish that keeps wheels cleaner for longer.",
      "image": "/images/services/enduring-wheel-ceramic-coating.jpg",
      "duration": 420,
      "features": [
        "3–5 year durability",
        "Superior hydrophobic finish",
        "UV and high-temperature chemical resistance",
        "Extreme gloss and depth",
        "Reduces brake-dust adhesion"
      ]
    },
  
    "elite-wheel-ceramic-coating": {
      "name": "Elite Wheel Ceramic Coating",
      "description": "Ultimate 8-year ceramic coating for maximum wheel protection and show-car gloss.",
      "explanation": "Our Elite Wheel Ceramic Coating offers unmatched, long-term defense—up to eight years—against brake dust, road salt, and chemical exposure. This professional-grade treatment delivers a mirror-like finish, intense hydrophobic properties, and the highest level of UV and temperature resistance available.",
      "image": "/images/services/elite-wheel-ceramic-coating.jpg",
      "duration": 420,
      "features": [
        "Up to 8-year durability",
        "Elite hydrophobic and self-cleaning performance",
        "Maximum UV, chemical, and high-heat resistance",
        "Deep, show-quality gloss and color richness",
        "Professional-grade, long-term protection"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\trucks\addons\wheels\service.json
============================
{
    "Essential Wheel Detail": {
      "tier": 1,
      "cost": 250,
      "features": [
        "1-stage-wheel-correction",
        "essential-wheel-ceramic-coating"
      ]
    },
    "Enduring Wheel Detail": {
      "tier": 2,
      "cost": 500,
      "popular": true,
      "features": [
        "2-stage-wheel-correction",
        "enduring-wheel-ceramic-coating"
      ]
    },
    "Elite Wheel Detail": {
      "tier": 3,
      "cost": 750,
      "features": [
        "3-stage-wheel-correction",
        "elite-wheel-ceramic-coating"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\trucks\addons\windows\features.json
============================
{
    "1-stage-window-correction": {
        "name": "1-Stage Window Correction",
        "description": "Basic window cleaning and light correction",
        "explanation": "Professional window cleaning with light correction to remove minor imperfections",
        "features": [
            "Professional window cleaning",
            "Light correction",
            "Minor imperfection removal",
            "Glass preparation"
        ],
        "duration": "30-45 minutes"
    },
    "essential-window-ceramic-coating": {
        "name": "Essential Window Ceramic Coating",
        "description": "Basic window protection with 1-year durability",
        "explanation": "Entry-level window coating providing basic protection and water repellency",
        "features": [
            "1-year protection",
            "Water repellency",
            "Basic UV protection",
            "Easy maintenance"
        ],
        "duration": "15-30 minutes"
    },
    "enduring-window-ceramic-coating": {
        "name": "Enduring Window Ceramic Coating",
        "description": "Enhanced window protection with 2-year durability",
        "explanation": "Mid-tier window coating offering superior protection and longer-lasting results",
        "features": [
            "2-year protection",
            "Superior water repellency",
            "Advanced UV protection",
            "Hydrophobic properties",
            "Chemical resistance"
        ],
        "duration": "30-45 minutes"
    },
    "elite-window-ceramic-coating": {
        "name": "Elite Window Ceramic Coating",
        "description": "Premium window protection with 3-year durability",
        "explanation": "High-end window coating delivering exceptional protection and maximum clarity",
        "features": [
            "3-year protection",
            "Maximum clarity",
            "Superior UV protection",
            "Ultra hydrophobic properties",
            "Maximum chemical resistance",
            "Self-cleaning properties"
        ],
        "duration": "45-60 minutes"
    }
}


============================
FILE: frontend\src\data\mobile-detailing\pricing\trucks\addons\windows\service.json
============================
{
    "Essential Window Detail": {
        "tier": 1,
        "cost": 250,
        "features": [
            "1-stage-window-correction",
            "essential-window-ceramic-coating"
        ]
    },
    "Enduring Window Detail": {
        "tier": 2,
        "cost": 500,
        "popular": true,
        "features": [
            "1-stage-window-correction",
            "enduring-window-ceramic-coating"
        ]
    },
    "Elite Window Detail": {
        "tier": 3,
        "cost": 750,
        "features": [
            "1-stage-window-correction",
            "elite-window-ceramic-coating"
        ]
    }
}


============================
FILE: frontend\src\data\mobile-detailing\pricing\trucks\service\features.json
============================
{
    "full-exterior-detail": {
      "name": "Full Exterior Detail",
      "description": "Meticulous exterior cleaning and decontamination for a flawless finish.",
      "explanation": "A comprehensive wash and surface prep to remove dirt, road film, and bonded contaminants. Ideal foundation for paint correction or ceramic coating.",
      "features": [
        "Hand wash with pH-balanced shampoo",
        "Reverse osmosis mineral free soak & rinse",
        "Iron and tar decontamination",
        "Clay bar treatment for bonded contaminants",
        "Wheel, tire, and wheel-well deep clean",
        "Surface prep for polishing or coating"
      ],
      "duration": 180
    },
  
    "full-interior-detail": {
      "name": "Full Interior Detail",
      "description": "Deep interior cleaning and rejuvenation of every surface.",
      "explanation": "Removes embedded dirt, allergens, and odors from carpets, seats, and hard surfaces to restore a fresh, like-new cabin environment.",
      "features": [
        "Vacuuming of carpets, mats, and upholstery",
        "Steam cleaning and shampoo extraction as needed",
        "Wipe-down of all plastics, vinyl, and leather",
        "UV-protective interior dressing",
        "Streak-free glass cleaning inside and out"
      ],
      "duration": 180
    },
  
    "fallout-removal": {
      "name": "Chemical Fallout & Iron Removal",
      "description": "Removes embedded rail dust, industrial fallout, and iron particles.",
      "explanation": "Specialized decontamination that dissolves metallic contaminants that washing and claying alone cannot fully remove, preventing long-term paint damage.",
      "features": [
        "Iron-reactive fallout remover",
        "Safe for paint, glass, and wheels",
        "Restores smoothness before correction"
      ],
      "duration": 60
    },
  
    "preparation-detail": {
      "name": "Paint Preparation Detail",
      "description": "Polish and surface inspection to ready paint for correction or coating.",
      "explanation": "Final prep step ensuring panels are perfectly clean and defect-free before machine polishing or ceramic application.",
      "features": [
        "Panel wipe with isopropyl or solvent-based cleaner",
        "Tape masking of sensitive edges and trim",
        "Lighting inspection for hidden defects"
      ],
      "duration": 60
    },
  
    "paint-enhancement": {
      "name": "Paint Enhancement",
      "description": "Single-step polish for added gloss without full correction.",
      "explanation": "A light machine polish to remove minor haze and boost depth, ideal when full correction isn’t required.",
      "features": [
        "Gloss-intensive finishing polish",
        "Removes micro-marring and light oxidation",
        "Enhances color depth and reflection"
      ],
      "duration": 120
    },
  
    "1-stage-paint-correction": {
      "name": "1-Stage Paint Correction",
      "description": "Single-step machine polishing to remove light swirls and boost clarity.",
      "explanation": "A balanced cut-and-polish process that safely removes light defects and restores a brilliant gloss in one pass.",
      "features": [
        "Cut-and-polish with finishing compound",
        "Removes light swirl marks and oxidation",
        "Enhances color vibrancy and gloss"
      ],
      "duration": 240
    },
  
    "2-stage-paint-correction": {
      "name": "2-Stage Paint Correction",
      "description": "Compounding and polishing to eliminate moderate defects.",
      "explanation": "First a heavier compound removes medium scratches and oxidation, followed by a refining polish for depth and clarity.",
      "features": [
        "Heavy cut to level moderate defects",
        "Finishing polish for mirror-like gloss",
        "Removes most wash-induced marring"
      ],
      "duration": 360
    },
  
    "3-stage-paint-correction": {
      "name": "3-Stage Paint Correction",
      "description": "Multi-step compounding, refining, and finishing for near-perfect paintwork.",
      "explanation": "Ideal for heavily marred finishes, this process delivers show-car gloss and extreme clarity through progressive cuts and final jeweling.",
      "features": [
        "Initial heavy cut for deep defects",
        "Intermediate polish for refined leveling",
        "Final jeweling polish for maximum depth and reflection"
      ],
      "duration": 480
    },
  
    "essential-ceramic-coating": {
      "name": "Essential Ceramic Coating",
      "description": "Entry-level ceramic protection with 1-year durability.",
      "explanation": "Adds hydrophobic protection, UV resistance, and a noticeable gloss boost for easy maintenance.",
      "features": [
        "1-year protection",
        "Enhanced gloss and slickness",
        "UV and chemical resistance",
        "Easier washing and drying"
      ],
      "duration": 120
    },
  
    "enduring-ceramic-coating": {
      "name": "Enduring Ceramic Coating",
      "description": "Mid-tier ceramic coating lasting up to 3 years.",
      "explanation": "Professional-grade protection with stronger hydrophobic effect and improved chemical/UV resistance.",
      "features": [
        "Up to 3-year durability",
        "Deep, rich gloss",
        "Superior UV and chemical resistance",
        "Extreme water beading"
      ],
      "duration": 180
    },
  
    "platinum-ceramic-coating": {
      "name": "Platinum Ceramic Coating",
      "description": "Premium 5-year ceramic coating for long-lasting defense.",
      "explanation": "High-end formula delivering exceptional hardness, deep gloss, and easy maintenance for years.",
      "features": [
        "5-year protection",
        "Show-quality finish",
        "Maximum UV shielding",
        "Advanced hydrophobic and self-cleaning properties",
        "High chemical and light scratch resistance"
      ],
      "duration": 240
    },
  
    "elite-ceramic-coating": {
      "name": "Elite Ceramic Coating",
      "description": "Ultimate 7+ year ceramic coating for maximum protection and depth.",
      "explanation": "Flagship coating providing unrivaled gloss, extreme hydrophobics, and the toughest environmental defense available.",
      "features": [
        "7+ year durability",
        "Concours-level gloss and depth",
        "Highest UV, chemical, and abrasion resistance",
        "Ultra-slick, self-cleaning surface"
      ],
      "duration": 300
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\pricing\trucks\service\services.json
============================
{
    "Essential Detail": {
      "tier": 1,
      "cost": 500,
      "features": [
        "full-exterior-detail",
        "full-interior-detail",
        "fallout-removal",
        "preparation-detail",
        "paint-enhancement",
        "essential-ceramic-coating"
      ]
    },
    "Enduring Detail": {
      "tier": 2,
      "cost": 750,
      "popular": true,
      "features": [
        "full-exterior-detail",
        "full-interior-detail",
        "fallout-removal",
        "preparation-detail",
        "1-stage-paint-correction",
        "enduring-ceramic-coating"
      ]
    },
    "Platinum Detail": {
      "tier": 3,
      "cost": 1000,
      "features": [
        "full-exterior-detail",
        "full-interior-detail",
        "fallout-removal",
        "preparation-detail",
        "2-stage-paint-correction",
        "platinum-ceramic-coating"
      ]
    },
    "Elite Detail": {
      "tier": 4,
      "cost": 1250,
      "features": [
        "full-exterior-detail",
        "full-interior-detail",
        "fallout-removal",
        "preparation-detail",
        "3-stage-paint-correction",
        "elite-ceramic-coating"
      ]
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\README.md
============================
# Mobile Detailing - Modular Config Approach

## Overview

Mobile detailing uses a **modular config approach** instead of the legacy `site.json` monolithic file. This provides better organization, easier maintenance, and clearer separation of concerns.

## File Structure

```
mobile-detailing/
├── index.ts                    # Config loader/assembler
├── assets.json                 # Logo, hero images, service thumbnails
├── content-defaults.json       # Default text content (hero, reviews, FAQ)
├── seo-defaults.json           # SEO metadata (title, description, keywords)
├── faq/                        # FAQ categories (general, pricing, scheduling, etc.)
├── services/                   # Service definitions (auto-detailing, ceramic-coating, etc.)
├── pricing/                    # Pricing by vehicle type (cars, trucks, SUVs, RVs, boats)
└── gallery/                    # Gallery images
```

## How It Works

### 1. Config Loader (`index.ts`)

The `loadMobileDetailingConfig()` function:
- Imports the modular JSON files
- Assembles them into a `MainSiteConfig` object
- Transforms data structures to match the expected format
- Returns a complete config compatible with legacy `site.json` format

### 2. DataContext Integration

The `DataContext` automatically detects mobile-detailing and uses the modular loader:

```typescript
if (industry === 'mobile-detailing') {
  const { loadMobileDetailingConfig } = await import('@/data/mobile-detailing');
  return await loadMobileDetailingConfig();
}
```

### 3. Hook Support

Both `useIndustryConfig` and `useIndustrySiteData` hooks support the modular approach transparently.

## Benefits

### ✅ Better Organization
- Separate files for different concerns (assets, content, SEO)
- Easier to find and update specific data
- Clear file naming conventions

### ✅ Reduced Merge Conflicts
- Multiple developers can work on different config files simultaneously
- Changes to assets don't conflict with content changes

### ✅ Improved Maintainability
- Smaller, focused files are easier to understand
- Clear structure makes it obvious where to add new data

### ✅ Type Safety
- Each JSON file can have its own schema
- Easier to validate individual pieces

## Usage

Components don't need to change - they continue to use `useData()` or `useIndustryConfig()` as before:

```tsx
const { siteConfig } = useData();
const heroTitle = siteConfig?.hero.h1; // Works automatically!
```

## Adding New Data

### To add a new hero image:
Edit `assets.json` → `hero` array

### To update default content:
Edit `content-defaults.json`

### To modify SEO metadata:
Edit `seo-defaults.json`

### To add a new service:
Create a new file in `services/` directory

## Migration from site.json

Other industries (pet-grooming, maid-service, lawncare) still use `site.json`. To migrate them:

1. Create an `index.ts` loader (copy from mobile-detailing)
2. Split `site.json` into modular files:
   - `assets.json` - logo, images, thumbnails
   - `content-defaults.json` - text content
   - `seo-defaults.json` - SEO metadata
3. Update the loader to import and assemble your files
4. Test thoroughly
5. Delete old `site.json`

## Type Compatibility Note

Due to a legacy inconsistency, the config includes both `hero.images` (lowercase, type-compliant) and `hero.Images` (capital I, for component compatibility). This will be resolved when we update the `ImageCarousel` component to use the correct property name.



============================
FILE: frontend\src\data\mobile-detailing\seo-defaults.json
============================
{
  "title": "Premium Mobile Detailing — Cars, Boats, & RVs",
  "description": "Professional mobile detailing services. Paint correction, ceramic coating, PPF, and deep interior cleaning for cars, boats, and RVs.",
  "keywords": "mobile detailing, auto detailing, car detailing, ceramic coating, paint correction, paint protection film, PPF, mobile car wash, professional detailing",
  "ogImage": "/mobile-detailing/images/hero/hero1.png",
  "twitterImage": "/mobile-detailing/images/hero/hero1.png",
  "canonicalPath": "/",
  "robots": "index,follow"
}


============================
FILE: frontend\src\data\mobile-detailing\services\auto-detailing.json
============================
{
    "id": "auto-detailing",
    "slug": "auto-detailing",
    "route": "/service/auto-detailing",
    "title": "Auto Detailing",
    "shortDescription": "Complete interior and exterior detailing service",
  
    "seo": {
      "metaTitle": "Auto Detailing",
      "metaDescription": "Thorough interior and exterior detailing that restores clarity, cleanliness, and protection—ideal prep for coatings and PPF.",
      "keywords": ["auto detailing", "mobile detailing", "paint decontamination", "interior deep clean", "sealant"],
      "canonicalPath": "/service/auto-detailing",
      "ogImage": "/mobile-detailing/images/services/auto-detailing/hero.jpg",
      "robots": "index,follow"
    },
  
    "hero": {
      "image": {
        "src": "/mobile-detailing/images/services/auto-detailing/hero.png",
        "alt": "Professional auto detailing service",
        "caption": "Premium mobile auto detailing at your location"
      },
      "headline": "Auto Detailing",
      "subheadline": "Thorough interior and exterior detailing that restores clarity, cleanliness, and protection—setting the stage for coatings and film.",
      "ctas": [
        { "label": "Book Now", "href": "/book?service=auto-detailing" },
        { "label": "Request Quote", "href": "/quote?service=auto-detailing" }
      ]
    },
  
    "overview": {
      "summary": "Professional mobile auto detailing service that brings the detail shop to your location.",
      "benefits": [
        "Convenient mobile service",
        "Professional equipment and products",
        "Thorough interior and exterior cleaning"
      ],
      "features": [
        "Water spot removal",
        "Paint decontamination",
        "Interior deep cleaning",
        "Protective sealant application"
      ]
    },
  
    "whatItIs": {
      "description": "Complete interior + exterior service focused on deep cleaning, decontamination, and entry-level protection. The ideal baseline before paint correction, ceramic coating, or paint protection film (PPF).",
      "benefits": [
        "Removes bonded contaminants (rail dust, overspray, brake fallout)",
        "Restores gloss and clarity with safe wash + clay process",
        "Interior deep clean: carpets, seats, vents, touch points",
        "Protective sealant applied for short-term hydrophobics",
        "Prepares paint for advanced services (Correction, Coating, PPF)"
      ],
      "image": {
        "src": "/mobile-detailing/images/services/auto-detailing/what-it-is.png",
        "alt": "Auto detailing explanation graphic"
      }
    },
  
    "process": {
      "title": "Our Auto Detailing Process",
      "steps": [
        {
          "number": 1,
          "title": "Assessment & Prep",
          "bullets": [
            "Inspection of paint and interior condition",
            "Reverse Osmosis mineral-free pre-rinse",
            "Foam and hand wash with contact-safe media"
          ],
          "image": { "src": "/mobile-detailing/images/services/auto-detailing/process-1.png", "alt": "Assessment and prep" }
        },
        {
          "number": 2,
          "title": "Decontamination",
          "bullets": [
            "Fallout removal + clay treatment",
            "Removal of iron & bonded contaminants",
            "Surface prepped for correction and protection"
          ],
          "image": { "src": "/mobile-detailing/images/services/auto-detailing/process-2.png", "alt": "Decontamination step" }
        },
        {
          "number": 3,
          "title": "Exterior & Interior Protection",
          "bullets": [
            "Exterior paint sealant and enhancement",
            "Interior vacuum and steam/spot clean",
            "Trim and plastics dressed satin-matte"
          ],
          "image": { "src": "/mobile-detailing/images/services/auto-detailing/process-3.jpg", "alt": "Protection step" }
        }
      ]
    },
  
    "results": {
      "bullets": [
        "Crisp, glossy finish that restores your vehicle's showroom look",
        "Fresh, hygienic cabin with deep interior cleaning",
        "Contaminant-free surface that maximizes Ceramic Coating/PPF bond"
      ],
      "images": {
        "before": { "src": "/mobile-detailing/images/services/auto-detailing/before.png", "alt": "Before detailing" },
        "after": { "src": "/mobile-detailing/images/services/auto-detailing/after.png", "alt": "After detailing" }
      },
      "containerSize": "large"
    },
  
    "gallery": {
      "title": "Auto Detailing Gallery",
      "images": [
        { "id": "1", "src": "/images/services/auto-detailing/hero.png", "alt": "Auto detailing service", "caption": "Professional auto detailing" }
      ]
    },
  
    "faq": {
      "title": "Auto Detailing FAQ",
      "items": [
        {
          "q": "How long does auto detailing take?",
          "a": "Typically 2-4 hours for standard vehicles and details. Paint correction, ceramic coating, and PPF typically take much longer."
        },
        {
          "q": "Do you bring water and power?",
          "a": "Yes. We are fully mobile and bring filtered water, power, and all professional equipment."
        },
        {
          "q": "Will detailing remove scratches or swirls?",
          "a": "No. Paint correction is needed to removes swirls and light scratches; deep defects may need automotive bodywork."
        },
        {
          "q": "Is detailing required before Ceramic Coating or PPF?",
          "a": "Yes. A pristine, contaminant-free surface is essential and benefits from multi-stage correction."
        }
      ]
    },
  
    "cta": {
      "title": "Ready to get started?",
      "description": "",
      "primary": { "label": "Book Now", "href": "/book?service=auto-detailing" },
      "secondary": { "label": "Request Quote", "href": "/quote?service=auto-detailing" }
    },
  
    "jsonLd": {
      "service": {
        "@context": "https://schema.org",
        "@type": "Service",
        "name": "Auto Detailing",
        "serviceType": "Auto Detailing",
        "provider": { "@type": "Organization", "name": "Mobile Detail Hub" },
        "areaServed": { "@type": "Place", "name": "{CITY}, {STATE}" },
        "description": "Thorough interior and exterior detailing that restores clarity, cleanliness, and protection.",
        "brand": "Mobile Detail Hub",
        "offers": {
          "@type": "AggregateOffer",
          "priceCurrency": "USD",
          "lowPrice": 150,
          "highPrice": 250,
          "offerCount": 2
        }
      },
      "faq": {
        "@context": "https://schema.org",
        "@type": "FAQPage",
        "mainEntity": [
          {
            "@type": "Question",
            "name": "How long does auto detailing take?",
            "acceptedAnswer": { "@type": "Answer", "text": "Typically 5–8 hours for standard vehicles and details." }
          },
          {
            "@type": "Question",
            "name": "Do you bring water and power?",
            "acceptedAnswer": { "@type": "Answer", "text": "Yes. We bring filtered water, power, and all professional equipment." }
          }
        ]
      },
      "breadcrumbs": {
        "@context": "https://schema.org",
        "@type": "BreadcrumbList",
        "itemListElement": [
          { "@type": "ListItem", "position": 1, "name": "Services", "item": "{ORIGIN}/services" },
          { "@type": "ListItem", "position": 2, "name": "Auto Detailing", "item": "{ORIGIN}/service/auto-detailing" }
        ]
      }
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\services\ceramic-coating.json
============================
{
    "id": "ceramic-coating",
    "slug": "ceramic-coating",
    "route": "/service/ceramic-coating",
    "title": "Ceramic Coating",
    "shortDescription": "Long-term hydrophobic protection and gloss with professional SiO₂/ceramic coatings",
  
    "seo": {
      "metaTitle": "Ceramic Coating for Cars | Mobile Detail Hub",
      "metaDescription": "Professional ceramic coating service with proper paint prep and correction. Deep gloss, hydrophobics, and long-term protection (1–8 year options).",
      "keywords": [
        "ceramic coating",
        "SiO2 coating",
        "nano ceramic",
        "graphene ceramic coating",
        "paint protection",
        "hydrophobic coating",
        "car ceramic coating",
        "professional ceramic coating"
      ],
      "canonicalPath": "/service/ceramic-coating",
      "ogImage": "/images/services/ceramic-coating/hero.png",
      "robots": "index,follow"
    },
  
    "hero": {
      "image": {
        "src": "/mobile-detailing/images/services/ceramic-coating/hero.png",
        "alt": "Professional ceramic coating being applied to vehicle paint",
        "caption": "Pro-grade ceramic coatings installed with proper prep and correction"
      },
      "headline": "Ceramic Coating",
      "subheadline": "Locked-in gloss, slickness, and easy maintenance—installed with proper decontamination and paint correction.",
      "ctas": [
        { "label": "Book Now", "href": "/book?service=ceramic-coating" },
        { "label": "Request Quote", "href": "/quote?service=ceramic-coating" }
      ]
    },
  
    "overview": {
      "summary": "Durable SiO₂/ceramic protection that bonds to paint, trim, and wheels for long-term gloss and easier washing.",
      "benefits": [
        "Long-term hydrophobic protection",
        "Enhanced depth and gloss",
        "UV resistance and chemical resistance",
        "Easier washing and drying"
      ],
      "features": [
        "Professional surface prep and panel wipe",
        "Paint correction tailored to condition",
        "Multi-year coating options (1–8 years)",
        "Optional wheel/trim/glass coating add-ons"
      ]
    },
  
    "whatItIs": {
      "description": "A pro-grade, nano-ceramic layer applied to your clear coat. It cures into a dense, slick barrier that boosts gloss, resists chemicals/UV, and keeps paint cleaner between washes.",
      "benefits": [
        "Deep, mirror-like gloss that makes color pop",
        "Hydrophobic surface: water beads/sheets off to reduce spotting",
        "Strong resistance to chemicals, UV, and road grime",
        "Easier, faster maintenance with less dirt bonding",
        "Durable, semi-permanent protection measured in years"
      ],

      "chart": {
        "type": "protection-comparison",
        "title": "How Ceramic Coating Compares",
        "description": "See how ceramic coating stacks up against traditional protection methods",
        "seo": {
          "title": "Ceramic Coating vs Wax vs Sealant vs PPF Comparison",
          "description": "Compare protection levels, longevity, ease of maintenance, and rock chip resistance across different paint protection options"
        },
        "data": {
          "wax": { "protection": 1, "longevity": 1, "ease": 2, "chipResistance": 1 },
          "sealant": { "protection": 2, "longevity": 2, "ease": 2, "chipResistance": 1 },
          "ceramic": { "protection": 4, "longevity": 4, "ease": 4, "chipResistance": 1 },
          "ppf": { "protection": 5, "longevity": 5, "ease": 3, "chipResistance": 5 }
        }
      }
    },
  
    "process": {
      "title": "Our Ceramic Coating Process",
      "steps": [
        {
          "number": 1,
          "title": "Deep Clean & Decontamination",
          "bullets": [
            "Foam pre-wash and contact wash",
            "Iron/fallout removal and clay bar treatment",
            "Thorough drying and masking of sensitive areas"
          ],
          "image": { "src": "/mobile-detailing/images/services/ceramic-coating/process-1.png", "alt": "Decontamination prior to coating" }
        },
        {
          "number": 2,
          "title": "Paint Correction",
          "bullets": [
            "Single or multi-stage correction based on condition",
            "Gloss enhancement and defect reduction",
            "Panel wipe to remove polishing oils"
          ],
          "image": { "src": "/mobile-detailing/images/services/ceramic-coating/process-2.png", "alt": "Paint correction step before coating" }
        },
        {
          "number": 3,
          "title": "Coating Application & Cure",
          "bullets": [
          "Even application per panel with proper leveling",
          "IR/controlled cure where applicable",
          "Final inspection and aftercare guidance"
          ],
          "image": { "src": "/mobile-detailing/images/services/ceramic-coating/process-3.png", "alt": "Applying ceramic coating and curing" }
        }
      ]
    },
  
    "results": {
      "bullets": [
        "Deep, high-gloss finish with crisp reflections",
        "Strong hydrophobics for faster, easier washes",
        "Longer-lasting protection vs. waxes and sealants"
      ],
      "images": {
        "before": { "src": "/mobile-detailing/images/services/ceramic-coating/before.png", "alt": "Before ceramic coating" },
        "after": { "src": "/mobile-detailing/images/services/ceramic-coating/after.png", "alt": "After ceramic coating" }
      },
      "containerSize": "large"
    },
  
    "gallery": {
      "title": "Ceramic Coating Gallery",
      "images": [
        { "id": "1", "src": "/mobile-detailing/images/services/ceramic-coating/hero.png", "alt": "Ceramic coating high gloss finish", "caption": "Locked-in gloss and protection" }
      ]
    },
  
    "pricing": {
      "title": "Ceramic Coating Packages",
      "tiers": [
        {
          "id": "essential",
          "name": "Essential (≈1–2 Year)",
          "price": { "label": "From $700", "min": 700, "currency": "USD" },
          "description": "Entry ceramic protection with single-stage correction.",
          "popular": false,
          "features": [
            "Decon wash + clay + iron removal",
            "Single-stage paint enhancement",
            "1–2 year ceramic coating on paint",
            "Basic aftercare kit"
          ]
        },
        {
          "id": "enduring",
          "name": "Enduring (≈3–5 Year)",
          "price": { "label": "From $1,200", "min": 1200, "currency": "USD" },
          "description": "Multi-year coating with elevated correction and durability.",
          "popular": true,
          "features": [
            "Enhanced decon and multi-stage correction (as needed)",
            "3–5 year ceramic coating on paint",
            "Coated trim & faces of wheels (light)",
            "Aftercare kit + first-wash guidance"
          ]
        },
        {
          "id": "elite",
          "name": "Elite (≈7–8 Year)",
          "price": { "label": "From $1,800", "min": 1800, "currency": "USD" },
          "description": "Maximum longevity and gloss with premium coating chemistry.",
          "popular": false,
          "features": [
            "Comprehensive correction to high-gloss finish",
            "7–8 year ceramic coating on paint",
            "Optional wheel-off & glass coating add-ons",
            "Maintenance plan & warranty requirements"
          ]
        }
      ],
      "notes": "Final price varies by vehicle size, paint condition, correction scope, and add-ons (wheels, glass, trim, interior, PPF synergy)."
    },
  
    "faq": {
      "title": "Ceramic Coating FAQ",
      "items": [
        {
          "q": "Does ceramic coating replace PPF?",
          "a": "No. Coatings add gloss, hydrophobics, and chemical resistance; PPF is a physical barrier that absorbs rock chips and impacts. Many owners choose both."
        },
        {
          "q": "Is paint correction required?",
          "a": "Yes. Coatings lock in the finish. We correct paint to a suitable level first so the coating bonds well and enhances a refined surface."
        },
        {
          "q": "How long before I can wash the car?",
          "a": "Avoid water for 12–24 hours if possible; avoid soaps/chemicals for 5–7 days while the coating fully cures. We’ll provide aftercare steps."
        },
        {
          "q": "What maintenance is recommended?",
          "a": "pH-neutral washes, proper towels/mitts, and periodic topper/booster after inspections. Annual maintenance helps preserve performance and warranties."
        }
      ]
    },
  
    "cta": {
      "title": "Ready for locked-in gloss?",
      "description": "",
      "primary": { "label": "Book Now", "href": "/book?service=ceramic-coating" },
      "secondary": { "label": "Request Quote", "href": "/quote?service=ceramic-coating" }
    },
  
    "jsonLd": {
      "service": {
        "@context": "https://schema.org",
        "@type": "Service",
        "name": "Ceramic Coating",
        "serviceType": "Automotive Ceramic Coating",
        "provider": { "@type": "Organization", "name": "Mobile Detail Hub" },
        "areaServed": { "@type": "Place", "name": "{CITY}, {STATE}" },
        "description": "Professional ceramic coating with proper paint correction for long-term gloss, hydrophobics, and chemical resistance.",
        "brand": "Mobile Detail Hub",
        "offers": {
          "@type": "AggregateOffer",
          "priceCurrency": "USD",
          "lowPrice": 700,
          "highPrice": 1800,
          "offerCount": 3
        }
      },
      "faq": {
        "@context": "https://schema.org",
        "@type": "FAQPage",
        "mainEntity": [
          {
            "@type": "Question",
            "name": "Does ceramic coating replace PPF?",
            "acceptedAnswer": {
              "@type": "Answer",
              "text": "No. Coatings add gloss, hydrophobics, and chemical resistance; PPF is a physical barrier for rock chips and impacts. Many owners choose both."
            }
          },
          {
            "@type": "Question",
            "name": "Is paint correction required?",
            "acceptedAnswer": {
              "@type": "Answer",
              "text": "Yes. Coatings lock in the finish. Correction ensures optimal bonding and a refined appearance before coating."
            }
          }
        ]
      },
      "breadcrumbs": {
        "@context": "https://schema.org",
        "@type": "BreadcrumbList",
        "itemListElement": [
          { "@type": "ListItem", "position": 1, "name": "Services", "item": "{ORIGIN}/services" },
          { "@type": "ListItem", "position": 2, "name": "Ceramic Coating", "item": "{ORIGIN}/service/ceramic-coating" }
        ]
      }
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\services\marine-detailing.json
============================
{
    "id": "marine-detailing",
    "slug": "marine-detailing",
    "route": "/service/marine-detailing",
    "title": "Boat & Marine Detailing",
    "shortDescription": "Salt removal, oxidation treatment, and UV protection for boats and watercraft",
  
    "seo": {
      "metaTitle": "Boat Detailing (Marine) | Mobile Detail Hub",
      "metaDescription": "Professional mobile boat detailing: salt & mineral removal, hull/deck decontamination, oxidation treatment, and marine-grade UV protection for lasting gloss and performance.",
      "keywords": [
        "boat detailing",
        "marine detailing",
        "hull cleaning",
        "gelcoat oxidation removal",
        "salt removal",
        "UV protection",
        "barnacle removal",
        "deck cleaning"
      ],
      "canonicalPath": "/service/marine-detailing",
      "ogImage": "/mobile-detailing/images/services/marine-detailing/hero.png",
      "robots": "index,follow"
    },
  
    "hero": {
      "image": {
        "src": "/mobile-detailing/images/services/marine-detailing/hero.png",
        "alt": "Professional boat and marine detailing service",
        "caption": "Premium mobile marine detailing at your marina or dock"
      },
      "headline": "Boat & Marine Detailing",
      "subheadline": "Salt removal, oxidation treatment, and marine-grade UV protection—engineered for harsh marine environments.",
      "ctas": [
        { "label": "Book Now", "href": "/book?service=marine-detailing" },
        { "label": "Request Quote", "href": "/quote?service=marine-detailing" }
      ]
    },
  
    "overview": {
      "summary": "Professional mobile marine detailing designed for boats, yachts, and watercraft exposed to salt, sun, and marine growth.",
      "benefits": [
        "Convenient dockside or marina service",
        "Marine-grade products and techniques",
        "Improved gloss, protection, and efficiency"
      ],
      "features": [
        "Fresh-water rinse and salt neutralizer",
        "Hull & deck decontamination",
        "Gelcoat oxidation treatment",
        "Marine-grade UV sealant or wax"
      ]
    },
  
    "whatItIs": {
      "description": "A complete marine-grade service focused on salt removal, decontamination, and UV protection for gelcoat and marine surfaces. Ideal prep before advanced marine coatings or seasonal protection.",
      "benefits": [
        "Removes salt, minerals, and marine contaminants (algae, barnacles, spray)",
        "Restores gloss on gelcoat with safe wash + mechanical decon",
        "Treats light oxidation and brightens hardware",
        "Applies marine-grade UV sealant for hydrophobics and easier washing",
        "Preps hull/deck for long-term ceramic or polymer coatings"
      ],
      "image": {
        "src": "/mobile-detailing/images/services/marine-detailing/what-it-is.jpg",
        "alt": "Marine detailing explanation graphic"
      }
    },
  
    "process": {
      "title": "Our Marine Detailing Process",
      "steps": [
        {
          "number": 1,
          "title": "Marine Assessment & Prep",
          "bullets": [
            "Inspection of hull, deck, gelcoat, and hardware",
            "Fresh-water pre-rinse with salt neutralizer",
            "Marine-safe foam wash and contact wash"
          ],
          "image": { "src": "/mobile-detailing/images/services/marine-detailing/process-1.jpg", "alt": "Marine assessment and preparation" }
        },
        {
          "number": 2,
          "title": "Decontamination & Oxidation Care",
          "bullets": [
            "Hull & deck decon (iron, mineral, organic growth)",
            "Spot barnacle/marine growth removal (where accessible)",
            "Light gelcoat oxidation treatment to restore clarity"
          ],
          "image": { "src": "/mobile-detailing/images/services/marine-detailing/process-2.png", "alt": "Marine decontamination and oxidation treatment" }
        },
        {
          "number": 3,
          "title": "Protection & Finishing",
          "bullets": [
            "Marine-grade UV sealant or wax on gelcoat",
            "Non-slip deck & vinyl cleaned and dressed appropriately",
            "Metals polished; plastics restored to satin-matte"
          ],
          "image": { "src": "/mobile-detailing/images/services/marine-detailing/process-3.png", "alt": "Marine protection and finishing" }
        }
      ]
    },
  
    "results": {
      "bullets": [
        "Salt-free, glossy hull and deck for easier maintenance",
        "UV-protected gelcoat to resist fading and chalking",
        "Clean, decontaminated surfaces that enhance coating longevity"
      ],
      "images": {
        "before": { "src": "/mobile-detailing/images/services/marine-detailing/before.png", "alt": "Boat before detailing" },
        "after": { "src": "/mobile-detailing/images/services/marine-detailing/after.jpg", "alt": "Boat after detailing" }
      },
      "containerSize": "large"
    },
  
    "gallery": {
      "title": "Marine Detailing Gallery",
      "images": [
        { "id": "1", "src": "/mobile-detailing/images/services/marine-detailing/hero.png", "alt": "Marine detailing service", "caption": "Professional marine detailing" }
      ]
    },
  

  

  
    "cta": {
      "title": "Ready to protect your vessel?",
      "description": "",
      "primary": { "label": "Book Now", "href": "/book?service=marine-detailing" },
      "secondary": { "label": "Request Quote", "href": "/quote?service=marine-detailing" }
    },
  
    "jsonLd": {
      "service": {
        "@context": "https://schema.org",
        "@type": "Service",
        "name": "Marine Detailing",
        "serviceType": "Boat Detailing",
        "provider": { "@type": "Organization", "name": "Mobile Detail Hub" },
        "areaServed": { "@type": "Place", "name": "{CITY}, {STATE}" },
        "description": "Professional mobile marine detailing: salt removal, decontamination, oxidation care, and UV protection for boats and watercraft.",
        "brand": "Mobile Detail Hub",
        "offers": {
          "@type": "AggregateOffer",
          "priceCurrency": "USD",
          "lowPrice": 200,
          "highPrice": 350,
          "offerCount": 2
        }
      },
      "faq": {
        "@context": "https://schema.org",
        "@type": "FAQPage",
        "mainEntity": [
          {
            "@type": "Question",
            "name": "How long does marine detailing take?",
            "acceptedAnswer": { "@type": "Answer", "text": "Typically 6–10 hours for standard boats; larger vessels can take 1–3 days depending on size and condition." }
          },
          {
            "@type": "Question",
            "name": "Do you service marinas and docks?",
            "acceptedAnswer": { "@type": "Answer", "text": "Yes. We are fully mobile and can service most marinas, docks, and boat ramps (subject to site permissions)." }
          }
        ]
      },
      "breadcrumbs": {
        "@context": "https://schema.org",
        "@type": "BreadcrumbList",
        "itemListElement": [
          { "@type": "ListItem", "position": 1, "name": "Services", "item": "{ORIGIN}/services" },
          { "@type": "ListItem", "position": 2, "name": "Boat & Marine Detailing", "item": "{ORIGIN}/service/marine-detailing" }
        ]
      }
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\services\paint-correction.json
============================
{
    "id": "paint-correction",
    "slug": "paint-correction",
    "route": "/service/paint-correction",
    "title": "Paint Correction",
    "shortDescription": "Machine polishing to remove swirls, haze, and oxidation for a deep, mirror-like finish",
  
    "seo": {
      "metaTitle": "Paint Correction (1–3 Stage) | Mobile Detail Hub",
      "metaDescription": "Professional paint correction to remove swirls, light scratches, and oxidation. Single- and multi-stage polishing to restore gloss and clarity—ideal before ceramic coating or PPF.",
      "keywords": [
        "paint correction",
        "machine polishing",
        "swirl removal",
        "scratch removal",
        "oxidation removal",
        "cut and polish",
        "paint enhancement",
        "polishing compound"
      ],
      "canonicalPath": "/service/paint-correction",
      "ogImage": "/images/services/paint-correction/hero.jpg",
      "robots": "index,follow"
    },
  
    "hero": {
      "image": {
        "src": "/mobile-detailing/images/services/paint-correction/hero.jpg",
        "alt": "Professional paint correction machine polishing a vehicle panel",
        "caption": "Defect removal and gloss restoration with calibrated polishing systems"
      },
      "headline": "Paint Correction",
      "subheadline": "Remove swirls, haze, and oxidation with single- or multi-stage polishing—perfect prep for ceramic coating or film.",
      "ctas": [
        { "label": "Book Now", "href": "/book?service=paint-correction" },
        { "label": "Request Quote", "href": "/quote?service=paint-correction" }
      ]
    },
  
    "overview": {
      "summary": "A precision polishing service that levels micro-defects in clear coat to dramatically improve gloss, clarity, and depth.",
      "benefits": [
        "Removes swirls, light scratches, and wash marring",
        "Restores depth, clarity, and color accuracy",
        "Prepares paint for long-term ceramic or PPF protection"
      ],
      "features": [
        "Paint depth & defect assessment with lighting",
        "Safe test-spot to dial in pad/polish system",
        "Measured single- or multi-stage correction",
        "Panel wipe to ensure true, filler-free results"
      ]
    },
  
    "whatItIs": {
      "description": "Paint correction uses abrasives and machine polishers to safely level microscopic defects in your clear coat. Unlike glazes or fillers, true correction removes defects rather than hiding them, revealing crisp reflections and maximum gloss.",
      "benefits": [
        "Permanent removal of many light-to-moderate defects",
        "Significantly reduced haze and improved reflectivity",
        "Creates a pristine surface that maximizes coating/PPF bond"
      ],
      "image": {
        "src": "/mobile-detailing/images/services/paint-correction/what-it-is.png",
        "alt": "Close-up before/after of corrected automotive paint"
      }
    },
  
    "process": {
      "title": "Our Paint Correction Process",
      "steps": [
        {
          "number": 1,
          "title": "Decontamination & Prep",
          "bullets": [
            "Foam pre-wash, contact wash, and thorough dry",
            "Iron/fallout remover and clay bar treatment",
            "Mask sensitive trim and edges"
          ],
          "image": { "src": "/mobile-detailing/images/services/paint-correction/process-1.jpg", "alt": "Decontamination and preparation before polishing" }
        },
        {
          "number": 2,
          "title": "Test Spot & Correction",
          "bullets": [
            "Lighting-based inspection and paint readings (where applicable)",
            "Test spot to choose optimal pad/polish combo",
            "Single or multi-stage machine polishing to target defects"
          ],
          "image": { "src": "/mobile-detailing/images/services/paint-correction/process-2.jpg", "alt": "Machine polishing and defect removal" }
        },
        {
          "number": 3,
          "title": "Refinement & Protection",
          "bullets": [
            "Finishing polish to maximize clarity and gloss",
            "Panel wipe to remove polishing oils (filler-free check)",
            "Sealant or ceramic coating application (if selected)"
          ],
          "image": { "src": "/mobile-detailing/images/services/paint-correction/process-3.jpg", "alt": "Refinement and protection after correction" }
        }
      ]
    },
  
    "results": {
      "bullets": [
        "Dramatically improved gloss and mirror-like reflections",
        "Swirl and haze reduction for a cleaner, deeper look",
        "Perfect foundation for ceramic coating or PPF"
      ],
      "images": {
        "before": { "src": "/mobile-detailing/images/services/paint-correction/before.jpg", "alt": "Paint before correction with visible swirls" },
        "after": { "src": "/mobile-detailing/images/services/paint-correction/after.jpg", "alt": "Paint after correction with high gloss" }
      },
      "containerSize": "large"
    },
  
    "gallery": {
      "title": "Paint Correction Gallery",
      "images": [
        { "id": "1", "src": "/mobile-detailing/images/services/paint-correction/hero.jpg", "alt": "High-gloss paint after correction", "caption": "Defect removal and high-gloss finish" }
      ]
    },
  
    "pricing": {
      "title": "Paint Correction Packages",
      "tiers": [
        {
          "id": "1-stage",
          "name": "1-Stage Enhancement",
          "price": { "label": "From $400", "min": 400, "currency": "USD" },
          "description": "Single-step polish to boost gloss and remove light swirls.",
          "popular": false,
          "features": [
            "Decon wash + clay + iron removal",
            "Single-step polishing (finish-focused)",
            "Panel wipe + sealant (or coating add-on)"
          ]
        },
        {
          "id": "2-stage",
          "name": "2-Stage Correction",
          "price": { "label": "From $900", "min": 900, "currency": "USD" },
          "description": "Cut and polish to address moderate defects and restore depth.",
          "popular": true,
          "features": [
            "Compounding stage for defect removal",
            "Finishing stage for clarity and gloss",
            "Panel wipe + protection (sealant or coating)"
          ]
        },
        {
          "id": "multi-stage",
          "name": "Multi-Stage / Intensive",
          "price": { "label": "From $1,500", "min": 1500, "currency": "USD" },
          "description": "High-level restoration for challenging paint or show-car outcomes.",
          "popular": false,
          "features": [
            "Advanced pad/polish systems tailored per panel",
            "Extensive refinement for near-flawless finish",
            "Ideal base for premium ceramic or PPF"
          ]
        }
      ],
      "notes": "Final pricing varies by vehicle size, paint hardness, defect severity, and chosen protection (ceramic/PPF)."
    },
  
    "faq": {
      "title": "Paint Correction FAQ",
      "items": [
        {
          "q": "Will all scratches be removed?",
          "a": "Many light-to-moderate defects can be permanently reduced or removed. Deep scratches through the clear coat may require touch-up or refinishing."
        },
        {
          "q": "Is clear coat safe during correction?",
          "a": "Yes—our approach uses measured, minimal removal and test-spot dialing to preserve clear coat while achieving visible improvement."
        },
        {
          "q": "Do I need ceramic coating after correction?",
          "a": "Highly recommended. Coatings help preserve results, add hydrophobics, and simplify maintenance. Sealants are also available."
        },
        {
          "q": "How long does it take?",
          "a": "Typically 4–8 hours for 1-Stage, 8–14 hours for 2-Stage, and 1–2+ days for intensive multi-stage work, depending on condition."
        }
      ]
    },
  
    "cta": {
      "title": "Ready to restore your gloss?",
      "description": "",
      "primary": { "label": "Book Now", "href": "/book?service=paint-correction" },
      "secondary": { "label": "Request Quote", "href": "/quote?service=paint-correction" }
    },
  
    "jsonLd": {
      "service": {
        "@context": "https://schema.org",
        "@type": "Service",
        "name": "Paint Correction",
        "serviceType": "Automotive Paint Correction",
        "provider": { "@type": "Organization", "name": "Mobile Detail Hub" },
        "areaServed": { "@type": "Place", "name": "{CITY}, {STATE}" },
        "description": "Professional machine polishing to remove swirls, haze, and oxidation—single- and multi-stage options to restore gloss and clarity.",
        "brand": "Mobile Detail Hub",
        "offers": {
          "@type": "AggregateOffer",
          "priceCurrency": "USD",
          "lowPrice": 400,
          "highPrice": 1500,
          "offerCount": 3
        }
      },
      "faq": {
        "@context": "https://schema.org",
        "@type": "FAQPage",
        "mainEntity": [
          {
            "@type": "Question",
            "name": "Will all scratches be removed?",
            "acceptedAnswer": { "@type": "Answer", "text": "Many light-to-moderate defects can be permanently reduced or removed. Deep scratches through the clear coat may require refinishing." }
          },
          {
            "@type": "Question",
            "name": "Do I need ceramic coating after correction?",
            "acceptedAnswer": { "@type": "Answer", "text": "Coatings help preserve results, add hydrophobics, and simplify maintenance. Sealants are also available." }
          }
        ]
      },
      "breadcrumbs": {
        "@context": "https://schema.org",
        "@type": "BreadcrumbList",
        "itemListElement": [
          { "@type": "ListItem", "position": 1, "name": "Services", "item": "{ORIGIN}/services" },
          { "@type": "ListItem", "position": 2, "name": "Paint Correction", "item": "{ORIGIN}/service/paint-correction" }
        ]
      }
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\services\ppf.json
============================
{
    "id": "ppf",
    "slug": "paint-protection-film",
    "route": "/service/ppf-installation",
    "title": "Paint Protection Film (PPF)",
    "shortDescription": "Self-healing urethane film that guards against rock chips, abrasion, and road rash",
  
    "seo": {
      "metaTitle": "Paint Protection Film (PPF) | Mobile Detail Hub",
      "metaDescription": "Professional PPF installation: self-healing, stain-resistant urethane film to protect high-impact areas or the entire vehicle. Options: Partial Front, Full Front, Track Pack, Full Body.",
      "keywords": [
        "paint protection film",
        "PPF",
        "clear bra",
        "self-healing film",
        "rock chip protection",
        "front bumper protection",
        "full front PPF",
        "track package PPF",
        "full body PPF"
      ],
      "canonicalPath": "/service/ppf-installation",
      "ogImage": "/mobile-detailing/images/services/ppf/hero.png",
      "robots": "index,follow"
    },
  
    "hero": {
      "image": {
        "src": "/mobile-detailing/images/services/ppf-installation/hero.jpg",
        "alt": "Installing clear paint protection film on a vehicle panel",
        "caption": "Invisible, self-healing protection for your paint"
      },
      "headline": "Paint Protection Film (PPF)",
      "subheadline": "Clear, self-healing urethane that absorbs rock chips and road rash—keep your finish looking new.",
      "ctas": [
        { "label": "Book Now", "href": "/book?service=ppf" },
        { "label": "Request Quote", "href": "/quote?service=ppf" }
      ]
    },
  
    "overview": {
      "summary": "Premium PPF installed with precision patterns and expert edge work. Choose targeted coverage like Full Front or protect the entire vehicle.",
      "benefits": [
        "Absorbs rock chips and abrasion",
        "Self-healing top coat reduces swirls",
        "UV and chemical resistance",
        "Enhances resale value by preserving paint"
      ],
      "features": [
        "Pre-cut pattern library with custom bulk options",
        "Wrapped edges where eligible panels allow",
        "Seam planning for clean aesthetics",
        "Compatible with ceramic-topper for easier washing"
      ]
    },
  
    "whatItIs": {
      "description": "Paint Protection Film is a thick, optically clear aliphatic polyurethane layer applied to painted panels to absorb impact and abrasion. Its self-healing top coat reduces light marring with heat or sun exposure.",
      "benefits": [
        "Physical barrier against chips, sandblasting, and road debris",
        "Self-healing surface helps keep a swirl-free look",
        "Stain resistance against bugs, tar, and road salts",
        "Pairs well with ceramic coating for slickness and easier maintenance"
      ],
      "video": {
        "src": "/mobile-detailing/video/ppf-what-it-is.mp4",
        "alt": "Video showcasing the benefits and durability of paint protection film (ppf)"
      }
    },
  
    "process": {
      "title": "Our PPF Installation Process",
      "steps": [
        {
          "number": 1,
          "title": "Prep & Panel Mapping",
          "bullets": [
            "Decon wash, iron removal, and clay bar",
            "Panel wipe to remove oils and residues",
            "Pattern selection or bulk templating; seam/edge planning"
          ],
          "image": { "src": "/mobile-detailing/images/services/ppf-installation/process-1.png", "alt": "Vehicle decontamination and surface preparation for PPF" }
        },
        {
          "number": 2,
          "title": "Precision Install",
          "bullets": [
            "Slip solution application and film positioning",
            "Squeegee set, edge wrapping where applicable",
            "Heat-set and micro-bubble inspection"
          ],
          "image": { "src": "/mobile-detailing/images/services/ppf-installation/process-2.png", "alt": "Careful squeegee work during PPF installation" }
        },
        {
          "number": 3,
          "title": "Cure & Quality Check",
          "bullets": [
            "Final alignment and edge checks",
            "Cure time guidance and first-wash instructions",
            "Optional ceramic topper for easier cleaning"
          ],
          "image": { "src": "/mobile-detailing/images/services/ppf-installation/process-3.png", "alt": "PPF curing and final inspection" }
        }
      ]
    },
  
    "results": {
      "bullets": [
        "High-impact zones shielded from chips and pitting",
        "Self-healing clarity with reduced swirl appearance",
        "Clean seams and wrapped edges for a near-invisible install"
      ],
      "video": {
        "src": "/mobile-detailing/video/ppf-results.mp4",
        "alt": "Video showcasing the benefits and durability of paint protection film (ppf)"
      }
    },
  
    "gallery": {
      "title": "PPF Gallery",
      "images": [
        { "id": "1", "src": "/mobile-detailing/images/services/ppf-installation/hero.png", "alt": "PPF on front end with wrapped edges", "caption": "Invisible coverage, maximum protection" }
      ]
    },
  
    "pricing": {
      "title": "PPF Coverage Options",
      "tiers": [
        {
          "id": "partial-front",
          "name": "Partial Front",
          "price": { "label": "From $900", "min": 900, "currency": "USD" },
          "description": "Front bumper + ~18–24\" hood/fenders + mirrors.",
          "popular": false,
          "features": [
            "Front bumper coverage",
            "Partial hood & fender leading edges",
            "Mirror caps",
            "Wrapped edges where applicable"
          ]
        },
        {
          "id": "full-front",
          "name": "Full Front",
          "price": { "label": "From $1,800", "min": 1800, "currency": "USD" },
          "description": "Full hood, full fenders, bumper, headlights, and mirrors.",
          "popular": true,
          "features": [
            "Full hood & full fenders",
            "Front bumper & headlights",
            "Mirrors, badges trimmed cleanly",
            "Expanded wrapped edges where panels allow"
          ]
        },
        {
          "id": "track-pack",
          "name": "Track Pack",
          "price": { "label": "From $2,400", "min": 2400, "currency": "USD" },
          "description": "Adds rocker panels and splash zones for spirited driving.",
          "popular": false,
          "features": [
            "Full Front package",
            "Rockers / lower doors",
            "Rear impact areas behind wheels",
            "Optional luggage strip"
          ]
        },
        {
          "id": "full-body",
          "name": "Full Body",
          "price": { "label": "From $4,500", "min": 4500, "currency": "USD" },
          "description": "Ultimate protection for every painted panel.",
          "popular": false,
          "features": [
            "All painted panels protected",
            "Advanced seam planning",
            "Extensive wrapped edges",
            "New-car preservation or show-car builds"
          ]
        }
      ],
      "notes": "Pricing varies by vehicle size/complexity, panel shapes, badge/vent count, and film selection. In-person inspection recommended."
    },
  
    "faq": {
      "title": "PPF FAQ",
      "items": [
        {
          "q": "PPF vs. Ceramic Coating—what’s the difference?",
          "a": "PPF is a physical urethane barrier that absorbs impacts from debris and prevents chips; ceramic adds slickness, gloss, and chemical resistance. Many owners combine both for maximum results."
        },
        {
          "q": "Is PPF really self-healing?",
          "a": "Yes—light swirls and marks in the top coat reduce with heat from the sun, warm water, or gentle heat sources. Deep gouges or impacts may not heal."
        },
        {
          "q": "How long does PPF last?",
          "a": "Quality films typically last 5–10 years depending on environment and care. Regular washes and safe products help maintain clarity."
        },
        {
          "q": "Will I see edges or seams?",
          "a": "We use precise patterns and wrap edges where panels allow. Some seams are necessary for complex shapes; we place them discreetly for a clean look."
        }
      ]
    },
  
    "cta": {
      "title": "Ready to shield your paint?",
      "description": "",
      "primary": { "label": "Book Now", "href": "/book?service=ppf" },
      "secondary": { "label": "Request Quote", "href": "/quote?service=ppf" }
    },
  
    "jsonLd": {
      "service": {
        "@context": "https://schema.org",
        "@type": "Service",
        "name": "Paint Protection Film (PPF)",
        "serviceType": "Automotive Paint Protection Film",
        "provider": { "@type": "Organization", "name": "Mobile Detail Hub" },
        "areaServed": { "@type": "Place", "name": "{CITY}, {STATE}" },
        "description": "Professional PPF installation using self-healing, stain-resistant urethane film to protect high-impact areas or the entire vehicle.",
        "brand": "Mobile Detail Hub",
        "offers": {
          "@type": "AggregateOffer",
          "priceCurrency": "USD",
          "lowPrice": 900,
          "highPrice": 4500,
          "offerCount": 4
        }
      },
      "faq": {
        "@context": "https://schema.org",
        "@type": "FAQPage",
        "mainEntity": [
          {
            "@type": "Question",
            "name": "PPF vs. Ceramic Coating—what’s the difference?",
            "acceptedAnswer": {
              "@type": "Answer",
              "text": "PPF is a physical barrier that absorbs impacts and prevents chips; ceramic adds slickness, gloss, and chemical resistance. Many owners choose both."
            }
          },
          {
            "@type": "Question",
            "name": "Is PPF really self-healing?",
            "acceptedAnswer": {
              "@type": "Answer",
              "text": "Light swirls in the PPF top coat reduce with heat from the sun, warm water, or gentle heat sources. Deep gouges may not heal."
            }
          }
        ]
      },
      "breadcrumbs": {
        "@context": "https://schema.org",
        "@type": "BreadcrumbList",
        "itemListElement": [
          { "@type": "ListItem", "position": 1, "name": "Services", "item": "{ORIGIN}/services" },
          { "@type": "ListItem", "position": 2, "name": "Paint Protection Film (PPF)", "item": "{ORIGIN}/service/ppf-installation" }
        ]
      }
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\services\rv-detailing.json
============================
{
    "id": "rv-detailing",
    "slug": "rv-detailing",
    "route": "/service/rv-detailing",
    "title": "RV Detailing",
    "shortDescription": "Deep cleaning, oxidation care, roof treatment, and protection for motorhomes and trailers",
  
    "seo": {
      "metaTitle": "RV Detailing (Motorhome & Trailer) | Mobile Detail Hub",
      "metaDescription": "Professional mobile RV detailing: roof cleaning/treatment, bug & tar removal, black streak removal, gelcoat oxidation care, decal-safe wash, and UV protection for motorhomes, travel trailers, and fifth wheels.",
      "keywords": [
        "rv detailing",
        "motorhome detailing",
        "travel trailer detailing",
        "fifth wheel detailing",
        "rv roof cleaning",
        "black streak removal",
        "gelcoat oxidation removal",
        "rv ceramic coating prep"
      ],
      "canonicalPath": "/service/rv-detailing",
      "ogImage": "/images/services/rv-detailing/hero.jpg",
      "robots": "index,follow"
    },
  
    "hero": {
      "image": {
        "src": "/mobile-detailing/images/services/rv-detailing/hero.jpg",
        "alt": "Professional RV detailing service",
        "caption": "Mobile RV detailing at your site, storage facility, or park"
      },
      "headline": "RV Detailing",
      "subheadline": "Roof to wheels: oxidation care, black streak removal, and UV protection designed for large-format vehicles.",
      "ctas": [
        { "label": "Book Now", "href": "/book?service=rv-detailing" },
        { "label": "Request Quote", "href": "/quote?service=rv-detailing" }
      ]
    },
  
    "overview": {
      "summary": "Comprehensive mobile RV detailing for motorhomes, travel trailers, and fifth wheels—optimized for fiberglass/gelcoat, painted panels, and vinyl decals.",
      "benefits": [
        "Convenient on-site service (park, storage, home)",
        "Large-vehicle safe methods and ladders/scaffolds",
        "Improved gloss, cleanliness, and protection"
      ],
      "features": [
        "Roof cleaning and treatment",
        "Bug/tar and black streak removal",
        "Gelcoat oxidation care (light)",
        "UV sealant or wax applied to exterior"
      ]
    },
  
    "whatItIs": {
      "description": "A complete RV exterior service focused on safe washing, decontamination, roof care, and protection for gelcoat, painted panels, and decals. Ideal preparation before multi-stage correction or ceramic coating.",
      "benefits": [
        "Removes bugs, tar, road film, and black streaks",
        "Cleans and treats the roof to resist UV and chalking",
        "Light oxidation care to brighten gelcoat and painted panels",
        "Decal-safe wash methods and appropriate dressings",
        "Applies UV sealant for easier washing and seasonal protection"
      ],
      "image": {
        "src": "/mobile-detailing/images/services/rv-detailing/what-it-is.jpg",
        "alt": "RV detailing explanation graphic"
      }
    },
  
    "process": {
      "title": "Our RV Detailing Process",
      "steps": [
        {
          "number": 1,
          "title": "Inspection & Prep",
          "bullets": [
            "Assess roof, panels, decals, and oxidation",
            "Pre-rinse and foam wash with RV-safe detergents",
            "Bug/tar treatment and safe contact wash"
          ],
          "image": { "src": "/mobile-detailing/images/services/rv-detailing/process-1.jpg", "alt": "RV inspection and preparation" }
        },
        {
          "number": 2,
          "title": "Decontamination & Roof Care",
          "bullets": [
            "Mechanical decon where appropriate (rail dust/overspray)",
            "Roof cleaning and treatment to resist UV/chalking",
            "Black streak removal along gutters and trim"
          ],
          "image": { "src": "/mobile-detailing/images/services/rv-detailing/process-2.jpg", "alt": "RV decontamination and roof treatment" }
        },
        {
          "number": 3,
          "title": "Protection & Finishing",
          "bullets": [
            "Light oxidation care on gelcoat/paint (where included)",
            "UV sealant or wax applied to exterior surfaces",
            "Trim/tires dressed to a clean satin finish"
          ],
          "image": { "src": "/mobile-detailing/images/services/rv-detailing/process-3.jpg", "alt": "RV protection and finishing" }
        }
      ]
    },
  
    "results": {
      "bullets": [
        "Clean, streak-free exterior with restored clarity",
        "Roof treated to slow UV damage and chalking",
        "Protected surfaces that wash easier and stay glossy longer"
      ],
      "images": {
        "before": { "src": "/mobile-detailing/images/services/rv-detailing/before.jpg", "alt": "RV before detailing" },
        "after": { "src": "/mobile-detailing/images/services/rv-detailing/after.jpg", "alt": "RV after detailing" }
      },
      "containerSize": "large"
    },
  
    "gallery": {
      "title": "RV Detailing Gallery",
      "images": [
        { "id": "1", "src": "/mobile-detailing/images/services/rv-detailing/hero.jpg", "alt": "RV detailing service", "caption": "Professional RV detailing" }
      ]
    },
  
    "pricing": {
      "title": "RV Detailing Pricing",
      "tiers": [
        {
          "id": "essential",
          "name": "Essential RV Detail",
          "price": { "label": "From $300", "min": 300, "currency": "USD" },
          "description": "Exterior wash, roof clean, and seasonal UV protection",
          "popular": false,
          "features": [
            "Foam/hand wash + bug & tar removal",
            "Roof cleaning and treatment",
            "Black streak removal (standard)",
            "UV sealant on gelcoat/painted panels"
          ]
        },
        {
          "id": "premium",
          "name": "Premium RV Detail",
          "price": { "label": "From $550", "min": 550, "currency": "USD" },
          "description": "Deeper decon and light oxidation care with extended protection",
          "popular": true,
          "features": [
            "Enhanced decontamination (rail dust/overspray)",
            "Expanded black streak remediation",
            "Light oxidation care for gelcoat/paint",
            "Extended-durability UV protection"
          ]
        }
      ],
      "notes": "Final pricing depends on size (Class B/C/A, travel trailer, fifth wheel), condition, and accessibility."
    },
  
    "faq": {
      "title": "RV Detailing FAQ",
      "items": [
        {
          "q": "How long does RV detailing take?",
          "a": "Typically 6–10 hours for mid-size RVs; large Class A or multi-slide units can take 1–2 days depending on condition and access."
        },
        {
          "q": "Do you service RV parks and storage facilities?",
          "a": "Yes. We are fully mobile and service homes, parks, and storage sites where permitted."
        },
        {
          "q": "Will this remove oxidation on my RV?",
          "a": "Premium includes light oxidation care. Severe oxidation/chalking may require multi-stage correction or restoration quoted separately."
        },
        {
          "q": "Is this safe for decals and graphics?",
          "a": "Yes. We use decal-safe products and techniques to clean and protect without lifting edges or fading."
        }
      ]
    },
  
    "cta": {
      "title": "Ready to refresh your RV?",
      "description": "",
      "primary": { "label": "Book Now", "href": "/book?service=rv-detailing" },
      "secondary": { "label": "Request Quote", "href": "/quote?service=rv-detailing" }
    },
  
    "jsonLd": {
      "service": {
        "@context": "https://schema.org",
        "@type": "Service",
        "name": "RV Detailing",
        "serviceType": "RV Detailing",
        "provider": { "@type": "Organization", "name": "Mobile Detail Hub" },
        "areaServed": { "@type": "Place", "name": "{CITY}, {STATE}" },
        "description": "Mobile RV detailing including roof cleaning/treatment, black streak removal, bug/tar removal, light oxidation care, and UV protection.",
        "brand": "Mobile Detail Hub",
        "offers": {
          "@type": "AggregateOffer",
          "priceCurrency": "USD",
          "lowPrice": 300,
          "highPrice": 550,
          "offerCount": 2
        }
      },
      "faq": {
        "@context": "https://schema.org",
        "@type": "FAQPage",
        "mainEntity": [
          {
            "@type": "Question",
            "name": "How long does RV detailing take?",
            "acceptedAnswer": {
              "@type": "Answer",
              "text": "Typically 6–10 hours for mid-size RVs; large Class A or multi-slide units can take 1–2 days depending on condition and access."
            }
          },
          {
            "@type": "Question",
            "name": "Do you service RV parks and storage facilities?",
            "acceptedAnswer": {
              "@type": "Answer",
              "text": "Yes. We are fully mobile and service homes, parks, and storage sites where permitted."
            }
          }
        ]
      },
      "breadcrumbs": {
        "@context": "https://schema.org",
        "@type": "BreadcrumbList",
        "itemListElement": [
          { "@type": "ListItem", "position": 1, "name": "Services", "item": "{ORIGIN}/services" },
          { "@type": "ListItem", "position": 2, "name": "RV Detailing", "item": "{ORIGIN}/service/rv-detailing" }
        ]
      }
    }
  }
  

============================
FILE: frontend\src\data\mobile-detailing\vehicle_data\AirplaneMakeModel.json
============================
{
    "Cessna": [
      "172 Skyhawk",
      "182 Skylane",
      "206 Stationair",
      "210 Centurion",
      "310 Twin",
      "Custom"
    ],
    "Cirrus": [
      "SR20",
      "SR22",
      "SR22T",
      "Vision Jet SF50",
      "Custom"
    ],
    "Piper": [
      "PA-28 Cherokee/Archer",
      "PA-32 Saratoga/Lance",
      "PA-34 Seneca",
      "PA-44 Seminole",
      "PA-46 Malibu/Meridian",
      "Custom"
    ],
    "Beechcraft": [
      "Bonanza G36",
      "Baron G58",
      "King Air C90",
      "King Air 250",
      "King Air 350i",
      "Custom"
    ],
    "Mooney": [
      "M20J 201",
      "M20K 231",
      "M20M Bravo",
      "M20R Ovation",
      "M20V Acclaim Ultra",
      "Custom"
    ],
    "Diamond": [
      "DA20 Katana",
      "DA40 Diamond Star",
      "DA42 Twin Star",
      "DA62",
      "Custom"
    ],
    "Pilatus": [
      "PC-12",
      "PC-12 NGX",
      "PC-24",
      "Custom"
    ],
    "TBM": [
      "700",
      "850",
      "910",
      "940",
      "960",
      "Custom"
    ],
    "Embraer": [
      "Phenom 100",
      "Phenom 300",
      "Custom"
    ],
    "Citation": [
      "Mustang 510",
      "CJ1/CJ2/CJ3",
      "Citation M2",
      "Citation XLS+",
      "Citation Latitude",
      "Custom"
    ],
    "Custom": ["Custom"]
  }
  

============================
FILE: frontend\src\data\mobile-detailing\vehicle_data\BoatMakeModel.json
============================
{
    "Bayliner": ["Element E16", "VR5 Bowrider", "DX2000", "Trophy T20", "Ciera 8", "Custom"],
    "Yamaha": ["212X", "242 Limited S", "AR195", "SX210", "190 FSH Deluxe", "Custom"],
    "Sea Ray": ["SPX 190", "SDX 250", "SLX 280", "Sundancer 320", "L650 Fly", "Custom"],
    "Boston Whaler": ["Montauk 170", "Dauntless 220", "Outrage 250", "Vantage 230", "Conquest 285", "Custom"],
    "Chaparral": ["19 SSi", "21 SSi", "246 SSi", "347 SSX", "310 Signature", "Custom"],
    "MasterCraft": ["XT21", "X24", "NXT22", "ProStar", "XStar", "Custom"],
    "Tracker": ["Pro Team 175 TXW", "Grizzly 2072", "Targa V-18", "Classic XL", "Pro Guide V-175", "Custom"],
    "Regal": ["1900 ES", "23 OBX", "26 FasDeck", "33 SAV", "38 XO", "Custom"],
    "Lund": ["Rebel XL", "Impact XS", "Pro-V", "Fury", "Adventure", "Custom"],
    "Ranger": ["RT188P", "Z518", "Z521L", "Z185", "Z520R", "Custom"],
    "Custom": ["Custom"]
}


============================
FILE: frontend\src\data\mobile-detailing\vehicle_data\CarMakeModel.json
============================
[
    {
      "brand": "Acura",
      "models": [
        "2.2CL",
        "2.3CL",
        "2.5TL",
        "3.0CL",
        "3.2CL",
        "3.2TL",
        "3.5 RL",
        "ILX",
        "Integra",
        "Legend",
        "MDX",
        "NSX",
        "RDX",
        "RL",
        "RLX",
        "RSX",
        "SLX",
        "TL",
        "TLX",
        "TSX",
        "Vigor",
        "ZDX"
      ]
    },
    {
      "brand": "Alfa Romeo",
      "models": [
        "145",
        "146",
        "147",
        "155",
        "156",
        "156 Sportwagon",
        "159",
        "159 Sportwagon",
        "164",
        "166",
        "4C",
        "8C Competizione",
        "Brera",
        "Crosswagon",
        "GT",
        "GTV",
        "GTV-6",
        "Giulia",
        "Giulietta",
        "MiTo",
        "Milano",
        "Spider",
        "Stelvio",
        "Tonale"
      ]
    },
    {
      "brand": "Amc",
      "models": [
        "Alliance",
        "Concord",
        "Eagle",
        "Encore",
        "Spirit"
      ]
    },
    {
      "brand": "Aston Martin",
      "models": [
        "DB7",
        "DB9",
        "DB11",
        "DB12",
        "DBS",
        "Lagonda",
        "Rapide",
        "V12 Vantage",
        "V8 Vantage",
        "Valhalla",
        "Vanquish",
        "Vantage",
        "Virage"
      ]
    },
    {
      "brand": "Audi",
      "models": [
        "100",
        "100 Avant",
        "200",
        "4000",
        "5000",
        "80",
        "80 Avant",
        "80 Cabrio",
        "90",
        "A1",
        "A2",
        "A3",
        "A3 Cabriolet",
        "A3 Limuzina",
        "A3 Sportback",
        "A4",
        "A4 Allroad",
        "A4 Avant",
        "A4 Cabriolet",
        "A5",
        "A5 Cabriolet",
        "A5 Sportback",
        "A6",
        "A6 Allroad",
        "A6 Avant",
        "A7",
        "A8",
        "A8 Long",
        "Cabriolet",
        "Coupe",
        "Q3",
        "Q4 e-tron",
        "Q5",
        "Q7",
        "Q8 e-tron",
        "Quattro",
        "R8",
        "RS 3",
        "RS 4",
        "RS 5",
        "RS 6",
        "RS Q8",
        "RS4 Cabriolet",
        "RS4/RS4 Avant",
        "RS5",
        "RS6 Avant",
        "RS7",
        "S3/S3 Sportback",
        "S4",
        "S4 Cabriolet",
        "S4/S4 Avant",
        "S5",
        "S5/S5 Cabriolet",
        "S6",
        "S6/RS6",
        "S7",
        "S8",
        "SQ5",
        "TT",
        "TT Coupé",
        "TT RS",
        "TT Roadster",
        "TTS",
        "V8 Quattro",
        "allroad",
        "e-tron GT"
      ]
    },
    {
      "brand": "Avanti",
      "models": [
        "Convertible",
        "Coupe",
        "Sedan"
      ]
    },
    {
      "brand": "Bentley",
      "models": [
        "Arnage",
        "Azure",
        "Bentayga",
        "Brooklands",
        "Continental",
        "Continental GT",
        "Corniche",
        "Eight",
        "Flying Spur",
        "Mulsanne",
        "Turbo R"
      ]
    },
    {
      "brand": "Bmw",
      "models": [
        "1 Series M",
        "128i",
        "135i",
        "135is",
        "318i",
        "318iC",
        "318iS",
        "318ti",
        "320i",
        "323ci",
        "323i",
        "323iT",
        "323is",
        "325",
        "325Ci",
        "325e",
        "325es",
        "325i",
        "325iX",
        "325is",
        "325xi",
        "328Ci",
        "328i",
        "328iS",
        "328xi",
        "330Ci",
        "330i",
        "330xi",
        "335d",
        "335i",
        "335is",
        "335xi",
        "524td",
        "525i",
        "525xi",
        "528e",
        "528i",
        "528iT",
        "528xi",
        "530i",
        "530iT",
        "530xi",
        "533i",
        "535i",
        "535i Gran Turismo",
        "535xi",
        "540i",
        "545i",
        "550i",
        "550i Gran Turismo",
        "633CSi",
        "635CSi",
        "640i",
        "640i Gran Coupe",
        "645Ci",
        "650i",
        "650i Gran Coupe",
        "733i",
        "735i",
        "735iL",
        "740Li",
        "740i",
        "740iL",
        "745Li",
        "745i",
        "750Li",
        "750i",
        "750iL",
        "760Li",
        "760i",
        "840Ci",
        "850CSi",
        "850Ci",
        "850i",
        "ActiveHybrid 3",
        "ActiveHybrid 5",
        "ActiveHybrid 7",
        "ActiveHybrid X6",
        "Alpina B7",
        "L6",
        "L7",
        "M Coupe",
        "M Roadster",
        "M3",
        "M4",
        "M5",
        "M6",
        "Rad 1",
        "Rad 1 Cabrio",
        "Rad 1 Coupé",
        "Rad 2",
        "Rad 2 Active Tourer",
        "Rad 2 Coupé",
        "Rad 2 Gran Tourer",
        "Rad 3",
        "Rad 3 Cabrio",
        "Rad 3 Compact",
        "Rad 3 Coupé",
        "Rad 3 GT",
        "Rad 3 Touring",
        "Rad 4",
        "Rad 4 Cabrio",
        "Rad 4 Gran Coupé",
        "Rad 5",
        "Rad 5 GT",
        "Rad 5 Touring",
        "Rad 6",
        "Rad 6 Cabrio",
        "Rad 6 Coupé",
        "Rad 6 Gran Coupé",
        "Rad 7",
        "Rad 8 Coupé",
        "X1",
        "X3",
        "X4",
        "X5",
        "X5 M",
        "X6",
        "X6 M",
        "Z3",
        "Z3 Coupé",
        "Z3 Roadster",
        "Z4",
        "Z4 Roadster",
        "Z8",
        "i3",
        "i4",
        "i5",
        "i7",
        "i8",
        "iX",
        "M2",
        "M8",
        "XM",
        "X7"
      ]
    },
    {
      "brand": "Buick",
      "models": [
        "Century",
        "Electra",
        "Enclave",
        "Encore",
        "Encore GX",
        "Envista",
        "LaCrosse",
        "Le Sabre",
        "Lucerne",
        "Park Avenue",
        "Rainier",
        "Reatta",
        "Regal",
        "Rendezvous",
        "Riviera",
        "Roadmaster",
        "Skyhawk",
        "Skylark",
        "Somerset",
        "Terraza",
        "Verano"
      ]
    },
    {
      "brand": "Cadillac",
      "models": [
        "ATS",
        "Allante",
        "Brougham",
        "CTS",
        "Catera",
        "Cimarron",
        "DTS",
        "De Ville",
        "Eldorado",
        "Escalade",
        "Escalade ESV",
        "Escalade EXT",
        "Celestiq",
        "CT4",
        "CT5",
        "CT6",
        "Fleetwood",
        "SRX",
        "STS",
        "Seville",
        "XLR",
        "XTS",
        "XT4",
        "XT5",
        "XT6",
        "Lyriq"
      ]
    },
    {
      "brand": "Chevrolet",
      "models": [
        "Alero",
        "Astro",
        "Avalanche",
        "Aveo",
        "Aveo5",
        "Beretta",
        "Blazer",
        "Blazer EV",
        "Camaro",
        "Caprice",
        "Captiva",
        "Captiva Sport",
        "Cavalier",
        "Celebrity",
        "Chevette",
        "Citation",
        "Cobalt",
        "Colorado",
        "Corsica",
        "Corvette",
        "Cruze",
        "Cruze SW",
        "El Camino",
        "Epica",
        "Equinox",
        "Equinox EV",
        "Evanda",
        "Express Van",
        "G Van",
        "HHR",
        "Impala",
        "Kalos",
        "Kodiak C4500",
        "LUV",
        "Lacetti",
        "Lacetti SW",
        "Lumina",
        "Lumina APV",
        "Malibu",
        "Matiz",
        "Metro",
        "Monte Carlo",
        "Nova",
        "Nubira",
        "Orlando",
        "Prizm",
        "S10 Blazer",
        "S10 Pickup",
        "SSR",
        "Silverado and other C/K1500",
        "Silverado and other C/K2500",
        "Silverado and other C/K3500",
        "Silverado EV",
        "Sonic",
        "Spark",
        "Spectrum",
        "Sprint",
        "Suburban",
        "Tacuma",
        "Tahoe",
        "Tracker",
        "TrailBlazer",
        "Trailblazer",
        "TrailBlazer EXT",
        "Traverse",
        "Trax",
        "Uplander",
        "Venture",
        "Volt"
      ]
    },
    {
      "brand": "Chrysler",
      "models": [
        "200",
        "300",
        "300 C",
        "300 C Touring",
        "300 M",
        "300M",
        "Aspen",
        "Caravan",
        "Cirrus",
        "Concorde",
        "Conquest",
        "Cordoba",
        "Crossfire",
        "E Class",
        "Fifth Avenue",
        "Grand Voyager",
        "Imperial",
        "Intrepid",
        "LHS",
        "Laser",
        "LeBaron",
        "Neon",
        "New Yorker",
        "Newport",
        "PT Cruiser",
        "Pacifica",
        "Pacifica Hybrid",
        "Plymouth",
        "Prowler",
        "Sebring",
        "Sebring Convertible",
        "Stratus",
        "Stratus Cabrio",
        "TC by Maserati",
        "Town & Country",
        "Town &amp; Country",
        "Voyager"
      ]
    },
    {
      "brand": "Citroën",
      "models": [
        "Berlingo",
        "C-Crosser",
        "C-Elissée",
        "C-Zero",
        "C1",
        "C2",
        "C3",
        "C3 Aircross",
        "C3 Picasso",
        "C4",
        "C4 Aircross",
        "C4 Cactus",
        "C4 Coupé",
        "C4 Grand Picasso",
        "C4 Sedan",
        "C5",
        "C5 Aircross",
        "C5 Break",
        "C5 Tourer",
        "C6",
        "C8",
        "DS3",
        "DS4",
        "DS5",
        "Evasion",
        "Jumper",
        "Jumpy",
        "Nemo",
        "Saxo",
        "Xantia",
        "Xsara",
        "ë-C4"
      ]
    },
    {
      "brand": "Cupra",
      "models": [
        "Born",
        "Formentor",
        "Ateca",
        "Leon"
      ]
    },
    {
      "brand": "Custom",
      "models": [
        "Custom"
      ]
    },
    {
      "brand": "Dacia",
      "models": [
        "Dokker",
        "Duster",
        "Lodgy",
        "Logan",
        "Logan MCV",
        "Logan Van",
        "Sandero",
        "Solenza",
        "Jogger",
        "Spring"
      ]
    },
    {
      "brand": "Daewoo",
      "models": [
        "Espero",
        "Kalos",
        "Lacetti",
        "Lanos",
        "Leganza",
        "Lublin",
        "Matiz",
        "Nexia",
        "Nubira",
        "Nubira kombi",
        "Racer",
        "Tacuma",
        "Tico"
      ]
    },
    {
      "brand": "Daihatsu",
      "models": [
        "Charade",
        "Rocky"
      ]
    },
    {
      "brand": "Datsun",
      "models": [
        "200SX",
        "210",
        "280ZX",
        "300ZX",
        "310",
        "510",
        "720",
        "810",
        "Maxima",
        "Pickup",
        "Pulsar",
        "Sentra",
        "Stanza"
      ]
    },
    {
      "brand": "Delorean",
      "models": [
        "DMC-12"
      ]
    },
    {
      "brand": "Dodge",
      "models": [
        "400",
        "600",
        "Aries",
        "Avenger",
        "Caliber",
        "Caravan",
        "Challenger",
        "Charger",
        "Colt",
        "Conquest",
        "D/W Truck",
        "Dakota",
        "Dart",
        "Daytona",
        "Diplomat",
        "Durango",
        "Dynasty",
        "Grand Caravan",
        "Hornet",
        "Intrepid",
        "Journey",
        "Lancer",
        "Magnum",
        "Mirada",
        "Monaco",
        "Neon",
        "Nitro",
        "Omni",
        "RAM",
        "RAM C/V",
        "Raider",
        "Ram 1500 Truck",
        "Ram 2500 Truck",
        "Ram 3500 Truck",
        "Ram 4500 Truck",
        "Ram 50 Truck",
        "Ram SRT-10",
        "Ram Van",
        "Ram Wagon",
        "Ramcharger",
        "Rampage",
        "SRT-4",
        "Shadow",
        "Spirit",
        "Sprinter",
        "St. Regis",
        "Stealth",
        "Stratus",
        "Viper"
      ]
    },
    {
      "brand": "DS Automobiles",
      "models": [
        "DS 3",
        "DS 4",
        "DS 7",
        "DS 9"
      ]
    },
    {
      "brand": "Eagle",
      "models": [
        "Medallion",
        "Premier",
        "Summit",
        "Talon",
        "Vision"
      ]
    },
    {
      "brand": "Ferrari",
      "models": [
        "308 GTB Quattrovalvole",
        "308 GTBI",
        "308 GTS Quattrovalvole",
        "308 GTSI",
        "328 GTB",
        "328 GTS",
        "348 GTB",
        "348 GTS",
        "348 Spider",
        "348 TB",
        "348 TS",
        "360",
        "456 GT",
        "456M GT",
        "458 Italia",
        "512 BBi",
        "512M",
        "512TR",
        "550 Maranello",
        "575M Maranello",
        "599 GTB Fiorano",
        "599 GTO",
        "612 Scaglietti",
        "California",
        "Enzo",
        "F355",
        "F40",
        "F430",
        "F50",
        "FF",
        "Mondial",
        "Purosangue",
        "Roma",
        "SF90 Stradale",
        "Testarossa",
        "296 GTB"
      ]
    },
    {
      "brand": "Fiat",
      "models": [
        "1100",
        "126",
        "2000 Spider",
        "500",
        "500e",
        "500L",
        "500X",
        "500X (US)",
        "850",
        "Barchetta",
        "Bertone X1/9",
        "Brava",
        "Cinquecento",
        "Coupé",
        "Croma",
        "Doblo",
        "Doblo Cargo",
        "Doblo Cargo Combi",
        "Ducato",
        "Ducato Kombi",
        "Ducato Podvozok",
        "Ducato Van",
        "Florino",
        "Florino Combi",
        "Freemont",
        "Grande Punto",
        "Idea",
        "Linea",
        "Marea",
        "Marea Weekend",
        "Multipla",
        "Palio Weekend",
        "Panda",
        "Panda Van",
        "Pininfarina Spider",
        "Punto",
        "Punto Cabriolet",
        "Punto Evo",
        "Punto Van",
        "Qubo",
        "Scudo",
        "Scudo Kombi",
        "Scudo Van",
        "Sedici",
        "Seicento",
        "Stilo",
        "Stilo Multiwagon",
        "Strada",
        "Talento",
        "Tipo",
        "Ulysse",
        "Uno",
        "X1/9"
      ]
    },
    {
      "brand": "Fisker",
      "models": [
        "Karma"
      ]
    },
    {
      "brand": "Ford",
      "models": [
        "Aerostar",
        "Aspire",
        "B-Max",
        "Bronco",
        "Bronco II",
        "Bronco Sport",
        "C-MAX",
        "C-Max",
        "Club Wagon",
        "Contour",
        "Cortina",
        "Cougar",
        "Courier",
        "Crown Victoria",
        "E-150 and Econoline 150",
        "E-250 and Econoline 250",
        "E-350 and Econoline 350",
        "EXP",
        "Edge",
        "Escape",
        "Escort",
        "Escort Cabrio",
        "Escort kombi",
        "Excursion",
        "Expedition",
        "Expedition EL",
        "Explorer",
        "Explorer Sport Trac",
        "F-150",
        "F-150 Lightning",
        "F-250",
        "F100",
        "F150",
        "F250",
        "F350",
        "F450",
        "Fairmont",
        "Festiva",
        "Fiesta",
        "Five Hundred",
        "Flex",
        "Focus",
        "Focus C-Max",
        "Focus CC",
        "Focus kombi",
        "Freestar",
        "Freestyle",
        "Fusion",
        "GT",
        "Galaxy",
        "Granada",
        "Grand C-Max",
        "Ka",
        "Kuga",
        "LTD",
        "Maverick",
        "Mondeo",
        "Mondeo Combi",
        "Mustang",
        "Mustang Mach-E",
        "Orion",
        "Probe",
        "Puma",
        "Ranger",
        "S-Max",
        "Sierra",
        "Street Ka",
        "Taurus",
        "Taurus X",
        "Tempo",
        "Thunderbird",
        "Tourneo Connect",
        "Tourneo Custom",
        "Transit",
        "Transit Bus",
        "Transit Connect",
        "Transit Connect LWB",
        "Transit Courier",
        "Transit Custom",
        "Transit Tourneo",
        "Transit Valnik",
        "Transit Van",
        "Transit Van 350",
        "Transit kombi",
        "Windstar",
        "ZX2 Escort"
      ]
    },
    {
      "brand": "Freightliner",
      "models": [
        "Sprinter"
      ]
    },
    {
      "brand": "Geo",
      "models": [
        "Metro",
        "Prizm",
        "Spectrum",
        "Storm",
        "Tracker"
      ]
    },
    {
      "brand": "Gmc",
      "models": [
        "Acadia",
        "Caballero",
        "Canyon",
        "Envoy",
        "Envoy XL",
        "Envoy XUV",
        "Jimmy",
        "Rally Wagon",
        "S15 Jimmy",
        "S15 Pickup",
        "Safari",
        "Savana",
        "Sierra C/K1500",
        "Sierra C/K2500",
        "Sierra C/K3500",
        "Sonoma",
        "Suburban",
        "Syclone",
        "Terrain",
        "TopKick C4500",
        "Typhoon",
        "Vandura",
        "Yukon",
        "Yukon XL",
        "HUMMER EV Pickup",
        "HUMMER EV SUV",
        "Sierra EV"
      ]
    },
    {
      "brand": "Genesis",
      "models": [
        "G70",
        "G80",
        "G90",
        "GV60",
        "GV70",
        "GV80"
      ]
    },
    {
      "brand": "Honda",
      "models": [
        "Accord",
        "Accord Coupé",
        "Accord Crosstour",
        "Accord Tourer",
        "CR-V",
        "CR-V Hybrid",
        "CR-X",
        "CR-Z",
        "CRX",
        "City",
        "Civic",
        "Civic Aerodeck",
        "Civic Coupé",
        "Civic Tourer",
        "Civic Type R",
        "Crosstour",
        "Del Sol",
        "Element",
        "FR-V",
        "Fit",
        "HR-V",
        "Insight",
        "Integra",
        "Jazz",
        "Legend",
        "Odyssey",
        "Passport",
        "Pilot",
        "Prelude",
        "Prologue",
        "Ridgeline",
        "S2000"
      ]
    },
    {
      "brand": "Hummer",
      "models": [
        "H1",
        "H2",
        "H3",
        "H3T"
      ]
    },
    {
      "brand": "Hyundai",
      "models": [
        "Accent",
        "Atos",
        "Atos Prime",
        "Azera",
        "Coupé",
        "Elantra",
        "Elantra Coupe",
        "Elantra Touring",
        "Entourage",
        "Equus",
        "Excel",
        "Galloper",
        "Genesis",
        "Genesis Coupe",
        "Getz",
        "Grandeur",
        "H 350",
        "H1",
        "H1 Bus",
        "H1 Van",
        "H200",
        "Lantra",
        "Matrix",
        "Santa Fe",
        "Scoupe",
        "Sonata",
        "Terracan",
        "Tiburon",
        "Trajet",
        "Tucson",
        "Veloster",
        "Veracruz",
        "XG300",
        "XG350",
        "i10",
        "i20",
        "i30",
        "i30 CW",
        "i40",
        "i40 CW",
        "ix20",
        "ix35",
        "ix55",
        "Ioniq 5",
        "Ioniq 6",
        "Kona Electric",
        "Palisade",
        "Santa Cruz"
      ]
    },
    {
      "brand": "Infiniti",
      "models": [
        "EX",
        "EX35",
        "EX37",
        "FX",
        "FX35",
        "FX37",
        "FX45",
        "FX50",
        "G",
        "G Coupé",
        "G20",
        "G25",
        "G35",
        "G37",
        "I30",
        "I35",
        "J30",
        "JX35",
        "M",
        "M30",
        "M35",
        "M35h",
        "M37",
        "M45",
        "M56",
        "Q",
        "Q45",
        "QX",
        "QX4",
        "QX55",
        "QX56"
      ]
    },
    {
      "brand": "Isuzu",
      "models": [
        "Amigo",
        "Ascender",
        "Axiom",
        "Hombre",
        "I-Mark",
        "Impulse",
        "Oasis",
        "Pickup",
        "Rodeo",
        "Stylus",
        "Trooper",
        "Trooper II",
        "VehiCROSS",
        "i-280",
        "i-290",
        "i-350",
        "i-370"
      ]
    },
    {
      "brand": "Jaguar",
      "models": [
        "Daimler",
        "F-Pace",
        "F-Type",
        "S-Type",
        "Sovereign",
        "X-Type",
        "X-type Estate",
        "XE",
        "XF",
        "XJ",
        "XJ Sport",
        "XJ Vanden Plas",
        "XJ12",
        "XJ6",
        "XJ8",
        "XJ8 L",
        "XJR",
        "XJR-S",
        "XJS",
        "XK",
        "XK8",
        "XK8 Convertible",
        "XKR",
        "XKR Convertible",
        "I-PACE"
      ]
    },
    {
      "brand": "Jeep",
      "models": [
        "CJ",
        "Cherokee",
        "Comanche",
        "Commander",
        "Compass",
        "Grand Cherokee",
        "Grand Cherokee L",
        "Grand Wagoneer",
        "Liberty",
        "Patriot",
        "Pickup",
        "Renegade",
        "Scrambler",
        "Wagoneer",
        "Wrangler",
        "Avenger (EU)"
      ]
    },
    {
      "brand": "Kia",
      "models": [
        "Amanti",
        "Avella",
        "Besta",
        "Borrego",
        "Carens",
        "Carnival",
        "Cee`d",
        "Cee`d SW",
        "Cerato",
        "Forte",
        "Forte Koup",
        "K 2500",
        "Magentis",
        "Opirus",
        "Optima",
        "Picanto",
        "Pregio",
        "Pride",
        "Pro Cee`d",
        "Rio",
        "Rio Combi",
        "Rio sedan",
        "Rio5",
        "Rondo",
        "Sedona",
        "Sephia",
        "Shuma",
        "Sorento",
        "Soul",
        "Spectra",
        "Spectra5",
        "Sportage",
        "Venga",
        "K5",
        "EV6",
        "EV9",
        "Telluride",
        "Seltos"
      ]
    },
    {
      "brand": "Lamborghini",
      "models": [
        "Aventador",
        "Countach",
        "Diablo",
        "Gallardo",
        "Jalpa",
        "LM002",
        "Murcielago",
        "Urus",
        "Revuelto",
        "Huracán Tecnica"
      ]
    },
    {
      "brand": "Lancia",
      "models": [
        "Beta",
        "Zagato"
      ]
    },
    {
      "brand": "Land Rover",
      "models": [
        "109",
        "Defender",
        "Defender (L663)",
        "Discovery",
        "Discovery Sport",
        "Freelander",
        "LR2",
        "LR3",
        "LR4",
        "Range Rover",
        "Range Rover Evoque",
        "Range Rover Sport",
        "Range Rover Velar"
      ]
    },
    {
      "brand": "Lexus",
      "models": [
        "CT",
        "CT 200h",
        "ES 250",
        "ES 300",
        "ES 300h",
        "ES 330",
        "ES 350",
        "GS",
        "GS 300",
        "GS 350",
        "GS 400",
        "GS 430",
        "GS 450h",
        "GS 460",
        "GX",
        "GX 460",
        "GX 470",
        "GX (new gen)",
        "HS 250h",
        "IS",
        "IS 200",
        "IS 250",
        "IS 250 C",
        "IS 250C",
        "IS 300",
        "IS 350",
        "IS 350C",
        "IS F",
        "IS-F",
        "LFA",
        "LS",
        "LS 400",
        "LS 430",
        "LS 460",
        "LS 600h",
        "LX",
        "LX 450",
        "LX 470",
        "LX 570",
        "NX",
        "RC F",
        "RX",
        "RX 300",
        "RX 330",
        "RX 350",
        "RX 400h",
        "RX 450h",
        "SC 300",
        "SC 400",
        "SC 430",
        "TX",
        "RZ",
        "UX"
      ]
    },
    {
      "brand": "Lincoln",
      "models": [
        "Aviator",
        "Aviator (current gen)",
        "Blackwood",
        "Continental",
        "LS",
        "MKS",
        "MKT",
        "MKX",
        "MKZ",
        "Mark LT",
        "Mark VI",
        "Mark VII",
        "Mark VIII",
        "Navigator",
        "Navigator L",
        "Town Car",
        "Zephyr",
        "Corsair",
        "Nautilus"
      ]
    },
    {
      "brand": "Lotus",
      "models": [
        "Elan",
        "Elise",
        "Esprit",
        "Evora",
        "Exige",
        "Emira",
        "Eletre",
        "Evija"
      ]
    },
    {
      "brand": "Lucid",
      "models": [
        "Air",
        "Gravity"
      ]
    },
    {
      "brand": "Maserati",
      "models": [
        "430",
        "Biturbo",
        "Coupe",
        "GranSport",
        "GranTurismo",
        "Quattroporte",
        "Spyder",
        "Grecale",
        "MC20",
        "Levante (US)"
      ]
    },
    {
      "brand": "Maybach",
      "models": [
        "57",
        "62"
      ]
    },
    {
      "brand": "Mazda",
      "models": [
        "121",
        "2",
        "3",
        "323",
        "323 Combi",
        "323 Coupé",
        "323 F",
        "5",
        "6",
        "6 Combi",
        "626",
        "626 Combi",
        "929",
        "B-Fighter",
        "B-Series Pickup",
        "B2500",
        "BT",
        "CX-3",
        "CX-5",
        "CX-7",
        "CX-9",
        "CX-30",
        "CX-50",
        "CX-70",
        "CX-90",
        "Demio",
        "GLC",
        "MAZDA2",
        "MAZDA3",
        "MAZDA5",
        "MAZDA6",
        "MAZDASPEED3",
        "MAZDASPEED6",
        "MPV",
        "MX-3",
        "MX-5",
        "MX-6",
        "MX3",
        "MX6",
        "Miata MX5",
        "Millenia",
        "Navajo",
        "Premacy",
        "Protege",
        "Protege5",
        "RX-7",
        "RX-8",
        "Tribute",
        "Xedox 6"
      ]
    },
    {
      "brand": "Mclaren",
      "models": [
        "MP4-12C"
      ]
    },
    {
      "brand": "Mercedes-Benz",
      "models": [
        "100 D",
        "115",
        "124",
        "126",
        "190",
        "190 D",
        "190 E",
        "190D",
        "190E",
        "200 - 300",
        "200 D",
        "200 E",
        "210 Van",
        "210 kombi",
        "230 - 300 CE Coupé",
        "240D",
        "260 - 560 SE",
        "260 - 560 SEL",
        "260E",
        "280CE",
        "280E",
        "300CD",
        "300CE",
        "300D",
        "300E",
        "300SD",
        "300SDL",
        "300SE",
        "300SEL",
        "300SL",
        "300TD",
        "300TE",
        "310 Van",
        "310 kombi",
        "350SD",
        "350SDL",
        "380SE",
        "380SEC",
        "380SEL",
        "380SL",
        "380SLC",
        "400E",
        "400SE",
        "400SEL",
        "420SEL",
        "500 - 600 SEC Coupé",
        "500E",
        "500SEC",
        "500SEL",
        "500SL",
        "560SEC",
        "560SEL",
        "560SL",
        "600SEC",
        "600SEL",
        "600SL",
        "A",
        "A L",
        "AMG GT",
        "C",
        "C Sportcoupé",
        "C T",
        "C220",
        "C230",
        "C240",
        "C250",
        "C280",
        "C300",
        "C32 AMG",
        "C320",
        "C350",
        "C36 AMG",
        "C43 AMG",
        "C55 AMG",
        "C63 AMG",
        "CL",
        "CL500",
        "CL55 AMG",
        "CL550",
        "CL600",
        "CL63 AMG",
        "CL65 AMG",
        "CLA",
        "CLC",
        "CLK Cabrio",
        "CLK Coupé",
        "CLK320",
        "CLK350",
        "CLK430",
        "CLK500",
        "CLK55 AMG",
        "CLK550",
        "CLK63 AMG",
        "CLS",
        "CLS500",
        "CLS55 AMG",
        "CLS550",
        "CLS63 AMG",
        "Citan",
        "E",
        "E Cabrio",
        "E Coupé",
        "E T",
        "E300",
        "E320",
        "E320 Bluetec",
        "E320 CDI",
        "E350",
        "E350 Bluetec",
        "E400 Hybrid",
        "E420",
        "E430",
        "E500",
        "E55 AMG",
        "E550",
        "E63 AMG",
        "G Cabrio",
        "G500",
        "G55 AMG",
        "G550",
        "G63 AMG",
        "GL",
        "GL320 Bluetec",
        "GL320 CDI",
        "GL350 Bluetec",
        "GL450",
        "GL550",
        "GLA",
        "GLB",
        "GLC",
        "GLE",
        "GLK",
        "GLK350",
        "MB 100",
        "ML320",
        "ML320 Bluetec",
        "ML320 CDI",
        "ML350",
        "ML350 Bluetec",
        "ML430",
        "ML450 Hybrid",
        "ML500",
        "ML55 AMG",
        "ML550",
        "ML63 AMG",
        "R320 Bluetec",
        "R320 CDI",
        "R350",
        "R350 Bluetec",
        "R500",
        "R63 AMG",
        "S",
        "S Coupé",
        "S320",
        "S350",
        "S350 Bluetec",
        "S400 Hybrid",
        "S420",
        "S430",
        "S500",
        "S55 AMG",
        "S550",
        "S600",
        "S63 AMG",
        "S65 AMG",
        "SL",
        "SL320",
        "SL500",
        "SL55 AMG",
        "SL550",
        "SL600",
        "SL63 AMG",
        "SL65 AMG",
        "SLC",
        "SLK",
        "SLK230",
        "SLK250",
        "SLK280",
        "SLK300",
        "SLK32 AMG",
        "SLK320",
        "SLK350",
        "SLK55 AMG",
        "SLR",
        "SLS AMG",
        "Sprinter",
        "Trieda A",
        "Trieda B",
        "Trieda C",
        "Trieda E",
        "Trieda G",
        "Trieda M",
        "Trieda R",
        "Trieda S",
        "EQB",
        "EQE",
        "EQE SUV",
        "EQS",
        "EQS SUV"
      ]
    },
    {
      "brand": "Mercury",
      "models": [
        "Capri",
        "Cougar",
        "Grand Marquis",
        "Lynx",
        "Marauder",
        "Mariner",
        "Marquis",
        "Milan",
        "Montego",
        "Monterey",
        "Mountaineer",
        "Mystique",
        "Sable",
        "Topaz",
        "Tracer",
        "Villager",
        "Zephyr"
      ]
    },
    {
      "brand": "Merkur",
      "models": [
        "Scorpio",
        "XR4Ti"
      ]
    },
    {
      "brand": "Mini",
      "models": [
        "Cooper",
        "Cooper Cabrio",
        "Cooper Clubman",
        "Cooper Countryman",
        "Cooper Coupe",
        "Cooper D",
        "Cooper D Clubman",
        "Cooper Roadster",
        "Cooper S",
        "Cooper S Cabrio",
        "Cooper S Clubman",
        "Cooper S Countryman",
        "Cooper S Coupe",
        "Cooper S Roadster",
        "Countryman",
        "Mini One",
        "One D",
        "Countryman SE ALL4",
        "Cooper SE (Electric)"
      ]
    },
    {
      "brand": "Mitsubishi",
      "models": [
        "3000 GT",
        "3000GT",
        "ASX",
        "Carisma",
        "Colt",
        "Colt CC",
        "Cordia",
        "Diamante",
        "Eclipse",
        "Endeavor",
        "Expo",
        "Fuso canter",
        "Galant",
        "Galant Combi",
        "Grandis",
        "L200",
        "L200 Pick up",
        "L200 Pick up Allrad",
        "L300",
        "Lancer",
        "Lancer Combi",
        "Lancer Evo",
        "Lancer Evolution",
        "Lancer Sportback",
        "Mighty Max",
        "Mirage",
        "Montero",
        "Montero Sport",
        "Outlander",
        "Outlander Sport",
        "Pajero",
        "Pajero Pinin Wagon",
        "Pajero Sport",
        "Pajero Wagon",
        "Pajeto Pinin",
        "Precis",
        "Raider",
        "Sigma",
        "Space Star",
        "Starion",
        "Tredia",
        "Van",
        "i",
        "Eclipse Cross"
      ]
    },
    {
      "brand": "Nissan",
      "models": [
        "100 NX",
        "200 SX",
        "200SX",
        "240SX",
        "300ZX",
        "350 Z",
        "350 Z Roadster",
        "350Z",
        "370 Z",
        "370Z",
        "Almera",
        "Almera Tino",
        "Altima",
        "Armada",
        "Axxess",
        "Cabstar E - T",
        "Cabstar TL2 Valnik",
        "Cube",
        "Frontier",
        "GT-R",
        "Insterstar",
        "Juke",
        "King Cab",
        "Leaf",
        "Maxima",
        "Maxima QX",
        "Micra",
        "Murano",
        "Murano CrossCabriolet",
        "NP300 Pickup",
        "NV",
        "NV200",
        "NV400",
        "NX",
        "Navara",
        "Note",
        "Pathfinder",
        "Patrol",
        "Patrol GR",
        "Pickup",
        "Pixo",
        "Primastar",
        "Primastar Combi",
        "Primera",
        "Primera Combi",
        "Pulsar",
        "Qashqai",
        "Quest",
        "Rogue",
        "Sentra",
        "Serena",
        "Stanza",
        "Sunny",
        "Terrano",
        "Tiida",
        "Titan",
        "Trade",
        "Van",
        "Vanette Cargo",
        "Versa",
        "X-Trail",
        "Xterra",
        "e-NV200",
        "Ariya",
        "Kicks",
        "Z (RZ34)"
      ]
    },
    {
      "brand": "Oldsmobile",
      "models": [
        "88",
        "Achieva",
        "Alero",
        "Aurora",
        "Bravada",
        "Custom Cruiser",
        "Cutlass",
        "Cutlass Calais",
        "Cutlass Ciera",
        "Cutlass Supreme",
        "Firenza",
        "Intrigue",
        "Ninety-Eight",
        "Omega",
        "Regency",
        "Silhouette",
        "Toronado"
      ]
    },
    {
      "brand": "Opel",
      "models": [
        "Agila",
        "Ampera",
        "Antara",
        "Astra",
        "Astra cabrio",
        "Astra caravan",
        "Astra coupé",
        "Calibra",
        "Campo",
        "Cascada",
        "Corsa",
        "Frontera",
        "Insignia",
        "Insignia kombi",
        "Kadett",
        "Meriva",
        "Mokka",
        "Movano",
        "Omega",
        "Signum",
        "Vectra",
        "Vectra Caravan",
        "Vivaro",
        "Vivaro Kombi",
        "Zafira",
        "Mokka-e",
        "Corsa-e",
        "Grandland"
      ]
    },
    {
      "brand": "Peugeot",
      "models": [
        "1007",
        "106",
        "107",
        "108",
        "2008",
        "205",
        "205 Cabrio",
        "206",
        "206 CC",
        "206 SW",
        "207",
        "207 CC",
        "207 SW",
        "306",
        "307",
        "307 CC",
        "307 SW",
        "308",
        "308 CC",
        "308 SW",
        "309",
        "4007",
        "4008",
        "405",
        "406",
        "407",
        "407 SW",
        "5008",
        "504",
        "505",
        "508",
        "508 SW",
        "604",
        "605",
        "607",
        "806",
        "807",
        "Bipper",
        "RCZ",
        "208",
        "e-208",
        "2008",
        "3008",
        "5008"
      ]
    },
    {
      "brand": "Plymouth",
      "models": [
        "Acclaim",
        "Arrow",
        "Breeze",
        "Caravelle",
        "Champ",
        "Colt",
        "Conquest",
        "Gran Fury",
        "Grand Voyager",
        "Horizon",
        "Laser",
        "Neon",
        "Prowler",
        "Reliant",
        "Sapporo",
        "Scamp",
        "Sundance",
        "Trailduster",
        "Voyager"
      ]
    },
    {
      "brand": "Polestar",
      "models": [
        "Polestar 1",
        "Polestar 2",
        "Polestar 3",
        "Polestar 4"
      ]
    },
    {
      "brand": "Pontiac",
      "models": [
        "1000",
        "6000",
        "Aztek",
        "Bonneville",
        "Catalina",
        "Fiero",
        "Firebird",
        "G3",
        "G5",
        "G6",
        "G8",
        "GTO",
        "Grand Am",
        "Grand Prix",
        "J2000",
        "Le Mans",
        "Montana",
        "Parisienne",
        "Phoenix",
        "Safari",
        "Solstice",
        "Sunbird",
        "Sunfire",
        "Torrent",
        "Trans Sport",
        "Vibe"
      ]
    },
    {
      "brand": "Porsche",
      "models": [
        "911",
        "911 Carrera",
        "911 Carrera Cabrio",
        "911 Targa",
        "911 Turbo",
        "924",
        "928",
        "944",
        "968",
        "997",
        "Boxster",
        "Carrera GT",
        "Cayenne",
        "Cayman",
        "Macan",
        "Panamera",
        "Taycan",
        "718 Cayman",
        "718 Boxster",
        "Macan Electric"
      ]
    },
    {
      "brand": "Ram",
      "models": [
        "1500",
        "2500",
        "3500",
        "4500"
      ]
    },
    {
      "brand": "Renault",
      "models": [
        "18i",
        "Captur",
        "Clio",
        "Clio Grandtour",
        "Espace",
        "Express",
        "Fluence",
        "Fuego",
        "Grand Espace",
        "Grand Modus",
        "Grand Scenic",
        "Kadjar",
        "Kangoo",
        "Kangoo Express",
        "Koleos",
        "Laguna",
        "Laguna Grandtour",
        "Latitude",
        "Le Car",
        "Mascott",
        "Mégane",
        "Mégane CC",
        "Mégane Combi",
        "Mégane Coupé",
        "Mégane Grandtour",
        "Mégane Scénic",
        "R18",
        "Scénic",
        "Sportwagon",
        "Talisman",
        "Talisman Grandtour",
        "Thalia",
        "Twingo",
        "Wind",
        "Zoé",
        "Austral",
        "Arkana",
        "Megane E-Tech"
      ]
    },
    {
      "brand": "Rolls-Royce",
      "models": [
        "Camargue",
        "Corniche",
        "Ghost",
        "Park Ward",
        "Phantom",
        "Silver Dawn",
        "Silver Seraph",
        "Silver Spirit",
        "Silver Spur",
        "Cullinan",
        "Spectre",
        "Ghost (current)"
      ]
    },
    {
      "brand": "Rover",
      "models": [
        "200",
        "214",
        "218",
        "25",
        "400",
        "414",
        "416",
        "620",
        "75"
      ]
    },
    {
      "brand": "Rivian",
      "models": [
        "R1T",
        "R1S"
      ]
    },
    {
      "brand": "Saab",
      "models": [
        "9-2X",
        "9-3",
        "9-3 Cabriolet",
        "9-3 Coupé",
        "9-3 SportCombi",
        "9-4X",
        "9-5",
        "9-5 SportCombi",
        "9-7X",
        "900",
        "900 C",
        "900 C Turbo",
        "9000"
      ]
    },
    {
      "brand": "Saturn",
      "models": [
        "Astra",
        "Aura",
        "ION",
        "L100",
        "L200",
        "L300",
        "LS",
        "LW1",
        "LW2",
        "LW200",
        "LW300",
        "Outlook",
        "Relay",
        "SC1",
        "SC2",
        "SL",
        "SL1",
        "SL2",
        "SW1",
        "SW2",
        "Sky",
        "Vue"
      ]
    },
    {
      "brand": "Scion",
      "models": [
        "FR-S",
        "iQ",
        "tC",
        "xA",
        "xB",
        "xD"
      ]
    },
    {
      "brand": "Seat",
      "models": [
        "Alhambra",
        "Altea",
        "Altea XL",
        "Arosa",
        "Cordoba",
        "Cordoba Vario",
        "Exeo",
        "Exeo ST",
        "Ibiza",
        "Ibiza ST",
        "Inca",
        "Leon",
        "Leon ST",
        "Mii",
        "Toledo",
        "Ateca",
        "Arona",
        "Tarraco",
        "Leon (Mk4)"
      ]
    },
    {
      "brand": "Smart",
      "models": [
        "Cabrio",
        "City-Coupé",
        "Compact Pulse",
        "Forfour",
        "Fortwo cabrio",
        "Fortwo coupé",
        "Roadster",
        "fortwo"
      ]
    },
    {
      "brand": "Srt",
      "models": [
        "Viper"
      ]
    },
    {
      "brand": "Sterling",
      "models": [
        "825",
        "827"
      ]
    },
    {
      "brand": "Subaru",
      "models": [
        "BRZ",
        "Baja",
        "Brat",
        "Forester",
        "Impreza",
        "Impreza WRX",
        "Impreza Wagon",
        "Justy",
        "L Series",
        "Legacy",
        "Legacy Outback",
        "Legacy Wagon",
        "Levorg",
        "Loyale",
        "Outback",
        "SVX",
        "Tribeca",
        "Tribeca B9",
        "XT",
        "XV",
        "XV Crosstrek",
        "Solterra",
        "Crosstrek (current gen)",
        "Ascent"
      ]
    },
    {
      "brand": "Suzuki",
      "models": [
        "Aerio",
        "Alto",
        "Baleno",
        "Baleno kombi",
        "Equator",
        "Esteem",
        "Forenza",
        "Grand Vitara",
        "Grand Vitara XL-7",
        "Ignis",
        "Jimny",
        "Kizashi",
        "Liana",
        "Reno",
        "SX4",
        "SX4 Sedan",
        "Samurai",
        "Sidekick",
        "Splash",
        "Swift",
        "Verona",
        "Vitara",
        "Wagon R+",
        "X-90",
        "XL7",
        "S-Cross",
        "Vitara (current)"
      ]
    },
    {
      "brand": "Tesla",
      "models": [
        "Model S",
        "Roadster",
        "Model 3",
        "Model X",
        "Model Y",
        "Cybertruck"
      ]
    },
    {
      "brand": "Toyota",
      "models": [
        "4-Runner",
        "4Runner",
        "Auris",
        "Avalon",
        "Avensis",
        "Avensis Combi",
        "Avensis Van Verso",
        "Aygo",
        "Camry",
        "Carina",
        "Celica",
        "Corolla",
        "Corolla Combi",
        "Corolla Verso",
        "Corolla sedan",
        "Corona",
        "Cressida",
        "Echo",
        "FJ Cruiser",
        "GT86",
        "Hiace",
        "Hiace Van",
        "Highlander",
        "Hilux",
        "Land Cruiser",
        "MR2",
        "MR2 Spyder",
        "Matrix",
        "Paseo",
        "Pickup",
        "Picnic",
        "Previa",
        "Prius",
        "Prius C",
        "Prius V",
        "RAV4",
        "Sequoia",
        "Sienna",
        "Solara",
        "Starlet",
        "Supra",
        "T100",
        "Tacoma",
        "Tercel",
        "Tundra",
        "Urban Cruiser",
        "Van",
        "Venza",
        "Verso",
        "Yaris",
        "Yaris Verso",
        "Corolla Cross",
        "Crown",
        "bZ4X",
        "Grand Highlander",
        "Land Cruiser (250/Prado)"
      ]
    },
    {
      "brand": "Triumph",
      "models": [
        "TR7",
        "TR8"
      ]
    },
    {
      "brand": "Vauxhall",
      "models": [
        "Corsa",
        "Astra",
        "Mokka",
        "Grandland"
      ]
    },
    {
      "brand": "Volkswagen",
      "models": [
        "Amarok",
        "Beetle",
        "Bora",
        "Bora Variant",
        "CC",
        "Cabrio",
        "Cabriolet",
        "Caddy",
        "Caddy Van",
        "California",
        "Caravelle",
        "Corrado",
        "Crafter",
        "Crafter Kombi",
        "Crafter Van",
        "CrossTouran",
        "Dasher",
        "Eos",
        "Eurovan",
        "Fox",
        "GLI",
        "GTI",
        "Golf",
        "Golf Cabrio",
        "Golf Plus",
        "Golf R",
        "Golf Sportvan",
        "Golf Variant",
        "Jetta",
        "LT",
        "Life",
        "Lupo",
        "Multivan",
        "New Beetle",
        "New Beetle Cabrio",
        "Passat",
        "Passat Alltrack",
        "Passat CC",
        "Passat Variant",
        "Passat Variant Van",
        "Phaeton",
        "Pickup",
        "Polo",
        "Polo Van",
        "Polo Variant",
        "Quantum",
        "R32",
        "Rabbit",
        "Routan",
        "Scirocco",
        "Sharan",
        "T4",
        "T4 Caravelle",
        "T4 Multivan",
        "T5",
        "T5 Caravelle",
        "T5 Multivan",
        "T5 Transporter Shuttle",
        "Tiguan",
        "Touareg",
        "Touran",
        "Vanagon",
        "ID.4",
        "ID.7",
        "Atlas Cross Sport",
        "Taos"
      ]
    },
    {
      "brand": "Volvo",
      "models": [
        "240",
        "260",
        "340",
        "360",
        "460",
        "740",
        "760",
        "780",
        "850",
        "850 kombi",
        "940",
        "960",
        "C30",
        "C70",
        "C70 Cabrio",
        "C70 Coupé",
        "S40",
        "S60",
        "S70",
        "S80",
        "S90",
        "V40",
        "V50",
        "V60",
        "V70",
        "V90",
        "XC60",
        "XC70",
        "XC90",
        "EX30",
        "EX90",
        "C40 Recharge",
        "XC40 Recharge"
      ]
    },
    {
      "brand": "Yugo",
      "models": [
        "GV",
        "GVC",
        "GVL",
        "GVS",
        "GVX"
      ]
    },
    {
      "brand": "Škoda",
      "models": [
        "Citigo",
        "Fabia",
        "Fabia Combi",
        "Fabia Sedan",
        "Favorit",
        "Felicia",
        "Felicia Combi",
        "Octavia",
        "Octavia Combi",
        "Rapid",
        "Rapid Spaceback",
        "Roomster",
        "Superb",
        "Superb Combi",
        "Yeti",
        "Enyaq",
        "Kodiaq",
        "Karoq",
        "Kamiq",
        "Scala"
      ]
    }
  ]

============================
FILE: frontend\src\data\mobile-detailing\vehicle_data\index.ts
============================
// Import vehicle data
import airplaneData from './AirplaneMakeModel.json';
import boatData from './BoatMakeModel.json';
import carData from './CarMakeModel.json';
import motorcycleData from './MotorcycleMakeModel.json';
import rvData from './RvMakeModel.json';

// Export individual data sets
export { airplaneData, boatData, carData, motorcycleData, rvData };

// Export combined data
export const vehicleData = {
  airplane: airplaneData,
  boat: boatData,
  car: carData,
  rv: rvData,
  motorcycle: motorcycleData,
};

// Export vehicle types
export const vehicleTypes = [
  { id: 'car', name: 'Car', data: carData },
  { id: 'truck', name: 'Truck', data: [] },
  { id: 'boat', name: 'Boat', data: boatData },
  { id: 'rv', name: 'RV', data: rvData },
  { id: 'airplane', name: 'Airplane', data: airplaneData },
  { id: 'motorcycle', name: 'Motorcycle', data: motorcycleData },
  { id: 'off-road', name: 'Off-Road', data: [] },
  { id: 'other', name: 'Other', data: [] },
  // Future vehicle types can be added here
];

// Helper function to get all makes for a vehicle type
export const getMakesForType = (vehicleType: string) => {
  let makes: string[] = [];
  
  switch (vehicleType) {
    case 'car': {
      makes = carData.map(item => item.brand);
      break;
    }
    case 'truck':
    case 'suv': {
      makes = carData.map(item => item.brand);
      break;
    }
    case 'off-road':
    case 'other': {
      makes = []; // No predefined makes for these types
      break;
    }
    case 'boat': {
      makes = Object.keys(boatData);
      break;
    }
    case 'rv': {
      makes = Object.keys(rvData);
      break;
    }
    case 'motorcycle': {
      makes = Object.keys(motorcycleData);
      break;
    }
    case 'airplane': {
      makes = Object.keys(airplaneData);
      break;
    }
    default: {
      makes = [];
    }
  }
  
  // Always add 'Other' at the end if it's not already there
  if (!makes.includes('Other')) {
    makes.push('Other');
  }
  
  return makes;
};

// Helper function to get models for a specific make and vehicle type
export const getModelsForMake = (vehicleType: string, make: string) => {
  let models: string[] = [];
  
  switch (vehicleType) {
    case 'car': {
      const carItem = carData.find(item => item.brand === make);
      models = carItem ? carItem.models : [];
      break;
    }
    case 'truck':
    case 'suv': {
      const carItem = carData.find(item => item.brand === make);
      models = carItem ? carItem.models : [];
      break;
    }
    case 'off-road':
    case 'other': {
      models = []; // No predefined models for these types
      break;
    }
    case 'boat': {
      if (make in boatData) {
        models = boatData[make as keyof typeof boatData];
      } else {
        models = [];
      }
      break;
    }
    case 'rv': {
      if (make in rvData) {
        models = rvData[make as keyof typeof rvData];
      } else {
        models = [];
      }
      break;
    }
    case 'motorcycle': {
      if (make in motorcycleData) {
        models = motorcycleData[make as keyof typeof motorcycleData];
      } else {
        models = [];
      }
      break;
    }
    case 'airplane': {
      if (make in airplaneData) {
        models = airplaneData[make as keyof typeof airplaneData];
      } else {
        models = [];
      }
      break;
    }
    default: {
      models = [];
    }
  }
  
  // Always add 'Other' at the end if it's not already there
  if (!models.includes('Other')) {
    models.push('Other');
  }
  
  return models;
};

// Export years dropdown utilities
export { getFormattedYears, getVehicleYears, yearsConfig } from './years-dropdown';


============================
FILE: frontend\src\data\mobile-detailing\vehicle_data\MotorcycleMakeModel.json
============================
{
    "Harley-Davidson": ["Sportster", "Softail", "Touring", "Street", "LiveWire", "Custom"],
    "Honda": ["CBR600RR", "CB500X", "Rebel 500", "Africa Twin", "Gold Wing", "Custom"],
    "Yamaha": ["YZF-R6", "MT-07", "MT-09", "XSR900", "Tenere 700", "Custom"],
    "Kawasaki": ["Ninja 400", "Ninja ZX-6R", "Z650", "Versys 650", "Vulcan S", "Custom"],
    "Suzuki": ["GSX-R750", "SV650", "V-Strom 650", "Hayabusa", "Boulevard M109R", "Custom"],
    "BMW": ["S 1000 RR", "R 1250 GS", "F 850 GS", "K 1600 GTL", "R nineT", "Custom"],
    "Ducati": ["Panigale V4", "Monster", "Multistrada", "Scrambler", "Diavel", "Custom"],
    "Triumph": ["Street Triple", "Bonneville", "Tiger 900", "Rocket 3", "Thruxton", "Custom"],
    "KTM": ["Duke 390", "RC 390", "790 Adventure", "1290 Super Duke", "690 Enduro", "Custom"],
    "Indian": ["Scout", "Chief", "FTR", "Challenger", "Roadmaster", "Custom"],
    "Custom": ["Custom"]
}

============================
FILE: frontend\src\data\mobile-detailing\vehicle_data\RvMakeModel.json
============================
{
    "Airstream": ["Classic", "Flying Cloud", "Basecamp", "Interstate", "Globetrotter", "Custom"],
    "Winnebago": ["Travato", "Revel", "View", "Minnie Winnie", "Solis", "Custom"],
    "Thor Motor Coach": ["Four Winds", "Chateau", "Axis", "Vegas", "Tuscany", "Custom"],
    "Forest River": ["Georgetown", "Forester", "Sunseeker", "FR3", "Flagstaff", "Custom"],
    "Jayco": ["Greyhawk", "Redhawk", "Melbourne", "Seneca", "Alante", "Custom"],
    "Tiffin": ["Allegro", "Phaeton", "Wayfarer", "Open Road", "Zephyr", "Custom"],
    "Coachmen": ["Freelander", "Leprechaun", "Mirada", "Pursuit", "Galleria", "Custom"],
    "Newmar": ["Bay Star", "Dutch Star", "King Aire", "Ventana", "Canyon Star", "Custom"],
    "Entegra Coach": ["Odyssey", "Vision", "Accolade", "Aspire", "Anthem", "Custom"],
    "Keystone": ["Montana", "Outback", "Cougar", "Bullet", "Passport", "Custom"],
    "Custom": ["Custom"]
}




============================
FILE: frontend\src\data\mobile-detailing\vehicle_data\years-dropdown.ts
============================
/**
 * Generate years for vehicle dropdowns
 * Returns array from current year + 1 down to 1950, plus "Before 1950"
 */
export const getVehicleYears = (): (number | string)[] => {
  const currentYear = new Date().getFullYear();
  const maxYear = currentYear + 1;
  const minYear = 1950;
  
  const years: (number | string)[] = [];
  for (let year = maxYear; year >= minYear; year--) {
    years.push(year);
  }
  
  // Add "Before {minYear}" at the end
  years.push(`Before ${String(minYear)}`);
  
  return years;
};

/**
 * Static years data for reference
 */
export const yearsConfig = {
  minYear: 1950,
  maxYear: new Date().getFullYear() + 1,
  totalYears: new Date().getFullYear() + 1 - 1950 + 1
} as const;

/**
 * Get years formatted for display
 */
export const getFormattedYears = () => {
  return getVehicleYears().map(year => ({
    value: year,
    label: year.toString()
  }));
};


============================
FILE: frontend\src\data\pet-grooming\assets.json
============================
{
  "description": "Image assets and their metadata for pet grooming industry - placeholder for future implementation",
  "logo": {},
  "hero": [],
  "services": {
    "grid": [],
    "thumbnails": {}
  }
}



============================
FILE: frontend\src\data\pet-grooming\content-defaults.json
============================
{
  "description": "Default text content for new pet grooming tenants - placeholder for future implementation",
  "hero": {
    "h1": "",
    "subTitle": ""
  },
  "reviews": {
    "title": "",
    "subtitle": ""
  },
  "faq": {
    "title": "",
    "subtitle": ""
  }
}



============================
FILE: frontend\src\data\pet-grooming\defaults\content.json
============================
{
  "$schema": "../../schemas/defaults-content.schema.json",
  "description": "Default content for new pet grooming tenants - used during provisioning",
  
  "hero": {
    "h1": "Professional Pet Grooming Services",
    "subtitle": "Expert grooming for dogs and cats of all breeds and sizes. From basic baths to full spa treatments, we treat your pets like family.",
    "cta": {
      "primary": {
        "label": "Book Appointment",
        "href": "/quote"
      },
      "secondary": {
        "label": "View Services",
        "href": "/services"
      }
    }
  },

  "about": {
    "title": "About Our Pet Grooming Service",
    "content": "We provide professional pet grooming services with a gentle, caring approach. Our experienced groomers are trained in breed-specific styling and handling techniques to ensure your pet's comfort and safety.\n\nWhether your pet needs a simple bath or a full grooming service, we deliver high-quality results in a calm, stress-free environment.",
    "highlights": [
      "Certified, experienced groomers",
      "Gentle, fear-free approach",
      "Breed-specific styling",
      "Premium products and equipment"
    ]
  },

  "footer": {
    "tagline": "Professional pet grooming with a gentle touch",
    "description": "Expert grooming services for dogs and cats, delivered with care and attention to your pet's comfort."
  },

  "contact": {
    "callToAction": "Ready to pamper your pet?",
    "description": "Contact us today to schedule a grooming appointment or request information about our services."
  }
}



============================
FILE: frontend\src\data\pet-grooming\defaults\faq.json
============================
{
  "$schema": "../../schemas/defaults-faq.schema.json",
  "description": "Default FAQ content for pet grooming tenants",
  
  "faqs": [
    {
      "category": "general",
      "question": "What breeds do you groom?",
      "answer": "We groom dogs and cats of all breeds and sizes, from small dogs to large breeds. Our groomers are trained in breed-specific cuts and can accommodate any pet."
    },
    {
      "category": "general",
      "question": "How often should I have my pet groomed?",
      "answer": "Most dogs benefit from professional grooming every 4-8 weeks, depending on breed and coat type. We can recommend a schedule based on your pet's specific needs."
    },
    {
      "category": "general",
      "question": "Do I need to make an appointment?",
      "answer": "Yes, we work by appointment to ensure each pet receives our full attention. You can book online, by phone, or in person."
    },
    {
      "category": "services",
      "question": "What's included in a full groom?",
      "answer": "Our full grooming service includes bath, blow dry, haircut/styling, nail trim, ear cleaning, sanitary trim, teeth brushing, and finishing cologne."
    },
    {
      "category": "services",
      "question": "Do you offer cat grooming?",
      "answer": "Yes! We offer specialized grooming services for cats with groomers experienced in handling felines. Services include baths, brush outs, nail trims, and lion cuts."
    },
    {
      "category": "services",
      "question": "Can you handle anxious or difficult pets?",
      "answer": "Absolutely. Our groomers are trained in gentle handling techniques and work patiently with anxious pets. We take breaks as needed and use positive reinforcement."
    },
    {
      "category": "health",
      "question": "What if I find fleas on my pet?",
      "answer": "We offer flea treatments and will notify you if we discover fleas during grooming. We recommend consulting your vet for comprehensive flea prevention."
    },
    {
      "category": "health",
      "question": "Do you check for health issues?",
      "answer": "While we're not veterinarians, we do note any skin issues, lumps, ear problems, or other concerns and will alert you so you can follow up with your vet."
    },
    {
      "category": "health",
      "question": "What vaccinations does my pet need?",
      "answer": "We require current rabies vaccination for all pets. Some groomers also require bordetella and distemper. Check with us for specific requirements."
    },
    {
      "category": "appointment",
      "question": "How long will grooming take?",
      "answer": "Grooming time varies by service and pet size. Basic baths take 1-1.5 hours, while full grooming typically takes 2-3 hours. We'll give you an estimated pickup time when you drop off."
    },
    {
      "category": "appointment",
      "question": "Can I stay during the grooming?",
      "answer": "For the best results and your pet's focus, we recommend dropping off and picking up. Many pets are calmer when their owner isn't present."
    },
    {
      "category": "appointment",
      "question": "What is your cancellation policy?",
      "answer": "We require 24 hours notice for cancellations or rescheduling. Late cancellations may incur a fee."
    }
  ]
}



============================
FILE: frontend\src\data\pet-grooming\defaults\metadata.json
============================
{
  "$schema": "../../schemas/defaults-metadata.schema.json",
  "description": "Default SEO metadata for pet grooming tenants",
  
  "seo": {
    "titleTemplate": "{businessName} | Professional Pet Grooming",
    "defaultTitle": "Professional Pet Grooming Services",
    "description": "Expert pet grooming services for dogs and cats of all breeds. From basic baths to full spa treatments, we provide gentle, professional care for your pets.",
    "keywords": [
      "pet grooming",
      "dog grooming",
      "cat grooming",
      "dog bath",
      "pet spa",
      "mobile pet grooming",
      "dog haircut",
      "pet salon"
    ],
    "openGraph": {
      "type": "website",
      "locale": "en_US",
      "siteName": "Professional Pet Grooming Services"
    },
    "twitter": {
      "card": "summary_large_image",
      "site": "@petgrooming"
    }
  },

  "pages": {
    "home": {
      "title": "Professional Pet Grooming Services | {businessName}",
      "description": "Expert grooming for dogs and cats in {serviceArea}. Full grooming, spa treatments, and specialized care delivered with a gentle touch."
    },
    "services": {
      "title": "Our Grooming Services | {businessName}",
      "description": "Explore our comprehensive pet grooming services including full grooms, spa packages, de-shedding treatments, and specialized care."
    },
    "about": {
      "title": "About Us | {businessName}",
      "description": "Learn about our professional grooming team and our commitment to providing gentle, expert care for pets of all breeds and sizes."
    },
    "contact": {
      "title": "Contact Us | {businessName}",
      "description": "Get in touch to schedule a grooming appointment or learn more about our services. Serving {serviceArea} and surrounding areas."
    },
    "quote": {
      "title": "Book Appointment | {businessName}",
      "description": "Schedule your pet's grooming appointment or request information about our services and pricing."
    }
  },

  "structuredData": {
    "organizationType": "LocalBusiness",
    "additionalTypes": [
      "PetStore",
      "AnimalShelter"
    ],
    "defaultServiceArea": {
      "type": "radius",
      "value": 15,
      "unit": "miles"
    }
  }
}



============================
FILE: frontend\src\data\pet-grooming\defaults\services.json
============================
{
  "$schema": "../../schemas/defaults-services.schema.json",
  "description": "Default service descriptions for pet grooming tenants (informational only, no pricing)",
  
  "services": [
    {
      "slug": "bath-brush",
      "title": "Bath & Brush",
      "shortDescription": "Basic grooming service for clean, fresh pets",
      "description": "Our bath and brush service includes a thorough bath with premium shampoo, blow dry, brush out, nail trim, ear cleaning, and finishing cologne. Perfect for maintaining your pet's coat between full grooming appointments.",
      "benefits": [
        "Premium shampoo and conditioner",
        "Thorough brush out and blow dry",
        "Nail trim and filing",
        "Ear cleaning",
        "Light cologne or fragrance"
      ],
      "duration": "1-1.5 hours",
      "category": "basic"
    },
    {
      "slug": "full-groom",
      "title": "Full Grooming Service",
      "shortDescription": "Complete grooming with haircut and styling",
      "description": "Our comprehensive grooming service includes everything in our bath package plus professional haircut and styling. We follow breed standards or customize the style to your preferences.",
      "benefits": [
        "Complete bath and brush out",
        "Professional haircut and styling",
        "Breed-specific or custom cuts",
        "Nail trim and paw pad trim",
        "Sanitary trim",
        "Teeth brushing"
      ],
      "duration": "2-3 hours",
      "category": "grooming"
    },
    {
      "slug": "spa-package",
      "title": "Spa Package",
      "shortDescription": "Luxury pampering experience for your pet",
      "description": "Treat your pet to our ultimate spa experience! This premium service includes all grooming services plus special treatments like deep conditioning, facial, teeth cleaning, and nail polish.",
      "benefits": [
        "Complete grooming service",
        "Deep conditioning treatment",
        "Blueberry facial",
        "Teeth cleaning",
        "Nail polish or nail art",
        "Bow, bandana, or accessory",
        "Professional photo"
      ],
      "duration": "3-4 hours",
      "category": "spa"
    },
    {
      "slug": "puppy-first-groom",
      "title": "Puppy's First Groom",
      "shortDescription": "Gentle introduction to grooming",
      "description": "Special grooming experience designed for puppies having their first professional grooming. We take extra time and care to make it a positive, stress-free experience.",
      "benefits": [
        "Gentle, patient approach",
        "Basic bath and brush",
        "Light trim and shaping",
        "Nail introduction",
        "Positive reinforcement",
        "Extra cuddles and treats"
      ],
      "duration": "1-1.5 hours",
      "category": "specialized"
    },
    {
      "slug": "deshedding-treatment",
      "title": "De-Shedding Treatment",
      "shortDescription": "Reduce shedding and maintain healthy coat",
      "description": "Specialized treatment for heavy shedding breeds. Our de-shedding service removes loose undercoat, reduces shedding, and promotes healthy skin and coat.",
      "benefits": [
        "Specialized de-shedding shampoo",
        "Deep conditioning treatment",
        "Thorough undercoat removal",
        "High-velocity blow out",
        "Significantly reduced shedding"
      ],
      "duration": "1.5-2 hours",
      "category": "treatment"
    },
    {
      "slug": "cat-grooming",
      "title": "Cat Grooming",
      "shortDescription": "Gentle grooming for felines",
      "description": "Specialized grooming services for cats, with extra patience and care. We understand feline behavior and work gently to keep your cat comfortable and stress-free.",
      "benefits": [
        "Gentle, fear-free approach",
        "Bath and blow dry",
        "Brush out and detangling",
        "Nail trim",
        "Sanitary trim",
        "Lion cuts available"
      ],
      "duration": "1-2 hours",
      "category": "specialized"
    }
  ]
}



============================
FILE: frontend\src\data\pet-grooming\index.ts
============================
/**
 * Pet Grooming Industry Config Loader
 * Assembles modular config files into MainSiteConfig structure
 * 
 * NOTE: This industry is not yet fully configured. Placeholder files are used
 * to establish the modular architecture pattern. The old site.json is still
 * available as a reference/backup.
 */

import type { MainSiteConfig } from '@/shared/types/location';

/**
 * Load and assemble pet-grooming config from modular files
 * Falls back to legacy site.json data structure for now
 */
export async function loadPetGroomingConfig(): Promise<MainSiteConfig> {
  // TODO: Populate modular files with actual pet grooming data
  // For now, import the legacy site.json from archive as fallback
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Legacy JSON import, typing refactor planned
  const legacyConfig = await import('./_archive/site.json.legacy');
  
  // Return legacy config until modular files are populated
  // Once populated, replace with assembled config like mobile-detailing
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- Legacy JSON import, typing refactor planned
  return legacyConfig.default as MainSiteConfig;
}



============================
FILE: frontend\src\data\pet-grooming\seo-defaults.json
============================
{
  "title": "Professional Pet Grooming & Spa Services",
  "description": "Expert pet grooming, bathing, and spa services for dogs and cats. Professional groomers with gentle care for your furry friends.",
  "keywords": "pet grooming, dog grooming, cat grooming, pet spa, pet bathing, professional groomer, pet care, dog wash, cat wash, pet styling",
  "ogImage": "/pet-grooming/images/hero/hero1.png",
  "twitterImage": "/pet-grooming/images/hero/hero1.png",
  "canonicalPath": "/",
  "robots": "index,follow"
}



============================
FILE: frontend\src\data\pet-grooming\_archive\site.json.legacy
============================
{
  "brand": "Paws & Polish",
  "slug": "site",
  "urlPath": "/",

  "logo": {
    "url": "/icons/pet-grooming-logo.webp",
    "alt": "Paws & Polish Logo",
    "darkUrl": "/icons/pet-grooming-logo-dark.webp",
    "lightUrl": "/icons/pet-grooming-logo.webp"
  },

  "seo": {
    "title": "Premium Pet Grooming — Dogs & Cats",
    "description": "Professional mobile pet grooming services. Bathing, trimming, nail clipping, and spa treatments for dogs and cats at your home.",
    "keywords": [
      "pet grooming",
      "dog grooming",
      "cat grooming",
      "mobile pet grooming",
      "pet spa",
      "nail trimming",
      "pet bathing"
    ],
    "canonicalPath": "/",
    "ogImage": "/images/pet-grooming/hero/hero1.png",
    "twitterImage": "/images/pet-grooming/hero/hero1.png",
    "robots": "index,follow"
  },

  "hero": {
    "h1": "Professional Pet Grooming",
    "sub": "Mobile grooming for dogs & cats at your home.",
    "images": [
      { 
        "url": "/images/pet-grooming/hero/hero1.png", 
        "alt": "Professional pet grooming service in action",
        "width": 1920,
        "height": 1080,
        "priority": true
      },
      { 
        "url": "/images/pet-grooming/hero/hero2.png", 
        "alt": "Happy dog after professional grooming",
        "width": 1920,
        "height": 1080,
        "priority": true
      }
    ],
    "ctas": [
      { "label": "Book Grooming", "href": "/book" },
      { "label": "Get Quote", "href": "/quote" }
    ]
  },

  "finder": {
    "placeholder": "Enter your ZIP to check availability",
    "sub": "Book directly with our certified groomers (no third-party platforms)."
  },

  "servicesGrid": [
    {
      "slug": "dog-grooming",
      "title": "Dog Grooming",
      "image": "/images/pet-grooming/services/dog-grooming.png",
      "alt": "Professional dog grooming service",
      "href": "/services/dog-grooming",
      "width": 400,
      "height": 300,
      "priority": false
    },
    {
      "slug": "cat-grooming",
      "title": "Cat Grooming",
      "image": "/images/pet-grooming/services/cat-grooming.png",
      "alt": "Professional cat grooming service",
      "href": "/services/cat-grooming",
      "width": 400,
      "height": 300,
      "priority": false
    },
    {
      "slug": "nail-trimming",
      "title": "Nail Trimming",
      "image": "/images/pet-grooming/services/nail-trimming.png",
      "alt": "Professional pet nail trimming",
      "href": "/services/nail-trimming",
      "width": 400,
      "height": 300,
      "priority": false
    },
    {
      "slug": "pet-spa",
      "title": "Pet Spa",
      "image": "/images/pet-grooming/services/pet-spa.png",
      "alt": "Luxury pet spa treatment",
      "href": "/services/pet-spa",
      "width": 400,
      "height": 300,
      "priority": false
    },
    {
      "slug": "flea-treatment",
      "title": "Flea Treatment",
      "image": "/images/pet-grooming/services/flea-treatment.png",
      "alt": "Professional flea and tick treatment",
      "href": "/services/flea-treatment",
      "width": 400,
      "height": 300,
      "priority": false
    },
    {
      "slug": "de-shedding",
      "title": "De-shedding",
      "image": "/images/pet-grooming/services/de-shedding.png",
      "alt": "Professional de-shedding treatment",
      "href": "/services/de-shedding",
      "width": 400,
      "height": 300,
      "priority": false
    }
  ],

  "reviews": {
    "title": "What Pet Parents Say",
    "subtitle": "Don't just take our word for it. See what happy pet parents have to say about our grooming services.",
    "ratingValue": "4.9",
    "reviewCount": 87,
    "source": "Google"
  },

  "faq": {
    "title": "Frequently Asked Questions",
    "subtitle": "Find answers to common questions about our pet grooming services"
  },

  "contact": {
    "email": "grooming@pawsandpolish.com",
    "phone": "(555) 123-PAWS"
  },

  "socials": {
    "facebook": "https://www.facebook.com/pawsandpolish",
    "instagram": "https://www.instagram.com/pawsandpolish",
    "tiktok": "https://www.tiktok.com/@pawsandpolish",
    "youtube": "https://www.youtube.com/@pawsandpolish",
    "googleBusiness": "https://share.google/petgrooming"
  }
}


============================
FILE: frontend\src\data\README.md
============================
# Industry Data & Defaults

This directory contains industry-specific data for the multi-tenant platform.

## Structure

```
data/
├── mobile-detailing/
│   ├── assets.json            ← Images and their metadata (logos, hero, thumbnails)
│   ├── content-defaults.json  ← Text defaults for DB provisioning (ONE-TIME USE)
│   ├── seo-defaults.json      ← SEO defaults for DB provisioning (ONE-TIME USE)
│   ├── site.json              ← [LEGACY - being phased out]
│   ├── services/              ← Service detail pages (self-contained JSON files)
│   ├── faq/                   ← FAQ utilities (loaded from code, not JSON)
│   ├── pricing/               ← Pricing data (addon feature)
│   ├── gallery/               ← Gallery data
│   └── vehicle_data/          ← Vehicle make/model lookups
├── lawncare/
├── maid-service/
└── pet-grooming/
```

---

## Core Files

### `assets.json` - Industry Image Catalog

Contains **shared images** that all tenants start with:

- Logo variants (default, dark, light)
- Hero background images (desktop + mobile)
- Service grid thumbnails

**Used at:** Runtime - Frontend loads these assets for display

**Example:**
```json
{
  "logo": { "default": {...}, "dark": {...} },
  "hero": [{ "desktop": {...}, "mobile": {...}, "alt": "..." }],
  "services": { "auto-detailing": { "url": "...", "alt": "..." } }
}
```

---

### `content-defaults.json` - Text Provisioning Template

Contains **text-only defaults** for populating the database during signup:

```json
{
  "hero": {
    "h1": "Professional Mobile Detailing",
    "subTitle": "Mobile detailing for cars, boats, & RVs."
  },
  "reviews": {
    "title": "What Our Customers Say",
    "subtitle": "..."
  },
  "faq": {
    "title": "Frequently Asked Questions",
    "subtitle": "..."
  }
}
```

**Maps to `website.content` table:**
- `hero.h1` → `hero_title`
- `hero.subTitle` → `hero_subtitle`
- `reviews.title` → `reviews_title`
- `reviews.subtitle` → `reviews_subtitle`
- `faq.title` → `faq_title`
- `faq.subtitle` → `faq_subtitle`

**Used at:** Signup only (one-time) - Backend reads this to populate DB

---

### `seo-defaults.json` - SEO Provisioning Template

Page-level SEO defaults for database provisioning:

```json
{
  "title": "Premium Mobile Detailing — Cars, Boats, & RVs",
  "description": "Professional mobile detailing services...",
  "ogImage": "/mobile-detailing/images/hero/hero1.png",
  "canonicalPath": "/",
  "robots": "index,follow"
}
```

**Used at:** Signup only (one-time) - Populates SEO fields in DB

---

## Architecture: Database-First

### ✅ The Clean Way (Current)

**During Onboarding (ONE-TIME):**
```
1. Tenant signs up
2. Backend loads content-defaults.json + seo-defaults.json
3. Populates website.content table with defaults
4. DB now contains: hero_title, hero_subtitle, reviews_title, etc.
```

**At Runtime (EVERY VISIT):**
```
1. Fetch tenant data from database
2. Load shared assets.json (images)
3. Render site
```

**Result:**
- ✅ Single source of truth (database)
- ✅ Same behavior whether customized or not
- ✅ Faster (one DB query)
- ✅ Simpler (no merging logic)

---

### ❌ What We DON'T Do

~~Load JSON defaults at runtime~~  
~~Merge DB + JSON~~  
~~Fallback to JSON if DB empty~~

**JSON files = Provisioning templates, NOT runtime fallbacks**

---

## Service Pages

Service pages are **self-contained** JSON files:

```
services/
├── auto-detailing.json      ← Everything: content, images, SEO, schema
├── ceramic-coating.json
└── paint-correction.json
```

Each file contains:
- Text content (title, description, benefits, process)
- Images (hero, process steps, before/after)
- SEO metadata
- JSON-LD schema

**Why self-contained?**
- Less tenant customization expected (educational content)
- Simpler to manage (one file per service)
- Can split later if needed

## Tenant Provisioning Flow

```
┌─────────────────┐
│ Tenant Signs Up │
└────────┬────────┘
         │
         ▼
┌─────────────────────────┐
│ Load Defaults (Backend) │
│ - content-defaults.json │
│ - seo-defaults.json     │
└────────┬────────────────┘
         │
         ▼
┌─────────────────────────┐
│ Populate DB             │
│ website.content table   │
│ - hero_title            │
│ - hero_subtitle         │
│ - reviews_title         │
│ - faq_title             │
│ - seo_title             │
│ - seo_description       │
└────────┬────────────────┘
         │
         ▼
┌─────────────────────────┐
│ Tenant Site Ready!      │
│ DB = Single Source      │
└─────────────────────────┘
```

---

## Adding a New Industry

1. **Create directory:** `data/{industry-slug}/`
2. **Create files:**
   - `assets.json` - Industry images (logos, hero, thumbnails)
   - `content-defaults.json` - Text defaults for DB
   - `seo-defaults.json` - SEO defaults for DB
3. **Add services:** Create `services/*.json` files
4. **Update types:** Add to `IndustrySlug` in `@/shared/utils/loadDefaults.ts`
5. **Add assets:** Upload to `/public/{industry-slug}/`

---

## FAQ Content

FAQ items are **industry-specific** and stored in JSON files:

```
data/{industry}/faq/
  ├── general.json
  ├── services.json
  ├── pricing.json
  ├── scheduling.json
  ├── locations.json
  ├── preparation.json
  ├── payments.json
  ├── warranty.json
  └── aftercare.json
```

**Loading:**
- FAQs are loaded dynamically via `loadIndustryFAQs(industry)`
- Each category is a separate file for easy editing
- Categories are combined automatically at runtime
- Can be overridden per tenant via `website.content.faq_items` (JSONB)

**Section headers** (title/subtitle) come from `content-defaults.json`.



============================
FILE: frontend\src\env.d.ts
============================
/// <reference types="vite/client" />
/// <reference types="@types/google.maps" />

// Environment variables
interface ImportMetaEnv {
  readonly VITE_ENABLE_SW?: '0' | '1';
  // Add other env vars as needed
}

interface ImportMeta {
  readonly env: ImportMetaEnv;
}

// Ensure `window.google` is strongly typed
declare global {
  interface Window {
    google?: typeof google;
  }
}

export {};


============================
FILE: frontend\src\features\adminDashboard\api\admin.api.ts
============================
interface ReviewFormData {
  name: string;
  stars: number;
  title: string;
  content: string;
  type: 'affiliate' | 'mdh';
  businessSlug?: string;
  source: 'website' | 'google' | 'yelp' | 'facebook';
  daysAgo: number;
  weeksAgo: number;
  specificDate: string;
  serviceCategory: 'car' | 'truck' | 'boat' | 'rv' | 'motorcycle' | 'ceramic' | 'none';
  avatarFile?: File;
  reviewerUrl?: string;
}

interface SeedReviewsResponse {
  errorDetails?: unknown[];
  count?: number;
  reviewIds?: string[];
}

/**
 * Seed reviews via the admin API
 */
export const seedReviews = async (
  reviews: ReviewFormData[],
  signal?: AbortSignal
): Promise<SeedReviewsResponse> => {
  const token = localStorage.getItem('token');
  if (!token) {
    throw new Error('No authentication token found');
  }

  const response = await fetch('/api/admin/seed-reviews', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify({ reviews }),
    signal
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Server error: ${String(response.status)} - ${errorText}`);
  }

  return await response.json() as SeedReviewsResponse;
};

/**
 * Upload a reviewer avatar via the admin API
 */
export const uploadReviewerAvatar = async (
  avatarFile: File,
  reviewerName: string,
  reviewId: string
): Promise<unknown> => {
  const token = localStorage.getItem('token');
  if (!token) {
    throw new Error('No authentication token found');
  }

  const formData = new FormData();
  formData.append('avatar', avatarFile);
  formData.append('reviewerName', reviewerName);
  formData.append('reviewId', reviewId);

  const response = await fetch('/api/avatar/upload', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`
    },
    body: formData
  });

  if (!response.ok) {
    throw new Error('Avatar upload failed');
  }

  return await response.json();
};



============================
FILE: frontend\src\features\adminDashboard\components\AdminLayout.tsx
============================
import React from 'react';
import { Database } from 'lucide-react';

interface AdminLayoutProps {
  children: React.ReactNode;
}

export const AdminLayout: React.FC<AdminLayoutProps> = ({ children }) => {
  return (
    <div className="min-h-screen bg-gray-900">
      <header className="bg-gray-800 shadow-sm border-b border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center">
              <Database className="w-8 h-8 text-blue-600 mr-3" />
              <h1 className="text-xl font-semibold text-white">Admin Dashboard</h1>
            </div>
            <div className="flex items-center gap-4">
              <span className="text-sm text-gray-300">Welcome back, Admin</span>
              <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                <span className="text-white text-sm font-medium">A</span>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {children}
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\adminDashboard\components\AdminTabs.tsx
============================
import React from 'react';
import { BarChart3, Database, Settings, Star,Users } from 'lucide-react';

import type { AdminTab } from '@/features/adminDashboard/types';
import { ADMIN_TABS } from '@/features/adminDashboard/utils/constants';

interface AdminTabsProps {
  activeTab: AdminTab;
  onTabChange: (tab: AdminTab) => void;
}

const iconMap = {
  Database,
  Users,
  Star,
  BarChart3,
  Settings,
};

export const AdminTabs: React.FC<AdminTabsProps> = ({ activeTab, onTabChange }) => {
  return (
    <nav className="flex space-x-8 mb-8">
      {ADMIN_TABS.map((tab) => {
        const Icon = iconMap[tab.icon];
        return (
          <button
            key={tab.id}
            onClick={() => { onTabChange(tab.id as AdminTab); }}
            className={`flex items-center gap-2 px-3 py-2 rounded-md text-sm font-medium transition-colors ${
              activeTab === tab.id
                ? 'bg-blue-900 text-blue-300 border-b-2 border-blue-400'
                : 'text-gray-300 hover:text-white hover:bg-gray-700'
            }`}
          >
            <Icon className="w-4 h-4" />
            {tab.label}
          </button>
        );
      })}
    </nav>
  );
};


============================
FILE: frontend\src\features\adminDashboard\components\DashboardPage.tsx
============================
import React, { useState } from 'react';

import type { AdminTab } from '@/features/adminDashboard/types';
import { useBrowserTab } from '@/shared/hooks';

import { AdminLayout, AdminTabs, TabContent } from './';

const DashboardPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState<AdminTab>('users');

  // Set browser tab title and favicon for admin dashboard
  useBrowserTab({
    title: 'Admin Dashboard - That Smart Site',
    useBusinessName: false,
  });

  const handleTabChange = (tab: AdminTab) => {
    setActiveTab(tab);
  };

  return (
    <AdminLayout>
      <h1 className="sr-only">Admin Dashboard</h1>
      <AdminTabs 
        activeTab={activeTab}
        onTabChange={handleTabChange}
      />
      
      <TabContent 
        activeTab={activeTab}
      />
    </AdminLayout>
  );
};

export default DashboardPage;

============================
FILE: frontend\src\features\adminDashboard\components\index.ts
============================
export { AdminLayout } from './AdminLayout';
export { AdminTabs } from './AdminTabs';
export { TabContent } from './TabContent';


============================
FILE: frontend\src\features\adminDashboard\components\shared\ApplicationModal.tsx
============================
import React, { useState } from 'react';
import { CheckCircle, X, XCircle } from 'lucide-react';

import { Button } from '@/shared/ui';

interface ApplicationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: { slug?: string; reason?: string; notes: string }) => Promise<void>;
  type: 'approve' | 'reject';
  businessName: string;
  isLoading?: boolean;
}

export const ApplicationModal: React.FC<ApplicationModalProps> = ({
  isOpen,
  onClose,
  onSubmit,
  type,
  businessName,
  isLoading = false
}) => {
  const [formData, setFormData] = useState({
    slug: '',
    reason: '',
    notes: ''
  });

  const handleSubmit = (e: React.FormEvent): void => {
    e.preventDefault();
    
    // Validate slug format for approval
    if (type === 'approve' && formData.slug) {
      if (formData.slug.length < 3) {
        alert('Slug must be at least 3 characters long');
        return;
      }
      if (formData.slug.length > 50) {
        alert('Slug must be less than 50 characters long');
        return;
      }
      if (!/^[a-z0-9-]+$/.test(formData.slug)) {
        alert('Slug must contain only lowercase letters, numbers, and hyphens');
        return;
      }
      if (formData.slug.startsWith('-') || formData.slug.endsWith('-')) {
        alert('Slug cannot start or end with a hyphen');
        return;
      }
      if (formData.slug.includes('--')) {
        alert('Slug cannot contain consecutive hyphens');
        return;
      }
    }
    
    // Validate rejection reason
    if (type === 'reject' && formData.reason) {
      if (formData.reason.trim().length < 10) {
        alert('Rejection reason must be at least 10 characters long');
        return;
      }
      if (formData.reason.trim().length > 500) {
        alert('Rejection reason must be less than 500 characters long');
        return;
      }
    }
    
    // Validate admin notes length
    if (formData.notes && formData.notes.trim().length > 1000) {
      alert('Admin notes must be less than 1000 characters long');
      return;
    }
    
    void onSubmit(formData);
    setFormData({ slug: '', reason: '', notes: '' });
  };

  const handleClose = () => {
    setFormData({ slug: '', reason: '', notes: '' });
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-gray-800 rounded-lg p-6 w-full max-w-md mx-4">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-2">
            {type === 'approve' ? (
              <CheckCircle className="w-6 h-6 text-green-400" />
            ) : (
              <XCircle className="w-6 h-6 text-red-400" />
            )}
            <h3 className="text-lg font-semibold text-white">
              {type === 'approve' ? 'Approve' : 'Reject'} Application
            </h3>
          </div>
          <Button
            onClick={handleClose}
            variant="ghost"
            size="sm"
            className="text-gray-400 hover:text-white p-1"
          >
            <X className="w-5 h-5" />
          </Button>
        </div>

        <div className="mb-4">
          <p className="text-gray-300 text-sm">
            {type === 'approve' ? 'Approving' : 'Rejecting'} application for{' '}
            <span className="font-medium text-white">{businessName}</span>
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          {type === 'approve' && (
            <div>
              <label htmlFor="slug" className="block text-sm font-medium text-gray-300 mb-2">
                Approved Slug *
              </label>
              <input
                type="text"
                id="slug"
                value={formData.slug}
                onChange={(e) => { setFormData({ ...formData, slug: e.target.value }); }}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="e.g., my-business-name"
                required
              />
              <p className="text-xs text-gray-400 mt-1">
                This will be the URL slug for the affiliate&rsquo;s business page
              </p>
            </div>
          )}

          {type === 'reject' && (
            <div>
              <label htmlFor="reason" className="block text-sm font-medium text-gray-300 mb-2">
                Rejection Reason *
              </label>
              <textarea
                id="reason"
                value={formData.reason}
                onChange={(e) => { setFormData({ ...formData, reason: e.target.value }); }}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Please provide a reason for rejection..."
                rows={3}
                required
              />
            </div>
          )}

          <div>
            <label htmlFor="notes" className="block text-sm font-medium text-gray-300 mb-2">
              Admin Notes
            </label>
            <textarea
              id="notes"
              value={formData.notes}
              onChange={(e) => { setFormData({ ...formData, notes: e.target.value }); }}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Additional notes (optional)..."
              rows={3}
            />
          </div>

          <div className="flex gap-3 pt-2">
            <Button
              type="button"
              onClick={handleClose}
              variant="secondary"
              size="md"
              className="flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-700"
              disabled={isLoading}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              variant={type === 'approve' ? 'primary' : 'destructive'}
              size="md"
              className={`flex-1 px-4 py-2 ${
                type === 'approve'
                  ? 'bg-green-600 hover:bg-green-700'
                  : 'bg-red-600 hover:bg-red-700'
              }`}
              loading={isLoading}
              disabled={isLoading}
            >
              {type === 'approve' ? 'Approve' : 'Reject'}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\adminDashboard\components\shared\DeleteConfirmationModal.tsx
============================
import React from 'react';
import { AlertTriangle, X } from 'lucide-react';

import { Button } from '@/shared/ui';

interface DeleteConfirmationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  title: string;
  message: string;
  itemName: string;
  isLoading?: boolean;
  isTenant?: boolean;
}

export const DeleteConfirmationModal: React.FC<DeleteConfirmationModalProps> = ({
  isOpen,
  onClose,
  onConfirm,
  title,
  message,
  itemName,
  isLoading = false,
  isTenant = false
}) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-gray-800 rounded-lg p-6 w-full max-w-md mx-4">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-2">
            <AlertTriangle className="w-6 h-6 text-red-400" />
            <h3 className="text-lg font-semibold text-white">
              {title}
            </h3>
          </div>
          <Button
            onClick={onClose}
            variant="ghost"
            size="sm"
            className="text-gray-400 hover:text-white"
            disabled={isLoading}
          >
            <X className="w-4 h-4" />
          </Button>
        </div>

        <div className="mb-6">
          <p className="text-gray-300 mb-4">
            {message}
          </p>
          
          <div className="bg-gray-700 rounded-lg p-3 mb-4">
            <p className="text-white font-medium">
              {itemName}
            </p>
          </div>

          {isTenant && (
            <div className="bg-red-900/20 border border-red-700 rounded-lg p-4 mb-4">
              <p className="text-red-200 text-sm font-medium mb-2">⚠️ This will permanently delete:</p>
              <ul className="text-red-300 text-xs space-y-1 ml-4">
                <li>• Tenant business record</li>
                <li>• User account</li>
                <li>• All reviews</li>
                <li>• Website content</li>
                <li>• Images and gallery</li>
                <li>• Services and pricing</li>
                <li>• Bookings and quotes</li>
                <li>• Schedule and appointments</li>
                <li>• Subscriptions</li>
                <li>• Health monitoring data</li>
              </ul>
            </div>
          )}

          <p className="text-red-400 text-sm font-medium">
            This action cannot be undone!
          </p>
        </div>

        <div className="flex gap-3">
          <Button
            onClick={onClose}
            variant="secondary"
            className="flex-1"
            disabled={isLoading}
          >
            Cancel
          </Button>
          <Button
            onClick={onConfirm}
            variant="destructive"
            className="flex-1 bg-red-600 hover:bg-red-700"
            disabled={isLoading}
          >
            {isLoading ? 'Deleting...' : 'Delete'}
          </Button>
        </div>
      </div>
    </div>
  );
};



============================
FILE: frontend\src\features\adminDashboard\components\shared\index.ts
============================
export { ApplicationModal } from './ApplicationModal';
export { DeleteConfirmationModal } from './DeleteConfirmationModal';
export { Toast } from './Toast';


============================
FILE: frontend\src\features\adminDashboard\components\shared\Toast.tsx
============================
import React, { useEffect } from 'react';
import { CheckCircle, X,XCircle } from 'lucide-react';

interface ToastProps {
  message: string;
  type: 'success' | 'error';
  isVisible: boolean;
  onClose: () => void;
  duration?: number;
}

export const Toast: React.FC<ToastProps> = ({
  message,
  type,
  isVisible,
  onClose,
  duration = 5000
}) => {
  useEffect(() => {
    if (isVisible && duration > 0) {
      const timer = setTimeout(() => {
        onClose();
      }, duration);
      return () => { clearTimeout(timer); };
    }
  }, [isVisible, duration, onClose]);

  if (!isVisible) return null;

  const bgColor = type === 'success' ? 'bg-green-600' : 'bg-red-600';
  const Icon = type === 'success' ? CheckCircle : XCircle;

  return (
    <div className={`fixed top-4 right-4 z-50 ${bgColor} text-white px-6 py-4 rounded-lg shadow-lg max-w-sm`}>
      <div className="flex items-center gap-3">
        <Icon className="w-5 h-5" />
        <span className="flex-1">{message}</span>
        <button
          onClick={onClose}
          className="text-white hover:text-gray-200 transition-colors"
        >
          <X className="w-4 h-4" />
        </button>
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\adminDashboard\components\TabContent.tsx
============================
import React from 'react';

import type { AdminTab } from '@/features/adminDashboard/types';

import { AnalyticsTab } from './tabs/analytics/AnalyticsTab';
import ReviewsTab from './tabs/reviews/ReviewsTab';
import { SettingsTab } from './tabs/settings/SettingsTab';
import { UsersTab } from './tabs/users/UsersTab';

interface TabContentProps {
  activeTab: AdminTab;
}

export const TabContent: React.FC<TabContentProps> = ({ activeTab }) => {
  return (
    <main>
      {activeTab === 'users' && <UsersTab />}
      {activeTab === 'reviews' && <ReviewsTab />}
      {activeTab === 'analytics' && <AnalyticsTab />}
      {activeTab === 'settings' && <SettingsTab />}
    </main>
  );
};


============================
FILE: frontend\src\features\adminDashboard\components\tabs\analytics\AnalyticsTab.tsx
============================
import React from 'react';
import { BarChart3, TrendingUp } from 'lucide-react';

import { Button } from '@/shared/ui';

export const AnalyticsTab: React.FC = () => {
  return (
    <div className="space-y-6">
      <div className="bg-gray-800 rounded-lg shadow-sm border border-gray-700">
        <div className="px-6 py-4 border-b border-gray-700">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold text-white flex items-center gap-2">
              <BarChart3 className="w-5 h-5 text-blue-400" />
              Analytics Dashboard
            </h2>
            <div className="flex items-center gap-2">
              <Button 
                variant="secondary"
                size="sm"
                className="flex items-center gap-2 px-3 py-1.5 bg-gray-600 hover:bg-gray-700 text-white rounded-md"
                leftIcon={<TrendingUp className="w-4 h-4" />}
              >
                Export Report
              </Button>
            </div>
          </div>
        </div>
        
        <div className="p-6">
          <div className="text-center text-gray-300">
            <BarChart3 className="w-16 h-16 mx-auto mb-4 text-gray-600" />
            <h3 className="text-lg font-semibold mb-2">Analytics Coming Soon</h3>
            <p>This section will provide comprehensive analytics and reporting capabilities.</p>
          </div>
        </div>
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\adminDashboard\components\tabs\analytics\index.ts
============================
export { AnalyticsTab } from './AnalyticsTab';


============================
FILE: frontend\src\features\adminDashboard\components\tabs\index.ts
============================
export { AnalyticsTab } from './analytics';
export { ReviewsTab } from './reviews';
export { SettingsTab } from './settings';
export { UsersTab } from './users';


============================
FILE: frontend\src\features\adminDashboard\components\tabs\reviews\index.ts
============================
export { default as ReviewsTab } from './ReviewsTab';


============================
FILE: frontend\src\features\adminDashboard\components\tabs\reviews\ReviewsTab.tsx
============================
import React, { useState } from 'react';
import { AlertCircle, CheckCircle, Star } from 'lucide-react';

import { useSeedReview } from '@/features/adminDashboard/hooks/useSeedReview';

interface ReviewFormData {
  name: string;
  stars: number;
  title: string;
  content: string;
  type: 'affiliate' | 'mdh';
  businessSlug?: string;
  source: 'website' | 'google' | 'yelp' | 'facebook';
  daysAgo: number;
  weeksAgo: number;
  specificDate: string;
  serviceCategory: 'car' | 'truck' | 'boat' | 'rv' | 'motorcycle' | 'ceramic' | 'none';
  avatarFile?: File;
  reviewerUrl?: string;
}


const ReviewsTab: React.FC = () => {
  const [formData, setFormData] = useState<ReviewFormData>({
    name: '',
    stars: 5,
    title: '',
    content: '',
    type: 'mdh',
    businessSlug: '',
    source: 'website',
    daysAgo: 0,
    weeksAgo: 0,
    specificDate: '',
    serviceCategory: 'none',
    reviewerUrl: ''
  });

  const { isSubmitting, submitStatus, submitMessage, submitReview } = useSeedReview();

  // Sample business slugs for affiliate reviews
  const businessSlugs = [
    { value: 'jps', label: 'JP\'s Mobile Detailing' },
    { value: 'premium-auto-spa', label: 'Premium Auto Spa' },
    { value: 'elite-mobile-detail', label: 'Elite Mobile Detail' },
    { value: 'quick-clean-mobile', label: 'Quick Clean Mobile' }
  ];

  const handleInputChange = (field: keyof ReviewFormData, value: string | number | File | undefined) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmitReview = async () => {
    const success = await submitReview(formData);

    if (success) {
      // Reset form
      setFormData({
        name: '',
        stars: 5,
        title: '',
        content: '',
        type: 'mdh',
        businessSlug: '',
        source: 'website',
        daysAgo: 0,
        weeksAgo: 0,
        specificDate: '',
        serviceCategory: 'none',
        reviewerUrl: ''
      });
    }
  };

  const renderStars = (rating: number, interactive: boolean = false) => {
    return (
      <div className="flex space-x-1">
        {[1, 2, 3, 4, 5].map((star) => (
          <Star
            key={star}
            className={`w-5 h-5 ${
              star <= rating
                ? 'text-yellow-400 fill-current'
                : 'text-gray-300'
            } ${interactive ? 'cursor-pointer hover:text-yellow-300' : ''}`}
            onClick={() => { if (interactive) handleInputChange('stars', star); }}
          />
        ))}
      </div>
    );
  };

  return (
    <div className="space-y-6">
      {/* Google Reviews Integration */}
      <div className="bg-blue-900 rounded-lg p-6 border border-blue-700">
        <h2 className="text-xl font-semibold text-white mb-4 flex items-center gap-2">
          <Star className="w-5 h-5 text-yellow-400" />
          Google Reviews Integration
        </h2>
        <p className="text-blue-200 mb-4">
          Connect your Google Business Profile to automatically fetch and display reviews on your website.
        </p>
        <a 
          href={`${import.meta.env.VITE_BACKEND_URL || 'http://localhost:3001'}/api/google/auth`}
          className="inline-flex items-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
        >
          <Star className="w-4 h-4" />
          Connect Google Reviews
        </a>
        <p className="text-xs text-blue-300 mt-2">
          This will open Google's authorization screen to connect your business profile.
        </p>
      </div>

      <div className="bg-gray-800 rounded-lg p-6">
        <h2 className="text-xl font-semibold text-white mb-4">Seed Reviews</h2>
        <p className="text-gray-300 mb-6">
          Add reviews to the system. Just fill in the 4 required fields and the rest will be handled automatically.
        </p>

        {/* Form */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label htmlFor="reviewer-name" className="block text-sm font-medium text-gray-300 mb-2">
              Reviewer Name *
            </label>
            <input
              id="reviewer-name"
              type="text"
              value={formData.name}
              onChange={(e) => { handleInputChange('name', e.target.value); }}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="e.g., John Smith"
            />
          </div>

          <div>
            <label htmlFor="rating" className="block text-sm font-medium text-gray-300 mb-2">
              Rating *
            </label>
            <div id="rating">
              {renderStars(formData.stars, true)}
            </div>
          </div>

          <div className="md:col-span-2">
            <label htmlFor="review-title" className="block text-sm font-medium text-gray-300 mb-2">
              Review Title *
            </label>
            <input
              id="review-title"
              type="text"
              value={formData.title}
              onChange={(e) => { handleInputChange('title', e.target.value); }}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="e.g., Amazing service!"
            />
          </div>

          <div className="md:col-span-2">
            <label htmlFor="review-content" className="block text-sm font-medium text-gray-300 mb-2">
              Review Content *
            </label>
            <textarea
              id="review-content"
              value={formData.content}
              onChange={(e) => { handleInputChange('content', e.target.value); }}
              rows={3}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Write your review here..."
            />
          </div>

          <div>
            <label htmlFor="review-type" className="block text-sm font-medium text-gray-300 mb-2">
              Review Type
            </label>
            <select
              id="review-type"
              value={formData.type}
              onChange={(e) => { handleInputChange('type', e.target.value as 'affiliate' | 'mdh'); }}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="mdh">MDH Site Review</option>
              <option value="affiliate">Affiliate Review</option>
            </select>
          </div>

          <div>
            <label htmlFor="business-slug" className="block text-sm font-medium text-gray-300 mb-2">
              Business {formData.type === 'affiliate' && <span className="text-red-400">*</span>}
            </label>
            <select
              id="business-slug"
              value={formData.businessSlug}
              onChange={(e) => { handleInputChange('businessSlug', e.target.value); }}
              className={`w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                formData.type === 'affiliate' ? '' : 'opacity-50 cursor-not-allowed'
              }`}
              disabled={formData.type !== 'affiliate'}
            >
              <option value="">{formData.type === 'affiliate' ? 'Select a business' : 'N/A for MDH reviews'}</option>
              {businessSlugs.map((business) => (
                <option key={business.value} value={business.value}>
                  {business.label}
                </option>
              ))}
            </select>
            {formData.type !== 'affiliate' && (
              <p className="text-xs text-gray-400 mt-1">
                Business selection only applies to affiliate reviews
              </p>
            )}
          </div>

          <div>
            <label htmlFor="review-source" className="block text-sm font-medium text-gray-300 mb-2">
              Review Source
            </label>
            <select
              id="review-source"
              value={formData.source}
              onChange={(e) => { handleInputChange('source', e.target.value as 'website' | 'google' | 'yelp' | 'facebook'); }}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="website">Website</option>
              <option value="google">Google</option>
              <option value="yelp">Yelp</option>
              <option value="facebook">Facebook</option>
            </select>
          </div>

          <div>
            <label htmlFor="days-ago" className="block text-sm font-medium text-gray-300 mb-2">
              Days Ago (0-6 for recent reviews)
            </label>
            <input
              id="days-ago"
              type="number"
              min="0"
              max="6"
              value={formData.daysAgo}
              onChange={(e) => {
                const days = parseInt(e.target.value) || 0;
                handleInputChange('daysAgo', days);
                if (days > 0) {
                  handleInputChange('weeksAgo', 0); // Clear weeks if days is set
                }
              }}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="0"
            />
          </div>

          <div>
            <label htmlFor="weeks-ago" className="block text-sm font-medium text-gray-300 mb-2">
              Weeks Ago (1+ for older reviews)
            </label>
            <input
              id="weeks-ago"
              type="number"
              min="0"
              max="52"
              value={formData.weeksAgo}
              onChange={(e) => {
                const weeks = parseInt(e.target.value) || 0;
                handleInputChange('weeksAgo', weeks);
                if (weeks > 0) {
                  handleInputChange('daysAgo', 0); // Clear days if weeks is set
                  handleInputChange('specificDate', ''); // Clear date if weeks is set
                }
              }}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="0"
            />
          </div>

          <div>
            <label htmlFor="specific-date" className="block text-sm font-medium text-gray-300 mb-2">
              Specific Date (for reviews older than 52 weeks)
            </label>
            <input
              id="specific-date"
              type="date"
              value={formData.specificDate}
              onChange={(e) => {
                handleInputChange('specificDate', e.target.value);
                if (e.target.value) {
                  handleInputChange('daysAgo', 0); // Clear days if date is set
                  handleInputChange('weeksAgo', 0); // Clear weeks if date is set
                }
              }}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <p className="text-xs text-gray-400 mt-1">
              Use this for reviews older than 52 weeks (Google switches to date mode)
            </p>
          </div>

          <div>
            <label htmlFor="service-category" className="block text-sm font-medium text-gray-300 mb-2">
              Service Category
            </label>
            <select
              id="service-category"
              value={formData.serviceCategory}
              onChange={(e) => { handleInputChange('serviceCategory', e.target.value as 'car' | 'truck' | 'boat' | 'rv' | 'motorcycle' | 'ceramic' | 'none'); }}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="none">None</option>
              <option value="car">Car</option>
              <option value="truck">Truck</option>
              <option value="boat">Boat</option>
              <option value="rv">RV</option>
              <option value="motorcycle">Motorcycle</option>
              <option value="ceramic">Ceramic</option>
            </select>
          </div>

          <div>
            <label htmlFor="avatar-file" className="block text-sm font-medium text-gray-300 mb-2">
              Avatar Image (Optional)
            </label>
            <input
              id="avatar-file"
              type="file"
              accept="image/*"
              onChange={(e) => {
                const file = e.target.files?.[0];
                if (file) {
                  // Validate file size (5MB limit)
                  if (file.size > 5 * 1024 * 1024) {
                    alert('Avatar file must be less than 5MB');
                    e.target.value = ''; // Clear the file input
                    return;
                  }
                  handleInputChange('avatarFile', file);
                }
              }}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-blue-600 file:text-white hover:file:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            {formData.avatarFile && (
              <div className="mt-2 text-sm text-gray-400">
                Selected: {formData.avatarFile.name} ({(formData.avatarFile.size / 1024 / 1024).toFixed(2)} MB)
              </div>
            )}
          </div>

          <div>
            <label htmlFor="reviewer-url" className="block text-sm font-medium text-gray-300 mb-2">
              Reviewer Profile URL (Optional)
            </label>
            <input
              id="reviewer-url"
              type="url"
              value={formData.reviewerUrl}
              onChange={(e) => { handleInputChange('reviewerUrl', e.target.value); }}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="e.g., https://www.google.com/maps/contrib/123456789"
            />
            <p className="text-xs text-gray-400 mt-1">
              Link to reviewer&rsquo;s profile page (Google, Yelp, etc.)
            </p>
          </div>
        </div>

        <div className="flex space-x-4">
          <button
            onClick={() => { void handleSubmitReview(); }}
            disabled={isSubmitting}
            className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSubmitting ? (
              <>
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                Saving...
              </>
            ) : (
              <>
                <CheckCircle className="w-4 h-4" />
                Save Review
              </>
            )}
          </button>
        </div>

        {/* Status Message */}
        {submitMessage && (
          <div className={`mt-4 p-3 rounded-md flex items-center gap-2 ${
            submitStatus === 'success' 
              ? 'bg-green-900 text-green-300' 
              : 'bg-red-900 text-red-300'
          }`}>
            {submitStatus === 'success' ? (
              <CheckCircle className="w-4 h-4" />
            ) : (
              <AlertCircle className="w-4 h-4" />
            )}
            {submitMessage}
          </div>
        )}
      </div>

    </div>
  );
};

export default ReviewsTab;


============================
FILE: frontend\src\features\adminDashboard\components\tabs\settings\index.ts
============================
export { SettingsTab } from './SettingsTab';


============================
FILE: frontend\src\features\adminDashboard\components\tabs\settings\SettingsTab.tsx
============================
import React from 'react';
import { Settings, Shield } from 'lucide-react';

import { Button } from '@/shared/ui';

export const SettingsTab: React.FC = () => {
  return (
    <div className="space-y-6">
      <div className="bg-gray-800 rounded-lg shadow-sm border border-gray-700">
        <div className="px-6 py-4 border-b border-gray-700">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold text-white flex items-center gap-2">
              <Settings className="w-5 h-5 text-blue-400" />
              System Settings
            </h2>
            <Button 
              variant="primary"
              size="sm"
              className="flex items-center gap-2 px-3 py-1.5 bg-blue-600 hover:bg-blue-700 text-white rounded-md"
              leftIcon={<Shield className="w-4 h-4" />}
            >
              Save Changes
            </Button>
          </div>
        </div>
        
        <div className="p-6">
          <div className="text-center text-gray-300">
            <Settings className="w-16 h-16 mx-auto mb-4 text-gray-600" />
            <h3 className="text-lg font-semibold mb-2">Settings Coming Soon</h3>
            <p>This section will allow you to configure system settings and preferences.</p>
          </div>
        </div>
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\adminDashboard\components\tabs\users\index.ts
============================
export { UsersTab } from './UsersTab';


============================
FILE: frontend\src\features\adminDashboard\components\tabs\users\UsersTab.tsx
============================
/* eslint-disable max-lines -- Complex component with multiple sub-tabs, refactoring planned */
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { ExternalLink, Loader2, Plus, Settings, Trash2, UserCheck, UserCog, UserPlus, Users, UserX } from 'lucide-react';

import { ApplicationModal, DeleteConfirmationModal, Toast } from '@/features/adminDashboard/components/shared';
import type { UserSubTab } from '@/features/adminDashboard/types';
import { apiService } from '@/shared/api/api';
import { Button } from '@/shared/ui';
import { tenantEventManager } from '@/shared/utils/tenantEventManager';
import { generateTenantWebsiteUrl, generateTenantDashboardUrl, generateTenantOnboardingUrl } from '@/shared/utils/urlGenerator';

interface User {
  id: number;
  name: string;
  email: string;
  role?: string;
  is_admin?: boolean;
  created_at: string;
  business_name?: string;
  slug?: string;
  tenant_id?: number;
}

interface PendingApplication {
  id: number;
  slug: string;
  business_name: string;
  owner: string;
  phone: string;
  email: string;
  city: string;
  state_code: string;
  postal_code: string;
  has_insurance: boolean;
  source: string;
  notes?: string;
  application_date: string;
  created_at: string;
}

export const UsersTab: React.FC = () => {
  const [activeSubTab, setActiveSubTab] = useState<UserSubTab>('all-users');
  const [users, setUsers] = useState<User[]>([]);
  const [pendingApplications, setPendingApplications] = useState<PendingApplication[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [modalState, setModalState] = useState<{
    isOpen: boolean;
    type: 'approve' | 'reject';
    applicationId: number;
    businessName: string;
  } | null>(null);
  const [deleteModalState, setDeleteModalState] = useState<{
    isOpen: boolean;
    userId: number;
    name: string;
    isTenant: boolean;
  } | null>(null);
  const [processingApplication, setProcessingApplication] = useState(false);
  const [toast, setToast] = useState<{
    message: string;
    type: 'success' | 'error';
    isVisible: boolean;
  } | null>(null);
  const [deletingAffiliate, setDeletingAffiliate] = useState<number | null>(null);

  // Add debouncing to prevent rapid API calls
  const debounceTimer = useRef<number | null>(null);
  const lastFetchRef = useRef<{ status: UserSubTab; timestamp: number } | null>(null);

  const subTabs = [
    { id: 'all-users' as UserSubTab, label: 'All Users', icon: Users },
    { id: 'admin' as UserSubTab, label: 'Admin', icon: UserCog },
    { id: 'tenant' as UserSubTab, label: 'Tenants', icon: UserCheck },
    { id: 'customer' as UserSubTab, label: 'Customers', icon: UserX },
    { id: 'pending' as UserSubTab, label: 'Pending', icon: UserPlus },
  ];

  const fetchUsers = useCallback((status: UserSubTab, force = false) => {
    // Debouncing: prevent rapid successive calls for the same status
    const now = Date.now();
    const lastFetch = lastFetchRef.current;
    
    if (!force && lastFetch && lastFetch.status === status && now - lastFetch.timestamp < 1000) {
      // Skip if the same request was made within the last second
      return;
    }
    
    // Clear any existing debounce timer
    if (debounceTimer.current) {
      clearTimeout(debounceTimer.current);
    }
    
    // Set a debounce timer for rapid successive calls
    debounceTimer.current = setTimeout(() => {
      void (async () => {
        setLoading(true);
        setError(null);
        lastFetchRef.current = { status, timestamp: now };
        
        try {
          if (status === 'pending') {
            // Fetch pending tenant applications
            const response = await apiService.getPendingApplications();
            setPendingApplications(response.applications);
          } else {
            // Fetch regular users with roles
            const response = await apiService.getUsers(status);
            // Users now come with role already assigned from the backend
            setUsers(response.users);
          }
        } catch (err) {
          setError(err instanceof Error ? err.message : 'An error occurred');
        } finally {
          setLoading(false);
        }
      })();
    }, 200); // 200ms debounce delay
  }, []); // Empty dependency array is correct here

  useEffect(() => {
    fetchUsers(activeSubTab);
  }, [activeSubTab, fetchUsers]); // Include fetchUsers in dependencies

  // Cleanup timer on unmount
  useEffect(() => {
    return () => {
      if (debounceTimer.current) {
        clearTimeout(debounceTimer.current);
      }
    };
  }, []);

  const handleSubTabChange = (subTab: UserSubTab) => {
    setActiveSubTab(subTab);
  };

  const handleApproveApplication = (applicationId: number, businessName: string) => {
    // Check if application is still pending
    const application = pendingApplications.find(app => app.id === applicationId);
    if (!application) {
      setToast({
        message: 'Application not found or already processed',
        type: 'error',
        isVisible: true
      });
      return;
    }
    
    setModalState({
      isOpen: true,
      type: 'approve',
      applicationId,
      businessName
    });
  };

  const handleRejectApplication = (applicationId: number, businessName: string) => {
    // Check if application is still pending
    const application = pendingApplications.find(app => app.id === applicationId);
    if (!application) {
      setToast({
        message: 'Application not found or already processed',
        type: 'error',
        isVisible: true
      });
      return;
    }
    
    setModalState({
      isOpen: true,
      type: 'reject',
      applicationId,
      businessName
    });
  };

  const handleModalSubmit = async (data: { slug?: string; reason?: string; notes: string }) => {
    if (!modalState) return;
    
    setProcessingApplication(true);
    try {
      let response;
      
      if (modalState.type === 'approve') {
        if (!data.slug) {
          throw new Error('Slug is required for approval');
        }
        response = await apiService.approveApplication(modalState.applicationId, data.slug, data.notes);
      } else {
        if (!data.reason) {
          throw new Error('Rejection reason is required');
        }
        response = await apiService.rejectApplication(modalState.applicationId, data.reason, data.notes);
      }
      
      // Check if the API call was successful
      if (!response.success) {
        throw new Error(response.message || 'Operation failed');
      }
      
      // Refresh the pending applications list
      fetchUsers('pending', true);
      
      // Notify other components that a tenant was updated
      tenantEventManager.notify();
      
      // Close modal
      setModalState(null);
      
      // Show success message
      setToast({
        message: `Application ${modalState.type === 'approve' ? 'approved' : 'rejected'} successfully`,
        type: 'success',
        isVisible: true
      });
      
    } catch (err) {
      console.error(`Error ${modalState.type === 'approve' ? 'approving' : 'rejecting'} application:`, err);
      
      let errorMessage = 'An error occurred';
      if (err instanceof Error) {
        errorMessage = err.message;
      } else if (typeof err === 'string') {
        errorMessage = err;
      } else if (err && typeof err === 'object' && 'message' in err) {
        errorMessage = String(err.message);
      }
      
      setToast({
        message: errorMessage,
        type: 'error',
        isVisible: true
      });
    } finally {
      setProcessingApplication(false);
    }
  };

  const closeModal = () => {
    setModalState(null);
  };

  const handleDeleteClick = (userId: number, name: string, isTenant: boolean) => {
    setDeleteModalState({
      isOpen: true,
      userId,
      name,
      isTenant
    });
  };

  const handleDeleteConfirm = async () => {
    if (!deleteModalState) return;
    
    setDeletingAffiliate(deleteModalState.userId);
    try {
      const response = await apiService.deleteAffiliate(deleteModalState.userId);
      if (response.success) {
        setToast({
          message: `"${deleteModalState.name}" deleted successfully. All associated data has been removed.`,
          type: 'success',
          isVisible: true
        });
        fetchUsers(activeSubTab, true); // Refresh current tab
        
        // Notify other components that a tenant was deleted
        tenantEventManager.notify();
        
        // Close modal
        setDeleteModalState(null);
      } else {
        throw new Error(response.message || 'Failed to delete');
      }
    } catch (err) {
      console.error('Error deleting:', err);
      let errorMessage = 'An error occurred';
      if (err instanceof Error) {
        errorMessage = err.message;
      } else if (typeof err === 'string') {
        errorMessage = err;
      } else if (err && typeof err === 'object' && 'message' in err) {
        errorMessage = String(err.message);
      }
      setToast({
        message: errorMessage,
        type: 'error',
        isVisible: true
      });
      setDeleteModalState(null);
    } finally {
      setDeletingAffiliate(null);
    }
  };

  const renderSubTabContent = (subTab: UserSubTab) => {
    if (loading) {
      return (
        <div className="text-center text-gray-300">
          <Loader2 className="w-16 h-16 mx-auto mb-4 text-blue-400 animate-spin" />
          <h3 className="text-lg font-semibold mb-2">Loading Users...</h3>
        </div>
      );
    }

    if (error) {
      // Check if it's an authentication error
      if (error.includes('401') || error.includes('Unauthorized') || error.includes('Forbidden')) {
        return (
          <div className="text-center text-gray-300">
            <div className="w-16 h-16 mx-auto mb-4 text-yellow-400">🔒</div>
            <h3 className="text-lg font-semibold mb-2 text-yellow-400">Authentication Required</h3>
            <p className="text-yellow-300">You need to be logged in as an admin to view users.</p>
            <p className="text-sm text-gray-400 mt-2">
              Please log in with an admin account or check your authentication status.
            </p>
          </div>
        );
      }
      
      return (
        <div className="text-center text-gray-300">
          <div className="w-16 h-16 mx-auto mb-4 text-red-400">⚠️</div>
          <h3 className="text-lg font-semibold mb-2 text-red-400">Error</h3>
          <p className="text-red-300">{error}</p>
          <button 
            onClick={() => { fetchUsers(subTab, true); }}
            className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
          >
            Retry
          </button>
        </div>
      );
    }

      if (activeSubTab === 'pending') {
        if (pendingApplications.length === 0) {
          return (
            <div className="text-center text-gray-300">
              <UserPlus className="w-16 h-16 mx-auto mb-4 text-gray-600" />
              <h3 className="text-lg font-semibold mb-2">No Pending Applications</h3>
              <p>All affiliate applications have been processed.</p>
              <button 
                onClick={() => { fetchUsers('pending', true); }}
                className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
              >
                Refresh
              </button>
            </div>
          );
        }
        
        return (
          <div className="space-y-4">
            <div className="flex items-center justify-between text-sm text-gray-400 mb-4">
              <span>
                Showing {pendingApplications.length} pending application{pendingApplications.length !== 1 ? 's' : ''}
              </span>
              <button 
                onClick={() => { fetchUsers('pending', true); }}
                className="px-3 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-700 transition-colors"
              >
                Refresh
              </button>
            </div>
            <div className="grid gap-4">
            {pendingApplications.map((app) => (
              <div key={app.id} className="bg-gray-700 rounded-lg p-4 border border-gray-600">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <h4 className="font-medium text-white">{app.business_name}</h4>
                    <p className="text-gray-300 text-sm">Owner: {app.owner}</p>
                    <p className="text-gray-300 text-sm">{app.email}</p>
                    <p className="text-gray-300 text-sm">{app.phone}</p>
                    <p className="text-gray-400 text-xs mt-2">
                      Location: {app.city}, {app.state_code} {app.postal_code}
                    </p>
                    {app.has_insurance && (
                      <p className="text-green-400 text-xs mt-2">✓ Has Insurance</p>
                    )}
                    {app.source && (
                      <p className="text-gray-400 text-xs mt-1">Source: {app.source}</p>
                        )}
                    <p className="text-gray-400 text-xs mt-2">
                      Applied: {new Date(app.application_date).toLocaleDateString()}
                    </p>
                  </div>
                  <div className="ml-4 flex flex-col gap-2">
                    <button 
                      onClick={() => { handleApproveApplication(app.id, app.business_name); }}
                      disabled={processingApplication}
                      className={`px-3 py-1.5 text-white text-xs rounded transition-colors ${
                        processingApplication 
                          ? 'bg-gray-500 cursor-not-allowed' 
                          : 'bg-green-600 hover:bg-green-700'
                      }`}
                    >
                      {processingApplication ? 'Processing...' : 'Approve'}
                    </button>
                    <button 
                      onClick={() => { handleRejectApplication(app.id, app.business_name); }}
                      disabled={processingApplication}
                      className={`px-3 py-1.5 text-white text-xs rounded transition-colors ${
                        processingApplication 
                          ? 'bg-gray-500 cursor-not-allowed' 
                          : 'bg-red-600 hover:bg-red-700'
                      }`}
                    >
                      {processingApplication ? 'Processing...' : 'Reject'}
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      );
    }

    if (users.length === 0) {
      return (
        <div className="text-center text-gray-300">
          <Users className="w-16 h-16 mx-auto mb-4 text-gray-600" />
          <h3 className="text-lg font-semibold mb-2">No Users Found</h3>
          <p>No users match the current filter criteria.</p>
        </div>
      );
    }

    return (
      <div className="space-y-4">
        <div className="flex items-center justify-between text-sm text-gray-400 mb-4">
          <span>
            Showing {users.length} user{users.length !== 1 ? 's' : ''}
          </span>
          <button 
            onClick={() => { fetchUsers(activeSubTab, true); }}
            className="px-3 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-700 transition-colors"
          >
            Refresh
          </button>
        </div>
        <div className="grid gap-4">
          {users.map((user) => (
            <div key={user.id} className="bg-gray-700 rounded-lg p-4 border border-gray-600">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <h4 className="font-medium text-white text-lg">{user.name}</h4>
                    {user.role && (
                      <span className={`px-2 py-1 text-xs font-semibold rounded-full ${
                        user.role === 'admin' 
                          ? 'bg-purple-600 text-purple-100' 
                          : user.role === 'tenant'
                          ? 'bg-green-600 text-green-100'
                          : 'bg-blue-600 text-blue-100'
                      }`}>
                        {user.role.toUpperCase()}
                      </span>
                    )}
                  </div>
                  <p className="text-gray-300 text-sm mb-1">{user.email}</p>
                  {user.business_name && (
                    <p className="text-gray-300 text-sm mb-1">
                      <span className="text-gray-400">Business:</span> {user.business_name}
                    </p>
                  )}
                  {user.slug && (
                    <p className="text-gray-400 text-xs">
                      <span className="text-gray-500">Slug:</span> {user.slug}
                    </p>
                  )}
                </div>
                <div className="flex items-center gap-4">
                  <div className="text-right text-xs text-gray-400">
                    <p>ID: {user.id}</p>
                    <p>Created: {new Date(user.created_at).toLocaleDateString()}</p>
                  </div>
                  
                  {/* Action buttons for tenants */}
                  {user.role === 'tenant' && user.slug && (
                    <div className="flex items-center gap-2">
                      <a
                        href={generateTenantWebsiteUrl(user.slug)}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center gap-1 px-3 py-1.5 text-white text-xs rounded transition-colors bg-blue-600 hover:bg-blue-700"
                        title="View tenant website"
                      >
                        <ExternalLink className="w-3 h-3" />
                        Website
                      </a>
                      <a
                        href={generateTenantDashboardUrl(user.slug)}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center gap-1 px-3 py-1.5 text-white text-xs rounded transition-colors bg-green-600 hover:bg-green-700"
                        title="View tenant dashboard"
                      >
                        <Settings className="w-3 h-3" />
                        Dashboard
                      </a>
                    </div>
                  )}
                  
                  {/* Delete button for tenants */}
                  {user.role === 'tenant' && (
                    <button
                      onClick={() => { handleDeleteClick(user.tenant_id || user.id, user.business_name || user.name, true); }}
                      disabled={deletingAffiliate === (user.tenant_id || user.id)}
                      className={`flex items-center gap-2 px-3 py-1.5 text-white text-xs rounded transition-colors ${
                        deletingAffiliate === (user.tenant_id || user.id)
                          ? 'bg-gray-500 cursor-not-allowed'
                          : 'bg-red-600 hover:bg-red-700'
                      }`}
                      title="Delete tenant and all associated data"
                    >
                      <Trash2 className="w-3 h-3" />
                      {deletingAffiliate === (user.tenant_id || user.id) ? 'Deleting...' : 'Delete'}
                    </button>
                  )}
                  {/* Delete button for regular users (customers/admins) */}
                  {(user.role === 'customer' || user.role === 'admin') && user.id !== 1 && (
                    <button
                      onClick={() => { handleDeleteClick(user.id, user.name, false); }}
                      disabled={deletingAffiliate === user.id}
                      className={`flex items-center gap-2 px-3 py-1.5 text-white text-xs rounded transition-colors ${
                        deletingAffiliate === user.id
                          ? 'bg-gray-500 cursor-not-allowed'
                          : 'bg-red-600 hover:bg-red-700'
                      }`}
                      title="Delete user"
                    >
                      <Trash2 className="w-3 h-3" />
                      {deletingAffiliate === user.id ? 'Deleting...' : 'Delete'}
                    </button>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      <div className="bg-gray-800 rounded-lg shadow-sm border border-gray-700">
        <div className="px-6 py-4 border-b border-gray-700">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold text-white flex items-center gap-2">
              <Users className="w-5 h-5 text-blue-400" />
              User Management
            </h2>
            <Button 
              variant="primary" 
              size="sm"
              className="flex items-center gap-2 px-3 py-1.5 bg-blue-600 hover:bg-blue-700"
              leftIcon={<UserPlus className="w-4 h-4" />}
            >
              Add User
            </Button>
          </div>
        </div>
        
        {/* Sub-tabs */}
        <div className="px-6 py-3 border-b border-gray-700">
          <div className="flex items-center justify-between">
            <nav className="flex space-x-6">
              {subTabs.map((subTab) => {
                const Icon = subTab.icon;
                return (
                  <button
                    key={subTab.id}
                    onClick={() => { handleSubTabChange(subTab.id); }}
                    className={`flex items-center gap-2 px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                      activeSubTab === subTab.id
                        ? 'bg-blue-900 text-blue-300 border-b-2 border-blue-400'
                        : 'text-gray-300 hover:text-white hover:bg-gray-700'
                    }`}
                  >
                    <Icon className="w-4 h-4" />
                    {subTab.label}
                  </button>
                );
              })}
            </nav>
            
            {/* Tenant Onboarding Button */}
            <a
              href={generateTenantOnboardingUrl()}
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-md transition-colors"
              title="Open tenant onboarding form"
            >
              <Plus className="w-4 h-4" />
              New Tenant
            </a>
          </div>
        </div>
        
        <div className="p-6">
          {renderSubTabContent(activeSubTab)}
        </div>
      </div>
      
      {/* Application Modal */}
      {modalState && (
        <ApplicationModal
          isOpen={modalState.isOpen}
          onClose={closeModal}
          onSubmit={handleModalSubmit}
          type={modalState.type}
          applicationId={modalState.applicationId}
          businessName={modalState.businessName}
          isLoading={processingApplication}
        />
      )}
      
      {/* Delete Confirmation Modal */}
      {deleteModalState && (
        <DeleteConfirmationModal
          isOpen={deleteModalState.isOpen}
          onClose={() => { setDeleteModalState(null); }}
          onConfirm={() => { void handleDeleteConfirm(); }}
          title={deleteModalState.isTenant ? 'Delete Tenant' : 'Delete User'}
          message={deleteModalState.isTenant 
            ? `Are you sure you want to delete this tenant and all associated data?`
            : `Are you sure you want to delete this user account?`
          }
          itemName={deleteModalState.name}
          isLoading={deletingAffiliate === deleteModalState.userId}
          isTenant={deleteModalState.isTenant}
        />
      )}
      
      {/* Toast Notifications */}
      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          isVisible={toast.isVisible}
          onClose={() => { setToast(null); }}
        />
      )}
    </div>
  );
};
/* eslint-enable max-lines -- Re-enabled after complex multi-tab component */


============================
FILE: frontend\src\features\adminDashboard\DashboardPage.tsx
============================
import React, { useState } from 'react';

import { AdminLayout, AdminTabs, TabContent } from './components';
import type { AdminTab } from './types';

const DashboardPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState<AdminTab>('users');

  const handleTabChange = (tab: AdminTab) => {
    setActiveTab(tab);
  };

  return (
    <AdminLayout>
      <AdminTabs 
        activeTab={activeTab}
        onTabChange={handleTabChange}
      />
      
      <TabContent 
        activeTab={activeTab}
      />
    </AdminLayout>
  );
};

export default DashboardPage;


============================
FILE: frontend\src\features\adminDashboard\hooks\index.ts
============================
export { useSeedReview } from './useSeedReview';


============================
FILE: frontend\src\features\adminDashboard\hooks\useSeedReview.ts
============================
import { useState } from 'react';

import { seedReviews, uploadReviewerAvatar } from '../api/admin.api';

interface ReviewFormData {
  name: string;
  stars: number;
  title: string;
  content: string;
  type: 'affiliate' | 'mdh';
  businessSlug?: string;
  source: 'website' | 'google' | 'yelp' | 'facebook';
  daysAgo: number;
  weeksAgo: number;
  specificDate: string;
  serviceCategory: 'car' | 'truck' | 'boat' | 'rv' | 'motorcycle' | 'ceramic' | 'none';
  avatarFile?: File;
  reviewerUrl?: string;
}

type SubmitStatus = 'idle' | 'success' | 'error';

/**
 * Hook for seeding reviews via the admin API
 */
export const useSeedReview = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<SubmitStatus>('idle');
  const [submitMessage, setSubmitMessage] = useState('');

  const submitReview = async (formData: ReviewFormData) => {
    if (!formData.name || !formData.title || !formData.content) {
      setSubmitMessage('Please fill in all required fields');
      setSubmitStatus('error');
      return false;
    }

    if (formData.type === 'affiliate' && !formData.businessSlug) {
      setSubmitMessage('Please select a business for affiliate reviews');
      setSubmitStatus('error');
      return false;
    }

    setIsSubmitting(true);
    setSubmitStatus('idle');
    setSubmitMessage('Sending request...');

    try {
      // Add timeout to prevent infinite hanging
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort();
      }, 10000); // 10 second timeout

      const result = await seedReviews([formData], controller.signal);

      clearTimeout(timeoutId);

      // Log error details if there are any
      if (result.errorDetails && result.errorDetails.length > 0) {
        console.error('Review creation errors:', result.errorDetails);
      }

      // If there's an avatar file and the review was created successfully, upload the avatar
      if (formData.avatarFile && result.count && result.count > 0) {
        setSubmitMessage('Review created! Uploading avatar...');

        try {
          await uploadReviewerAvatar(
            formData.avatarFile,
            formData.name,
            result.reviewIds?.[0] ?? '1'
          );
          setSubmitMessage(`Successfully added review with avatar: "${formData.title}"`);
          setSubmitStatus('success');
        } catch (avatarError) {
          console.warn('Avatar upload error:', avatarError);
          setSubmitMessage(`Review created (avatar upload failed): "${formData.title}"`);
          setSubmitStatus('success');
        }
      } else {
        setSubmitMessage(`Successfully added review: "${formData.title}"`);
        setSubmitStatus('success');
      }

      return true;
    } catch (error) {
      console.error('Submit error:', error);
      setSubmitStatus('error');

      if (error instanceof Error && error.name === 'AbortError') {
        setSubmitMessage(
          'Request timed out after 10 seconds. Please check if the backend server is running.'
        );
      } else {
        setSubmitMessage(error instanceof Error ? error.message : 'Failed to seed review');
      }

      return false;
    } finally {
      setIsSubmitting(false);
    }
  };

  const resetStatus = () => {
    setSubmitStatus('idle');
    setSubmitMessage('');
  };

  return {
    isSubmitting,
    submitStatus,
    submitMessage,
    submitReview,
    resetStatus
  };
};



============================
FILE: frontend\src\features\adminDashboard\index.ts
============================
export * from './components';
export { default as DashboardPage } from './components/DashboardPage';

============================
FILE: frontend\src\features\adminDashboard\types\index.ts
============================
export type AdminTab = 'users' | 'reviews' | 'analytics' | 'settings';

export type UserSubTab = 'all-users' | 'admin' | 'tenant' | 'customer' | 'pending';


============================
FILE: frontend\src\features\adminDashboard\utils\constants.ts
============================
export const ADMIN_TABS = [
  { id: 'users', label: 'Users', icon: 'Users' },
  { id: 'reviews', label: 'Reviews', icon: 'Star' },
  { id: 'analytics', label: 'Analytics', icon: 'BarChart3' },
  { id: 'settings', label: 'Settings', icon: 'Settings' },
] as const;


============================
FILE: frontend\src\features\adminDashboard\utils\index.ts
============================
export * from './constants';



============================
FILE: frontend\src\features\ARCHITECTURE.md
============================
# Feature Architecture - Enforced Boundaries

## ✅ Rules (Enforced by ESLint + Scripts)

### 1. **No Cross-Feature Imports**
```typescript
// ❌ FORBIDDEN
import { Something } from '@/features/otherFeature/...';

// ✅ ALLOWED
import { Something } from '@/shared/...';
import { Something } from './components/...';  // Same feature
```

### 2. **No fetch() in Components**
```typescript
// ❌ FORBIDDEN in components/
fetch('/api/data')

// ✅ ALLOWED - Use hooks
const { data } = useYourFeatureData();  // Hook uses API client
```

### 3. **API Clients Required**
```
features/yourFeature/
  ├── api/
  │   └── yourFeature.api.ts  ← All HTTP calls here
  ├── hooks/
  │   └── useYourFeature.ts   ← Uses API client
  └── components/
      └── YourComponent.tsx   ← Uses hooks (no API calls)
```

---

## 🚀 Quick Start

### Creating a New Feature

1. **Copy templates:**
   ```bash
   cp _templates/api-client.template.ts your-feature/api/yourFeature.api.ts
   cp _templates/hook-with-api.template.ts your-feature/hooks/useYourFeature.ts
   ```

2. **Customize:**
   - Update API endpoints
   - Add your domain logic
   - Export typed responses

3. **Use in components:**
   ```typescript
   import { useYourFeature } from '../hooks/useYourFeature';
   
   function YourComponent() {
     const { data, isLoading } = useYourFeature();
     // Render - no fetch, no API imports!
   }
   ```

---

## 🔍 Checking Boundaries

```bash
# Check for violations
npm run lint:boundaries

# Verbose output
npm run lint:boundaries:verbose

# Auto-runs on: npm run lint
```

---

## 📋 Allowed Imports

### From Components
- ✅ `@/shared/**` - Shared utilities, components, types
- ✅ `../hooks/...` - Same feature hooks
- ✅ `../utils/...` - Same feature utils
- ✅ `../types/...` - Same feature types
- ❌ `@/features/otherFeature/**` - Cross-feature imports

### From Hooks
- ✅ `@/shared/**`
- ✅ `../api/...` - Same feature API client
- ✅ `../utils/...` - Same feature utils
- ✅ `../types/...` - Same feature types
- ❌ `@/features/otherFeature/**`

### From API Clients
- ✅ `@/shared/api` - Shared API client
- ✅ `../types/...` - Same feature types
- ❌ `@/features/otherFeature/**`

---

**Keep features isolated. Share via @/shared or props!**



============================
FILE: frontend\src\features\auth\api\auth.api.ts
============================
import { config } from '@/shared/env';

import type { 
  AuthErrorResponse,
  AuthResponse,
  LoginRequest, 
  RegisterRequest, 
  Session,
  User} from '../schemas/auth.schemas';

// API base URL - should match your backend configuration
const API_BASE_URL = config.apiUrl || ''; // Empty string uses relative URLs (Vite proxy)

// Custom error class for auth-specific errors
export class AuthError extends Error {
  code?: string;
  retryAfterSeconds?: number;
  remainingAttempts?: number;
  resetTime?: string;

  constructor(message: string, code?: string, retryAfterSeconds?: number, remainingAttempts?: number, resetTime?: string) {
    super(message);
    this.name = 'AuthError';
    this.code = code;
    this.retryAfterSeconds = retryAfterSeconds;
    this.remainingAttempts = remainingAttempts;
    this.resetTime = resetTime;
  }
}

// Generic API request function
async function makeAuthRequest<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
  const url = `${API_BASE_URL}${endpoint}`;
  
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => { 
      controller.abort(); 
    }, 10000); // 10 second timeout
    
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      signal: controller.signal,
    });
    
    clearTimeout(timeoutId);
    
    const data = await response.json() as T & AuthErrorResponse;
    
    if (!response.ok) {
      // Handle rate limiting specifically
      if (response.status === 429) {
        throw new AuthError(
          data.error || 'Rate limited',
          'RATE_LIMITED',
          data.retryAfterSeconds,
          data.remainingAttempts,
          data.resetTime
        );
      }
      
      // Handle other error codes
      if (response.status === 401) {
        throw new AuthError(data.error || 'Unauthorized', 'UNAUTHORIZED');
      }
      
      if (response.status === 403) {
        throw new AuthError(data.error || 'Forbidden', 'FORBIDDEN');
      }
      
      if (response.status === 422) {
        throw new AuthError(data.error || 'Validation error', 'VALIDATION_ERROR');
      }
      
      throw new AuthError(data.error || 'Authentication failed');
    }
    
    return data as T;
  } catch (error) {
    if (error instanceof AuthError) {
      throw error;
    }
    
    if (error instanceof Error && error.name === 'AbortError') {
      throw new AuthError('Request timeout', 'TIMEOUT');
    }
    
    console.error('Auth API request failed:', error);
    throw new AuthError(error instanceof Error ? error.message : 'An error occurred');
  }
}

// Auth API functions
export const authApi = {
  // Login user
  async login(credentials: LoginRequest): Promise<AuthResponse> {
    return makeAuthRequest<AuthResponse>('/api/auth/login', {
      method: 'POST',
      body: JSON.stringify(credentials),
    });
  },

  // Register user
  async register(userData: RegisterRequest): Promise<AuthResponse> {
    return makeAuthRequest<AuthResponse>('/api/auth/register', {
      method: 'POST',
      body: JSON.stringify(userData),
    });
  },

  // Refresh access token
  async refreshToken(refreshToken: string): Promise<AuthResponse> {
    return makeAuthRequest<AuthResponse>('/api/auth/refresh', {
      method: 'POST',
      body: JSON.stringify({ refreshToken }),
    });
  },

  // Logout user
  async logout(accessToken: string, deviceId?: string): Promise<{ success: boolean; message: string }> {
    return makeAuthRequest<{ success: boolean; message: string }>('/api/auth/logout', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
      },
      body: JSON.stringify({ deviceId }),
    });
  },

  // Logout from specific device
  async logoutDevice(accessToken: string, deviceId: string): Promise<{ success: boolean; message: string }> {
    return makeAuthRequest<{ success: boolean; message: string }>('/api/auth/logout-device', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
      },
      body: JSON.stringify({ deviceId }),
    });
  },

  // Get current user
  async getCurrentUser(accessToken: string): Promise<User> {
    return makeAuthRequest<User>('/api/auth/me', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
      },
    });
  },

  // Get user sessions
  async getUserSessions(accessToken: string): Promise<Session[]> {
    return makeAuthRequest<Session[]>('/api/auth/sessions', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
      },
    });
  },

  // Update user profile
  async updateProfile(accessToken: string, updates: Partial<Pick<User, 'name' | 'phone'>>): Promise<User> {
    return makeAuthRequest<User>('/api/auth/profile', {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
      },
      body: JSON.stringify(updates),
    });
  },

  // Change password
  async changePassword(accessToken: string, currentPassword: string, newPassword: string): Promise<{ success: boolean; message: string }> {
    return makeAuthRequest<{ success: boolean; message: string }>('/api/auth/change-password', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
      },
      body: JSON.stringify({ currentPassword, newPassword }),
    });
  },

  // Request password reset
  async requestPasswordReset(email: string): Promise<{ success: boolean; message: string }> {
    return makeAuthRequest<{ success: boolean; message: string }>('/api/auth/forgot-password', {
      method: 'POST',
      body: JSON.stringify({ email }),
    });
  },

  // Reset password with token
  async resetPassword(token: string, newPassword: string): Promise<{ success: boolean; message: string }> {
    return makeAuthRequest<{ success: boolean; message: string }>('/api/auth/reset-password', {
      method: 'POST',
      body: JSON.stringify({ token, newPassword }),
    });
  },
};

// Utility functions
export const authUtils = {
  // Check if token is expired
  isTokenExpired(token: string): boolean {
    try {
      const payload = JSON.parse(atob(token.split('.')[1])) as { exp: number };
      return Date.now() >= payload.exp * 1000;
    } catch {
      return true;
    }
  },

  // Get token expiration time
  getTokenExpiration(token: string): Date | null {
    try {
      const payload = JSON.parse(atob(token.split('.')[1])) as { exp: number };
      return new Date(payload.exp * 1000);
    } catch {
      return null;
    }
  },

  // Generate device ID from user agent and IP
  generateDeviceId(userAgent: string, ip: string): string {
    const data = `${userAgent}-${ip}`;
    let hash = 0;
    for (let i = 0; i < data.length; i++) {
      const char = data.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32-bit integer
    }
    return Math.abs(hash).toString(36);
  },

  // Store tokens in localStorage
  storeTokens(accessToken: string, refreshToken: string): void {
    localStorage.setItem('accessToken', accessToken);
    localStorage.setItem('refreshToken', refreshToken);
  },

  // Get tokens from localStorage
  getTokens(): { accessToken: string | null; refreshToken: string | null } {
    return {
      accessToken: localStorage.getItem('accessToken'),
      refreshToken: localStorage.getItem('refreshToken'),
    };
  },

  // Clear tokens from localStorage
  clearTokens(): void {
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
  },
};


============================
FILE: frontend\src\features\auth\components\ErrorDisplay.tsx
============================
import React from 'react';

import { RateLimitInfo } from '../types';

interface ErrorDisplayProps {
  error: string;
  rateLimitInfo?: RateLimitInfo | null;
  countdown: number;
}

const ErrorDisplay: React.FC<ErrorDisplayProps> = ({ error, rateLimitInfo, countdown }) => {
  const formatCountdown = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  if (!error) return null;

  return (
    <div
      className="mx-8 mt-4 bg-red-900/50 border border-red-700 text-red-300 px-4 py-3 rounded-xl text-sm"
      role="alert"
      aria-live="polite"
      id="login-error-message"
    >
      {error}
      {rateLimitInfo && countdown > 0 && (
        <div className="mt-2 text-center">
          <div className="text-lg font-mono font-bold text-orange-400">
            {formatCountdown(countdown)}
          </div>
          <div className="text-xs text-red-200">
            Try again in {countdown} seconds
          </div>
        </div>
      )}
    </div>
  );
};

export default ErrorDisplay;


============================
FILE: frontend\src\features\auth\components\FormField.tsx
============================
import React from 'react';

import { FormFieldProps } from '../types';

const FormField: React.FC<FormFieldProps> = ({
  id,
  name,
  label,
  type,
  value,
  onChange,
  placeholder,
  icon: Icon,
  error,
  required = false,
  rightElement,
  autocomplete,
  disabled = false
}) => {
  const hasError = !!error;
  const errorId = `${id}-error`;
  
  return (
    <div>
      <label 
        htmlFor={id} 
        className="block text-sm font-medium text-gray-300 mb-2"
      >
        {label}
        {required && <span className="text-red-400 ml-1" aria-label="required">*</span>}
      </label>
      <div className="relative">
        <div 
          className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
          aria-hidden="true"
        >
          <Icon size={18} className="text-gray-500" />
        </div>
        <input
          type={type}
          id={id}
          name={name}
          value={value}
          onChange={onChange}
          className={`w-full pl-10 pr-4 py-3 border rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200 [color-scheme:dark] disabled:opacity-50 disabled:cursor-not-allowed ${
            hasError 
              ? 'border-red-500 bg-red-950/20' 
              : 'border-stone-600 bg-stone-950'
          }`}
          placeholder={placeholder}
          required={required}
          disabled={disabled}
          aria-invalid={hasError}
          aria-describedby={hasError ? errorId : undefined}
          aria-required={required}
          autoComplete={autocomplete}
        />
        {rightElement && (
          <div 
            className="absolute inset-y-0 right-0 pr-3 flex items-center"
            aria-hidden="true"
          >
            {rightElement}
          </div>
        )}
      </div>
      {hasError && (
        <p 
          id={errorId}
          className="text-sm text-red-400 mt-1"
          role="alert"
          aria-live="polite"
        >
          {error}
        </p>
      )}
    </div>
  );
};

export default FormField;


============================
FILE: frontend\src\features\auth\components\index.ts
============================
// Internal components barrel - for use within auth feature only
export { default as ErrorDisplay } from './ErrorDisplay';
export { default as FormField } from './FormField';
export { LazyLoginModal } from './LazyLoginModal';
export { default as LoginForm } from './LoginForm';
export { useLoginFormValidation } from './LoginFormValidation';
export { default as LoginModal } from './LoginModal';
export { default as LoginModalErrorBoundary } from './LoginModalErrorBoundary';
export { default as LoginModalFallback } from './LoginModalFallback';
export { default as ModalBackdrop } from './ModalBackdrop';
export { default as ModalHeader } from './ModalHeader';
export { default as RegisterForm } from './RegisterForm';
export { default as RememberForgotSection } from './RememberForgotSection';
export { default as SocialLogin } from './SocialLogin';
export { default as ToggleMode } from './ToggleMode';


============================
FILE: frontend\src\features\auth\components\LazyLoginModal.tsx
============================
import React, { lazy, Suspense, useEffect } from 'react';

import { useLoginModalPrefetch } from '../hooks/useLoginModalPrefetch';
import { LazyLoginModalProps } from '../types/auth.types';
import LoginModalErrorBoundary from './LoginModalErrorBoundary';
import LoginModalFallback from './LoginModalFallback';

// Lazy load the LoginModal component
const LoginModal = lazy(() => import('./LoginModal'));

export const LazyLoginModal: React.FC<LazyLoginModalProps> = ({ isOpen, onClose }) => {
  const { isPreloading, isPreloaded, handleOpen } = useLoginModalPrefetch();

  // Monitor component loading performance
  useEffect(() => {
    if (isOpen) {
      const cleanup = handleOpen();
      return cleanup;
    }
    return undefined;
  }, [isOpen, handleOpen]);

  // Don't render anything if modal is closed and not preloaded
  if (!isOpen && !isPreloaded && !isPreloading) {
    return null;
  }

  return (
    <LoginModalErrorBoundary fallback={<LoginModalFallback />}>
      <Suspense fallback={<LoginModalFallback />}>
        <LoginModal isOpen={isOpen} onClose={onClose} />
      </Suspense>
    </LoginModalErrorBoundary>
  );
};


============================
FILE: frontend\src\features\auth\components\LoginForm.tsx
============================
import React from 'react';
import { Eye, EyeOff, Lock, Mail } from 'lucide-react';

import { Button } from '@/shared/ui';

import { usePasswordVisibility } from '../hooks/usePasswordVisibility';
import FormField from './FormField';
import { useLoginFormValidation } from './LoginFormValidation';
import RememberForgotSection from './RememberForgotSection';

interface LoginFormProps {
  onSubmit: (email: string, password: string) => Promise<void>;
  loading: boolean;
  error?: string;
  disabled?: boolean;
}

const LoginForm: React.FC<LoginFormProps> = ({ onSubmit, loading, disabled = false }) => {
  const {
    formData,
    handleSubmit,
    handleInputChange,
    getFieldError
  } = useLoginFormValidation({ onSubmit, disabled });
  
  const { showPassword, togglePasswordVisibility } = usePasswordVisibility();

  const passwordRightElement = (
    <Button
      type="button"
      onClick={togglePasswordVisibility}
      variant="ghost"
      size="sm"
      className="text-gray-500 hover:text-gray-300 p-1"
      disabled={disabled}
    >
      {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
    </Button>
  );

  return (
    <form onSubmit={(e) => void handleSubmit(e)} className="px-8 pb-8">
      <div className="space-y-6">
        {/* Email Field */}
        <FormField
          id="email"
          name="email"
          label="Email address"
          type="email"
          value={formData.email}
          onChange={handleInputChange}
          placeholder="Enter your email"
          icon={Mail}
          error={getFieldError('email')}
          required
          disabled={disabled}
          autocomplete="email"
        />

        {/* Password Field */}
        <FormField
          id="password"
          name="password"
          label="Password"
          type={showPassword ? 'text' : 'password'}
          value={formData.password}
          onChange={handleInputChange}
          placeholder="Enter your password"
          icon={Lock}
          error={getFieldError('password')}
          required
          rightElement={passwordRightElement}
          disabled={disabled}
          autocomplete="current-password"
        />

        {/* Remember & Forgot */}
        <RememberForgotSection disabled={disabled} />

        {/* Submit Button */}
        <Button
          type="submit"
          variant="primary"
          size="lg"
          className="w-full bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 font-medium py-3 px-4 rounded-xl transition-all duration-200 transform hover:scale-[1.02] focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-stone-900 disabled:opacity-70 disabled:hover:scale-100"
          loading={loading}
          disabled={loading || disabled}
        >
          {disabled ? 'Rate limited' : 'Sign in'}
        </Button>
      </div>
    </form>
  );
};

export default LoginForm;


============================
FILE: frontend\src\features\auth\components\LoginFormValidation.tsx
============================
import React, { useState } from 'react';

interface LoginFormValidationProps {
  onSubmit: (email: string, password: string) => Promise<void>;
  disabled: boolean;
}

export const useLoginFormValidation = ({ onSubmit, disabled }: LoginFormValidationProps) => {
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [fieldErrors, setFieldErrors] = useState<Record<string, string[]>>({});

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (disabled) return;
    
    setFieldErrors({});

    // Basic validation
    const errors: Record<string, string[]> = {};
    
    if (!formData.email) {
      errors.email = ['Email is required'];
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      errors.email = ['Please enter a valid email'];
    }
    
    if (!formData.password) {
      errors.password = ['Password is required'];
    }

    if (Object.keys(errors).length > 0) {
      setFieldErrors(errors);
      return;
    }

    await onSubmit(formData.email, formData.password);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (disabled) return;
    
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const getFieldError = (fieldName: string): string | undefined => {
    return fieldErrors[fieldName]?.[0];
  };

  return {
    formData,
    fieldErrors,
    handleSubmit,
    handleInputChange,
    getFieldError
  };
};


============================
FILE: frontend\src\features\auth\components\LoginModal.tsx
============================
import React from 'react';
import { createPortal } from 'react-dom';

import { useAuthModal, useModalFocus } from '../hooks';
import { LoginModalProps } from '../types';
import {
  ErrorDisplay,
  LoginForm,
  ModalBackdrop,
  ModalHeader,
  RegisterForm,
  SocialLogin,
  ToggleMode
} from './index';

const LoginModal: React.FC<LoginModalProps> = ({ isOpen, onClose }) => {
  const {
    isLogin,
    error,
    loading,
    rateLimitInfo,
    countdown,
    handleLogin,
    handleRegister,
    handleToggleMode,
    handleClose
  } = useAuthModal(onClose);

  const { modalRef, firstFocusableRef, mounted } = useModalFocus(isOpen, handleClose);

  if (!isOpen || !mounted) return null;

  return createPortal(
    <div
      className="fixed inset-0 z-50 flex items-center justify-center p-4"
      role="dialog"
      aria-modal="true"
      aria-labelledby="login-modal-title"
      aria-describedby="login-modal-description"
    >
      <ModalBackdrop onClose={handleClose} />

      <div
        ref={modalRef}
        className="relative w-full max-w-md transform transition-all duration-300 scale-100"
        role="dialog"
        aria-modal="true"
      >
        <div
          className="bg-stone-900 rounded-2xl shadow-2xl border border-stone-700 overflow-hidden"
          role="document"
        >
          <ModalHeader
            ref={firstFocusableRef}
            isLogin={isLogin}
            onClose={handleClose}
          />

          <ErrorDisplay
            error={error}
            rateLimitInfo={rateLimitInfo}
            countdown={countdown}
          />

          {isLogin ? (
            <LoginForm
              onSubmit={(email, password) => { void handleLogin(email, password); }}
              loading={loading}
              error={error}
              disabled={rateLimitInfo !== null && countdown > 0}
            />
          ) : (
            <RegisterForm
              onSubmit={(email, password, name, phone) => { void handleRegister(email, password, name, phone); }}
              loading={loading}
              error={error}
              disabled={rateLimitInfo !== null && countdown > 0}
            />
          )}

          <SocialLogin />

          <ToggleMode
            ref={firstFocusableRef}
            isLogin={isLogin}
            onToggle={handleToggleMode}
          />
        </div>
      </div>
    </div>,
    document.body
  );
};

export default LoginModal;


============================
FILE: frontend\src\features\auth\components\LoginModalErrorBoundary.tsx
============================
import React from 'react';

interface LoginModalErrorBoundaryProps {
  children: React.ReactNode;
  fallback: React.ReactNode;
}

// Enhanced error boundary for better error handling
class LoginModalErrorBoundary extends React.Component<
  LoginModalErrorBoundaryProps,
  { hasError: boolean }
> {
  constructor(props: LoginModalErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  override componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('LoginModal lazy loading error:', error, errorInfo);
  }

  override render() {
    if (this.state.hasError) {
      return this.props.fallback;
    }
    return this.props.children;
  }
}

export default LoginModalErrorBoundary;


============================
FILE: frontend\src\features\auth\components\LoginModalFallback.tsx
============================
import React from 'react';

// Loading fallback component that matches the actual modal design
const LoginModalFallback: React.FC = () => (
  <div className="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center p-4">
    <div className="bg-stone-900 rounded-2xl shadow-2xl border border-stone-700 w-full max-w-md">
      <div className="p-8">
        <div className="animate-pulse">
          {/* Header skeleton */}
          <div className="text-center mb-8">
            <div className="w-16 h-16 bg-stone-600 rounded-2xl mx-auto mb-4"></div>
            <div className="h-8 bg-stone-600 rounded w-48 mx-auto mb-2"></div>
            <div className="h-4 bg-stone-600 rounded w-64 mx-auto"></div>
          </div>
          
          {/* Form skeleton */}
          <div className="space-y-6">
            <div className="h-12 bg-stone-700 rounded-xl"></div>
            <div className="h-12 bg-stone-700 rounded-xl"></div>
            <div className="h-12 bg-stone-700 rounded-xl"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
);

export default LoginModalFallback;


============================
FILE: frontend\src\features\auth\components\ModalBackdrop.tsx
============================
import React from 'react';

interface ModalBackdropProps {
  onClose: () => void;
}

const ModalBackdrop: React.FC<ModalBackdropProps> = ({ onClose }) => {
  return (
    <div
      className="absolute inset-0 bg-black/70 backdrop-blur-sm transition-opacity duration-300"
      onClick={onClose}
      onKeyDown={(e) => {
        if (e.key === 'Escape' || e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          onClose();
        }
      }}
      role="button"
      tabIndex={0}
      aria-label="Close modal"
      onMouseDown={(e) => { e.preventDefault(); }}
      onMouseUp={(e) => { e.preventDefault(); }}
    />
  );
};

export default ModalBackdrop;


============================
FILE: frontend\src\features\auth\components\ModalHeader.tsx
============================
/* eslint-disable react/prop-types -- Using TypeScript interfaces instead of PropTypes */
import React, { forwardRef } from 'react';
import { X } from 'lucide-react';

interface ModalHeaderProps {
  isLogin: boolean;
  onClose: () => void;
}

const ModalHeader = forwardRef<HTMLButtonElement, ModalHeaderProps>(
  ({ isLogin, onClose }, ref) => {
    return (
      <div className="relative px-8 pt-8 pb-2">
        <button
          ref={ref}
          onClick={onClose}
          onKeyDown={(e) => {
            if (e.key === 'Escape') {
              onClose();
            }
          }}
          className="absolute top-4 right-4 p-2 text-gray-400 hover:text-white hover:bg-stone-800 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-stone-900"
          aria-label="Close login modal"
          type="button"
          tabIndex={0}
        >
          <X size={20} aria-hidden="true" />
        </button>
        
        <div className="text-center mb-2">
          <div 
            className="w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-orange-500 to-orange-600 rounded-2xl flex items-center justify-center p-2"
            aria-hidden="true"
          >
            <img 
              src="/icons/favicon.webp" 
              alt="Logo" 
              className="w-full h-full object-contain"
              onError={(e) => {
                console.error('Logo failed to load:', e);
                e.currentTarget.style.display = 'none';
              }}
            />
          </div>
          <h2 
            id="login-modal-title"
            className="text-2xl font-bold text-white mb-1"
          >
            {isLogin ? 'Welcome back' : 'Create account'}
          </h2>
          <p 
            id="login-modal-description"
            className="text-gray-400 text-sm"
          >
            {isLogin ? 'Sign in to your account to continue' : 'Sign up to get started'}
          </p>
        </div>
      </div>
    );
  }
);

ModalHeader.displayName = 'ModalHeader';

export default ModalHeader;
/* eslint-enable react/prop-types -- Re-enable PropTypes rule after component definition */

============================
FILE: frontend\src\features\auth\components\RegisterForm.tsx
============================
import React from 'react';
import { Eye, EyeOff, Lock, Mail, Phone, User } from 'lucide-react';

import { Button } from '@/shared/ui';

import { useRegisterForm } from '../hooks/useRegisterForm';
import { RegisterFormProps } from '../types';
import FormField from './FormField';

const RegisterForm: React.FC<RegisterFormProps> = ({ onSubmit, loading, disabled = false }) => {
  const {
    formData,
    showPassword,
    handleSubmit,
    handleInputChange,
    getFieldError,
    togglePasswordVisibility
  } = useRegisterForm({ onSubmit, disabled });


  const passwordRightElement = (
    <Button
      type="button"
      onClick={togglePasswordVisibility}
      variant="ghost"
      size="sm"
      className="text-gray-500 hover:text-gray-300"
      disabled={disabled}
    >
      {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
    </Button>
  );

  return (
    <form onSubmit={(e) => { void handleSubmit(e); }} className="px-8 pb-8">
      <div className="space-y-6">
        {/* Name Field */}
        <FormField
          id="name"
          name="name"
          label="Full Name"
          type="text"
          value={formData.name}
          onChange={handleInputChange}
          placeholder="Enter your full name"
          icon={User}
          error={getFieldError('name')}
          required
          disabled={disabled}
          autocomplete="name"
        />

        {/* Phone Field */}
        <FormField
          id="phone"
          name="phone"
          label="Phone (optional)"
          type="tel"
          value={formData.phone}
          onChange={handleInputChange}
          placeholder="Enter your phone number"
          icon={Phone}
          error={getFieldError('phone')}
          disabled={disabled}
          autocomplete="tel"
        />

        {/* Email Field */}
        <FormField
          id="email"
          name="email"
          label="Email address"
          type="email"
          value={formData.email}
          onChange={handleInputChange}
          placeholder="Enter your email"
          icon={Mail}
          error={getFieldError('email')}
          required
          disabled={disabled}
          autocomplete="email"
        />

        {/* Password Field */}
        <FormField
          id="password"
          name="password"
          label="Password"
          type={showPassword ? 'text' : 'password'}
          value={formData.password}
          onChange={handleInputChange}
          placeholder="Enter your password"
          icon={Lock}
          error={getFieldError('password')}
          required
          rightElement={passwordRightElement}
          disabled={disabled}
          autocomplete="new-password"
        />

        {/* Submit Button */}
        <Button
          type="submit"
          variant="primary"
          size="lg"
          className="w-full bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 font-medium py-3 px-4 rounded-xl transition-all duration-200 transform hover:scale-[1.02] focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-stone-900 disabled:opacity-70 disabled:cursor-not-allowed disabled:hover:scale-100"
          loading={loading}
          disabled={loading || disabled}
        >
          {disabled ? 'Rate limited' : 'Create account'}
        </Button>
      </div>
    </form>
  );
};

export default RegisterForm;


============================
FILE: frontend\src\features\auth\components\RememberForgotSection.tsx
============================
import React from 'react';

import { Button } from '@/shared/ui';

interface RememberForgotSectionProps {
  disabled?: boolean;
}

const RememberForgotSection: React.FC<RememberForgotSectionProps> = ({ disabled = false }) => {
  return (
    <div className="flex items-center justify-between">
      <label className="flex items-center">
        <input
          type="checkbox"
          id="remember-me"
          name="remember-me"
          className="w-4 h-4 text-orange-500 bg-stone-950 border-stone-600 rounded focus:ring-orange-500 focus:ring-2"
          disabled={disabled}
          autoComplete="off"
        />
        <span className="text-sm text-gray-300 ml-2">Remember me</span>
      </label>
      <Button
        type="button"
        variant="ghost"
        size="sm"
        className="text-sm text-orange-400 hover:text-orange-300 disabled:opacity-50 disabled:cursor-not-allowed p-0 h-auto"
        disabled={disabled}
      >
        Forgot password?
      </Button>
    </div>
  );
};

export default RememberForgotSection;


============================
FILE: frontend\src\features\auth\components\SocialLogin.tsx
============================
import React from 'react';

import { Button } from '@/shared/ui';

const SocialLogin: React.FC = () => {
  return (
    <>
      {/* Divider */}
      <div className="my-6 flex items-center">
        <div className="flex-1 border-t border-stone-600"></div>
        <div className="px-4 text-sm text-gray-500">or</div>
        <div className="flex-1 border-t border-stone-600"></div>
      </div>

      {/* Social Login */}
      <div className="space-y-3">
        <Button
          type="button"
          variant="secondary"
          size="lg"
          className="w-full bg-stone-800 hover:bg-stone-700 font-medium py-3 px-4 rounded-xl border border-stone-600 transition-all duration-200 transform hover:scale-[1.02] focus:outline-none focus:ring-2 focus:ring-orange-500"
        >
          Continue with Google
        </Button>
        <Button
          type="button"
          variant="secondary"
          size="lg"
          className="w-full bg-stone-800 hover:bg-stone-700 font-medium py-3 px-4 rounded-xl border border-stone-600 transition-all duration-200 transform hover:scale-[1.02] focus:outline-none focus:ring-2 focus:ring-orange-500"
        >
          Continue with GitHub
        </Button>
      </div>
    </>
  );
};

export default SocialLogin;


============================
FILE: frontend\src\features\auth\components\ToggleMode.tsx
============================
import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';

interface ToggleModeProps {
  isLogin: boolean;
  onToggle: () => void;
}

const ToggleMode = forwardRef<HTMLButtonElement, ToggleModeProps>(
  ({ isLogin, onToggle }, ref) => {
    return (
      <div className="mt-6 text-center">
        <p className="text-gray-400 text-sm">
          {isLogin ? "Don't have an account?" : 'Already have an account?'}{' '}
          <button
            ref={ref}
            type="button"
            onClick={onToggle}
            onKeyDown={(e) => {
              if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                onToggle();
              }
            }}
            className="text-orange-400 hover:text-orange-300 font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-stone-900 rounded px-2 py-1"
            aria-label={isLogin ? 'Switch to registration form' : 'Switch to login form'}
            aria-describedby={`toggle-mode-description-${isLogin ? 'login' : 'register'}`}
            tabIndex={0}
          >
            {isLogin ? 'Create account' : 'Sign in'}
          </button>
          <span 
            id={`toggle-mode-description-${isLogin ? 'login' : 'register'}`}
            className="sr-only"
          >
            {isLogin 
              ? 'Click to switch to the registration form where you can create a new account'
              : 'Click to switch to the login form where you can sign in to your existing account'
            }
          </span>
        </p>
      </div>
    );
  }
);

ToggleMode.displayName = 'ToggleMode';

ToggleMode.propTypes = {
  isLogin: PropTypes.bool.isRequired,
  onToggle: PropTypes.func.isRequired,
};

export default ToggleMode;


============================
FILE: frontend\src\features\auth\hooks\index.ts
============================
// Auth hooks barrel
export { useAuthModal } from './useAuthModal';
export { useFormValidation } from './useFormValidation';
export { prefetchLoginModal, useLoginModalPrefetch } from './useLoginModalPrefetch';
export { useModalFocus } from './useModalFocus';
export { usePasswordVisibility } from './usePasswordVisibility';
export { useRegisterForm } from './useRegisterForm';


============================
FILE: frontend\src\features\auth\hooks\useAuthModal.ts
============================
import { useCallback, useEffect, useState } from 'react';

import { useAuth } from '@/shared/hooks';

import { validateLoginRequest, validateRegisterRequest } from '../schemas/auth.schemas';
import { RateLimitInfo } from '../types';

export const useAuthModal = (onClose: () => void) => {
  const { login, register } = useAuth();
  const [isLogin, setIsLogin] = useState(true);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [rateLimitInfo, setRateLimitInfo] = useState<RateLimitInfo | null>(null);
  const [countdown, setCountdown] = useState<number>(0);

  // Countdown timer effect
  useEffect(() => {
    if (countdown > 0) {
      const timer = setTimeout(() => {
        setCountdown(countdown - 1);
      }, 1000);
      return () => { clearTimeout(timer); };
    } else if (countdown === 0 && rateLimitInfo) {
      setRateLimitInfo(null);
      setError('');
    }
  }, [countdown, rateLimitInfo]);

  const handleLogin = useCallback(async (email: string, password: string) => {
    setError('');
    setLoading(true);
    setRateLimitInfo(null);

    try {
      const loginData = validateLoginRequest({ email, password });
      const result = await login(loginData.email, loginData.password);

      if (result.success) {
        onClose();
      } else {
        setError(result.error || 'Login failed');
      }
    } catch (err: unknown) {
      console.error('Login error:', err);
      setError('An unexpected error occurred');
    } finally {
      setLoading(false);
    }
  }, [login, onClose]);

  const handleRegister = useCallback(async (email: string, password: string, name: string, phone: string) => {
    setError('');
    setLoading(true);
    setRateLimitInfo(null);

    try {
      const registerData = validateRegisterRequest({ email, password, name, phone });
      const result = await register(registerData.email, registerData.password, registerData.name, registerData.phone);

      if (result.success) {
        onClose();
      } else {
        setError(result.error || 'Registration failed');
      }
    } catch (err: unknown) {
      console.error('Registration error:', err);
      setError('An unexpected error occurred');
    } finally {
      setLoading(false);
    }
  }, [register, onClose]);

  const handleToggleMode = useCallback(() => {
    setIsLogin(!isLogin);
    setError('');
    setRateLimitInfo(null);
    setCountdown(0);
  }, [isLogin]);

  const handleClose = useCallback(() => {
    setError('');
    setRateLimitInfo(null);
    setCountdown(0);
    onClose();
  }, [onClose]);

  return {
    isLogin,
    error,
    loading,
    rateLimitInfo,
    countdown,
    handleLogin,
    handleRegister,
    handleToggleMode,
    handleClose
  };
};


============================
FILE: frontend\src\features\auth\hooks\useFormValidation.ts
============================
import { useState } from 'react';

import { FieldErrors } from '../types';

export const useFormValidation = () => {
  const [fieldErrors, setFieldErrors] = useState<FieldErrors>({});

  const validateRegisterForm = (formData: {
    email: string;
    password: string;
    name: string;
    phone: string;
  }): boolean => {
    const errors: FieldErrors = {};

    // Name validation
    if (!formData.name.trim()) {
      errors.name = ['Name is required'];
    } else if (formData.name.trim().length < 2) {
      errors.name = ['Name must be at least 2 characters'];
    }

    // Email validation
    if (!formData.email.trim()) {
      errors.email = ['Email is required'];
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = ['Please enter a valid email address'];
    }

    // Password validation
    if (!formData.password) {
      errors.password = ['Password is required'];
    } else if (formData.password.length < 8) {
      errors.password = ['Password must be at least 8 characters'];
    } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(formData.password)) {
      errors.password = ['Password must contain at least one uppercase letter, one lowercase letter, and one number'];
    }

    // Phone validation (optional)
    if (formData.phone && formData.phone.trim()) {
      const phoneRegex = /^[+]?[1-9][\d]{0,15}$/;
      if (!phoneRegex.test(formData.phone.replace(/\s/g, ''))) {
        errors.phone = ['Please enter a valid phone number'];
      }
    }

    setFieldErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const getFieldError = (fieldName: string): string | undefined => {
    return fieldErrors[fieldName]?.[0];
  };

  return { validateRegisterForm, getFieldError };
};


============================
FILE: frontend\src\features\auth\hooks\useLoginModalPrefetch.ts
============================
import { useCallback, useEffect, useState } from 'react';

import { usePerformanceMonitor } from '@/shared/hooks';

// Enhanced prefetch function with better error handling and caching
const prefetchLoginModal = (() => {
  let prefetchPromise: Promise<unknown> | null = null;
  
  return () => {
    if (!prefetchPromise) {
      prefetchPromise = import('../components/LoginModal')
        .then(module => {
          // Pre-warm any dependencies or prepare the component
          return module;
        })
        .catch((error: unknown) => {
          console.error('Failed to prefetch LoginModal:', error);
          // Reset promise on error so retry is possible
          prefetchPromise = null;
          throw error;
        });
    }
    return prefetchPromise;
  };
})();

export const useLoginModalPrefetch = () => {
  const [isPreloading, setIsPreloading] = useState(false);
  const [isPreloaded, setIsPreloaded] = useState(false);
  const { startLoad, endLoad } = usePerformanceMonitor('LoginModal');

  // Enhanced prefetch logic with better caching
  const handlePrefetch = useCallback(async (): Promise<void> => {
    if (!isPreloaded && !isPreloading) {
      setIsPreloading(true);
      try {
        await import('../components/LoginModal');
        setIsPreloaded(true);
      } catch (error: unknown) {
        console.error('Failed to prefetch LoginModal:', error);
      } finally {
        setIsPreloading(false);
      }
    }
  }, [isPreloaded, isPreloading]);

  // Auto-prefetch after a delay to improve perceived performance
  useEffect(() => {
    const timer = setTimeout(() => {
      void handlePrefetch();
    }, 1500); // Prefetch after 1.5 seconds (login is more commonly used)
    
    return () => { clearTimeout(timer); };
  }, [handlePrefetch]);

  // Monitor component loading performance
  const handleOpen = useCallback(() => {
    startLoad();
    const timer = setTimeout(() => {
      endLoad();
    }, 100);
    return () => { clearTimeout(timer); };
  }, [startLoad, endLoad]);

  return {
    isPreloading,
    isPreloaded,
    handlePrefetch,
    handleOpen,
    prefetchLoginModal
  };
};

export { prefetchLoginModal };


============================
FILE: frontend\src\features\auth\hooks\useModalFocus.ts
============================
import { useCallback, useEffect, useRef, useState } from 'react';

export const useModalFocus = (isOpen: boolean, onClose: () => void) => {
  const modalRef = useRef<HTMLDivElement>(null);
  const firstFocusableRef = useRef<HTMLButtonElement>(null);
  const [mounted, setMounted] = useState(false);

  // Handle keyboard navigation
  const handleKeyDown = useCallback((event: KeyboardEvent) => {
    if (event.key === 'Escape') {
      event.preventDefault();
      onClose();
    }
  }, [onClose]);

  // Focus management
  useEffect(() => {
    if (isOpen) {
      // Focus the first focusable element when modal opens
      setTimeout(() => {
        if (firstFocusableRef.current) {
          firstFocusableRef.current.focus();
        }
      }, 100);
      
      // Prevent body scroll when modal is open
      document.body.style.overflow = 'hidden';
      
      // Add event listeners for accessibility
      document.addEventListener('keydown', handleKeyDown);
      
      return () => {
        document.removeEventListener('keydown', handleKeyDown);
        document.body.style.overflow = 'unset';
      };
    }
  }, [isOpen, handleKeyDown]);

  useEffect(() => {
    setMounted(true);
    return () => { setMounted(false); };
  }, []);

  return { modalRef, firstFocusableRef, mounted };
};


============================
FILE: frontend\src\features\auth\hooks\usePasswordVisibility.ts
============================
import { useState } from 'react';

export const usePasswordVisibility = () => {
  const [showPassword, setShowPassword] = useState(false);

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  return {
    showPassword,
    togglePasswordVisibility
  };
};


============================
FILE: frontend\src\features\auth\hooks\useRegisterForm.ts
============================
import React, { useState } from 'react';

import { useFormValidation } from './useFormValidation';
import { usePasswordVisibility } from './usePasswordVisibility';

interface RegisterFormData {
  email: string;
  password: string;
  name: string;
  phone: string;
}

interface UseRegisterFormProps {
  onSubmit: (email: string, password: string, name: string, phone: string) => Promise<void>;
  disabled: boolean;
}

export const useRegisterForm = ({ onSubmit, disabled }: UseRegisterFormProps) => {
  const [formData, setFormData] = useState<RegisterFormData>({
    email: '',
    password: '',
    name: '',
    phone: ''
  });

  const { validateRegisterForm, getFieldError } = useFormValidation();
  const { showPassword, togglePasswordVisibility } = usePasswordVisibility();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (disabled) return;

    if (!validateRegisterForm(formData)) {
      return;
    }

    try {
      await onSubmit(formData.email, formData.password, formData.name, formData.phone);
    } catch (err) {
      console.error('Registration failed:', err);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (disabled) return;

    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  return {
    formData,
    showPassword,
    handleSubmit,
    handleInputChange,
    getFieldError,
    togglePasswordVisibility
  };
};


============================
FILE: frontend\src\features\auth\index.ts
============================
// Auth feature public exports
// Only export components that other features need to import
export { LazyLoginModal } from './components/LazyLoginModal';
export { prefetchLoginModal, useLoginModalPrefetch } from './hooks/useLoginModalPrefetch';


============================
FILE: frontend\src\features\auth\schemas\auth.schemas.ts
============================
import { z } from 'zod';

// Base user schema
export const userSchema = z.object({
  id: z.number(),
  email: z.email(),
  name: z.string().min(2).max(100),
  phone: z.string().optional(),
  is_admin: z.boolean().default(false),
  tenant_id: z.number().optional(),
  created_at: z.iso.datetime(),
  updated_at: z.iso.datetime(),
});

// Login request schema
export const loginRequestSchema = z.object({
  email: z.email('Please enter a valid email address'),
  password: z.string().min(1, 'Password is required'),
});

// Registration request schema
export const registerRequestSchema = z.object({
  email: z.email('Please enter a valid email address'),
  password: z.string()
    .min(8, 'Password must be at least 8 characters')
    .max(128, 'Password must be less than 128 characters'),
  name: z.string()
    .min(2, 'Name must be at least 2 characters')
    .max(100, 'Name must be less than 100 characters')
    .regex(/^[a-zA-Z\s]+$/, 'Name can only contain letters and spaces'),
  phone: z.string()
    .regex(/^[\d\s\-+()]+$/, 'Please enter a valid phone number')
    .min(10, 'Phone number must be at least 10 digits')
    .max(15, 'Phone number must be less than 15 digits')
    .optional(),
});

// Refresh token request schema
export const refreshTokenRequestSchema = z.object({
  refreshToken: z.string().min(1, 'Refresh token is required'),
});

// Logout request schema
export const logoutRequestSchema = z.object({
  deviceId: z.string().optional(),
});

// Auth response schema
export const authResponseSchema = z.object({
  success: z.boolean(),
  message: z.string(),
  user: userSchema,
  accessToken: z.string(),
  refreshToken: z.string(),
});

// Error response schema
export const authErrorResponseSchema = z.object({
  success: z.boolean().default(false),
  error: z.string(),
  retryAfterSeconds: z.number().optional(),
  remainingAttempts: z.number().optional(),
  resetTime: z.string().optional(),
});

// Rate limit info schema
export const rateLimitInfoSchema = z.object({
  retryAfterSeconds: z.number(),
  remainingAttempts: z.number().optional(),
  resetTime: z.string().optional(),
});

// Session schema
export const sessionSchema = z.object({
  id: z.string(),
  deviceId: z.string(),
  ipAddress: z.string(),
  userAgent: z.string(),
  createdAt: z.iso.datetime(),
  lastUsedAt: z.iso.datetime(),
  isActive: z.boolean(),
});

// Type exports
export type User = z.infer<typeof userSchema>;
export type LoginRequest = z.infer<typeof loginRequestSchema>;
export type RegisterRequest = z.infer<typeof registerRequestSchema>;
export type RefreshTokenRequest = z.infer<typeof refreshTokenRequestSchema>;
export type LogoutRequest = z.infer<typeof logoutRequestSchema>;
export type AuthResponse = z.infer<typeof authResponseSchema>;
export type AuthErrorResponse = z.infer<typeof authErrorResponseSchema>;
export type RateLimitInfo = z.infer<typeof rateLimitInfoSchema>;
export type Session = z.infer<typeof sessionSchema>;

// Validation functions
export const validateLoginRequest = (data: unknown) => loginRequestSchema.parse(data);
export const validateRegisterRequest = (data: unknown) => registerRequestSchema.parse(data);
export const validateRefreshTokenRequest = (data: unknown) => refreshTokenRequestSchema.parse(data);
export const validateLogoutRequest = (data: unknown) => logoutRequestSchema.parse(data);


============================
FILE: frontend\src\features\auth\state\index.ts
============================
// Auth state barrel
// Add state management here as needed


============================
FILE: frontend\src\features\auth\types\auth.types.ts
============================
import type React from 'react';
import type { LucideIcon } from 'lucide-react';

export interface LoginModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export interface LazyLoginModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export interface LoginFormProps {
  onSubmit: (email: string, password: string) => Promise<void>;
  loading: boolean;
  error?: string;
  disabled?: boolean;
}

export interface RegisterFormProps {
  onSubmit: (email: string, password: string, name: string, phone: string) => Promise<void>;
  loading: boolean;
  error?: string;
  disabled?: boolean;
}

export interface FormFieldProps {
  id: string;
  name: string;
  label: string;
  type: string;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  placeholder: string;
  icon: LucideIcon;
  error?: string | undefined;
  required?: boolean;
  rightElement?: React.ReactNode;
  autocomplete?: string;
  disabled?: boolean;
}

export interface ModalHeaderProps {
  isLogin: boolean;
  onClose: () => void;
}

export interface ToggleModeProps {
  isLogin: boolean;
  onToggle: () => void;
}

export interface RateLimitInfo {
  retryAfterSeconds: number;
  remainingAttempts?: number;
  resetTime?: number;
}

export type FieldErrors = Record<string, string[]>;

// Social login types
export interface SocialLoginProvider {
  name: string;
  icon: React.ComponentType<{ className?: string }>;
  onClick: () => void;
  disabled?: boolean;
}


============================
FILE: frontend\src\features\auth\types\index.ts
============================
// Auth types barrel
export * from './auth.types';


============================
FILE: frontend\src\features\auth\utils\index.ts
============================
// Auth utils barrel
// Add utility functions here as needed


============================
FILE: frontend\src\features\booking\api\booking.api.ts
============================
import type { GalleryImage } from '@/shared/types';

/**
 * API client for booking-related data
 */

export async function getBookingGalleryImages(): Promise<GalleryImage[]> {
  try {
    const res = await fetch('/mobile-detailing/data/gallery.json');
    if (!res.ok) {
      throw new Error(`Failed to fetch gallery data: ${res.status}`);
    }
    const data: unknown = await res.json();
    
    if (!Array.isArray(data)) {
      throw new Error('Gallery data is not an array');
    }
    
    return data as GalleryImage[];
  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : String(error);
    console.error('Failed to load gallery images:', message);
    throw error;
  }
}



============================
FILE: frontend\src\features\booking\BookingApp.tsx
============================
import React from 'react';

import BookingPage from './components/BookingPage';

/**
 * BookingApp - Main booking application component
 * Purely declarative - error boundaries should be handled higher up in the component tree
 */
const BookingApp: React.FC = () => {
  return <BookingPage />;
};

export default BookingApp;


============================
FILE: frontend\src\features\booking\components\BookingFlowController.tsx
============================
import React, { useCallback } from 'react';
import { useNavigate } from 'react-router-dom';

import { useBookingStep } from '@/features/booking/state';

import BookingLayout from './BookingLayout';
import { StepAddons, StepLocation, StepPayment,StepSchedule, StepService, StepVehicleSelection } from './steps';

/**
 * BookingFlowController - Handles step logic, navigation, and state management
 * Uses Zustand store as single source of truth for step state
 */
const BookingFlowController: React.FC = () => {
  const navigate = useNavigate();
  
  // Get step management from narrow selector
  const { 
    currentStep,
    nextStep,
    previousStep
  } = useBookingStep();
  
  const stepOrder = ['vehicle-selection', 'location', 'service-tier', 'addons', 'schedule', 'payment'];
  const currentStepIndex = stepOrder.indexOf(currentStep);
  
  const handleNext = useCallback(() => {
    nextStep();
  }, [nextStep]);
  
  const handleBack = useCallback(() => {
    previousStep();
  }, [previousStep]);
  
  const handleCancel = useCallback(() => {
    void navigate('/');
  }, [navigate]);

  const renderStepContent = useCallback(() => {
    switch (currentStep) {
      case 'vehicle-selection':
        return <StepVehicleSelection />;
      
      case 'location':
        return <StepLocation />;
      
      case 'service-tier':
        return <StepService />;
      
      case 'addons':
        return <StepAddons />;
      
      case 'schedule':
        return <StepSchedule />;
      
      case 'payment':
        return (
          <StepPayment 
            onPaymentComplete={() => {
              // TODO: Handle payment completion and navigation
              // For now, just navigate back to home
              void navigate('/');
            }}
          />
        );
      
      default:
        return (
          <div className="text-center">
            <h2 className="text-4xl font-bold text-white mb-4">
              Unknown Step
            </h2>
            <p className="text-gray-300">Step not found</p>
          </div>
        );
    }
  }, [currentStep, navigate]);

  return (
    <BookingLayout
        currentStep={currentStep}
        completedSteps={stepOrder.slice(0, currentStepIndex)}
        onNext={handleNext}
        onBack={handleBack}
        onCancel={handleCancel}
        canGoNext={currentStepIndex < stepOrder.length - 1}
        canGoBack={currentStepIndex > 0}
        canSkip={false}
        isLoading={false}
        nextLabel={currentStepIndex === stepOrder.length - 1 ? "Complete" : "Continue"}
        backLabel="Exit"
        showNavigation={true}
        averageRating={4.9}
        totalReviews={112}
        showTrustStrip={true}
      >
        {renderStepContent()}
      </BookingLayout>
  );
};

export default BookingFlowController;


============================
FILE: frontend\src\features\booking\components\BookingForm.tsx
============================
/**
 * BookingForm - Example component demonstrating async hook pattern
 * Shows how to use the new async hooks with Zustand stores
 */

import React, { useCallback } from 'react';

import { useAnalytics } from '@/shared/hooks/useAnalytics';

import { useBookingAsync } from '../hooks/useBookingAsync';
import { useBookingPersistence } from '../hooks/useBookingAsync';
import { useBookingStore } from '../state/bookingStore';

interface BookingFormProps {
  onSuccess?: (bookingId: string) => void;
  onError?: (error: string) => void;
}

export const BookingForm: React.FC<BookingFormProps> = ({ onSuccess, onError }) => {
  // Get store state and actions
  const { bookingData, updateBookingData, setErrors } = useBookingStore();
  
  // Get async operations
  const {
    isSubmitting,
    submissionError,
    validateBooking,
    submitBooking,
    saveBookingDraft,
    hasUnsavedChanges
  } = useBookingAsync();

  // Get persistence features
  const { autoSaveEnabled } = useBookingPersistence();

  // Analytics
  const { logEvent } = useAnalytics();

  // Handle form submission
  const handleSubmit = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      // Validate booking data
      const validation = validateBooking(bookingData);
      if (!validation.isValid) {
        setErrors(validation.errors);
        return;
      }

      // Submit booking
      const result = await submitBooking(bookingData);
      
      if (result.success && result.bookingId) {
        logEvent('booking_completed', {
          booking_id: result.bookingId,
          vehicle: bookingData.vehicle || 'unknown',
          city: bookingData.location.city || '',
          revenue: Number(result.amount || 0),
        });
        onSuccess?.(result.bookingId);
      } else {
        onError?.(result.error || 'Submission failed');
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
      onError?.(errorMessage);
    }
  }, [bookingData, validateBooking, submitBooking, setErrors, onSuccess, onError, logEvent]);

  // Handle auto-save
  const handleAutoSave = useCallback(async () => {
    if (hasUnsavedChanges(bookingData)) {
      await saveBookingDraft(bookingData);
    }
  }, [bookingData, hasUnsavedChanges, saveBookingDraft]);

  // Handle input changes
  const handleInputChange = useCallback((field: string, value: string) => {
    updateBookingData({ [field]: value });
  }, [updateBookingData]);

  return (
    <div className="space-y-6">
      {/* Auto-save indicator */}
      {autoSaveEnabled && (
        <div className="text-sm text-gray-500">
          Auto-save enabled
        </div>
      )}

      {/* Form */}
      <form onSubmit={(e) => { void handleSubmit(e); }} className="space-y-4">
        {/* Vehicle Selection */}
        <div>
          <label htmlFor="vehicle" className="block text-sm font-medium text-white mb-2">
            Vehicle Type
          </label>
          <select
            id="vehicle"
            value={bookingData.vehicle}
            onChange={(e) => { 
              handleInputChange('vehicle', e.target.value); 
            }}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Select vehicle type</option>
            <option value="car">Car</option>
            <option value="truck">Truck</option>
            <option value="suv">SUV</option>
            <option value="boat">Boat</option>
            <option value="rv">RV</option>
          </select>
        </div>

        {/* Vehicle Details */}
        {bookingData.vehicle && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label htmlFor="make" className="block text-sm font-medium text-white mb-2">
                Make
              </label>
              <input
                type="text"
                id="make"
                value={bookingData.vehicleDetails.make}
                onChange={(e) => { 
                  handleInputChange('vehicleDetails', { ...bookingData.vehicleDetails, make: e.target.value }); 
                }}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="e.g., Toyota"
              />
            </div>
            <div>
              <label htmlFor="model" className="block text-sm font-medium text-white mb-2">
                Model
              </label>
              <input
                type="text"
                id="model"
                value={bookingData.vehicleDetails.model}
                onChange={(e) => { 
                  handleInputChange('vehicleDetails', { ...bookingData.vehicleDetails, model: e.target.value }); 
                }}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="e.g., Camry"
              />
            </div>
            <div>
              <label htmlFor="year" className="block text-sm font-medium text-white mb-2">
                Year
              </label>
              <input
                type="text"
                id="year"
                value={bookingData.vehicleDetails.year}
                onChange={(e) => { 
                  handleInputChange('vehicleDetails', { ...bookingData.vehicleDetails, year: e.target.value }); 
                }}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="e.g., 2020"
              />
            </div>
          </div>
        )}

        {/* Location */}
        <div>
          <label htmlFor="address" className="block text-sm font-medium text-white mb-2">
            Service Address
          </label>
          <input
            type="text"
            id="address"
            value={bookingData.location.address}
            onChange={(e) => { 
              handleInputChange('location', { ...bookingData.location, address: e.target.value }); 
            }}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Enter service address"
          />
        </div>

        {/* Error Display */}
        {submissionError && (
          <div className="text-red-500 text-sm">
            {submissionError}
          </div>
        )}

        {/* Submit Button */}
        <button
          type="submit"
          disabled={isSubmitting}
          className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isSubmitting ? 'Submitting...' : 'Submit Booking'}
        </button>
      </form>

      {/* Auto-save trigger */}
      <button
        onClick={() => { void handleAutoSave(); }}
        className="text-sm text-gray-500 hover:text-gray-700"
      >
        Save Draft
      </button>
    </div>
  );
};

export default BookingForm;


============================
FILE: frontend\src\features\booking\components\BookingLayout.tsx
============================
import React from 'react';

import { useImageRotation } from '@/shared/hooks';
import { getImageOpacityClasses, getTransitionStyles } from '@/shared/utils';

import { useBookingGallery } from '../hooks/useBookingGallery';
import { Footer } from './shared';

interface BookingLayoutProps {
  children: React.ReactNode;
  currentStep: string;
  completedSteps: string[];
  onNext: () => void;
  onBack: () => void;
  onCancel: () => void;
  canGoNext: boolean;
  canGoBack: boolean;
  canSkip: boolean;
  isLoading: boolean;
  nextLabel: string;
  backLabel: string;
  showNavigation: boolean;
  averageRating?: number;
  totalReviews?: number;
  showTrustStrip?: boolean;
  className?: string;
}

/**
 * BookingLayout - Provides consistent layout structure for booking steps
 * Fixes absolute positioning issues by using proper grid layout
 */
const BookingLayout: React.FC<BookingLayoutProps> = ({
  children,
  currentStep,
  completedSteps,
  onNext,
  onBack,
  onCancel,
  canGoNext,
  canGoBack,
  canSkip,
  isLoading,
  nextLabel,
  backLabel,
  showNavigation,
  averageRating = 4.9,
  totalReviews = 112,
  showTrustStrip = true,
  className = ''
}) => {
  // Load gallery images for background carousel
  const { images: galleryImages, isLoading: loading } = useBookingGallery();

  // Extract image URLs for the rotation utility
  const imageUrls = galleryImages.map(img => img.src).filter(Boolean);

  // Use the image rotation utility
  const rotation = useImageRotation({
    images: imageUrls,
    autoRotate: true,
    interval: 7000, // 7 seconds to match original
    fadeDuration: 2000, // 2 seconds fade duration
    preloadNext: true,
    pauseOnHover: false // Background doesn't need hover pause
  });

  const { currentIndex } = rotation;

  const getStepTitle = (step: string) => {
    const titles = {
      'vehicle-selection': 'Vehicle Details',
      'location': 'Service Location',
      'service-tier': 'Service Selection',
      'addons': 'Add-ons',
      'schedule': 'Schedule',
      'payment': 'Payment'
    };
    return titles[step as keyof typeof titles] || 'Booking Step';
  };


  return (
    <section className={`relative w-full min-h-screen bg-stone-900 overflow-hidden ${className}`}>
      {/* Hero Background with Image Rotation */}
      <div className="absolute inset-0 z-0">
        {/* Render all images with opacity transitions */}
        {galleryImages.map((image, index) => (
          <img
            key={image.id}
            src={image.src}
            alt={image.alt || `Booking background image ${String(index + 1)}`}
            className={`absolute inset-0 w-full h-full object-cover ${getImageOpacityClasses(index, currentIndex, 2000)}`}
            style={getTransitionStyles(2000)}
            decoding={index === 0 ? 'sync' : 'async'}
            loading={index === 0 ? 'eager' : 'lazy'}
          />
        ))}
        
        {/* Fallback background if no images loaded */}
        {!galleryImages.length && !loading && (
          <div className="w-full h-full bg-gradient-to-br from-stone-800 to-stone-900" />
        )}
      </div>
      
      {/* Dark Overlay */}
      <div className="absolute inset-0 bg-black/40 z-10" />
      
      {/* Step Header - Absolutely positioned to not affect layout */}
      <div className="absolute top-20 left-0 right-0 z-20">
        <div className="text-center px-4 sm:px-6 lg:px-8">
          <h1 className="text-4xl sm:text-5xl lg:text-6xl font-bold text-white">
            {getStepTitle(currentStep)}
          </h1>
        </div>
      </div>

      {/* Content Container with Proper Grid Layout */}
      <div className="relative z-20 h-screen grid grid-rows-[1fr_auto]">

        {/* Main Content Area */}
        <div className="flex items-center justify-center px-4 sm:px-6 lg:px-8 py-8">
          <div className="w-full max-w-2xl">
            <div className="space-y-8">
              {children}
            </div>
          </div>
        </div>

        {/* Footer with Step Navigation */}
        <div className="px-4 sm:px-6 lg:px-8 py-4 pb-8">
          <Footer
            currentStep={currentStep}
            completedSteps={completedSteps}
            showStepProgress={true}
            averageRating={averageRating}
            totalReviews={totalReviews}
            showTrustStrip={showTrustStrip}
            onNext={onNext}
            onBack={onBack}
            onCancel={onCancel}
            canGoNext={canGoNext}
            canGoBack={canGoBack}
            canSkip={canSkip}
            isLoading={isLoading}
            nextLabel={nextLabel}
            backLabel={backLabel}
            showNavigation={showNavigation}
          />
        </div>
      </div>
    </section>
  );
};

export default BookingLayout;


============================
FILE: frontend\src\features\booking\components\BookingPage.tsx
============================
// Simple booking page component
import React from 'react';

import BookingSteps from './BookingSteps';

const BookingPage: React.FC = () => {
  return <BookingSteps />;
};

export default BookingPage;


============================
FILE: frontend\src\features\booking\components\BookingSteps.tsx
============================
// Legacy BookingSteps component - now just exports BookingFlowController
// This maintains backward compatibility while using the new architecture
import React from 'react';

import BookingFlowController from './BookingFlowController';

const BookingSteps: React.FC = () => {
  return <BookingFlowController />;
};

export default BookingSteps;


============================
FILE: frontend\src\features\booking\components\index.ts
============================
// Export only public booking components
export { default as BookingPage } from './BookingPage';
export { default as BookingSteps } from './BookingSteps';

============================
FILE: frontend\src\features\booking\components\payment\PaymentOption.tsx
============================
import React from 'react';

import { PaymentIcons } from '@/shared/ui/icons/PaymentIcons';

type PaymentOptionProps = {
  id: 'card' | 'apple-pay' | 'google-pay' | 'paypal';
  label: string;
  selected: boolean;
  onSelect: (id: PaymentOptionProps['id']) => void;
  icon: string;
};

export const PaymentOption: React.FC<PaymentOptionProps> = ({ 
  id, 
  label, 
  selected, 
  onSelect, 
  icon 
}) => {
  return (
    <button
      type="button"
      onClick={() => {
        onSelect(id);
      }}
      className={[
        'px-4 py-3 rounded-lg border-2 transition-all flex items-center justify-center gap-3 min-h-[48px] w-full',
        selected 
          ? 'border-orange-500 bg-orange-500/20' 
          : 'border-stone-600 hover:border-stone-500'
      ].join(' ')}
      aria-pressed={selected}
      aria-label={label}
    >
      <div className={`${icon.startsWith('/') ? 'h-6 w-6' : 'h-5 w-5'} flex items-center justify-center flex-shrink-0`}>
        {icon.startsWith('/') ? (
          <img 
            src={icon} 
            alt={label} 
            className="h-6 w-auto max-w-full"
          />
        ) : icon in PaymentIcons ? (
          React.createElement(PaymentIcons[icon as keyof typeof PaymentIcons], { 
            className: "h-5 w-5" 
          })
        ) : (
          <span className="text-lg">{icon}</span>
        )}
      </div>
      <span className="text-white text-sm font-medium truncate">{label}</span>
    </button>
  );
};


============================
FILE: frontend\src\features\booking\components\shared\DetailsModal.tsx
============================
import React, { useState } from 'react';
import { ChevronDown, ChevronUp,X } from 'lucide-react';

import { useFeaturesData } from '../../hooks';
import { generateFeatureDetails } from '../../utils/displayUtils';

interface DetailsItem {
  id: string;
  name: string;
  price: number;
  description: string;
  featureIds: string[];
  popular?: boolean;
}

interface DetailsModalProps {
  item: DetailsItem;
  isOpen: boolean;
  onClose: () => void;
  vehicleType: string;
  category?: string; // Optional for service modals
  itemType: 'service' | 'addon';
}

const DetailsModal: React.FC<DetailsModalProps> = ({
  item,
  isOpen,
  onClose,
  vehicleType,
  category,
  itemType
}) => {
  const [expandedFeatures, setExpandedFeatures] = useState<Set<string>>(new Set());
  const featuresData = useFeaturesData({ isOpen, vehicleType, category, itemType });

  const toggleFeature = (featureId: string) => {
    setExpandedFeatures(prev => {
      const newSet = new Set(prev);
      if (newSet.has(featureId)) {
        newSet.delete(featureId);
      } else {
        newSet.add(featureId);
      }
      return newSet;
    });
  };

  const getFeatureDetails = (featureId: string) => {
    return generateFeatureDetails(featureId, featuresData);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-stone-900 rounded-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="sticky top-0 bg-stone-900 border-b border-stone-700 p-6 rounded-t-xl">
          <div className="flex justify-between items-start">
            <div className="text-center flex-1">
              <h2 className="text-3xl font-bold text-white mb-2">{item.name}</h2>
              <p className="text-4xl font-bold text-orange-500">
                ${item.price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
              </p>
            </div>
            <button
              onClick={onClose}
              className="text-stone-400 hover:text-white transition-colors p-2"
              aria-label="Close modal"
            >
              <X className="h-6 w-6" />
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="p-6">
          {/* Description */}
          <div className="mb-6">
            <p className="text-stone-300 text-lg">{item.description}</p>
          </div>

          {/* Features */}
          <div className="space-y-4">
            <h3 className="text-xl font-semibold text-white mb-4">What&apos;s Included:</h3>
            {item.featureIds.map((featureId) => {
              const featureDetails = getFeatureDetails(featureId);
              const isExpanded = expandedFeatures.has(featureId);
              
              return (
                <div key={featureId} className="border border-stone-700 rounded-lg overflow-hidden">
                  <button
                    onClick={() => {
                      toggleFeature(featureId);
                    }}
                    className="w-full p-4 text-left bg-stone-800 hover:bg-stone-700 transition-colors flex justify-between items-center"
                  >
                    <span className="text-white font-medium">
                      {featureDetails?.name || featureId}
                    </span>
                    {isExpanded ? (
                      <ChevronUp className="h-5 w-5 text-stone-400" />
                    ) : (
                      <ChevronDown className="h-5 w-5 text-stone-400" />
                    )}
                  </button>
                  
                  {isExpanded && featureDetails && (
                    <div className="p-4 bg-stone-850 border-t border-stone-700 space-y-4">
                      {/* Description */}
                      {featureDetails.description && (
                        <div>
                          <h4 className="text-sm font-semibold text-orange-400 uppercase tracking-wide mb-2">
                            Description:
                          </h4>
                          <p className="text-stone-300 text-sm">
                            {featureDetails.description}
                          </p>
                        </div>
                      )}
                      
                      {/* Process/Explanation */}
                      {featureDetails.explanation && (
                        <div>
                          <h4 className="text-sm font-semibold text-orange-400 uppercase tracking-wide mb-2">
                            Process:
                          </h4>
                          <p className="text-stone-300 text-sm">
                            {featureDetails.explanation}
                          </p>
                        </div>
                      )}
                      
                      {/* Features */}
                      {featureDetails.features.length > 0 && (
                        <div>
                          <h4 className="text-sm font-semibold text-orange-400 uppercase tracking-wide mb-2">
                            Features:
                          </h4>
                          <ul className="space-y-1">
                            {featureDetails.features.map((feature: string, index: number) => (
                              <li key={index} className="text-sm text-stone-300 flex items-start">
                                <span className="text-orange-500 mr-2">•</span>
                                {feature}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      {/* Duration (if available) */}
                      {featureDetails.duration && (
                        <div className="pt-3 border-t border-stone-700">
                          <span className="text-sm text-orange-400 font-medium">
                            Estimated Duration: {featureDetails.duration} minutes
                          </span>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
};

export default DetailsModal;


============================
FILE: frontend\src\features\booking\components\shared\Footer.tsx
============================
// Footer component for booking flow
import React from 'react';
import { Lock,Star } from 'lucide-react';

interface FooterProps {
  // Step progress props
  currentStep?: string;
  completedSteps?: string[];
  showStepProgress?: boolean;
  
  // Trust strip props
  averageRating?: number;
  totalReviews?: number;
  showTrustStrip?: boolean;
  
  // Navigation props
  onNext?: () => void;
  onBack?: () => void;
  onCancel?: () => void;
  onSkip?: () => void;
  canGoNext?: boolean;
  canGoBack?: boolean;
  canSkip?: boolean;
  isLoading?: boolean;
  nextLabel?: string;
  backLabel?: string;
  skipLabel?: string;
  showNavigation?: boolean;
  
  // Styling
  className?: string;
}

const Footer: React.FC<FooterProps> = ({
  // Step progress
  currentStep,
  completedSteps = [],
  showStepProgress = true,
  
  // Trust strip
  averageRating = 4.9,
  totalReviews = 0,
  showTrustStrip = true,
  
  // Navigation
  onNext,
  onBack,
  onCancel,
  onSkip,
  canGoNext = true,
  canGoBack = false,
  canSkip = false,
  isLoading = false,
  nextLabel = 'Continue',
  skipLabel = 'Skip',
  showNavigation = true,
  
  className = '',
}) => {
  const stepOrder = ['vehicle-selection', 'location', 'service-tier', 'addons', 'schedule', 'payment'];
  const stepLabels = {
    'vehicle-selection': 'Vehicle',
    'location': 'Location',
    'service-tier': 'Service',
    'addons': 'Addons',
    'schedule': 'Schedule',
    'payment': 'Payment',
  };

  const getStepStatus = (step: string) => {
    if (completedSteps.includes(step)) return 'completed';
    if (step === currentStep) return 'current';
    if (stepOrder.indexOf(step) < stepOrder.indexOf(currentStep || '')) return 'completed';
    return 'upcoming';
  };

  return (
    <div className={`w-full ${className}`}>
      {/* Step Progress */}
      {showStepProgress && (
        <div className="mb-8">
          <div className="flex items-center justify-center space-x-4">
            {stepOrder.map((step) => {
              const status = getStepStatus(step);

              return (
                <div key={step} className="flex items-center">
                  {/* Step Label with Focus Ring */}
                  <div
                    className={`
                      px-4 py-2 rounded-lg transition-all duration-200
                      ${
                        status === 'current'
                          ? 'ring-2 ring-orange-500 ring-offset-2 ring-offset-stone-900 bg-orange-500/10'
                          : status === 'completed'
                          ? 'bg-orange-500/5'
                          : 'hover:bg-gray-800/30'
                      }
                    `}
                  >
                    <p
                      className={`
                        text-lg font-medium
                        ${
                          status === 'completed' || status === 'current'
                            ? 'text-orange-500'
                            : 'text-gray-400'
                        }
                      `}
                    >
                      {stepLabels[step as keyof typeof stepLabels]}
                    </p>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* Navigation Buttons */}
      {showNavigation && (
        <div className="flex justify-center items-center gap-4 mb-8">
          <button
            onClick={onCancel}
            disabled={isLoading}
            className="px-6 py-3 border border-gray-600 hover:border-gray-500 text-white rounded-lg transition-colors disabled:opacity-50"
          >
            Exit
          </button>
          
          {canGoBack && onBack && (
            <button
              onClick={onBack}
              disabled={isLoading}
              className="px-6 py-3 border border-gray-600 hover:border-gray-500 text-white rounded-lg transition-colors disabled:opacity-50"
            >
              Back
            </button>
          )}
          
          {canSkip && onSkip && (
            <button
              onClick={onSkip}
              disabled={isLoading}
              className="px-6 py-3 text-gray-300 hover:text-white transition-colors disabled:opacity-50"
            >
              {skipLabel}
            </button>
          )}
          
          <button
            onClick={onNext}
            disabled={!canGoNext || isLoading}
            className="px-8 py-3 bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors disabled:opacity-50"
          >
            {isLoading ? 'Loading...' : nextLabel}
          </button>
        </div>
      )}

      {/* Trust Strip */}
      {showTrustStrip && (
        <div className="mt-8 mb-16">
          <div className="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 text-center">
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-8 sm:gap-12 place-items-center">
              <div className="flex items-center text-white">
                <Star className="h-5 w-5 text-orange-500 mr-2" />
                <a 
                  href="https://share.google/dAerqNUgo3WpYeJwP" 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  className="font-semibold hover:text-orange-400 transition-colors duration-200"
                >
                  {averageRating}/5 ({totalReviews} reviews)
                </a>
              </div>
              <div className="flex items-center text-white">
                <Lock className="h-5 w-5 text-orange-500 mr-2" />
                <span>Secure checkout via <a href="https://stripe.com/" target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:text-blue-400 transition-colors duration-200">Stripe</a></span>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Footer;


============================
FILE: frontend\src\features\booking\components\shared\HeroBackground.tsx
============================
// Hero background with rotating images for booking flow
import React from 'react';

import { useImageRotation } from '@/shared/hooks';
import { getImageOpacityClasses, getTransitionStyles, getVisibleImageIndices } from '@/shared/utils';

import { BOOKING_HERO_CONSTANTS } from '../../constants/hero';

interface HeroBackgroundProps extends React.HTMLAttributes<HTMLDivElement> {
  images?: string[];
  className?: string;
}

const HeroBackground: React.FC<HeroBackgroundProps> = ({ 
  images = BOOKING_HERO_CONSTANTS.IMAGES,
  className = '',
  ...rest
}) => {
  // Use the new image rotation utility
  const rotation = useImageRotation({
    images,
    autoRotate: true,
    interval: BOOKING_HERO_CONSTANTS.IMAGE_ROTATION_INTERVAL,
    fadeDuration: 2000, // 2s fade duration to match original
    preloadNext: true,
    pauseOnHover: false // Background doesn't need hover pause
  });

  const { currentIndex: currentImageIndex } = rotation;
  
  // Get visible image indices for performance optimization
  const visibleIndices = getVisibleImageIndices(currentImageIndex, images.length, true);

  if (images.length === 0) {
    return (
      <div className={`absolute inset-0 bg-gradient-to-br from-stone-800 to-stone-900 ${className}`} {...rest} />
    );
  }

  return (
    <div className={`absolute inset-0 overflow-hidden ${className}`} {...rest}>
      {/* Render only visible images for performance */}
      {images.map((src: string, idx: number) => {
        // Only render visible images
        if (!visibleIndices.includes(idx)) return null;
        
        return (
          <img
            key={`booking-hero-${String(idx)}`}
            src={src}
            alt={`Professional mobile detailing service ${String(idx + 1)}`}
            className={`absolute inset-0 w-full h-full object-cover ${getImageOpacityClasses(idx, currentImageIndex, 2000)}`}
            style={{
              ...getTransitionStyles(2000),
              aspectRatio: BOOKING_HERO_CONSTANTS.IMAGE_DIMENSIONS.aspectRatio,
            }}
            width={BOOKING_HERO_CONSTANTS.IMAGE_DIMENSIONS.width}
            height={BOOKING_HERO_CONSTANTS.IMAGE_DIMENSIONS.height}
            loading={idx === 0 ? "eager" : "lazy"}
            decoding="async"
          />
        );
      })}
    </div>
  );
};

export default HeroBackground;


============================
FILE: frontend\src\features\booking\components\shared\index.ts
============================
// Shared components
export { default as DetailsModal } from './DetailsModal';
export { default as Footer } from './Footer';
export { default as HeroBackground } from './HeroBackground';

============================
FILE: frontend\src\features\booking\components\steps\index.ts
============================
// Booking step components
export { default as StepAddons } from './StepAddons/StepAddons';
export { default as StepLocation } from './StepLocation/StepLocation';
export { default as StepPayment } from './StepPayment/StepPayment';
export { default as StepSchedule } from './StepSchedule/StepSchedule';
export { default as StepService } from './StepService/StepService';
export { default as StepVehicleSelection } from './StepVehicleSelection/StepVehicleSelection';


============================
FILE: frontend\src\features\booking\components\steps\StepAddons\AddonDetailsModal.tsx
============================
import React from 'react';

import DetailsModal from '../../shared/DetailsModal';

interface AddonItem {
  id: string;
  name: string;
  price: number;
  description: string;
  featureIds: string[];
  popular?: boolean;
}

interface AddonDetailsModalProps {
  addon: AddonItem;
  isOpen: boolean;
  onClose: () => void;
  vehicleType: string;
  category: string;
}

const AddonDetailsModal: React.FC<AddonDetailsModalProps> = ({
  addon,
  isOpen,
  onClose,
  vehicleType,
  category
}) => {
  return (
    <DetailsModal
      item={addon}
      isOpen={isOpen}
      onClose={onClose}
      vehicleType={vehicleType}
      category={category}
      itemType="addon"
    />
  );
};

export default AddonDetailsModal;


============================
FILE: frontend\src\features\booking\components\steps\StepAddons\Addons.tsx
============================
import React, { useCallback, useState } from 'react';
import { CheckCircle } from 'lucide-react';

import type { AddonItem } from '@/features/booking/hooks';
import { useAddons } from '@/features/booking/hooks';
import { useBookingAddons, useBookingVehicle } from '@/features/booking/state';
import { Carousel } from '@/shared/ui';

import AddonDetailsModal from './AddonDetailsModal';
import Tabs from './Tabs';

interface AddonsProps {
  onAddonsSelected?: (addons: string[]) => void;
}

interface CarouselAddonItem extends AddonItem {
  position: 'center' | 'left' | 'right';
}

const Addons: React.FC<AddonsProps> = ({ onAddonsSelected }) => {
  const [selectedCategory, setSelectedCategory] = useState<string>('windows');
  const [modalAddon, setModalAddon] = useState<AddonItem | null>(null);
  // Get data from narrow selectors
  const { vehicle } = useBookingVehicle();
  const { addons, setAddons } = useBookingAddons();

  // Use the data hook for addons
  const { availableAddons, isLoading: _isLoading, error } = useAddons(
    vehicle || '', 
    selectedCategory
  );

  // Define handlers before any conditional returns to follow hooks rules
  const handleAddonToggle = useCallback((addonId: string) => {
    // Enforce single selection: selecting a new addon replaces any existing selection.
    const newSelection = addons.includes(addonId) ? [] : [addonId];

    setAddons(newSelection);
    onAddonsSelected?.(newSelection);
  }, [addons, setAddons, onAddonsSelected]);

  const handleCategorySelect = (categoryId: string) => {
    setSelectedCategory(categoryId);
  };

  const handleCardClick = (addon: AddonItem) => {
    setModalAddon(addon);
  };

  const handleCloseModal = () => {
    setModalAddon(null);
  };

  const renderAddonCard = (addon: CarouselAddonItem) => {
    const isAddonSelected = addons.includes(addon.id);
    
    return (
      <div
        className={`bg-stone-800/80 backdrop-blur-sm rounded-xl p-8 text-center transition-all duration-300 transform cursor-pointer w-[416px] flex-shrink-0 relative ${
          addon.position === 'center'
            ? `scale-100 z-10 ring-2 ${isAddonSelected ? 'ring-green-500' : 'ring-orange-500'}`
            : addon.position === 'left'
            ? 'scale-90 -translate-x-4 opacity-70'
            : 'scale-90 translate-x-4 opacity-70'
        }`}
        onClick={() => {
          handleCardClick(addon);
        }}
        role="button"
        tabIndex={0}
        onKeyDown={(e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            handleCardClick(addon);
          }
        }}
      >
        {/* Popular Badge */}
        {addon.popular && (
          <div className="absolute -top-4 left-1/2 -translate-x-1/2">
            <span className="bg-orange-500 text-white px-4 py-1.5 rounded-full text-base font-medium">
              Most Popular
            </span>
          </div>
        )}

        {/* Addon Header */}
        <div className="mb-5">
          <h3 className="text-3xl font-bold text-white mb-3">{addon.name}</h3>
          <p className="text-4xl font-bold text-orange-500">
            ${Number(addon.price).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
          </p>
        </div>

        {/* Description and Features */}
        <div className="mb-5">
          <p className="text-stone-300 text-base mb-5">{addon.description}</p>
          
          {/* Features List */}
          {addon.features.length > 0 && (
            <div className="space-y-3">
              {addon.features.map((feature: string, index: number) => (
                <div key={index} className="flex items-center text-base text-stone-300">
                  <CheckCircle className="h-5 w-5 text-green-500 mr-3 flex-shrink-0" />
                  <span className="truncate">{feature}</span>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Selection Button */}
        <button
          onClick={(e) => {
            e.stopPropagation();
            handleAddonToggle(addon.id);
          }}
          className={`mt-8 w-full py-4 px-8 rounded-lg font-semibold text-lg transition-colors flex items-center justify-center gap-3 ${
            isAddonSelected
              ? 'bg-green-600 hover:bg-green-700 text-white'
              : 'bg-orange-500 hover:bg-orange-600 text-white'
          }`}
        >
          {isAddonSelected && <CheckCircle size={20} />}
          {isAddonSelected ? 'Selected' : 'Select Addon'}
        </button>
      </div>
    );
  };

  // Guard against missing vehicle selection
  if (!vehicle) {
    return (
      <div className="w-full max-w-4xl mx-auto">
        <div className="text-center py-8">
          <p className="text-white text-lg">Please select a vehicle first.</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="w-full max-w-4xl mx-auto">
        <div className="text-center py-8">
          <p className="text-red-500">Error loading addons: {error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full max-w-6xl mx-auto relative">
      {/* Category Tabs - Positioned between header and cards */}
      <Tabs 
        selectedCategory={selectedCategory}
        onCategorySelect={handleCategorySelect}
      />
      
      {/* Addon Carousel */}
      <Carousel
        items={availableAddons}
        selectedItem=""
        onItemSelect={() => {}} // Not used for addons
        renderItem={renderAddonCard}
        onItemClick={handleCardClick}
        emptyMessage={`No add-ons available for ${selectedCategory}`}
      />

      {/* Addon Details Modal */}
      {modalAddon && (
        <AddonDetailsModal
          addon={modalAddon}
          isOpen={!!modalAddon}
          onClose={handleCloseModal}
          vehicleType={vehicle}
          category={selectedCategory}
        />
      )}
    </div>
  );
};

export default Addons;


============================
FILE: frontend\src\features\booking\components\steps\StepAddons\Header.tsx
============================
import React from 'react';

const Header: React.FC = () => {
  return (
    <div className="text-center mb-8">
      <h2 className="text-3xl font-bold text-white mb-4">Add Extras</h2>
      <p className="text-gray-300">Enhance your service with additional options</p>
    </div>
  );
};

export default Header;


============================
FILE: frontend\src\features\booking\components\steps\StepAddons\StepAddons.tsx
============================
import React from 'react';

import Addons from './Addons';

interface StepAddonsProps {
  onAddonsSelected?: (addons: string[]) => void;
}

/**
 * StepAddons - Complete addons step with addon selection
 * The main step header is handled by BookingLayout
 * The Addons component handles tabs and addon selection
 */
const StepAddons: React.FC<StepAddonsProps> = ({ onAddonsSelected }) => {
  return (
    <div className="w-full max-w-6xl mx-auto">
      {/* Addon Selection with integrated tabs */}
      <Addons onAddonsSelected={onAddonsSelected} />
    </div>
  );
};

export default StepAddons;

============================
FILE: frontend\src\features\booking\components\steps\StepAddons\Tabs.tsx
============================
import React from 'react';
import { Droplets, Shield, Sparkles, Wrench } from 'lucide-react';

interface TabsProps {
  selectedCategory: string;
  onCategorySelect: (categoryId: string) => void;
}

const Tabs: React.FC<TabsProps> = ({ selectedCategory, onCategorySelect }) => {
  // Addon categories
  const addonCategories = [
    { id: 'windows', name: 'Windows', icon: Sparkles },
    { id: 'wheels', name: 'Wheels', icon: Wrench },
    { id: 'trim', name: 'Interior', icon: Droplets },
    { id: 'engine', name: 'Engine', icon: Shield },
  ];

  return (
    <div className="absolute left-0 right-0 z-20 py-8" style={{ top: '150px' }}>
      <div className="text-center px-4 sm:px-6 lg:px-8">
        <div className="flex flex-wrap justify-center gap-3 max-w-4xl mx-auto">
          {addonCategories.map((category) => {
            const IconComponent = category.icon;
            return (
              <button
                key={category.id}
                onClick={() => {
                  onCategorySelect(category.id);
                }}
                className={`p-2 rounded-lg border-2 transition-all w-24 h-24 ${
                  selectedCategory === category.id
                    ? 'border-orange-500 bg-orange-500/20'
                    : 'border-gray-600 hover:border-gray-500'
                }`}
              >
                <IconComponent className="w-8 h-8 text-white mb-2 mx-auto" />
                <div className="text-white font-medium">{category.name}</div>
              </button>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default Tabs;


============================
FILE: frontend\src\features\booking\components\steps\StepLocation\StepLocation.tsx
============================
import React, { useState } from 'react';

import { useBookingData } from '@/features/booking/state';

const StepLocation: React.FC = () => {
  const { bookingData, setLocation } = useBookingData();
  const [address, setAddress] = useState(bookingData.location.address || '');
  const [city, setCity] = useState(bookingData.location.city || '');
  const [state, setState] = useState(bookingData.location.state || '');
  const [zip, setZip] = useState(bookingData.location.zip || '');
  const [notes, setNotes] = useState(bookingData.location.notes || '');
  const [locationTypes, setLocationTypes] = useState<string[]>(bookingData.location.locationType ? bookingData.location.locationType.split(',') : []);

  const handleAddressChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setAddress(e.target.value);
    setLocation({ ...bookingData.location, address: e.target.value });
  };

  const handleCityChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setCity(e.target.value);
    setLocation({ ...bookingData.location, city: e.target.value });
  };

  const handleStateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setState(e.target.value);
    setLocation({ ...bookingData.location, state: e.target.value });
  };

  const handleZipChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setZip(e.target.value);
    setLocation({ ...bookingData.location, zip: e.target.value });
  };

  const handleNotesChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setNotes(e.target.value);
    setLocation({ ...bookingData.location, notes: e.target.value });
  };

  const handleLocationTypeChange = (type: string) => {
    const updatedTypes = locationTypes.includes(type)
      ? locationTypes.filter(t => t !== type) // Remove if already selected
      : [...locationTypes, type]; // Add if not selected
    
    setLocationTypes(updatedTypes);
    setLocation({ ...bookingData.location, locationType: updatedTypes.join(',') });
  };

  const availableLocationTypes = ['Garage', 'Driveway', 'Business', 'Hangar', 'Street', 'Other'];

  return (
    <div className="space-y-6">
      {/* Location Type Checkboxes */}
      <div className="space-y-4">
        <h3 className="text-white font-medium text-lg">Please tell us where your vehicle will be serviced</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
          {availableLocationTypes.map((type) => (
            <label
              key={type}
              className={`flex items-center space-x-3 p-3 rounded-lg border-2 cursor-pointer transition-all ${
                locationTypes.includes(type)
                  ? 'border-orange-500 bg-orange-500/20'
                  : 'border-gray-600 hover:border-gray-500 bg-gray-700'
              }`}
            >
              <input
                type="checkbox"
                value={type}
                checked={locationTypes.includes(type)}
                onChange={() => {
                  handleLocationTypeChange(type);
                }}
                className="w-4 h-4 text-orange-500 bg-gray-700 border-gray-600 focus:ring-orange-500 focus:ring-2"
              />
              <span className="text-white font-medium">{type}</span>
            </label>
          ))}
        </div>
      </div>

      {/* Address Fields */}
      <div className="space-y-4">
        <div>
          <input
            type="text"
            placeholder="Address"
            value={address}
            onChange={handleAddressChange}
            className="w-full p-3 rounded-lg bg-gray-700 border border-gray-600 text-white placeholder-gray-400 focus:border-orange-500 focus:outline-none"
          />
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <input
              type="text"
              placeholder="City"
              value={city}
              onChange={handleCityChange}
              className="w-full p-3 rounded-lg bg-gray-700 border border-gray-600 text-white placeholder-gray-400 focus:border-orange-500 focus:outline-none"
            />
          </div>
          <div>
            <input
              type="text"
              placeholder="State"
              value={state}
              onChange={handleStateChange}
              className="w-full p-3 rounded-lg bg-gray-700 border border-gray-600 text-white placeholder-gray-400 focus:border-orange-500 focus:outline-none"
            />
          </div>
          <div>
            <input
              type="text"
              placeholder="ZIP Code"
              value={zip}
              onChange={handleZipChange}
              className="w-full p-3 rounded-lg bg-gray-700 border border-gray-600 text-white placeholder-gray-400 focus:border-orange-500 focus:outline-none"
            />
          </div>
        </div>
        
        <div>
          <textarea
            placeholder="Special notes (optional)"
            value={notes}
            onChange={handleNotesChange}
            rows={5}
            className="w-full p-3 rounded-lg bg-gray-700 border border-gray-600 text-white placeholder-gray-400 focus:border-orange-500 focus:outline-none resize-none"
          />
        </div>
      </div>
    </div>
  );
};

export default StepLocation;


============================
FILE: frontend\src\features\booking\components\steps\StepPayment\components\index.ts
============================
export { default as PaymentSummary } from './PaymentSummary';
export { default as PaymentTabs } from './PaymentTabs';
export { SummarySection } from './SummarySection';
export { VehicleSection } from './VehicleSection';



============================
FILE: frontend\src\features\booking\components\steps\StepPayment\components\PaymentSummary.tsx
============================
import React from 'react';

interface PaymentSummaryProps {
  servicePrice: number;
  addonsPrice: number;
  subtotal: number;
  tax: number;
  total: number;
  selectedService?: {
    name: string;
    price: number;
  };
  selectedAddons: Array<{
    name: string;
    price: number;
  }>;
}

const PaymentSummary: React.FC<PaymentSummaryProps> = ({
  servicePrice,
  subtotal,
  tax,
  total,
  selectedService,
  selectedAddons
}) => {
  return (
    <div className="bg-gray-800 rounded-lg p-6">
      <h3 className="text-xl font-semibold text-white mb-4">Order Summary</h3>
      
      <div className="space-y-3">
        {/* Service */}
        {selectedService && (
          <div className="flex justify-between text-gray-300">
            <span>{selectedService.name}</span>
            <span>${servicePrice.toFixed(2)}</span>
          </div>
        )}
        
        {/* Addons */}
        {selectedAddons.map((addon) => (
          <div key={addon.name} className="flex justify-between text-gray-300">
            <span className="text-sm">+ {addon.name}</span>
            <span>${addon.price.toFixed(2)}</span>
          </div>
        ))}
        
        {/* Subtotal */}
        <div className="border-t border-gray-600 pt-3">
          <div className="flex justify-between text-gray-300">
            <span>Subtotal</span>
            <span>${subtotal.toFixed(2)}</span>
          </div>
        </div>
        
        {/* Tax */}
        <div className="flex justify-between text-gray-300">
          <span>Tax (8%)</span>
          <span>${tax.toFixed(2)}</span>
        </div>
        
        {/* Total */}
        <div className="border-t border-gray-600 pt-3">
          <div className="flex justify-between text-white font-semibold text-lg">
            <span>Total</span>
            <span>${total.toFixed(2)}</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PaymentSummary;


============================
FILE: frontend\src\features\booking\components\steps\StepPayment\components\PaymentTabs.tsx
============================
import React from 'react';
import { Car, CreditCard, FileText, MapPin } from 'lucide-react';

interface PaymentTabsProps {
  activeTab: 'vehicle' | 'location' | 'summary' | 'payment';
  onTabChange: (tab: 'vehicle' | 'location' | 'summary' | 'payment') => void;
}

const PaymentTabs: React.FC<PaymentTabsProps> = ({ activeTab, onTabChange }) => {
  const tabs = [
    { id: 'vehicle' as const, label: 'Vehicle', icon: Car },
    { id: 'location' as const, label: 'Location', icon: MapPin },
    { id: 'summary' as const, label: 'Summary', icon: FileText },
    { id: 'payment' as const, label: 'Payment', icon: CreditCard }
  ];

  return (
    <div className="flex space-x-1 bg-gray-800 p-1 rounded-lg mb-6">
      {tabs.map(({ id, label, icon: Icon }) => (
        <button
          key={id}
          onClick={() => { 
            onTabChange(id); 
          }}
          className={`flex items-center space-x-2 px-4 py-2 rounded-md transition-colors ${
            activeTab === id
              ? 'bg-blue-600 text-white'
              : 'text-gray-300 hover:text-white hover:bg-gray-700'
          }`}
        >
          <Icon className="w-4 h-4" />
          <span>{label}</span>
        </button>
      ))}
    </div>
  );
};

export default PaymentTabs;


============================
FILE: frontend\src\features\booking\components\steps\StepPayment\components\SummarySection.tsx
============================
import React from 'react';
import { Plus } from 'lucide-react';

import type { BookingData } from '@/features/booking/state';

interface Addon {
  id: string;
  name: string;
  price: number;
}

interface ServiceTier {
  id: string;
  name: string;
  price: number;
}

interface SummarySectionProps {
  bookingData: BookingData;
  serviceTiers: ServiceTier[];
  allAvailableAddons: Addon[];
  totals: {
    servicePrice: number;
    addonPrice: number;
    total: number;
  };
}

export const SummarySection: React.FC<SummarySectionProps> = ({
  bookingData,
  serviceTiers,
  allAvailableAddons,
  totals
}) => {
  const { serviceTier, addons, schedule } = bookingData;
  const { servicePrice, total } = totals;
  
  // Find the selected service for display name
  const selectedService = Array.isArray(serviceTiers) ? serviceTiers.find(service => service.id === serviceTier) : null;
  const serviceInfo = selectedService || { name: 'No Service Selected', price: 0 };
  
  return (
    <div className="space-y-6">
      {/* Service */}
      {serviceTier && (
        <div>
          <h3 className="text-lg font-semibold text-white mb-3">Service</h3>
          <div className="bg-stone-700/50 rounded-2xl p-4 border border-stone-600/50">
            <div className="flex justify-between items-center">
              <span className="text-white font-medium">{serviceInfo.name}</span>
              <span className="text-2xl font-bold text-orange-400">${servicePrice}</span>
            </div>
          </div>
        </div>
      )}

      {/* Add-ons */}
      {addons.length > 0 && (
        <div>
          <h3 className="text-lg font-semibold text-white mb-3">Add-ons</h3>
          <div className="space-y-3">
            {addons.map((addonId, index) => {
              const addon = allAvailableAddons.find(a => a.id === addonId);
              return (
                <div key={index} className="bg-stone-700/50 rounded-2xl p-4 border border-stone-600/50">
                  <div className="flex justify-between items-center">
                    <div className="flex items-center space-x-2">
                      <Plus className="w-4 h-4 text-orange-400" />
                      <span className="text-white/90 text-sm font-medium">{addon ? addon.name : addonId}</span>
                    </div>
                    <span className="text-orange-400 font-semibold">${addon ? addon.price : 0}</span>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* Schedule */}
      {schedule.dates.length > 0 && (
        <div>
          <h3 className="text-lg font-semibold text-white mb-3">Schedule</h3>
          <div className="bg-stone-700/50 rounded-2xl p-4 border border-stone-600/50">
            <div className="space-y-2">
              {schedule.dates.map((date, index) => (
                <div key={index} className="text-white font-medium">
                  {new Date(date).toLocaleDateString('en-US', { 
                    weekday: 'long', 
                    month: 'long', 
                    day: 'numeric' 
                  })}
                </div>
              ))}
              {schedule.time && <div className="text-sm text-gray-400">Time: {schedule.time}</div>}
            </div>
          </div>
        </div>
      )}

      {/* Total */}
      <div className="pt-6 border-t border-stone-600/50">
        <div className="bg-orange-500/20 rounded-3xl p-6 border border-orange-400/30">
          <div className="flex justify-between items-center">
            <span className="text-xl font-semibold text-white">Total</span>
            <div className="text-right">
              <div className="text-3xl font-bold text-orange-400">${total}</div>
              <div className="text-xs text-gray-400 mt-1">Estimated Total</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};



============================
FILE: frontend\src\features\booking\components\steps\StepPayment\components\VehicleSection.tsx
============================
import React from 'react';

import type { BookingData } from '@/features/booking/state';

interface VehicleSectionProps {
  bookingData: BookingData;
}

export const VehicleSection: React.FC<VehicleSectionProps> = ({ bookingData }) => {
  const { vehicle, vehicleDetails } = bookingData;
  
  return (
    <div className="space-y-6">
      <div className="text-center">
        <h3 className="text-2xl font-bold text-white mb-6">Vehicle Information</h3>
      </div>
      
      {/* Vehicle Details */}
      {(vehicleDetails.make || vehicle) && (
        <div className="bg-gray-800/50 rounded-lg p-6">
          <h4 className="text-xl font-semibold text-white mb-4">Selected Vehicle</h4>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-base">
            <div>
              <span className="text-gray-400">Make:</span>
              <div className="text-white text-lg font-semibold">{vehicleDetails.make || 'N/A'}</div>
            </div>
            <div>
              <span className="text-gray-400">Model:</span>
              <div className="text-white text-lg font-semibold">{vehicleDetails.model || 'N/A'}</div>
            </div>
            <div>
              <span className="text-gray-400">Year:</span>
              <div className="text-white text-lg font-semibold">{vehicleDetails.year || 'N/A'}</div>
            </div>
            <div>
              <span className="text-gray-400">
                {vehicleDetails.color ? 'Color:' : 'Length:'}
              </span>
              <div className="text-white text-lg font-semibold">
                {vehicleDetails.color ? 
                  vehicleDetails.color.charAt(0).toUpperCase() + vehicleDetails.color.slice(1) : 
                  vehicleDetails.length || 'N/A'
                }
              </div>
            </div>
          </div>
        </div>
      )}
      
      {!vehicleDetails.make && !vehicle && (
        <div className="text-center py-8">
          <p className="text-gray-400">No vehicle information available</p>
        </div>
      )}
    </div>
  );
};



============================
FILE: frontend\src\features\booking\components\steps\StepPayment\StepPayment.refactored.tsx
============================
import React from 'react';

import { usePaymentData, usePaymentForm } from '@/features/booking/hooks';
import { useBookingPayment } from '@/features/booking/state';

import { PaymentOption } from '../../payment/PaymentOption';
import { PaymentSummary, PaymentTabs, SummarySection, VehicleSection } from './components';

interface StepPaymentProps {
  onPaymentComplete?: () => void;
}

const StepPayment: React.FC<StepPaymentProps> = ({ onPaymentComplete }) => {
  // Use custom hooks for data and form state
  const paymentData = usePaymentData();
  const paymentForm = usePaymentForm();
  const { setPaymentMethod: setStorePaymentMethod } = useBookingPayment();

  const handlePaymentMethodSelect = (method: string) => {
    paymentForm.setPaymentMethod(method);
    setStorePaymentMethod(method);
  };

  const handleCompleteBooking = () => {
    onPaymentComplete?.();
  };

  const isFormValid = () => {
    if (paymentForm.paymentMethod === 'card') {
      const { cardDetails } = paymentForm;
      return cardDetails.cardNumber && cardDetails.expiryDate && cardDetails.cvv && 
             cardDetails.name && cardDetails.email && cardDetails.phone && 
             cardDetails.address && cardDetails.city && cardDetails.state && cardDetails.zip;
    }
    return paymentForm.paymentMethod !== '';
  };

  if (paymentData.serviceTiersLoading) {
    return (
      <div className="text-center">
        <p className="text-xl text-gray-300 mb-8">Loading payment options...</p>
        <div className="animate-pulse bg-gray-700 h-32 rounded-lg max-w-2xl mx-auto"></div>
      </div>
    );
  }

  return (
    <div className="w-full max-w-6xl mx-auto">
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-white mb-2">Complete Your Booking</h2>
        <p className="text-gray-300">Review your order and choose your payment method</p>
      </div>

      {/* Payment Tabs */}
      <PaymentTabs 
        activeTab={paymentForm.activeTab} 
        onTabChange={paymentForm.setActiveTab} 
      />

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Main Content */}
        <div className="lg:col-span-2">
          {paymentForm.activeTab === 'vehicle' && (
            <VehicleSection bookingData={paymentData.bookingData} />
          )}
          
          {paymentForm.activeTab === 'location' && (
            <div className="bg-gray-800 rounded-lg p-6">
              <h3 className="text-xl font-semibold text-white mb-4">Service Location</h3>
              <p className="text-gray-300">
                {paymentData.bookingData.location}
              </p>
            </div>
          )}
          
          {paymentForm.activeTab === 'summary' && (
            <SummarySection 
              selectedService={paymentData.selectedService}
              selectedAddons={paymentData.selectedAddons}
            />
          )}
          
          {paymentForm.activeTab === 'payment' && (
            <div className="space-y-6">
              <PaymentOption
                selectedMethod={paymentForm.paymentMethod}
                onMethodSelect={handlePaymentMethodSelect}
                cardDetails={paymentForm.cardDetails}
                onCardInputChange={paymentForm.updateCardDetails}
                expandedSections={paymentForm.expandedSections}
                onToggleSection={paymentForm.toggleSection}
              />
              
              <div className="flex justify-end">
                <button
                  onClick={handleCompleteBooking}
                  disabled={!isFormValid()}
                  className={`px-8 py-3 rounded-lg font-semibold transition-colors ${
                    isFormValid()
                      ? 'bg-blue-600 text-white hover:bg-blue-700'
                      : 'bg-gray-600 text-gray-400 cursor-not-allowed'
                  }`}
                >
                  Complete Booking - ${paymentData.total.toFixed(2)}
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Sidebar */}
        <div className="lg:col-span-1">
          <PaymentSummary
            servicePrice={paymentData.servicePrice}
            addonsPrice={paymentData.addonsPrice}
            subtotal={paymentData.subtotal}
            tax={paymentData.tax}
            total={paymentData.total}
            selectedService={paymentData.selectedService}
            selectedAddons={paymentData.selectedAddons}
          />
        </div>
      </div>
    </div>
  );
};

export default StepPayment;


============================
FILE: frontend\src\features\booking\components\steps\StepPayment\StepPayment.tsx
============================
import React from 'react';

import { usePaymentData, usePaymentForm } from '@/features/booking/hooks';
import { useBookingPayment } from '@/features/booking/state';

import { PaymentOption } from '../../payment/PaymentOption';
import { PaymentSummary, PaymentTabs, SummarySection, VehicleSection } from './components';

interface StepPaymentProps {
  onPaymentComplete?: () => void;
}

const StepPayment: React.FC<StepPaymentProps> = ({ onPaymentComplete }) => {
  // Use custom hooks for data and form state
  const paymentData = usePaymentData();
  const paymentForm = usePaymentForm();
  const { setPaymentMethod: setStorePaymentMethod } = useBookingPayment();

  const handlePaymentMethodSelect = (method: string) => {
    paymentForm.setPaymentMethod(method);
    setStorePaymentMethod(method);
  };

  const handleCompleteBooking = () => {
    onPaymentComplete?.();
  };

  const isFormValid = () => {
    if (paymentForm.paymentMethod === 'card') {
      const { cardDetails } = paymentForm;
      return cardDetails.cardNumber && cardDetails.expiryDate && cardDetails.cvv && 
             cardDetails.name && cardDetails.email && cardDetails.phone && 
             cardDetails.address && cardDetails.city && cardDetails.state && cardDetails.zip;
    }
    return paymentForm.paymentMethod !== '';
  };

  if (paymentData.serviceTiersLoading) {
    return (
      <div className="text-center">
        <p className="text-xl text-gray-300 mb-8">Loading payment options...</p>
        <div className="animate-pulse bg-gray-700 h-32 rounded-lg max-w-2xl mx-auto"></div>
      </div>
    );
  }

  return (
    <div className="w-full max-w-6xl mx-auto">
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-white mb-2">Complete Your Booking</h2>
        <p className="text-gray-300">Review your order and choose your payment method</p>
      </div>

      {/* Payment Tabs */}
      <PaymentTabs 
        activeTab={paymentForm.activeTab} 
        onTabChange={paymentForm.setActiveTab} 
      />

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Main Content */}
        <div className="lg:col-span-2">
          {paymentForm.activeTab === 'vehicle' && (
            <VehicleSection bookingData={paymentData.bookingData} />
          )}
          
          {paymentForm.activeTab === 'location' && (
            <div className="bg-gray-800 rounded-lg p-6">
              <h3 className="text-xl font-semibold text-white mb-4">Service Location</h3>
              <p className="text-gray-300">
                {paymentData.bookingData.location}
              </p>
            </div>
          )}
          
          {paymentForm.activeTab === 'summary' && (
            <SummarySection 
              selectedService={paymentData.selectedService}
              selectedAddons={paymentData.selectedAddons}
            />
          )}
          
          {paymentForm.activeTab === 'payment' && (
            <div className="space-y-6">
              <PaymentOption
                selectedMethod={paymentForm.paymentMethod}
                onMethodSelect={handlePaymentMethodSelect}
                cardDetails={paymentForm.cardDetails}
                onCardInputChange={paymentForm.updateCardDetails}
                expandedSections={paymentForm.expandedSections}
                onToggleSection={paymentForm.toggleSection}
              />
              
              <div className="flex justify-end">
                <button
                  onClick={handleCompleteBooking}
                  disabled={!isFormValid()}
                  className={`px-8 py-3 rounded-lg font-semibold transition-colors ${
                    isFormValid()
                      ? 'bg-blue-600 text-white hover:bg-blue-700'
                      : 'bg-gray-600 text-gray-400 cursor-not-allowed'
                  }`}
                >
                  Complete Booking - ${paymentData.total.toFixed(2)}
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Sidebar */}
        <div className="lg:col-span-1">
          <PaymentSummary
            servicePrice={paymentData.servicePrice}
            addonsPrice={paymentData.addonsPrice}
            subtotal={paymentData.subtotal}
            tax={paymentData.tax}
            total={paymentData.total}
            selectedService={paymentData.selectedService}
            selectedAddons={paymentData.selectedAddons}
          />
        </div>
      </div>
    </div>
  );
};

export default StepPayment;


============================
FILE: frontend\src\features\booking\components\steps\StepSchedule\StepSchedule.tsx
============================
import React, { useState } from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';

import { useScheduleOptions } from '@/features/booking/hooks';
import type { ScheduleOption } from '@/features/booking/hooks/useScheduleOptions';
import { useBookingSchedule } from '@/features/booking/state';

const StepSchedule: React.FC = () => {
  const [currentMonth, setCurrentMonth] = useState(new Date());
  
  const { schedule, setSchedule } = useBookingSchedule();
  
  // Extract dates and time from schedule
  const selectedDates = schedule.dates;
  const selectedTime = schedule.time;
  
  // Load schedule options (using mock location/service IDs for now)
  const { data: scheduleOptions, isPending, error } = useScheduleOptions('mock-location', 'mock-service');

  const handleDateSelect = (date: string) => {
    // Toggle selection - if already selected, remove it; if not selected, add it
    const newDates = selectedDates.includes(date)
      ? selectedDates.filter((d: string) => d !== date) // Remove date from selection
      : [...selectedDates, date].sort(); // Add date to selection
    
    // Update store immediately
    setSchedule({ dates: newDates, time: selectedTime });
  };

  const navigateMonth = (direction: 'prev' | 'next') => {
    setCurrentMonth(prev => {
      const newMonth = new Date(prev);
      if (direction === 'prev') {
        newMonth.setMonth(prev.getMonth() - 1);
      } else {
        newMonth.setMonth(prev.getMonth() + 1);
      }
      return newMonth;
    });
  };

  // Check if we can navigate to previous month
  const canNavigatePrev = () => {
    const today = new Date();
    const currentMonthYear = currentMonth.getFullYear() * 12 + currentMonth.getMonth();
    const todayMonthYear = today.getFullYear() * 12 + today.getMonth();
    return currentMonthYear > todayMonthYear;
  };

  if (isPending) {
    return (
      <div className="text-center">
        <p className="text-xl text-gray-300 mb-8">Loading available times...</p>
        <div className="animate-pulse bg-gray-700 h-32 rounded-lg max-w-4xl mx-auto"></div>
      </div>
    );
  }

  if (error !== null) {
    return (
      <div className="text-center">
        <p className="text-xl text-red-400 mb-8">Error loading schedule options</p>
        <div className="bg-red-900/20 border border-red-500 rounded-lg p-6 max-w-2xl mx-auto">
          <p className="text-red-300">Please try again later or contact support.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="text-center">
      
      <div className="max-w-4xl mx-auto">
        {/* Date Selection - Calendar */}
        <div className="mb-8 mt-36">
          <div className="bg-gray-800/90 backdrop-blur-sm rounded-lg p-6 max-w-2xl mx-auto border border-gray-600/50">
            {/* Month Navigation */}
            <div className="flex items-center justify-between mb-6">
              <button
                onClick={() => {
                  navigateMonth('prev');
                }}
                disabled={!canNavigatePrev()}
                className={`p-2 rounded-lg border transition-all ${
                  canNavigatePrev()
                    ? 'border-gray-600 hover:border-gray-500 text-white'
                    : 'border-gray-700 bg-gray-800/50 text-gray-500 cursor-not-allowed'
                }`}
              >
                <ChevronLeft className="h-5 w-5" />
              </button>
              
              <h2 className="text-xl font-semibold text-white">
                {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
              </h2>
              
              <button
                onClick={() => {
                  navigateMonth('next');
                }}
                className="p-2 rounded-lg border border-gray-600 hover:border-gray-500 text-white transition-all"
              >
                <ChevronRight className="h-5 w-5" />
              </button>
            </div>
            
            <div className="grid grid-cols-7 gap-2 mb-4">
              {/* Calendar Header */}
              {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (
                <div key={day} className="text-center text-sm font-semibold text-gray-300 py-2">
                  {day}
                </div>
              ))}
              
              {/* Calendar Days */}
              {(() => {
                const today = new Date();
                const month = currentMonth.getMonth();
                const year = currentMonth.getFullYear();
                const firstDay = new Date(year, month, 1);
                const startDate = new Date(firstDay);
                startDate.setDate(startDate.getDate() - firstDay.getDay());
                
                const calendarDays: React.JSX.Element[] = [];
                const currentDate = new Date(startDate);
                
                // Generate 6 weeks of calendar
                for (let week = 0; week < 6; week++) {
                  for (let day = 0; day < 7; day++) {
                    const dateStr = currentDate.toISOString().split('T')[0];
                    const isCurrentMonth = currentDate.getMonth() === month;
                    // Compare dates only (ignore time) to properly handle same-day availability
                    const todayDateOnly = new Date(today.getFullYear(), today.getMonth(), today.getDate());
                    const currentDateOnly = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
                    const isPast = currentDateOnly < todayDateOnly;
                    // A date is available if it's in the future (not past) and either:
                    // 1. Has schedule options with availability, OR
                    // 2. Is a future date without specific schedule data (default to available)
                    const options = scheduleOptions as ScheduleOption[] | undefined;
                    const hasScheduleData = options?.some((option: ScheduleOption) => option.date === dateStr);
                    const isAvailableFromSchedule = hasScheduleData 
                        ? options?.some((option: ScheduleOption) => option.date === dateStr && option.available) ?? false
                        : true; // Default to available for future dates without schedule data
                    const isAvailable = isAvailableFromSchedule;
                    const isSelected = selectedDates.includes(dateStr);
                    
                    calendarDays.push(
                      <button
                        key={dateStr}
                        onClick={() => {
                          if (isAvailable && !isPast) {
                            handleDateSelect(dateStr);
                          }
                        }}
                        disabled={!isAvailable || isPast}
                        className={`p-3 rounded-lg border-2 transition-all text-sm ${
                          isSelected
                            ? 'border-green-500 bg-green-500/20 text-white'
                            : isAvailable && !isPast
                            ? 'border-gray-600 hover:border-gray-500 text-white'
                            : 'border-gray-700 bg-gray-800/50 text-gray-500 cursor-not-allowed'
                        } ${!isCurrentMonth ? 'opacity-50' : ''}`}
                      >
                        {currentDate.getDate()}
                      </button>
                    );
                    
                    currentDate.setDate(currentDate.getDate() + 1);
                  }
                }
                
                return calendarDays;
              })()}
            </div>
            
          </div>
          
          {/* Arrival Time Information */}
          <div className="bg-gray-800/90 backdrop-blur-sm rounded-lg p-6 max-w-2xl mx-auto border border-gray-600/50 mt-6">
            <h3 className="text-lg font-semibold text-white mb-4 text-center">Service Information</h3>
            <ul className="text-gray-300 space-y-2 text-base md:text-lg">
              <li className="flex items-start">
                <span className="text-orange-400 mr-2">•</span>
                <span>Arrival times are typically between 6am - 9am.</span>
              </li>
              <li className="flex items-start">
                <span className="text-orange-400 mr-2">•</span>
                <span>You do not need to be present for vehicle service.</span>
              </li>
              <li className="flex items-start">
                <span className="text-orange-400 mr-2">•</span>
                <span>We will contact you to discuss the specifics about your service.</span>
              </li>
            </ul>
          </div>
        </div>

      </div>
    </div>
  );
};

export default StepSchedule;


============================
FILE: frontend\src\features\booking\components\steps\StepService\Header.tsx
============================
import React from 'react';

const Header: React.FC = () => {
  return (
    <div className="text-center mb-8">
      <h2 className="text-3xl font-bold text-white mb-4">Choose Your Service</h2>
      <p className="text-gray-300">Select the service tier that best fits your needs</p>
    </div>
  );
};

export default Header;


============================
FILE: frontend\src\features\booking\components\steps\StepService\ServiceCard.tsx
============================
import React from 'react';
import { CheckCircle } from 'lucide-react';

interface ServiceTier {
  id: string;
  name: string;
  price: number;
  description: string;
  features: string[];
  popular?: boolean;
}

interface ServiceCardProps {
  service: ServiceTier;
  position: 'center' | 'left' | 'right';
  isSelected: boolean;
  onSelect: () => void;
  onCardClick: () => void;
}

const ServiceCard: React.FC<ServiceCardProps> = ({
  service,
  position,
  isSelected,
  onSelect,
  onCardClick
  }) => {
  const getPositionClasses = () => {
    const baseClasses = "bg-stone-800/80 backdrop-blur-sm rounded-xl p-8 text-center transition-all duration-300 transform cursor-pointer w-[416px] flex-shrink-0";
    
    switch (position) {
      case 'center':
        return `${baseClasses} scale-100 z-10 ring-2 ${isSelected ? 'ring-green-500 bg-green-800/80' : 'ring-orange-500'}`;
      case 'left':
        return `${baseClasses} scale-90 -translate-x-4 opacity-70`;
      case 'right':
        return `${baseClasses} scale-90 translate-x-4 opacity-70`;
      default:
        return baseClasses;
    }
  };

  const getButtonClasses = () => {
    const baseClasses = "w-full py-4 px-8 rounded-lg font-semibold text-lg transition-colors";
    if (isSelected) {
      return `${baseClasses} bg-green-600 hover:bg-green-700 text-white flex items-center justify-center gap-3`;
    }
    return `${baseClasses} bg-orange-500 hover:bg-orange-600 text-white`;
  };

  return (
    <div 
      className={getPositionClasses()} 
      onClick={onCardClick}
      onKeyDown={(e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          onCardClick();
        }
      }}
      role="button"
      tabIndex={0}
    >
      {/* Popular Badge */}
      {service.popular && (
        <div className="absolute -top-4 left-1/2 -translate-x-1/2">
          <span className="bg-orange-500 text-white px-4 py-1.5 rounded-full text-base font-medium">
            Most Popular
          </span>
        </div>
      )}

      {/* Service Header */}
      <div className="mb-5">
        <h3 className="text-3xl font-bold text-white mb-3">{service.name}</h3>
        <p className="text-4xl font-bold text-orange-500">
          ${service.price.toLocaleString('en-US', { 
            minimumFractionDigits: 2, 
            maximumFractionDigits: 2 
          })}
        </p>
      </div>

      {/* Service Description */}
      <div className="mb-5">
        <p className="text-stone-300 text-base mb-5">{service.description}</p>
        
        {/* Features List */}
        {service.features.length > 0 && (
          <div className="space-y-3">
            {service.features.map((feature, index) => (
              <div key={index} className="flex items-center text-base text-stone-300">
                <CheckCircle className="h-5 w-5 text-green-500 mr-3 flex-shrink-0" />
                <span className="truncate">{feature}</span>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Action Button */}
      <button
        onClick={(e) => {
          e.stopPropagation(); // Prevent card click when clicking the button
          onSelect();
        }}
        className={getButtonClasses()}
      >
        {isSelected && <CheckCircle size={20} />}
        {isSelected ? 'Selected' : 'Choose'}
      </button>
    </div>
  );
};

export default ServiceCard;


============================
FILE: frontend\src\features\booking\components\steps\StepService\ServiceCarousel.tsx
============================
import React, { useState } from 'react';

import { Carousel } from '@/shared/ui';

import ServiceCard from './ServiceCard';
import ServiceDetailsModal from './ServiceDetailsModal';

interface ServiceTier {
  id: string;
  name: string;
  price: number;
  description: string;
  features: string[];
  featureIds: string[];
  popular?: boolean;
}

interface ServiceCarouselProps {
  services: ServiceTier[];
  selectedService?: string;
  onServiceSelect: (serviceId: string) => void;
}

const ServiceCarousel: React.FC<ServiceCarouselProps> = ({
  services,
  selectedService,
  onServiceSelect
}) => {
  const [modalService, setModalService] = useState<ServiceTier | null>(null);

  const handleCardClick = (service: ServiceTier) => {
    setModalService(service);
  };

  const handleCloseModal = () => {
    setModalService(null);
  };

  const renderServiceCard = (service: ServiceTier & { position: 'center' | 'left' | 'right' }, isSelected: boolean) => (
    <ServiceCard
      service={service}
      position={service.position}
      isSelected={isSelected}
      onSelect={() => {
        // Toggle selection: if already selected, deselect; otherwise select
        if (selectedService === service.id) {
          onServiceSelect(''); // Deselect
        } else {
          onServiceSelect(service.id); // Select
        }
      }}
      onCardClick={() => {
        handleCardClick(service);
      }}
    />
  );

  return (
    <>
      <Carousel
        items={services}
        selectedItem={selectedService ?? ''}
        onItemSelect={onServiceSelect}
        renderItem={renderServiceCard}
        onItemClick={handleCardClick}
        emptyMessage="No services available"
      />
      
      {/* Service Details Modal */}
      {modalService && (
        <ServiceDetailsModal
          service={modalService}
          isOpen={!!modalService}
          onClose={handleCloseModal}
        />
      )}
    </>
  );
};

export default ServiceCarousel;


============================
FILE: frontend\src\features\booking\components\steps\StepService\ServiceDetailsModal.tsx
============================
import React from 'react';

import { useBookingVehicle } from '@/features/booking/state';

import DetailsModal from '../../shared/DetailsModal';

interface ServiceTier {
  id: string;
  name: string;
  price: number;
  description: string;
  features: string[];
  featureIds: string[];
  popular?: boolean;
}

interface ServiceDetailsModalProps {
  service: ServiceTier;
  isOpen: boolean;
  onClose: () => void;
}

const ServiceDetailsModal: React.FC<ServiceDetailsModalProps> = ({
  service,
  isOpen,
  onClose
}) => {
  const { vehicle } = useBookingVehicle();

  return (
    <DetailsModal
      item={service}
      isOpen={isOpen}
      onClose={onClose}
      vehicleType={vehicle}
      itemType="service"
    />
  );
};

export default ServiceDetailsModal;


============================
FILE: frontend\src\features\booking\components\steps\StepService\StepService.tsx
============================
import React from 'react';

import { useServiceTiers } from '@/features/booking/hooks';
import { useBookingService, useBookingVehicle } from '@/features/booking/state';

import ServiceCarousel from './ServiceCarousel';

/**
 * Component that loads and displays service tiers for a confirmed vehicle
 */
const ServiceLoader: React.FC<{ vehicle: string }> = ({ vehicle }) => {
  const { serviceTier, setServiceTier } = useBookingService();
  const { serviceTiers, isLoading, error } = useServiceTiers(vehicle);

  const handleServiceSelect = (serviceId: string) => {
    setServiceTier(serviceId);
  };

  if (isLoading) {
    return (
      <div className="w-full max-w-4xl mx-auto">
        <div className="text-center py-8">
          <p className="text-white">Loading services...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="w-full max-w-4xl mx-auto">
        <div className="text-center py-8">
          <p className="text-red-500">Error loading services: {error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full max-w-4xl mx-auto">
      <ServiceCarousel
        services={serviceTiers}
        selectedService={serviceTier}
        onServiceSelect={handleServiceSelect}
      />
    </div>
  );
};

const StepService: React.FC = () => {
  const { vehicle } = useBookingVehicle();

  // Guard against missing vehicle selection
  if (!vehicle) {
    return (
      <div className="w-full max-w-4xl mx-auto">
        <div className="text-center py-8">
          <p className="text-white text-lg">Please select a vehicle first.</p>
        </div>
      </div>
    );
  }

  return <ServiceLoader vehicle={vehicle} />;
};

export default StepService;

============================
FILE: frontend\src\features\booking\components\steps\StepVehicleSelection\Header.tsx
============================
import React from 'react';

const Header: React.FC = () => {
  return (
    <div className="text-center mb-12 absolute top-1/4 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full">
      <h1 className="text-6xl font-bold text-white mb-6">Vehicle Selection</h1>
    </div>
  );
};

export default Header;


============================
FILE: frontend\src\features\booking\components\steps\StepVehicleSelection\StepVehicleSelection.tsx
============================
import React from 'react';

import { useBookingVehicle } from '@/features/booking/state';

import Tabs from './Tabs';
import VehicleSelection from './VehicleType';

interface StepVehicleSelectionProps {
  onVehicleSelected?: (vehicle: string) => void;
  onVehicleDetailsSelected?: (details: { make: string; model: string; year: string; color: string; length: string }) => void;
}

const StepVehicleSelection: React.FC<StepVehicleSelectionProps> = ({ onVehicleSelected, onVehicleDetailsSelected }) => {
  // Get vehicle data from narrow selector
  const { vehicle, vehicleDetails, setVehicle, setVehicleDetails } = useBookingVehicle();
  const selectedVehicle = vehicle;

  const handleVehicleSelect = (vehicleId: string) => {
    setVehicle(vehicleId);
    onVehicleSelected?.(vehicleId);
  };

  const handleVehicleDetailsSelect = (details: { make: string; model: string; year: string; color: string; length: string }) => {
    setVehicleDetails(details);
    onVehicleDetailsSelected?.(details);
  };

  return (
    <div className="w-full max-w-4xl mx-auto">
      <Tabs 
        selectedVehicle={selectedVehicle}
        onVehicleSelect={handleVehicleSelect}
      />
      <VehicleSelection
        selectedVehicle={selectedVehicle}
        vehicleDetails={vehicleDetails}
        onVehicleDetailsSelect={handleVehicleDetailsSelect}
      />
    </div>
  );
};

export default StepVehicleSelection;

============================
FILE: frontend\src\features\booking\components\steps\StepVehicleSelection\Tabs.tsx
============================
import React from 'react';
import { Bike, Car, CarFront, MoreHorizontal, Plane, Ship, Truck } from 'lucide-react';

interface TabsProps {
  selectedVehicle: string;
  onVehicleSelect: (vehicleId: string) => void;
}

const Tabs: React.FC<TabsProps> = ({ selectedVehicle, onVehicleSelect }) => {
  // Static vehicle types - no backend dependency
  const vehicleTypes = [
    { id: 'car', name: 'Car', icon: CarFront },
    { id: 'truck', name: 'Truck', icon: Truck },
    { id: 'suv', name: 'SUV', icon: Car }, // SUV keeps Car icon
    { id: 'boat', name: 'Boat', icon: Ship },
    { id: 'rv', name: 'RV', icon: 'custom-rv' }, // Custom RV icon
    { id: 'airplane', name: 'Airplane', icon: Plane },
    { id: 'motorcycle', name: 'Motorcycle', icon: Bike },
    { id: 'other', name: 'Other', icon: MoreHorizontal },
  ];

  return (
    <div className="mb-8 absolute top-[20%] left-1/2 transform -translate-x-1/2 w-full">
      <div className="grid grid-cols-4 grid-rows-2 gap-0 w-fit mx-auto">
        {vehicleTypes.map((vehicle) => {
          return (
            <button
              key={vehicle.id}
              onClick={() => {
                onVehicleSelect(vehicle.id);
              }}
              className={`p-2 rounded-lg border-2 transition-all w-24 h-24 ${
                selectedVehicle === vehicle.id
                  ? 'border-orange-500 bg-orange-500/20'
                  : 'border-gray-600 hover:border-gray-500 bg-stone-800/20'
              }`}
            >
              {vehicle.icon === 'custom-rv' ? (
                <img 
                  src="/icons/rv.png" 
                  alt="RV" 
                  className="w-8 h-8 mb-2 mx-auto object-contain filter brightness-0 invert" 
                />
              ) : (
                React.createElement(vehicle.icon, { className: "w-8 h-8 text-white mb-2 mx-auto" })
              )}
              <div className="text-white font-medium">{vehicle.name}</div>
            </button>
          );
        })}
      </div>
    </div>
  );
};

export default Tabs;


============================
FILE: frontend\src\features\booking\components\steps\StepVehicleSelection\VehicleType.tsx
============================
import React, { useEffect, useRef, useState } from 'react';

import { getMakesForType, getModelsForMake, getVehicleYears } from '@/data/mobile-detailing/vehicle_data';
import { useDataOptional } from '@/shared/hooks/useData';

interface VehicleSelectionProps {
  selectedVehicle: string;
  vehicleDetails: { make: string; model: string; year: string; color: string; length: string };
  onVehicleDetailsSelect?: (details: { make: string; model: string; year: string; color: string; length: string }) => void;
}

const VehicleSelection: React.FC<VehicleSelectionProps> = ({ selectedVehicle, vehicleDetails, onVehicleDetailsSelect }) => {
  // Get phone number from tenant data context
  const data = useDataOptional();
  const phoneNumber = data?.phone ?? '(555) 123-4567';

  const [make, setMake] = useState(vehicleDetails.make || '');
  const [model, setModel] = useState(vehicleDetails.model || '');
  const [year, setYear] = useState(vehicleDetails.year || '');
  const [color, setColor] = useState(vehicleDetails.color || '');
  const [length, setLength] = useState(vehicleDetails.length || '');
  const lastDetailsRef = useRef<string>('');

  // Vehicle ID is now already the correct vehicle type name (no mapping needed)
  const vehicleTypeName = selectedVehicle;

  // Get available makes based on selected vehicle type
  const availableMakes = getMakesForType(vehicleTypeName);
  
  // Get available models based on selected make and vehicle type
  const availableModels = make ? getModelsForMake(vehicleTypeName, make) : [];
  
  // Get available years
  const availableYears = getVehicleYears();

  // Update local state when vehicleDetails prop changes
  useEffect(() => {
    setMake(vehicleDetails.make || '');
    setModel(vehicleDetails.model || '');
    setYear(vehicleDetails.year || '');
    setColor(vehicleDetails.color || '');
    setLength(vehicleDetails.length || '');
  }, [vehicleDetails]);



  // Helper function to update vehicle details
  const updateVehicleDetails = (newMake?: string, newModel?: string, newYear?: string, newColor?: string, newLength?: string) => {
    const currentMake = newMake !== undefined ? newMake : make;
    const currentModel = newModel !== undefined ? newModel : model;
    const currentYear = newYear !== undefined ? newYear : year;
    const currentColor = newColor !== undefined ? newColor : color;
    const currentLength = newLength !== undefined ? newLength : length;
    
    if (currentMake && currentModel && currentYear) {
      const currentDetails = JSON.stringify({ 
        make: currentMake, 
        model: currentModel, 
        year: currentYear, 
        color: currentColor || '', 
        length: currentLength || '' 
      });
      
      if (currentDetails !== lastDetailsRef.current) {
        lastDetailsRef.current = currentDetails;
        onVehicleDetailsSelect?.({
          make: currentMake,
          model: currentModel,
          year: currentYear,
          color: currentColor || '',
          length: currentLength || ''
        });
      }
    }
  };

  // Show phone message for airplane selection
  if (selectedVehicle === 'airplane') {
    return (
      <div className="mb-8 absolute top-[45%] left-1/2 transform -translate-x-1/2 w-full max-w-xl">
        <div className="px-4">
          <div className="bg-gray-800 border border-gray-600 rounded-lg p-6 text-center">
            <p className="text-white text-lg font-medium mb-2">
              Please call us at <span className="text-orange-500">{phoneNumber}</span>
            </p>
          </div>
        </div>
      </div>
    );
  }

  // Show additional details field for "Other" vehicle type
  if (selectedVehicle === 'other') {
    return (
      <div className="mb-8 absolute top-[45%] left-1/2 transform -translate-x-1/2 w-full max-w-xl">
        <div className="px-4">
          <div className="space-y-2">
            <label htmlFor="additional-details" className="block text-white font-medium text-sm">Additional Details</label>
            <textarea 
              id="additional-details"
              value={make} // Using make field to store the additional details
              onChange={(e) => {
                setMake(e.target.value);
                // For "other" vehicles, we'll store the details in the make field
                // and call updateVehicleDetails with the details as make
                updateVehicleDetails(e.target.value);
              }}
              placeholder="Please describe your vehicle (e.g., 'Custom motorcycle - Harley Davidson 2020, Black')"
              className="w-full py-3 px-1.5 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500 resize-none"
              rows={4}
            />
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="mb-8 absolute top-[45%] left-1/2 transform -translate-x-1/2 w-full max-w-xl">
      <div className="grid grid-cols-2 gap-4 px-4">
        {/* Make Dropdown */}
        <div className="space-y-2">
          <label htmlFor="vehicle-make" className="block text-white font-medium text-sm">Make</label>
          <select 
            id="vehicle-make"
            value={make}
            onChange={(e) => {
              setMake(e.target.value);
              updateVehicleDetails(e.target.value);
            }}
            className="w-full py-3 px-1.5 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500"
            disabled={!selectedVehicle}
          >
            <option value="">Select Make</option>
            {availableMakes.map((makeOption) => (
              <option key={makeOption} value={makeOption}>
                {makeOption}
              </option>
            ))}
          </select>
        </div>

        {/* Model Dropdown */}
        <div className="space-y-2">
          <label htmlFor="vehicle-model" className="block text-white font-medium text-sm">Model</label>
          <select 
            id="vehicle-model"
            value={model}
            onChange={(e) => {
              setModel(e.target.value);
              updateVehicleDetails(undefined, e.target.value);
            }}
            className="w-full py-3 px-1.5 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500"
            disabled={!make}
          >
            <option value="">Select Model</option>
            {availableModels.map((modelOption) => (
              <option key={modelOption} value={modelOption}>
                {modelOption}
              </option>
            ))}
          </select>
        </div>

        {/* Year Dropdown */}
        <div className="space-y-2">
          <label htmlFor="vehicle-year" className="block text-white font-medium text-sm">Year</label>
          <select 
            id="vehicle-year"
            value={year}
            onChange={(e) => {
              setYear(e.target.value);
              updateVehicleDetails(undefined, undefined, e.target.value);
            }}
            className="w-full py-3 px-1.5 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500"
          >
            <option value="">Select Year</option>
            {availableYears.map((yearOption) => (
              <option key={yearOption} value={yearOption}>
                {yearOption}
              </option>
            ))}
          </select>
        </div>

        {/* Color Dropdown or Length Input */}
        {selectedVehicle === 'boat' || selectedVehicle === 'rv' ? (
          /* Length Input for Boat/RV */
          <div className="space-y-2">
            <label htmlFor="vehicle-length" className="block text-white font-medium text-sm">Length (ft)</label>
            <input 
              id="vehicle-length"
              type="number"
              value={length}
              onChange={(e) => {
                setLength(e.target.value);
                updateVehicleDetails(undefined, undefined, undefined, undefined, e.target.value);
              }}
              placeholder="Enter length in feet"
              className="w-full py-3 px-1.5 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500"
              min="1"
              max="999"
            />
          </div>
        ) : (
          /* Color Dropdown for other vehicles */
          <div className="space-y-2">
            <label htmlFor="vehicle-color" className="block text-white font-medium text-sm">Color</label>
            <select 
              id="vehicle-color"
              value={color}
              onChange={(e) => {
                setColor(e.target.value);
                updateVehicleDetails(undefined, undefined, undefined, e.target.value);
              }}
              className="w-full py-3 px-1.5 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500"
            >
              <option value="">Select Color</option>
              <option value="black">Black</option>
              <option value="white">White</option>
              <option value="silver">Silver</option>
              <option value="gray">Gray</option>
              <option value="red">Red</option>
              <option value="blue">Blue</option>
              <option value="green">Green</option>
              <option value="other">Other</option>
            </select>
          </div>
        )}
      </div>
    </div>
  );
};

export default VehicleSelection;


============================
FILE: frontend\src\features\booking\constants\hero.ts
============================
// Booking hero configuration constants
export const BOOKING_HERO_CONSTANTS = {
  IMAGES: [
    '/images/hero/hero1.png',
    '/images/hero/hero2.png',
  ].filter(Boolean),
  
  IMAGE_ROTATION_INTERVAL: 8000, // 8 seconds
  IMAGE_TRANSITION_DURATION: 2000, // 2 seconds
  
  // Image dimensions for CLS prevention
  IMAGE_DIMENSIONS: {
    width: 1920,
    height: 1080,
    aspectRatio: '16/9'
  }
} as const;


============================
FILE: frontend\src\features\booking\hooks\index.ts
============================
// Export booking hooks
export type { AddonItem } from './useAddons';
export { useAddons } from './useAddons';
export { useFeaturesData } from './useFeaturesData';
export { usePaymentData } from './usePaymentData';
export { usePaymentForm } from './usePaymentForm';
export { usePaymentMethods, usePaymentTokens } from './usePaymentMethods';
export { useScheduleOptions, useTimeSlots } from './useScheduleOptions';
export { useServiceTiers } from './useServiceTiers';
export { useVehicleData } from './useVehicleData';


============================
FILE: frontend\src\features\booking\hooks\useAddons.ts
============================
import { useEffect, useState } from 'react';
import { useQuery } from '@tanstack/react-query';

import { toFolderName } from '@/shared/constants';

import { getCardDescription } from '../utils/displayUtils';

export interface AddonItem {
  id: string;
  name: string;
  price: number;
  description: string;
  features: string[];
  featureIds: string[];
  popular?: boolean;
}

interface AddonItemData {
  cost?: number;
  features?: string[];
  popular?: boolean;
  description?: string;
  name?: string;
}

interface AddonDataRecord {
  [key: string]: AddonItemData;
}

interface FeatureData {
  [key: string]: {
    name: string;
    description: string;
    explanation: string;
    image: string;
    duration: number;
    features: string[];
  };
}

interface ImportedModule {
  default: AddonDataRecord;
}

interface QueryResultService {
  addons: AddonDataRecord;
  features: FeatureData;
  type: 'service';
}

interface QueryResultCategory {
  addons: AddonDataRecord;
  features: Record<string, never>;
  type: 'category';
}

type QueryResult = QueryResultService | QueryResultCategory;

/**
 * Hook to load addons for a specific vehicle type and category
 */
export const useAddons = (vehicleType: string, category: string) => {
  const [availableAddons, setAvailableAddons] = useState<AddonItem[]>([]);

  const { data, isLoading, error } = useQuery<QueryResult>({
    queryKey: ['addons', vehicleType, category],
    queryFn: async (): Promise<QueryResult> => {
      const folderName = toFolderName(vehicleType);
      
      if (!folderName) {
        throw new Error(`No addons available for vehicle type: ${vehicleType}`);
      }

      try {
        // Try to load service.json first (for windows), then fall back to category-specific files
        try {
          const [addonsData, featuresData] = await Promise.all([
            import(`@/data/mobile-detailing/pricing/${folderName}/addons/${category}/service.json`) as Promise<ImportedModule>,
            import(`@/data/mobile-detailing/pricing/${folderName}/addons/${category}/features.json`) as Promise<{ default: FeatureData }>
          ]);
          
          return {
            addons: addonsData.default,
            features: featuresData.default,
            type: 'service' as const
          };
        } catch {
          // Try to load category-specific file (wheels.json, trim.json, etc.)
          const categoryData = await import(`@/data/mobile-detailing/pricing/${folderName}/addons/${category}/${category}.json`) as Promise<ImportedModule>;
          
          return {
            addons: categoryData.default as AddonDataRecord,
            features: {},
            type: 'category' as const
          };
        }
      } catch {
        throw new Error(`No addons available for ${category} in ${vehicleType}`);
      }
    },
    enabled: (() => {
      const folderName = toFolderName(vehicleType);
      const enabled = !!vehicleType && !!category && !!folderName;
      return enabled;
    })(),
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 10 * 60 * 1000, // 10 minutes
  });


  useEffect(() => {
    if (data) {
      let processedAddons: AddonItem[] = [];

      if (data.type === 'service') {
        // Process addons object (windows data structure)
        const serviceData = data as QueryResultService;
        processedAddons = Object.entries(serviceData.addons).map(([name, addon]) => {
          const features = addon.features ?? [];
          const featureNames = features.map((featureId) => getFeatureName(featureId, serviceData.features));
          const description = getCardDescription(addon, features, serviceData.features);
          
          return {
            id: name.toLowerCase().replace(/\s+/g, '-'),
            name: name,
            price: typeof addon.cost === 'number' ? addon.cost : 0,
            description: description,
            features: featureNames,
            featureIds: features,
            popular: addon.popular ?? false
          };
        });
      } else {
        // Convert features object to addon array format
        const categoryData = data as QueryResultCategory;
        const features = Object.keys(categoryData.addons);
        processedAddons = features.map((featureKey, index) => {
          const feature = categoryData.addons[featureKey];
          if (!feature) {
            return {
              id: featureKey,
              name: featureKey,
              price: 0,
              description: '',
              features: [],
              featureIds: [featureKey],
              popular: false
            };
          }
          return {
            id: featureKey,
            name: feature.name ?? featureKey,
            price: 0, // No pricing in features-only files
            description: feature.description ?? getCardDescription(feature, [featureKey], {}),
            features: feature.name ? [feature.name] : [], // Use the feature name as the single feature
            featureIds: [featureKey],
            popular: index === 0 // Make first item popular
          };
        });
      }
      
      setAvailableAddons(processedAddons);
    }
  }, [data]);

  return {
    availableAddons,
    isLoading,
    error: error?.message || null
  };
};

/**
 * Helper function to get feature name from feature ID
 */
const getFeatureName = (featureId: string, featuresData: FeatureData): string => {
  return featuresData[featureId]?.name || featureId;
};


============================
FILE: frontend\src\features\booking\hooks\useBookingAsync.ts
============================
/**
 * Booking Async Operations Hook
 * Handles all async operations for booking functionality
 * Separated from Zustand store to maintain clean separation of concerns
 */

import { useCallback, useState } from 'react';
import { useQuery } from '@tanstack/react-query';

import { useBookingStore } from '../state/bookingStore';
import type { BookingData, BookingStep } from '../state/types';

export interface BookingValidationResult {
  isValid: boolean;
  errors: string[];
}

export interface BookingSubmissionResult {
  success: boolean;
  bookingId?: string;
  error?: string;
}

export const useBookingAsync = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submissionError, setSubmissionError] = useState<string | null>(null);

  // Get store actions
  const { 
    setLoading, 
    setErrors, 
    addError, 
    clearErrors,
    // bookingData 
  } = useBookingStore();

  /**
   * Validate booking data for a specific step
   */
  const validateBookingStep = useCallback((step: BookingStep, data: Partial<BookingData>): BookingValidationResult => {
    const errors: string[] = [];

    switch (step) {
      case 'vehicle-selection':
        if (!data.vehicle) {
          errors.push('Please select a vehicle type');
        }
        if (!data.vehicleDetails?.make || !data.vehicleDetails.model || !data.vehicleDetails.year) {
          errors.push('Please provide complete vehicle details');
        }
        break;

      case 'location':
        if (!data.location?.address || !data.location.city || !data.location.state) {
          errors.push('Please provide complete location information');
        }
        break;

      case 'service-tier':
        if (!data.serviceTier) {
          errors.push('Please select a service tier');
        }
        break;

      case 'addons':
        // Addons are optional, no validation needed
        break;

      case 'schedule':
        if (!data.schedule?.dates || data.schedule.dates.length === 0) {
          errors.push('Please select at least one date');
        }
        if (!data.schedule?.time) {
          errors.push('Please select a time slot');
        }
        break;

      case 'payment':
        if (!data.paymentMethod) {
          errors.push('Please select a payment method');
        }
        break;

      default:
        break;
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }, []);

  /**
   * Validate entire booking data
   */
  const validateBooking = useCallback((data: BookingData): BookingValidationResult => {
    const allErrors: string[] = [];
    
    // Validate each step
    const steps: BookingStep[] = ['vehicle-selection', 'location', 'service-tier', 'addons', 'schedule', 'payment'];
    
    for (const step of steps) {
      const stepResult = validateBookingStep(step, data);
      allErrors.push(...stepResult.errors);
    }

    return {
      isValid: allErrors.length === 0,
      errors: allErrors
    };
  }, [validateBookingStep]);

  /**
   * Submit booking for processing
   */
  const submitBooking = useCallback(async (data: BookingData): Promise<BookingSubmissionResult> => {
    setIsSubmitting(true);
    setSubmissionError(null);
    setLoading(true);
    clearErrors();

    try {
      // Validate booking data
      const validation = validateBooking(data);
      if (!validation.isValid) {
        setErrors(validation.errors);
        return {
          success: false,
          error: 'Please fix the validation errors before submitting'
        };
      }

      // TODO: Replace with actual API call
      // For now, simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Simulate success/failure
      const success = Math.random() > 0.1; // 90% success rate for demo

      if (success) {
        const bookingId = `booking_${Date.now()}`;
        return {
          success: true,
          bookingId
        };
      } else {
        throw new Error('Booking submission failed. Please try again.');
      }

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
      setSubmissionError(errorMessage);
      addError(errorMessage);
      
      return {
        success: false,
        error: errorMessage
      };
    } finally {
      setIsSubmitting(false);
      setLoading(false);
    }
  }, [validateBooking, setLoading, setErrors, addError, clearErrors]);

  /**
   * Save booking data to server (draft)
   */
  const saveBookingDraft = useCallback(async (_data: BookingData): Promise<boolean> => {
    try {
      setLoading(true);
      
      // TODO: Replace with actual API call
      // For now, simulate API call
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Simulate success
      return true;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to save draft';
      addError(errorMessage);
      return false;
    } finally {
      setLoading(false);
    }
  }, [setLoading, addError]);

  /**
   * Load booking data from server
   */
  const loadBookingData = useCallback(async (_bookingId: string): Promise<BookingData | null> => {
    try {
      setLoading(true);
      
      // TODO: Replace with actual API call
      // For now, return null (no saved data)
      await new Promise(resolve => setTimeout(resolve, 500));
      
      return null;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to load booking data';
      addError(errorMessage);
      return null;
    } finally {
      setLoading(false);
    }
  }, [setLoading, addError]);

  /**
   * Check if booking data has unsaved changes
   */
  const hasUnsavedChanges = useCallback((currentData: BookingData): boolean => {
    // Simple check - in a real app, you'd compare with the last saved version
    return Object.values(currentData).some(value => {
      if (typeof value === 'string') return value.length > 0;
      if (Array.isArray(value)) return value.length > 0;
      if (typeof value === 'object' && value !== null) {
        return Object.values(value as Record<string, unknown>).some(v => {
          if (typeof v === 'string') return v.length > 0;
          if (Array.isArray(v)) return v.length > 0;
          return false;
        });
      }
      return false;
    });
  }, []);

  return {
    // State
    isSubmitting,
    submissionError,
    
    // Actions
    validateBookingStep,
    validateBooking,
    submitBooking,
    saveBookingDraft,
    loadBookingData,
    hasUnsavedChanges,
  };
};

/**
 * Hook for booking data persistence
 */
export const useBookingPersistence = () => {
  const { bookingData } = useBookingStore();
  const { hasUnsavedChanges, saveBookingDraft } = useBookingAsync();

  // Auto-save booking data every 30 seconds
  const { data: autoSaveEnabled } = useQuery({
    queryKey: ['booking','autoSave'],
    queryFn: async () => {
      if (hasUnsavedChanges(bookingData)) {
        await saveBookingDraft(bookingData);
      }
      return true;
    },
    refetchInterval: 30000, // 30 seconds
    enabled: hasUnsavedChanges(bookingData),
  });

  return {
    autoSaveEnabled,
    hasUnsavedChanges: hasUnsavedChanges(bookingData),
  };
};


============================
FILE: frontend\src\features\booking\hooks\useBookingGallery.ts
============================
import { useEffect, useState } from 'react';

import type { GalleryImage } from '@/shared/types';

import { getBookingGalleryImages } from '../api/booking.api';

interface UseBookingGalleryReturn {
  images: GalleryImage[];
  isLoading: boolean;
  error: Error | null;
}

/**
 * Hook to load gallery images for booking background
 */
export function useBookingGallery(): UseBookingGalleryReturn {
  const [images, setImages] = useState<GalleryImage[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    let cancelled = false;

    const loadImages = async (): Promise<void> => {
      try {
        setIsLoading(true);
        const data = await getBookingGalleryImages();
        
        if (!cancelled) {
          setImages(data);
          setError(null);
        }
      } catch (err: unknown) {
        if (!cancelled) {
          setError(err instanceof Error ? err : new Error(String(err)));
        }
      } finally {
        if (!cancelled) {
          setIsLoading(false);
        }
      }
    };

    void loadImages();

    return () => {
      cancelled = true;
    };
  }, []);

  return { images, isLoading, error };
}



============================
FILE: frontend\src\features\booking\hooks\useFeaturesData.ts
============================
import { useQuery } from '@tanstack/react-query';

interface UseFeaturesDataProps {
  isOpen: boolean;
  vehicleType: string;
  category?: string | undefined;
  itemType: 'service' | 'addon';
}

interface FeatureDataItem {
  name: string;
  description: string;
  explanation: string;
  image: string;
  duration: number;
  features: string[];
}

interface FeaturesDataRecord {
  [key: string]: FeatureDataItem;
}

interface ImportedFeaturesModule {
  default: FeaturesDataRecord;
}

/**
 * Async function to load features data
 */
const loadFeaturesData = async (vehicleType: string, category?: string, itemType: 'service' | 'addon' = 'service'): Promise<FeaturesDataRecord> => {
  const vehicleFolderMap: Record<string, string> = {
    'car': 'cars',
    'truck': 'trucks',
    'suv': 'suvs',
    'boat': 'boats',
    'rv': 'rvs'
  };

  const folderName = vehicleFolderMap[vehicleType];
  if (!folderName) {
    throw new Error(`No features available for vehicle type: ${vehicleType}`);
  }

  let featuresModule: ImportedFeaturesModule | undefined;
        
  if (itemType === 'service') {
    // Service features - static imports to avoid Vite warnings
    // TODO: Make this industry-agnostic by using DataContext to get industry
    switch (folderName) {
      case 'cars':
        featuresModule = await import('@/data/mobile-detailing/pricing/cars/service/features.json') as ImportedFeaturesModule;
        break;
      case 'trucks':
        featuresModule = await import('@/data/mobile-detailing/pricing/trucks/service/features.json') as ImportedFeaturesModule;
        break;
      case 'suvs':
        featuresModule = await import('@/data/mobile-detailing/pricing/suvs/service/features.json') as ImportedFeaturesModule;
        break;
      case 'rvs':
        featuresModule = await import('@/data/mobile-detailing/pricing/rvs/service/features.json') as ImportedFeaturesModule;
        break;
      case 'boats':
        featuresModule = await import('@/data/mobile-detailing/pricing/boats/service/features.json') as ImportedFeaturesModule;
        break;
    }
  } else {
    // Addon features - only import files that exist
    // TODO: Make this industry-agnostic by using DataContext to get industry
    switch (folderName) {
      case 'cars':
        switch (category) {
          case 'windows':
            featuresModule = await import('@/data/mobile-detailing/pricing/cars/addons/windows/features.json') as ImportedFeaturesModule;
            break;
          case 'wheels':
            featuresModule = await import('@/data/mobile-detailing/pricing/cars/addons/wheels/features.json') as ImportedFeaturesModule;
            break;
          case 'trim':
            featuresModule = await import('@/data/mobile-detailing/pricing/cars/addons/trim/features.json') as ImportedFeaturesModule;
            break;
          case 'engine':
            featuresModule = await import('@/data/mobile-detailing/pricing/cars/addons/engine/features.json') as ImportedFeaturesModule;
            break;
        }
        break;
      case 'trucks':
        switch (category) {
          case 'windows':
            featuresModule = await import('@/data/mobile-detailing/pricing/trucks/addons/windows/features.json') as ImportedFeaturesModule;
            break;
          case 'wheels':
            featuresModule = await import('@/data/mobile-detailing/pricing/trucks/addons/wheels/features.json') as ImportedFeaturesModule;
            break;
          case 'trim':
            featuresModule = await import('@/data/mobile-detailing/pricing/trucks/addons/trim/features.json') as ImportedFeaturesModule;
            break;
          case 'engine':
            featuresModule = await import('@/data/mobile-detailing/pricing/trucks/addons/engine/features.json') as ImportedFeaturesModule;
            break;
        }
        break;
      case 'suvs':
        switch (category) {
          case 'windows':
            featuresModule = await import('@/data/mobile-detailing/pricing/suvs/addons/windows/features.json') as ImportedFeaturesModule;
            break;
          case 'wheels':
            featuresModule = await import('@/data/mobile-detailing/pricing/suvs/addons/wheels/features.json') as ImportedFeaturesModule;
            break;
          case 'trim':
            featuresModule = await import('@/data/mobile-detailing/pricing/suvs/addons/trim/features.json') as ImportedFeaturesModule;
            break;
          case 'engine':
            featuresModule = await import('@/data/mobile-detailing/pricing/suvs/addons/engine/features.json') as ImportedFeaturesModule;
            break;
        }
        break;
      // boats and rvs don't have addon features yet
    }
  }
  
  if (!featuresModule) {
    throw new Error(`No features data available for ${itemType} ${vehicleType}${category ? ` ${category}` : ''}`);
  }
  
  return featuresModule.default;
};

/**
 * Hook to load features data with React Query
 */
export const useFeaturesData = ({ isOpen, vehicleType, category, itemType }: UseFeaturesDataProps) => {
  return useQuery({
    queryKey: ['booking','featuresData', vehicleType, category, itemType],
    queryFn: () => loadFeaturesData(vehicleType, category, itemType),
    enabled: isOpen && !!vehicleType,
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 10 * 60 * 1000, // 10 minutes
  });
};


============================
FILE: frontend\src\features\booking\hooks\usePaymentData.ts
============================
import { useMemo } from 'react';

import { useAddons, useServiceTiers } from '@/features/booking/hooks';
import { useBookingAddons, useBookingData, useBookingService } from '@/features/booking/state';

/**
 * Hook to manage payment step data and calculations
 * Separates data logic from UI components
 */
export const usePaymentData = () => {
  // Get booking data from store
  const { bookingData } = useBookingData();
  const { serviceTier } = useBookingService();
  const { addons } = useBookingAddons();
  
  // Load service tiers to get actual service data
  const { serviceTiers, isLoading: serviceTiersLoading } = useServiceTiers(bookingData.vehicle || '');
  
  // Load addon data from all categories
  const { availableAddons: windowsAddons } = useAddons(bookingData.vehicle || '', 'windows');
  const { availableAddons: wheelsAddons } = useAddons(bookingData.vehicle || '', 'wheels');
  const { availableAddons: trimAddons } = useAddons(bookingData.vehicle || '', 'trim');
  const { availableAddons: engineAddons } = useAddons(bookingData.vehicle || '', 'engine');
  
  // Combine all addons from different categories
  const allAvailableAddons = useMemo(() => 
    [...windowsAddons, ...wheelsAddons, ...trimAddons, ...engineAddons],
    [windowsAddons, wheelsAddons, trimAddons, engineAddons]
  );
  
  // Find selected service tier
  const selectedService = useMemo(() => 
    serviceTiers.find(service => service.id === serviceTier),
    [serviceTiers, serviceTier]
  );
  
  // Find selected addons
  const selectedAddons = useMemo(() => 
    allAvailableAddons.filter(addon => addons.includes(addon.id)),
    [allAvailableAddons, addons]
  );
  
  // Calculate totals
  const servicePrice = selectedService?.price || 0;
  const addonsPrice = selectedAddons.reduce((total, addon) => total + addon.price, 0);
  const subtotal = servicePrice + addonsPrice;
  const tax = subtotal * 0.08; // 8% tax
  const total = subtotal + tax;
  
  return {
    // Data
    bookingData,
    serviceTiers,
    allAvailableAddons,
    selectedService,
    selectedAddons,
    
    // Loading states
    serviceTiersLoading,
    
    // Calculations
    servicePrice,
    addonsPrice,
    subtotal,
    tax,
    total
  };
};


============================
FILE: frontend\src\features\booking\hooks\usePaymentForm.ts
============================
import { useState } from 'react';

export interface PaymentFormData {
  paymentMethod: string;
  cardDetails: {
    cardNumber: string;
    expiryDate: string;
    cvv: string;
    name: string;
    email: string;
    phone: string;
    address: string;
    city: string;
    state: string;
    zip: string;
  };
  activeTab: 'vehicle' | 'location' | 'summary' | 'payment';
  expandedSections: {
    cardInfo: boolean;
    contactInfo: boolean;
    billingAddress: boolean;
  };
}

/**
 * Hook to manage payment form state
 * Separates form state from UI components
 */
export const usePaymentForm = () => {
  const [paymentMethod, setPaymentMethod] = useState<string>('');
  const [cardDetails, setCardDetails] = useState({
    cardNumber: '',
    expiryDate: '',
    cvv: '',
    name: '',
    email: '',
    phone: '',
    address: '',
    city: '',
    state: '',
    zip: ''
  });
  const [activeTab, setActiveTab] = useState<'vehicle' | 'location' | 'summary' | 'payment'>('vehicle');
  const [expandedSections, setExpandedSections] = useState({
    cardInfo: false,
    contactInfo: false,
    billingAddress: false
  });

  const updateCardDetails = (field: keyof typeof cardDetails, value: string) => {
    setCardDetails(prev => ({ ...prev, [field]: value }));
  };

  const toggleSection = (section: keyof typeof expandedSections) => {
    setExpandedSections(prev => ({ 
      ...prev, 
      [section]: !prev[section] 
    }));
  };

  const resetForm = () => {
    setPaymentMethod('');
    setCardDetails({
      cardNumber: '',
      expiryDate: '',
      cvv: '',
      name: '',
      email: '',
      phone: '',
      address: '',
      city: '',
      state: '',
      zip: ''
    });
    setActiveTab('vehicle');
    setExpandedSections({
      cardInfo: false,
      contactInfo: false,
      billingAddress: false
    });
  };

  return {
    // State
    paymentMethod,
    cardDetails,
    activeTab,
    expandedSections,
    
    // Actions
    setPaymentMethod,
    updateCardDetails,
    setActiveTab,
    toggleSection,
    resetForm
  };
};


============================
FILE: frontend\src\features\booking\hooks\usePaymentMethods.ts
============================
import { useQuery } from '@tanstack/react-query';

export interface PaymentMethod {
  id: string;
  type: 'card' | 'paypal' | 'apple_pay' | 'google_pay' | 'bank_transfer';
  name: string;
  description: string;
  icon?: string;
  enabled: boolean;
  processingFee?: number;
}

export interface PaymentToken {
  id: string;
  methodId: string;
  last4?: string;
  brand?: string;
  expiryMonth?: number;
  expiryYear?: number;
  isDefault: boolean;
}

/**
 * Hook to load payment methods for a specific affiliate
 */
export const usePaymentMethods = (affiliateId?: string) => {
  return useQuery({
    queryKey: ['booking','paymentMethods', affiliateId],
    queryFn: async (): Promise<PaymentMethod[]> => {
      // TODO: Replace with actual API call
      // For now, return mock data
      const mockPaymentMethods: PaymentMethod[] = [
        {
          id: 'card',
          type: 'card',
          name: 'Credit/Debit Card',
          description: 'Pay with Visa, Mastercard, American Express, or Discover',
          enabled: true,
          processingFee: 2.9
        },
        {
          id: 'paypal',
          type: 'paypal',
          name: 'PayPal',
          description: 'Pay securely with your PayPal account',
          enabled: true,
          processingFee: 3.4
        },
        {
          id: 'apple_pay',
          type: 'apple_pay',
          name: 'Apple Pay',
          description: 'Pay with Touch ID or Face ID',
          enabled: true,
          processingFee: 2.9
        },
        {
          id: 'google_pay',
          type: 'google_pay',
          name: 'Google Pay',
          description: 'Pay with your Google account',
          enabled: true,
          processingFee: 2.9
        }
      ];

      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 300));
      
      return mockPaymentMethods;
    },
    enabled: !!affiliateId,
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 10 * 60 * 1000, // 10 minutes
  });
};

/**
 * Hook to load saved payment tokens for a user
 */
export const usePaymentTokens = (userId?: string) => {
  return useQuery({
    queryKey: ['booking','paymentTokens', userId],
    queryFn: async (): Promise<PaymentToken[]> => {
      // TODO: Replace with actual API call
      // For now, return mock data
      const mockPaymentTokens: PaymentToken[] = [
        {
          id: 'token_1',
          methodId: 'card',
          last4: '4242',
          brand: 'Visa',
          expiryMonth: 12,
          expiryYear: 2025,
          isDefault: true
        },
        {
          id: 'token_2',
          methodId: 'card',
          last4: '5555',
          brand: 'Mastercard',
          expiryMonth: 8,
          expiryYear: 2026,
          isDefault: false
        }
      ];

      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 200));
      
      return mockPaymentTokens;
    },
    enabled: !!userId,
    staleTime: 2 * 60 * 1000, // 2 minutes
    cacheTime: 5 * 60 * 1000, // 5 minutes
  });
};


============================
FILE: frontend\src\features\booking\hooks\useScheduleOptions.ts
============================
import type { UseQueryResult } from '@tanstack/react-query';
import { useQuery } from '@tanstack/react-query';

export interface TimeSlot {
  id: string;
  time: string;
  available: boolean;
  price?: number;
}

export interface ScheduleOption {
  date: string;
  timeSlots: TimeSlot[];
  available: boolean;
}

/**
 * Hook to load schedule options for a specific location and service
 */
export const useScheduleOptions = (locationId?: string, serviceId?: string, dateRange?: { start: string; end: string }): UseQueryResult<ScheduleOption[]> => {
  return useQuery<ScheduleOption[]>({
    queryKey: ['scheduleOptions', locationId, serviceId, dateRange],
    queryFn: async (): Promise<ScheduleOption[]> => {
      // TODO: Replace with actual API call
      // For now, return mock data with current dates
      const today = new Date();
      const mockScheduleOptions: ScheduleOption[] = [];
      
      // Generate available dates for the next 30 days (calendar will default future dates to available)
      for (let i = 0; i < 30; i++) {
        const date = new Date(today);
        date.setDate(today.getDate() + i);
        const dateStr = date.toISOString().split('T')[0];
        
        // Make all future dates available (past dates are handled by calendar component)
        const isAvailable = true;
        
        mockScheduleOptions.push({
          date: dateStr,
          available: isAvailable,
          timeSlots: [
            { id: `${String(i)}-1`, time: '9:00 AM', available: true },
            { id: `${String(i)}-2`, time: '10:00 AM', available: true },
            { id: `${String(i)}-3`, time: '11:00 AM', available: i % 4 !== 0 }, // Some unavailable
            { id: `${String(i)}-4`, time: '1:00 PM', available: true },
            { id: `${String(i)}-5`, time: '2:00 PM', available: true },
            { id: `${String(i)}-6`, time: '3:00 PM', available: i % 5 !== 0 } // Some unavailable
          ]
        });
      }

      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 500));
      
      return mockScheduleOptions;
    },
    enabled: !!locationId && !!serviceId,
    staleTime: 2 * 60 * 1000, // 2 minutes
    cacheTime: 5 * 60 * 1000, // 5 minutes
  });
};

/**
 * Hook to get available time slots for a specific date
 */
export const useTimeSlots = (date: string, locationId?: string, serviceId?: string) => {
  const { data: scheduleOptions, ...rest } = useScheduleOptions(locationId, serviceId);
  
  const foundOption = scheduleOptions?.find((option: ScheduleOption) => option.date === date);
  const timeSlots: TimeSlot[] = foundOption?.timeSlots ?? [];
  
  return {
    timeSlots,
    ...rest
  };
};


============================
FILE: frontend\src\features\booking\hooks\useServiceTiers.ts
============================
import { useEffect, useState } from 'react';
import { useQuery } from '@tanstack/react-query';

import { toFolderName } from '@/shared/constants';

import { getCardDescription } from '../utils/displayUtils';

/**
 * Service tier for booking flow (price in dollars for compatibility)
 * Note: The centralized type uses priceCents
 */
export interface ServiceTier {
  id: string;
  name: string;
  price: number;                   // Price in dollars (legacy format)
  description: string;
  features: string[];
  featureIds: string[];
  popular?: boolean;
}

interface ServiceEntry {
  cost: number;
  features: string[];
  popular?: boolean;
  description?: string;
}

interface FeatureData {
  [key: string]: {
    name: string;
    description: string;
    explanation: string;
    image: string;
    duration: number;
    features: string[];
  };
}

/**
 * Hook to load service tiers for a specific vehicle type
 */
export const useServiceTiers = (vehicleType: string): {
  serviceTiers: ServiceTier[];
  isLoading: boolean;
  error: string | null;
} => {
  const [serviceTiers, setServiceTiers] = useState<ServiceTier[]>([]);


  const { data, isLoading, error } = useQuery({
    queryKey: ['booking','serviceTiers', vehicleType],
    queryFn: async () => {
      const folderName = toFolderName(vehicleType);
      
      if (!folderName) {
        throw new Error(`No services available for vehicle type: ${vehicleType}`);
      }

      // Dynamically import the services data for the specific vehicle type
      const [servicesModule, featuresModule] = await Promise.all([
        import(`@/data/mobile-detailing/pricing/${folderName}/service/services.json`),
        import(`@/data/mobile-detailing/pricing/${folderName}/service/features.json`)
      ]) as [{ default: Record<string, ServiceEntry> }, { default: FeatureData }];

      
      return { 
        services: servicesModule.default, 
        features: featuresModule.default 
      };
    },
    enabled: !!vehicleType && !!toFolderName(vehicleType),
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 10 * 60 * 1000, // 10 minutes
  });


  // Reset serviceTiers when vehicleType is empty or invalid
  useEffect(() => {
    if (!vehicleType || !toFolderName(vehicleType)) {
      setServiceTiers([]);
    }
  }, [vehicleType]);

  useEffect(() => {
    if (data) {
      try {
        const services = data.services as Record<string, ServiceEntry>;
        const features = data.features as FeatureData;
        
        const processedServices = Object.entries(services).map(([name, service]) => {
          return {
            id: name.toLowerCase().replace(/\s+/g, '-'),
            name: name,
            price: service.cost,
            description: getCardDescription(service, service.features, features),
            features: service.features.map((featureId: string) => getFeatureName(featureId, features)),
            featureIds: service.features,
            popular: service.popular || false
          };
        });
        
        setServiceTiers(processedServices);
      } catch {
        setServiceTiers([]);
      }
    }
  }, [data]);

  return {
    serviceTiers,
    isLoading,
    error: error?.message || null
  };
};

/**
 * Helper function to get feature name from feature ID
 */
const getFeatureName = (featureId: string, featuresData: FeatureData): string => {
  return featuresData[featureId]?.name || featureId;
};


============================
FILE: frontend\src\features\booking\hooks\useVehicleData.ts
============================
// This hook has been moved to @/shared/hooks/useVehicleData.ts
// Re-export from shared for backward compatibility
export { useVehicleData } from '@/shared/hooks/useVehicleData';


============================
FILE: frontend\src\features\booking\index.ts
============================
// Clean booking exports - only what we need
export { default as BookingApp } from './BookingApp';
export { default as BookingPage } from './components/BookingPage';
export { default as BookingSteps } from './components/BookingSteps';


============================
FILE: frontend\src\features\booking\state\bookingStore.ts
============================
import { useMemo } from 'react';
import { create } from 'zustand';
import { devtools, subscribeWithSelector } from 'zustand/middleware';

import { BookingActions, BookingData, BookingState, BookingStep } from './types';

const initialBookingData: BookingData = {
  vehicle: '',
  vehicleDetails: {
    make: '',
    model: '',
    year: '',
    color: '',
    length: ''
  },
  location: {
    address: '',
    city: '',
    state: '',
    zip: '',
    notes: '',
    locationType: ''
  },
  serviceTier: '',
  addons: [],
  schedule: { dates: [], time: '' },
  paymentMethod: ''
};

const stepOrder: BookingStep[] = ['vehicle-selection', 'location', 'service-tier', 'addons', 'schedule', 'payment'];

export const useBookingStore = create<BookingState & BookingActions>()(
  subscribeWithSelector(
    devtools(
      (set, get) => ({
      // Initial state
      currentStep: 'vehicle-selection',
      bookingData: initialBookingData,
      completedSteps: [],
      isLoading: false,
      errors: [],

      // Actions
      setCurrentStep: (step) => {
        const currentIndex = stepOrder.indexOf(step);
        const completedSteps = stepOrder.slice(0, currentIndex);
        
            set({
              currentStep: step,
              completedSteps,
              errors: [] // Clear errors when changing steps
            });
      },

      updateBookingData: (data) => {
        set((state) => ({
          bookingData: { ...state.bookingData, ...data }
        }));
      },

      setVehicle: (vehicle) => {
        set((state) => ({
          bookingData: { ...state.bookingData, vehicle }
        }));
      },

      setVehicleDetails: (details) => {
        set((state) => ({
          bookingData: {
            ...state.bookingData,
            vehicleDetails: { ...state.bookingData.vehicleDetails, ...details }
          }
        }));
      },

      setLocation: (location) => {
        set((state) => ({
          bookingData: {
            ...state.bookingData,
            location: { ...state.bookingData.location, ...location }
          }
        }));
      },

      setServiceTier: (tier) => {
        set((state) => ({
          bookingData: { ...state.bookingData, serviceTier: tier }
        }));
      },

      setAddons: (addons) => {
        set((state) => ({
          bookingData: { ...state.bookingData, addons }
        }));
      },

      setSchedule: (schedule) => {
        set((state) => ({
          bookingData: { ...state.bookingData, schedule }
        }));
      },

      setPaymentMethod: (method) => {
        set((state) => ({
          bookingData: { ...state.bookingData, paymentMethod: method }
        }));
      },

      nextStep: () => {
        const { currentStep } = get();
        const currentIndex = stepOrder.indexOf(currentStep);
        
        if (currentIndex < stepOrder.length - 1) {
          const nextStep = stepOrder[currentIndex + 1];
          if (nextStep) {
            // Direct state update instead of calling setCurrentStep to avoid circular dependency
                  set(() => {
                    const newIndex = stepOrder.indexOf(nextStep);
                    const completedSteps = stepOrder.slice(0, newIndex);
                    return {
                      currentStep: nextStep,
                      completedSteps,
                      errors: [] // Clear errors when changing steps
                    };
                  });
                }
              }
      },

      previousStep: () => {
        const { currentStep } = get();
        const currentIndex = stepOrder.indexOf(currentStep);
        
        if (currentIndex > 0) {
          const prevStep = stepOrder[currentIndex - 1];
          if (prevStep) {
            // Direct state update instead of calling setCurrentStep to avoid circular dependency
                  set(() => {
                    const newIndex = stepOrder.indexOf(prevStep);
                    const completedSteps = stepOrder.slice(0, newIndex);
                    return {
                      currentStep: prevStep,
                      completedSteps,
                      errors: [] // Clear errors when changing steps
                    };
                  });
                }
        }
      },

      resetBooking: () => {
        set({
          currentStep: 'vehicle-selection',
          bookingData: initialBookingData,
          completedSteps: [],
          isLoading: false,
          errors: []
        });
      },

      setLoading: (loading) => {
        set({ isLoading: loading });
      },

      setErrors: (errors) => {
        set({ errors });
      },

      addError: (error) => {
        set((state) => ({
          errors: [...state.errors, error]
        }));
      },

      clearErrors: () => {
        set({ errors: [] });
      }
      }),
      {
        name: 'booking-store', // Unique name for devtools
      }
    )
  )
);

// Narrow selectors for better performance
export const useBookingStep = () => {
  const currentStep = useBookingStore((state) => state.currentStep);
  const completedSteps = useBookingStore((state) => state.completedSteps);
  const nextStep = useBookingStore((state) => state.nextStep);
  const previousStep = useBookingStore((state) => state.previousStep);
  const setCurrentStep = useBookingStore((state) => state.setCurrentStep);
  
  return useMemo(() => ({
    currentStep,
    completedSteps,
    nextStep,
    previousStep,
    setCurrentStep
  }), [currentStep, completedSteps, nextStep, previousStep, setCurrentStep]);
};

export const useBookingData = () => {
  const bookingData = useBookingStore((state) => state.bookingData);
  const setVehicle = useBookingStore((state) => state.setVehicle);
  const setVehicleDetails = useBookingStore((state) => state.setVehicleDetails);
  const setLocation = useBookingStore((state) => state.setLocation);
  const setServiceTier = useBookingStore((state) => state.setServiceTier);
  const setAddons = useBookingStore((state) => state.setAddons);
  const setSchedule = useBookingStore((state) => state.setSchedule);
  const setPaymentMethod = useBookingStore((state) => state.setPaymentMethod);
  
  return useMemo(() => ({
    bookingData,
    setVehicle,
    setVehicleDetails,
    setLocation,
    setServiceTier,
    setAddons,
    setSchedule,
    setPaymentMethod
  }), [bookingData, setVehicle, setVehicleDetails, setLocation, setServiceTier, setAddons, setSchedule, setPaymentMethod]);
};

export const useBookingVehicle = () => {
  const vehicle = useBookingStore((state) => state.bookingData.vehicle);
  const vehicleDetails = useBookingStore((state) => state.bookingData.vehicleDetails);
  const setVehicle = useBookingStore((state) => state.setVehicle);
  const setVehicleDetails = useBookingStore((state) => state.setVehicleDetails);
  
  return useMemo(() => ({
    vehicle,
    vehicleDetails,
    setVehicle,
    setVehicleDetails
  }), [vehicle, vehicleDetails, setVehicle, setVehicleDetails]);
};

export const useBookingService = () => {
  const serviceTier = useBookingStore((state) => state.bookingData.serviceTier);
  const setServiceTier = useBookingStore((state) => state.setServiceTier);
  
  return useMemo(() => ({
    serviceTier,
    setServiceTier
  }), [serviceTier, setServiceTier]);
};

export const useBookingAddons = () => {
  const addons = useBookingStore((state) => state.bookingData.addons);
  const setAddons = useBookingStore((state) => state.setAddons);
  
  return useMemo(() => ({
    addons,
    setAddons
  }), [addons, setAddons]);
};

export const useBookingSchedule = () => {
  const schedule = useBookingStore((state) => state.bookingData.schedule);
  const setSchedule = useBookingStore((state) => state.setSchedule);
  
  return useMemo(() => ({
    schedule,
    setSchedule
  }), [schedule, setSchedule]);
};

export const useBookingPayment = () => {
  const paymentMethod = useBookingStore((state) => state.bookingData.paymentMethod);
  const setPaymentMethod = useBookingStore((state) => state.setPaymentMethod);
  
  return useMemo(() => ({
    paymentMethod,
    setPaymentMethod
  }), [paymentMethod, setPaymentMethod]);
};

export const useBookingErrors = () => {
  const errors = useBookingStore((state) => state.errors);
  const isLoading = useBookingStore((state) => state.isLoading);
  const setErrors = useBookingStore((state) => state.setErrors);
  const addError = useBookingStore((state) => state.addError);
  const clearErrors = useBookingStore((state) => state.clearErrors);
  const setLoading = useBookingStore((state) => state.setLoading);
  
  return useMemo(() => ({
    errors,
    isLoading,
    setErrors,
    addError,
    clearErrors,
    setLoading
  }), [errors, isLoading, setErrors, addError, clearErrors, setLoading]);
};


============================
FILE: frontend\src\features\booking\state\index.ts
============================
// Booking state exports
export { 
  useBookingAddons,
  useBookingData,
  useBookingErrors,
  useBookingPayment,
  useBookingSchedule,
  useBookingService,
  useBookingStep,
  useBookingStore,
  useBookingVehicle
} from './bookingStore';
export type { BookingActions, BookingData, BookingState, BookingStep } from './types';


============================
FILE: frontend\src\features\booking\state\types.ts
============================
// Booking state types
export type BookingStep = 'vehicle-selection' | 'location' | 'service-tier' | 'addons' | 'schedule' | 'payment';

export interface BookingData {
  vehicle: string;
  vehicleDetails: {
    make: string;
    model: string;
    year: string;
    color: string;
    length: string;
  };
  location: {
    address: string;
    city: string;
    state: string;
    zip: string;
    notes: string;
    locationType: string; // Comma-separated string for multiple selections
  };
  serviceTier: string;
  addons: string[];
  schedule: { dates: string[]; time: string };
  paymentMethod: string;
}

export interface BookingState {
  currentStep: BookingStep;
  bookingData: BookingData;
  completedSteps: BookingStep[];
  isLoading: boolean;
  errors: string[];
}

export interface BookingActions {
  setCurrentStep: (step: BookingStep) => void;
  updateBookingData: (data: Partial<BookingData>) => void;
  setVehicle: (vehicle: string) => void;
  setVehicleDetails: (details: Partial<BookingData['vehicleDetails']>) => void;
  setLocation: (location: Partial<BookingData['location']>) => void;
  setServiceTier: (tier: string) => void;
  setAddons: (addons: string[]) => void;
  setSchedule: (schedule: { dates: string[]; time: string }) => void;
  setPaymentMethod: (method: string) => void;
  nextStep: () => void;
  previousStep: () => void;
  resetBooking: () => void;
  setLoading: (loading: boolean) => void;
  setErrors: (errors: string[]) => void;
  addError: (error: string) => void;
  clearErrors: () => void;
}


============================
FILE: frontend\src\features\booking\utils\displayUtils.ts
============================
/**
 * Utility functions for generating display content for services and addons
 */

interface FeatureData {
  [key: string]: {
    name: string;
    description: string;
    explanation: string;
    image: string;
    duration: number;
    features: string[];
  };
}

interface ServiceData {
  description?: string;
  [key: string]: unknown;
}

/**
 * Get description from service/addon data, with fallback to feature names
 */
export const getCardDescription = (
  serviceData: ServiceData,
  featureKeys: string[], 
  featuresData: FeatureData,
  maxFeatures: number = 3
): string => {
  // First priority: use description field from service/addon data
  if (serviceData.description) {
    return serviceData.description;
  }

  // Fallback: generate from feature names
  if (featureKeys.length === 0) {
    return 'No features available';
  }

  // Look up feature names from features.json using the keywords
  const featureNames = featureKeys.map(featureKey => {
    const feature = featuresData[featureKey];
    return feature ? feature.name : featureKey; // Fallback to key if not found
  });
  
  // If we have too many features, show only the first few and add "..."
  if (featureNames.length > maxFeatures) {
    return featureNames.slice(0, maxFeatures).join(', ') + '...';
  }
  
  return featureNames.join(', ');
};

/**
 * Generate feature details for modal display
 */
export const generateFeatureDetails = (
  featureKey: string,
  featuresData: FeatureData
) => {
  return featuresData[featureKey] || null;
};

/**
 * Get all feature details for a list of feature keys
 */
export const getAllFeatureDetails = (
  featureKeys: string[],
  featuresData: FeatureData
) => {
  return featureKeys.map(key => ({
    key,
    details: generateFeatureDetails(key, featuresData)
  }));
};

/**
 * Format price for display
 * @deprecated Use formatPrice from @/shared/utils instead
 */
export { formatPrice } from '@/shared/utils';


============================
FILE: frontend\src\features\booking\__tests__\displayUtils.test.ts
============================
import { describe, expect,it } from 'vitest';

import { formatPrice,getCardDescription } from '../utils/displayUtils';

describe('displayUtils', () => {
  describe('getCardDescription', () => {
    it('should return service description when available', () => {
      const serviceData = {
        description: 'Premium detailing service'
      };
      const featureKeys = ['feature1', 'feature2'];
      const featuresData = {};

      const result = getCardDescription(serviceData, featureKeys, featuresData);
      expect(result).toBe('Premium detailing service');
    });

    it('should generate description from feature names when no service description', () => {
      const serviceData = {};
      const featureKeys = ['feature1', 'feature2'];
      const featuresData = {
        feature1: { name: 'Wash' },
        feature2: { name: 'Wax' }
      };

      const result = getCardDescription(serviceData, featureKeys, featuresData);
      expect(result).toBe('Wash, Wax');
    });

    it('should truncate features when exceeding maxFeatures', () => {
      const serviceData = {};
      const featureKeys = ['feature1', 'feature2', 'feature3', 'feature4'];
      const featuresData = {
        feature1: { name: 'Wash' },
        feature2: { name: 'Wax' },
        feature3: { name: 'Polish' },
        feature4: { name: 'Seal' }
      };

      const result = getCardDescription(serviceData, featureKeys, featuresData, 2);
      expect(result).toBe('Wash, Wax...');
    });

    it('should handle missing features gracefully', () => {
      const serviceData = {};
      const featureKeys = ['feature1', 'feature2'];
      const featuresData = {
        feature1: { name: 'Wash' }
        // feature2 is missing
      };

      const result = getCardDescription(serviceData, featureKeys, featuresData);
      expect(result).toBe('Wash, feature2');
    });

    it('should return fallback message when no features available', () => {
      const serviceData = {};
      const featureKeys: string[] = [];
      const featuresData = {};

      const result = getCardDescription(serviceData, featureKeys, featuresData);
      expect(result).toBe('No features available');
    });
  });

  describe('formatPrice', () => {
    it('should format price with 2 decimal places', () => {
      expect(formatPrice(123.45)).toBe('123.45');
      expect(formatPrice(100)).toBe('100.00');
      expect(formatPrice(0)).toBe('0.00');
    });

    it('should handle large numbers with commas', () => {
      expect(formatPrice(1234.56)).toBe('1,234.56');
      expect(formatPrice(1000000)).toBe('1,000,000.00');
    });
  });
});


============================
FILE: frontend\src\features\booking\__tests__\useAddons.test.tsx
============================
import React from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { renderHook, waitFor } from '@testing-library/react';
import { beforeEach, describe, expect, it, vi } from 'vitest';

import { useAddons } from '../hooks/useAddons';

// Mock the dynamic imports
vi.mock('@/data/mobile-detailing/pricing/cars/addons/windows/service.json', () => ({
  default: {
    'Window Tinting': {
      cost: 200,
      features: ['tint1', 'tint2'],
      popular: true,
      description: 'Professional window tinting'
    },
    'Window Cleaning': {
      cost: 50,
      features: ['clean1'],
      popular: false,
      description: 'Deep window cleaning'
    }
  }
}));

vi.mock('@/data/mobile-detailing/pricing/cars/addons/windows/features.json', () => ({
  default: {
    tint1: { name: 'UV Protection' },
    tint2: { name: 'Privacy Enhancement' },
    clean1: { name: 'Streak-Free Finish' }
  }
}));

// Mock the vehicle mapping
vi.mock('@/shared/constants', () => ({
  toFolderName: (vehicleType: string) => {
    const map: Record<string, string> = {
      'car': 'cars',
      'truck': 'trucks',
      'suv': 'suvs'
    };
    return map[vehicleType] || null;
  }
}));

const createWrapper = (): React.ComponentType<{ children: React.ReactNode }> => {
  const queryClient = new QueryClient({
    defaultOptions: {
      queries: {
        retry: false,
      },
    },
  });
  const Wrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
  );
  return Wrapper;
};

describe('useAddons', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('should load addons for valid vehicle type and category', async () => {
    const { result } = renderHook(() => useAddons('car', 'windows'), {
      wrapper: createWrapper(),
    });

    await waitFor(() => {
      expect(result.current.isLoading).toBe(false);
    });

    expect(result.current.availableAddons).toHaveLength(2);
    expect(result.current.availableAddons[0]).toEqual({
      id: 'window-tinting',
      name: 'Window Tinting',
      price: 200,
      description: 'Professional window tinting',
      features: ['UV Protection', 'Privacy Enhancement'],
      featureIds: ['tint1', 'tint2'],
      popular: true
    });
    expect(result.current.availableAddons[1]).toEqual({
      id: 'window-cleaning',
      name: 'Window Cleaning',
      price: 50,
      description: 'Deep window cleaning',
      features: ['Streak-Free Finish'],
      featureIds: ['clean1'],
      popular: false
    });
    expect(result.current.error).toBeNull();
  });

  it('should return empty array for invalid vehicle type', async () => {
    const { result } = renderHook(() => useAddons('invalid', 'windows'), {
      wrapper: createWrapper(),
    });

    await waitFor(() => {
      expect(result.current.isLoading).toBe(false);
    });

    expect(result.current.availableAddons).toEqual([]);
    expect(result.current.error).toBe('No addons available for vehicle type: invalid');
  });

  it('should handle missing parameters', async () => {
    const { result } = renderHook(() => useAddons('', ''), {
      wrapper: createWrapper(),
    });

    await waitFor(() => {
      expect(result.current.isLoading).toBe(false);
    });

    expect(result.current.availableAddons).toEqual([]);
    expect(result.current.error).toBe('No addons available for vehicle type: ');
  });
});


============================
FILE: frontend\src\features\booking\__tests__\useServiceTiers.test.tsx
============================
import React from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { renderHook, waitFor } from '@testing-library/react';
import { beforeEach, describe, expect, it, vi } from 'vitest';

import { useServiceTiers } from '../hooks/useServiceTiers';

// Mock the dynamic imports
vi.mock('@/data/mobile-detailing/pricing/cars/service/services.json', () => ({
  default: {
    'Basic Wash': {
      cost: 50,
      features: ['feature1', 'feature2'],
      popular: false,
      description: 'Basic car wash service'
    },
    'Premium Detail': {
      cost: 150,
      features: ['feature1', 'feature2', 'feature3'],
      popular: true,
      description: 'Premium detailing service'
    }
  }
}));

vi.mock('@/data/mobile-detailing/pricing/cars/service/features.json', () => ({
  default: {
    feature1: { name: 'Exterior Wash' },
    feature2: { name: 'Tire Cleaning' },
    feature3: { name: 'Wax Application' }
  }
}));

// Mock the vehicle mapping
vi.mock('@/shared/constants', () => ({
  toFolderName: (vehicleType: string) => {
    const map: Record<string, string> = {
      'car': 'cars',
      'truck': 'trucks',
      'suv': 'suvs'
    };
    return map[vehicleType] || null;
  }
}));

const createWrapper = (): React.ComponentType<{ children: React.ReactNode }> => {
  const queryClient = new QueryClient({
    defaultOptions: {
      queries: {
        retry: false,
      },
    },
  });
  const Wrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
  );
  return Wrapper;
};

describe('useServiceTiers', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('should load service tiers for valid vehicle type', async () => {
    const { result } = renderHook(() => useServiceTiers('car'), {
      wrapper: createWrapper(),
    });

    await waitFor(() => {
      expect(result.current.isLoading).toBe(false);
    });

    expect(result.current.serviceTiers).toHaveLength(2);
    expect(result.current.serviceTiers[0]).toEqual({
      id: 'basic-wash',
      name: 'Basic Wash',
      price: 50,
      description: 'Basic car wash service',
      features: ['Exterior Wash', 'Tire Cleaning'],
      featureIds: ['feature1', 'feature2'],
      popular: false
    });
    expect(result.current.serviceTiers[1]).toEqual({
      id: 'premium-detail',
      name: 'Premium Detail',
      price: 150,
      description: 'Premium detailing service',
      features: ['Exterior Wash', 'Tire Cleaning', 'Wax Application'],
      featureIds: ['feature1', 'feature2', 'feature3'],
      popular: true
    });
    expect(result.current.error).toBeNull();
  });

  it('should return empty array for invalid vehicle type', async () => {
    const { result } = renderHook(() => useServiceTiers('invalid'), {
      wrapper: createWrapper(),
    });

    await waitFor(() => {
      expect(result.current.isLoading).toBe(false);
    });

    expect(result.current.serviceTiers).toEqual([]);
    expect(result.current.error).toBe('No services available for vehicle type: invalid');
  });

  it('should handle missing vehicle type', async () => {
    const { result } = renderHook(() => useServiceTiers(''), {
      wrapper: createWrapper(),
    });

    await waitFor(() => {
      expect(result.current.isLoading).toBe(false);
    });

    expect(result.current.serviceTiers).toEqual([]);
    expect(result.current.error).toBe('No services available for vehicle type: ');
  });
});


============================
FILE: frontend\src\features\booking\__tests__\vehicleMapping.test.ts
============================
import { describe, expect,it } from 'vitest';

import { 
  getAvailableFolderNames, 
  getAvailableVehicleTypes, 
  isValidVehicleType, 
  toFolderName, 
  VEHICLE_FOLDER_MAP} from '@/shared/constants/vehicleMapping';

describe('vehicleMapping', () => {
  describe('VEHICLE_FOLDER_MAP', () => {
    it('should contain all expected vehicle types', () => {
      expect(VEHICLE_FOLDER_MAP).toEqual({
        'car': 'cars',
        'truck': 'trucks',
        'suv': 'suvs',
        'boat': 'boats',
        'rv': 'rvs'
      });
    });
  });

  describe('toFolderName', () => {
    it('should return correct folder name for valid vehicle types', () => {
      expect(toFolderName('car')).toBe('cars');
      expect(toFolderName('truck')).toBe('trucks');
      expect(toFolderName('suv')).toBe('suvs');
      expect(toFolderName('boat')).toBe('boats');
      expect(toFolderName('rv')).toBe('rvs');
    });

    it('should return null for invalid vehicle types', () => {
      expect(toFolderName('invalid')).toBeNull();
      expect(toFolderName('')).toBeNull();
      expect(toFolderName('CAR')).toBeNull(); // case sensitive
    });
  });

  describe('isValidVehicleType', () => {
    it('should return true for valid vehicle types', () => {
      expect(isValidVehicleType('car')).toBe(true);
      expect(isValidVehicleType('truck')).toBe(true);
      expect(isValidVehicleType('suv')).toBe(true);
      expect(isValidVehicleType('boat')).toBe(true);
      expect(isValidVehicleType('rv')).toBe(true);
    });

    it('should return false for invalid vehicle types', () => {
      expect(isValidVehicleType('invalid')).toBe(false);
      expect(isValidVehicleType('')).toBe(false);
      expect(isValidVehicleType('CAR')).toBe(false); // case sensitive
    });
  });

  describe('getAvailableVehicleTypes', () => {
    it('should return all vehicle types', () => {
      const types = getAvailableVehicleTypes();
      expect(types).toEqual(['car', 'truck', 'suv', 'boat', 'rv']);
      expect(types).toHaveLength(5);
    });
  });

  describe('getAvailableFolderNames', () => {
    it('should return all folder names', () => {
      const folders = getAvailableFolderNames();
      expect(folders).toEqual(['cars', 'trucks', 'suvs', 'boats', 'rvs']);
      expect(folders).toHaveLength(5);
    });
  });
});


============================
FILE: frontend\src\features\cta\components\index.ts
============================
export { default as MobileCTAButtons } from './MobileCTAButtons';
export { default as SmartCTAButtons } from './SmartCTAButtons';


============================
FILE: frontend\src\features\cta\components\MobileCTAButtons.tsx
============================
import React from 'react';
import { Calendar, MessageSquare, Phone } from 'lucide-react';

import { useData } from '@/shared/hooks/useData';
import { cn } from '@/shared/utils/cn';

interface MobileCTAButtonsProps {
  onRequestQuote?: () => void;
  onBookNow?: () => void;
  className?: string;
  layout?: 'horizontal' | 'vertical' | 'stacked';
}

/**
 * Mobile-optimized CTA buttons that adapt based on tenant booking capabilities
 * and mobile user behavior patterns
 */
const MobileCTAButtons: React.FC<MobileCTAButtonsProps> = ({
  onRequestQuote,
  onBookNow,
  className = '',
  layout = 'stacked'
}) => {
  const { phone, businessName, isPreview } = useData();
  
  // TODO: This should come from tenant settings/API
  // For now, we'll assume booking is enabled if we have a phone number
  const hasOnlineBooking = !!phone;
  const hasPhoneSupport = !!phone;

  // Format phone number for tel: link
  const formatPhoneForTel = (phoneNumber: string) => {
    return `tel:${phoneNumber.replace(/\D/g, '')}`;
  };

  // Mobile-optimized button styles
  const buttonBaseClasses = "flex items-center justify-center gap-2 px-6 py-4 rounded-lg font-semibold text-base transition-all duration-200 active:scale-95";
  
  const primaryButtonClasses = "bg-orange-500 hover:bg-orange-600 text-white shadow-lg";
  const secondaryButtonClasses = "bg-white/10 hover:bg-white/20 text-white border border-white/30";
  const tertiaryButtonClasses = "bg-transparent hover:bg-white/10 text-white border border-white/20";

  const containerClasses = {
    horizontal: 'flex flex-row gap-3',
    vertical: 'flex flex-col gap-3',
    stacked: 'flex flex-col gap-3'
  };

  const handleBookNowClick = () => {
    if (isPreview) {
      alert('📋 Preview Mode\n\nBooking is disabled in preview mode.\n\nThis is a demonstration site to showcase features to potential clients.');
      return;
    }
    onBookNow?.();
  };

  return (
    <div className={cn(containerClasses[layout], className)}>
      {/* Primary CTA - Book Now (full width) */}
      {hasOnlineBooking && (
        <button
          onClick={handleBookNowClick}
          className={cn(
            buttonBaseClasses, 
            primaryButtonClasses, 
            "w-full",
            isPreview && "cursor-pointer"
          )}
          aria-label={`Book an appointment with ${businessName}`}
        >
          <Calendar className="h-5 w-5" />
          Book Now
        </button>
      )}

      {/* Secondary CTAs - Call Now and Request Quote side by side */}
      <div className="flex gap-3">
        {/* Call Now */}
        {hasPhoneSupport && (
          <a
            href={formatPhoneForTel(phone)}
            className={cn(buttonBaseClasses, secondaryButtonClasses, "flex-1")}
            aria-label={`Call ${businessName} at ${phone}`}
          >
            <Phone className="h-5 w-5" />
            Call Now
          </a>
        )}

        {/* Request Quote */}
        <button
          onClick={onRequestQuote}
          className={cn(buttonBaseClasses, tertiaryButtonClasses, "flex-1")}
          aria-label={`Request a quote from ${businessName}`}
        >
          <MessageSquare className="h-5 w-5" />
          Request Quote
        </button>
      </div>
    </div>
  );
};

export default MobileCTAButtons;


============================
FILE: frontend\src\features\cta\components\SmartCTAButtons.tsx
============================
import React from 'react';

import { useIsMobile } from '@/shared/hooks';
import { CTAButtons } from '@/shared/ui';

import { useBookingCapabilities } from '../hooks/useBookingCapabilities';
import MobileCTAButtons from './MobileCTAButtons';

interface SmartCTAButtonsProps {
  onRequestQuote?: () => void;
  onBookNow?: () => void;
  className?: string;
  forceMobile?: boolean; // Force mobile layout even on desktop
}

/**
 * Smart CTA buttons component for tenant-based sites:
 * - All sites are now tenant-based with business-specific context
 */
const SmartCTAButtons: React.FC<SmartCTAButtonsProps> = ({ 
  onRequestQuote, 
  onBookNow, 
  className,
  forceMobile = false
}) => {
  // Hook call kept for future use when booking capabilities are needed
  useBookingCapabilities();
  
  // Detect if we're on mobile or should use mobile layout
  const isMobileDetected = useIsMobile();
  const isMobile = forceMobile || isMobileDetected;

  // Tenant-specific CTA configuration (all sites are now tenant-based)
  const tenantButtons = [
    {
      text: 'Request a Quote',
      onClick: onRequestQuote || (() => {}),
      variant: 'primary' as const,
    },
    {
      text: 'Book Now',
      onClick: onBookNow || (() => {}),
      variant: 'secondary' as const,
    },
  ];

  // Use tenant buttons (all sites are tenant-based now)
  const buttons = tenantButtons;

  // Use mobile-optimized CTAs for mobile devices or when forced
  if (isMobile) {
    return (
      <MobileCTAButtons
        className={className}
        onRequestQuote={onRequestQuote}
        onBookNow={onBookNow}
        layout="stacked"
      />
    );
  }

  // Desktop layout
  return (
    <CTAButtons 
      className={className}
      bookNowProps={{
        onClick: buttons[0].onClick,
        variant: buttons[0].variant,
        children: buttons[0].text
      }}
      getQuoteProps={{
        onClick: buttons[1].onClick,
        variant: buttons[1].variant,
        children: buttons[1].text
      }}
    />
  );
};

export default SmartCTAButtons;


============================
FILE: frontend\src\features\cta\hooks\index.ts
============================
export { useBookingCapabilities } from './useBookingCapabilities';


============================
FILE: frontend\src\features\cta\hooks\useBookingCapabilities.ts
============================
import { useData } from '@/shared/hooks/useData';

interface BookingCapabilities {
  hasOnlineBooking: boolean;
  hasPhoneSupport: boolean;
  hasQuoteSystem: boolean;
  preferredContactMethod: 'booking' | 'phone' | 'quote';
  bookingUrl?: string;
  phoneNumber?: string;
}

/**
 * Hook to determine tenant booking capabilities and preferred contact methods
 * This should eventually integrate with tenant settings from the API
 */
export const useBookingCapabilities = (): BookingCapabilities => {
  const { phone, isTenant } = useData();

  // For now, we'll use simple heuristics
  // TODO: Replace with actual tenant settings from API
  const hasPhoneSupport = !!phone;
  const hasOnlineBooking = isTenant && hasPhoneSupport; // Assume booking is enabled for tenants with phone
  const hasQuoteSystem = true; // Always available as fallback

  // Determine preferred contact method based on capabilities
  let preferredContactMethod: 'booking' | 'phone' | 'quote' = 'quote';
  
  if (hasOnlineBooking) {
    preferredContactMethod = 'booking';
  } else if (hasPhoneSupport) {
    preferredContactMethod = 'phone';
  }

  return {
    hasOnlineBooking,
    hasPhoneSupport,
    hasQuoteSystem,
    preferredContactMethod,
    bookingUrl: hasOnlineBooking ? '/booking' : undefined,
    phoneNumber: phone
  };
};


============================
FILE: frontend\src\features\cta\index.ts
============================
// CTA feature public exports
// Only export components that other features need to import

export { default as MobileCTAButtons } from './components/MobileCTAButtons';
export { default as SmartCTAButtons } from './components/SmartCTAButtons';
export { useBookingCapabilities } from './hooks/useBookingCapabilities';


============================
FILE: frontend\src\features\customers\classes\Customer.ts
============================
// Customer OOP class with business logic and state management
import type {
  ContactPreferences,
  CreateCustomerRequest,
  Customer as CustomerData,
  CustomerStatus,
  DEFAULT_CONTACT_PREFERENCES,
  DEFAULT_COUNTRY,
  DEFAULT_CUSTOMER_STATUS,
  DEFAULT_SERVICE_PREFERENCES,
  ServicePreferences,
  UpdateCustomerRequest,
} from '../types';

export class Customer {
  private data: CustomerData;

  constructor(customerData: CustomerData) {
    this.data = { ...customerData };
  }

  // ─────────────────────────────────────────────────────────────────────────────
  // Getters
  // ─────────────────────────────────────────────────────────────────────────────

  get id(): string {
    return this.data.id;
  }

  get name(): string {
    return this.data.name;
  }

  get email(): string | undefined {
    return this.data.email;
  }

  get phone(): string | undefined {
    return this.data.phone;
  }

  get status(): CustomerStatus {
    return this.data.status;
  }

  get isRegistered(): boolean {
    return !!this.data.user_id;
  }

  get isAnonymous(): boolean {
    return this.data.status === 'anonymous';
  }

  get isVerified(): boolean {
    return this.data.status === 'verified';
  }

  get isActive(): boolean {
    return this.data.status !== 'inactive';
  }

  get lifetimeValue(): number {
    return this.data.lifetime_value_cents;
  }

  get totalBookings(): number {
    return this.data.total_bookings;
  }

  get tags(): string[] {
    return [...this.data.tags];
  }

  get lastActivityAt(): string {
    return this.data.last_activity_at;
  }

  get createdAt(): string {
    return this.data.created_at;
  }

  get updatedAt(): string {
    return this.data.updated_at;
  }

  // ─────────────────────────────────────────────────────────────────────────────
  // Contact Information
  // ─────────────────────────────────────────────────────────────────────────────

  getDisplayName(): string {
    return this.data.name || 'Guest Customer';
  }

  getContactInfo(): { email?: string; phone?: string } {
    return {
      email: this.data.email,
      phone: this.data.phone,
    };
  }

  getFullAddress(): string {
    const parts = [
      this.data.address,
      this.data.city,
      this.data.state,
      this.data.zip_code,
    ].filter(Boolean);
    
    return parts.join(', ');
  }

  hasEmail(): boolean {
    return !!this.data.email;
  }

  hasPhone(): boolean {
    return !!this.data.phone;
  }

  hasCompleteContactInfo(): boolean {
    return this.hasEmail() && this.hasPhone();
  }

  // ─────────────────────────────────────────────────────────────────────────────
  // Communication Preferences
  // ─────────────────────────────────────────────────────────────────────────────

  canReceiveEmails(): boolean {
    return this.data.contact_preferences.email && this.hasEmail();
  }

  canReceiveSMS(): boolean {
    return this.data.contact_preferences.sms && this.hasPhone();
  }

  canReceivePhoneCalls(): boolean {
    return this.data.contact_preferences.phone && this.hasPhone();
  }

  canReceiveMarketing(): boolean {
    return this.data.contact_preferences.marketing_emails && this.canReceiveEmails();
  }

  canReceivePromotions(): boolean {
    return this.data.contact_preferences.promotional_offers && this.canReceiveEmails();
  }

  getPreferredCommunicationMethods(): string[] {
    const methods: string[] = [];
    
    if (this.canReceiveEmails()) methods.push('email');
    if (this.canReceiveSMS()) methods.push('sms');
    if (this.canReceivePhoneCalls()) methods.push('phone');
    
    return methods;
  }

  // ─────────────────────────────────────────────────────────────────────────────
  // Service Preferences
  // ─────────────────────────────────────────────────────────────────────────────

  getPreferredServices(): string[] {
    return [...this.data.service_preferences.preferred_services];
  }

  getPreferredAffiliates(): string[] {
    return [...this.data.service_preferences.preferred_tenants];
  }

  getVehiclePreferences(): Record<string, unknown> {
    return { ...this.data.service_preferences.vehicle_preferences };
  }

  getServiceNotes(): string {
    return this.data.service_preferences.service_notes || '';
  }

  hasPreferredServices(): boolean {
    return this.data.service_preferences.preferred_services.length > 0;
  }

  hasPreferredAffiliates(): boolean {
    return this.data.service_preferences.preferred_tenants.length > 0;
  }

  // ─────────────────────────────────────────────────────────────────────────────
  // Business Logic Methods
  // ─────────────────────────────────────────────────────────────────────────────

  isHighValue(): boolean {
    return this.data.lifetime_value_cents > 100000; // $1000+
  }

  isFrequentCustomer(): boolean {
    return this.data.total_bookings >= 5;
  }

  isNewCustomer(): boolean {
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    return new Date(this.data.created_at) > thirtyDaysAgo;
  }

  isInactive(): boolean {
    const ninetyDaysAgo = new Date();
    ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);
    return new Date(this.data.last_activity_at) < ninetyDaysAgo;
  }

  getCustomerTier(): 'bronze' | 'silver' | 'gold' | 'platinum' {
    if (this.data.lifetime_value_cents >= 500000) return 'platinum'; // $5000+
    if (this.data.lifetime_value_cents >= 200000) return 'gold'; // $2000+
    if (this.data.lifetime_value_cents >= 50000) return 'silver'; // $500+
    return 'bronze';
  }

  // ─────────────────────────────────────────────────────────────────────────────
  // State Transitions
  // ─────────────────────────────────────────────────────────────────────────────

  register(userId: string): void {
    if (this.isRegistered) {
      throw new Error('Customer is already registered');
    }

    if (!this.hasEmail()) {
      throw new Error('Customer must have an email address to register');
    }

    // This would call your API to update the customer
    // await customerApi.registerCustomer(this.id, userId);
    
    this.data.user_id = userId;
    this.data.status = 'registered';
    this.data.converted_at = new Date().toISOString();
    this.data.last_activity_at = new Date().toISOString();
  }

  verify(): void {
    if (this.data.status !== 'registered') {
      throw new Error('Customer must be registered before verification');
    }

    // await customerApi.verifyCustomer(this.id);
    this.data.status = 'verified';
    this.data.last_activity_at = new Date().toISOString();
  }

  deactivate(): void {
    if (this.data.status === 'inactive') {
      throw new Error('Customer is already inactive');
    }

    // await customerApi.deactivateCustomer(this.id);
    this.data.status = 'inactive';
    this.data.last_activity_at = new Date().toISOString();
  }

  reactivate(): void {
    if (this.data.status !== 'inactive') {
      throw new Error('Customer is not inactive');
    }

    // await customerApi.reactivateCustomer(this.id);
    this.data.status = 'registered';
    this.data.last_activity_at = new Date().toISOString();
  }

  // ─────────────────────────────────────────────────────────────────────────────
  // Update Methods
  // ─────────────────────────────────────────────────────────────────────────────

  updateContactInfo(contactInfo: {
    email?: string;
    phone?: string;
    address?: string;
    city?: string;
    state?: string;
    zip_code?: string;
    country?: string;
  }): void {
    if (contactInfo.email !== undefined) this.data.email = contactInfo.email;
    if (contactInfo.phone !== undefined) this.data.phone = contactInfo.phone;
    if (contactInfo.address !== undefined) this.data.address = contactInfo.address;
    if (contactInfo.city !== undefined) this.data.city = contactInfo.city;
    if (contactInfo.state !== undefined) this.data.state = contactInfo.state;
    if (contactInfo.zip_code !== undefined) this.data.zip_code = contactInfo.zip_code;
    if (contactInfo.country !== undefined) this.data.country = contactInfo.country;
    
    this.data.last_activity_at = new Date().toISOString();
  }

  updateContactPreferences(preferences: Partial<ContactPreferences>): void {
    this.data.contact_preferences = {
      ...this.data.contact_preferences,
      ...preferences,
    };
    this.data.last_activity_at = new Date().toISOString();
  }

  updateServicePreferences(preferences: Partial<ServicePreferences>): void {
    this.data.service_preferences = {
      ...this.data.service_preferences,
      ...preferences,
    };
    this.data.last_activity_at = new Date().toISOString();
  }

  addTag(tag: string): void {
    if (!this.data.tags.includes(tag)) {
      this.data.tags.push(tag);
      this.data.last_activity_at = new Date().toISOString();
    }
  }

  removeTag(tag: string): void {
    this.data.tags = this.data.tags.filter(t => t !== tag);
    this.data.last_activity_at = new Date().toISOString();
  }

  updateNotes(notes: string): void {
    this.data.notes = notes;
    this.data.last_activity_at = new Date().toISOString();
  }

  // ─────────────────────────────────────────────────────────────────────────────
  // Booking and Value Tracking
  // ─────────────────────────────────────────────────────────────────────────────

  recordBooking(bookingValueCents: number): void {
    this.data.total_bookings += 1;
    this.data.lifetime_value_cents += bookingValueCents;
    this.data.last_booking_at = new Date().toISOString();
    this.data.last_activity_at = new Date().toISOString();
  }

  updateLastActivity(): void {
    this.data.last_activity_at = new Date().toISOString();
  }

  // ─────────────────────────────────────────────────────────────────────────────
  // Static Factory Methods
  // ─────────────────────────────────────────────────────────────────────────────

  static createAnonymous(customerData: CreateCustomerRequest): Customer {
    const now = new Date().toISOString();
    
    const customer: CustomerData = {
      id: `customer_${String(Date.now())}_${Math.random().toString(36).substring(2, 11)}`,
      user_id: undefined,
      name: customerData.name,
      email: customerData.email,
      phone: customerData.phone,
      address: customerData.address,
      city: customerData.city,
      state: customerData.state,
      zip_code: customerData.zip_code,
      country: customerData.country || DEFAULT_COUNTRY,
      status: DEFAULT_CUSTOMER_STATUS,
      registration_source: customerData.registration_source,
      converted_at: undefined,
      contact_preferences: {
        ...DEFAULT_CONTACT_PREFERENCES,
        ...customerData.contact_preferences,
      },
      service_preferences: {
        ...DEFAULT_SERVICE_PREFERENCES,
        ...customerData.service_preferences,
      },
      notes: customerData.notes,
      tags: customerData.tags || [],
      lifetime_value_cents: 0,
      total_bookings: 0,
      last_booking_at: undefined,
      last_activity_at: now,
      created_at: now,
      updated_at: now,
    };

    return new Customer(customer);
  }

  static fromData(customerData: CustomerData): Customer {
    return new Customer(customerData);
  }

  // ─────────────────────────────────────────────────────────────────────────────
  // Serialization
  // ─────────────────────────────────────────────────────────────────────────────

  toJSON(): CustomerData {
    return { ...this.data };
  }

  toUpdateRequest(): UpdateCustomerRequest {
    return {
      name: this.data.name,
      email: this.data.email,
      phone: this.data.phone,
      address: this.data.address,
      city: this.data.city,
      state: this.data.state,
      zip_code: this.data.zip_code,
      country: this.data.country,
      contact_preferences: this.data.contact_preferences,
      service_preferences: this.data.service_preferences,
      notes: this.data.notes,
      tags: this.data.tags,
    };
  }

  // ─────────────────────────────────────────────────────────────────────────────
  // Validation
  // ─────────────────────────────────────────────────────────────────────────────

  validate(): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    if (!this.data.name || this.data.name.trim().length === 0) {
      errors.push('Customer name is required');
    }

    if (this.data.email && !this.isValidEmail(this.data.email)) {
      errors.push('Invalid email format');
    }

    if (this.data.phone && !this.isValidPhone(this.data.phone)) {
      errors.push('Invalid phone format');
    }

    if (this.data.status === 'registered' && !this.data.user_id) {
      errors.push('Registered customers must have a user_id');
    }

    // Note: This condition is always false since verified !== registered
    // This check may need to be revised based on actual business logic

    return {
      isValid: errors.length === 0,
      errors,
    };
  }

  private isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  private isValidPhone(phone: string): boolean {
    const phoneRegex = /^[+]?[1-9][\d]{0,15}$/;
    return phoneRegex.test(phone.replace(/[\s\-()]/g, ''));
  }
}


============================
FILE: frontend\src\features\customers\index.ts
============================
// Customer feature barrel exports
// Following MDH project conventions - only export components from this barrel

export { Customer } from './classes/Customer';
export type {
  CommunicationDirection,
  CommunicationPriority,
  CommunicationStatus,
  CommunicationType,
  ContactPreferences,
  CreateCustomerRequest,
  CustomerCommunication,
  Customer as CustomerData,
  CustomerSearchFilters,
  CustomerStats,
  CustomerStatus,
  CustomerVehicle,
  DEFAULT_CONTACT_PREFERENCES,
  DEFAULT_COUNTRY,
  DEFAULT_CUSTOMER_STATUS,
  DEFAULT_SERVICE_PREFERENCES,
  RegistrationSource,
  ServicePreferences,
  SizeBucket,
  UpdateCustomerRequest,
  VehicleType,
} from './types';


============================
FILE: frontend\src\features\customers\types\index.ts
============================
// Customer types and interfaces for the MDH customer management system

export type CustomerStatus = 'anonymous' | 'registered' | 'verified' | 'inactive';
export type RegistrationSource = 'website' | 'phone' | 'walk_in' | 'referral' | 'social_media' | 'advertisement' | 'other';
export type VehicleType = 'auto' | 'boat' | 'rv' | 'motorcycle';
export type SizeBucket = 'xs' | 's' | 'm' | 'l' | 'xl';
export type CommunicationType = 'email' | 'sms' | 'phone' | 'in_app' | 'mail';
export type CommunicationDirection = 'inbound' | 'outbound';
export type CommunicationStatus = 'sent' | 'delivered' | 'read' | 'failed' | 'bounced';
export type CommunicationPriority = 'low' | 'normal' | 'high' | 'urgent';

// Main Customer interface
export interface Customer {
  id: string;
  user_id?: string; // null for anonymous customers
  name: string;
  email?: string;
  phone?: string;
  address?: string;
  city?: string;
  state?: string;
  zip_code?: string;
  country: string;
  
  // Customer status and lifecycle
  status: CustomerStatus;
  registration_source?: RegistrationSource;
  converted_at?: string;
  
  // Contact preferences
  contact_preferences: ContactPreferences;
  
  // Service preferences
  service_preferences: ServicePreferences;
  
  // Customer metadata
  notes?: string;
  tags: string[];
  lifetime_value_cents: number;
  total_bookings: number;
  last_booking_at?: string;
  last_activity_at: string;
  
  // Timestamps
  created_at: string;
  updated_at: string;
}

// Contact preferences
export interface ContactPreferences {
  email: boolean;
  sms: boolean;
  phone: boolean;
  marketing_emails: boolean;
  promotional_offers: boolean;
}

// Service preferences
export interface ServicePreferences {
  preferred_services: string[];
  preferred_tenants: string[];
  vehicle_preferences: Record<string, unknown>;
  service_notes: string;
}

// Customer vehicle interface
export interface CustomerVehicle {
  id: string;
  customer_id: string;
  
  // Vehicle identification
  make: string;
  model: string;
  year?: number;
  color?: string;
  license_plate?: string;
  vin?: string;
  
  // Vehicle details
  vehicle_type: VehicleType;
  size_bucket?: SizeBucket;
  mileage?: number;
  
  // Service history and preferences
  service_notes?: string;
  preferred_services: string[];
  last_service_date?: string;
  next_service_due?: string;
  
  // Vehicle status
  is_primary: boolean;
  is_active: boolean;
  
  // Timestamps
  created_at: string;
  updated_at: string;
}

// Customer communication interface
export interface CustomerCommunication {
  id: string;
  customer_id: string;
  
  // Communication details
  communication_type: CommunicationType;
  direction: CommunicationDirection;
  subject?: string;
  content: string;
  
  // Communication metadata
  status: CommunicationStatus;
  priority: CommunicationPriority;
  category?: string;
  
  // Related entities
  related_booking_id?: string;
  related_quote_id?: string;
  related_tenant_id?: string;
  
  // Delivery tracking
  sent_at?: string;
  delivered_at?: string;
  read_at?: string;
  failed_at?: string;
  failure_reason?: string;
  
  // Response tracking
  response_required: boolean;
  response_received_at?: string;
  response_content?: string;
  
  // External system tracking
  external_id?: string;
  external_status?: string;
  
  // Timestamps
  created_at: string;
  updated_at: string;
}

// Customer creation/update interfaces
export interface CreateCustomerRequest {
  name: string;
  email?: string;
  phone?: string;
  address?: string;
  city?: string;
  state?: string;
  zip_code?: string;
  country?: string;
  registration_source?: RegistrationSource;
  contact_preferences?: Partial<ContactPreferences>;
  service_preferences?: Partial<ServicePreferences>;
  notes?: string;
  tags?: string[];
}

export interface UpdateCustomerRequest {
  name?: string;
  email?: string;
  phone?: string;
  address?: string;
  city?: string;
  state?: string;
  zip_code?: string;
  country?: string;
  contact_preferences?: Partial<ContactPreferences>;
  service_preferences?: Partial<ServicePreferences>;
  notes?: string;
  tags?: string[];
}

// Customer search and filtering
export interface CustomerSearchFilters {
  status?: CustomerStatus[];
  tags?: string[];
  registration_source?: RegistrationSource[];
  created_after?: string;
  created_before?: string;
  last_activity_after?: string;
  last_activity_before?: string;
  lifetime_value_min?: number;
  lifetime_value_max?: number;
  total_bookings_min?: number;
  total_bookings_max?: number;
  search_query?: string; // searches name, email, phone
}

// Customer statistics
export interface CustomerStats {
  total_customers: number;
  anonymous_customers: number;
  registered_customers: number;
  verified_customers: number;
  inactive_customers: number;
  average_lifetime_value: number;
  total_lifetime_value: number;
  average_bookings_per_customer: number;
  new_customers_this_month: number;
  customers_by_source: Record<RegistrationSource, number>;
  customers_by_status: Record<CustomerStatus, number>;
}

// Default values
export const DEFAULT_CONTACT_PREFERENCES: ContactPreferences = {
  email: true,
  sms: true,
  phone: true,
  marketing_emails: false,
  promotional_offers: false,
};

export const DEFAULT_SERVICE_PREFERENCES: ServicePreferences = {
  preferred_services: [],
  preferred_tenants: [],
  vehicle_preferences: {},
  service_notes: '',
};

export const DEFAULT_CUSTOMER_STATUS: CustomerStatus = 'anonymous';
export const DEFAULT_COUNTRY = 'US';


============================
FILE: frontend\src\features\devPreview\components\ViewportFrame.tsx
============================
import React from 'react';

import { useViewportStore } from '../state/viewportStore';

/** 
 * Constrains app width in DEV to simulate devices.
 * Wraps the entire app to provide a visual frame for testing different viewport sizes.
 */
export const ViewportFrame: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const viewport = useViewportStore(s => s.viewport);

  // Common "logical" widths for testing
  // mobile: iPhone 14 Pro (390px)
  // tablet: iPad (768px)
  // desktop: Typical laptop (1280px)
  const width =
    viewport === 'mobile' ? 390 :
    viewport === 'tablet' ? 768 :
    viewport === 'desktop' ? 1280 :
    undefined;

  const style: React.CSSProperties = width
    ? { 
        width, 
        maxWidth: width,
        minWidth: 0,
        margin: '0 auto', 
        border: '1px solid #e5e7eb', 
        boxShadow: '0 0 0 1px #f3f4f6 inset',
        minHeight: '100vh',
        overflowX: 'hidden',
        position: 'relative',
        boxSizing: 'border-box',
      }
    : {};

  return <div style={style} className="@container scrollbar-hide">{children}</div>;
};



============================
FILE: frontend\src\features\devPreview\components\ViewportSwitcher.tsx
============================
import React from 'react';

import { useViewportStore, Viewport } from '../state/viewportStore';

const OPTIONS: { id: Viewport; label: string }[] = [
  { id: 'full', label: 'Full Width' },
  { id: 'desktop', label: '💻 Desktop (1280)' },
  { id: 'tablet', label: '📱 Tablet (768)' },
  { id: 'mobile', label: '📱 Mobile (390)' },
];

/**
 * Floating viewport switcher - only visible in development mode.
 * Allows developers to quickly test different viewport sizes.
 */
export const ViewportSwitcher: React.FC = () => {
  const { viewport, setViewport } = useViewportStore();

  return (
    <div
      style={{
        position: 'fixed', 
        right: 12, 
        bottom: 12, 
        zIndex: 9999,
        background: 'rgba(17,24,39,.95)', 
        color: 'white', 
        borderRadius: 12, 
        padding: '8px 12px',
        boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',
        backdropFilter: 'blur(8px)',
      }}
    >
      <label htmlFor="viewport-select" style={{ fontSize: 11, opacity: .7, marginRight: 8, textTransform: 'uppercase', letterSpacing: '0.05em' }}>
        Viewport
      </label>
      <select
        id="viewport-select"
        value={viewport}
        onChange={(e) => { setViewport(e.target.value as Viewport); }}
        style={{ 
          background: 'rgba(255,255,255,.1)', 
          color: 'white', 
          border: '1px solid rgba(255,255,255,.2)', 
          borderRadius: 6, 
          padding: '4px 8px',
          fontSize: 13,
          cursor: 'pointer',
        }}
        aria-label="Select viewport size for testing"
      >
        {OPTIONS.map(o => <option key={o.id} value={o.id}>{o.label}</option>)}
      </select>
    </div>
  );
};



============================
FILE: frontend\src\features\devPreview\hooks\useViewportAsync.ts
============================
/**
 * Viewport Async Operations Hook
 * Handles all async operations for viewport functionality
 * Separated from Zustand store to maintain clean separation of concerns
 */

import React, { useCallback, useEffect,useState } from 'react';

import type { Viewport } from '../state/viewportStore';
import { useViewportStore } from '../state/viewportStore';

export interface ViewportDimensions {
  width: number;
  height: number;
}

export interface ViewportBreakpoint {
  name: Viewport;
  minWidth: number;
  maxWidth: number;
  dimensions: ViewportDimensions;
}

const VIEWPORT_BREAKPOINTS: Record<Viewport, ViewportBreakpoint> = {
  mobile: {
    name: 'mobile',
    minWidth: 0,
    maxWidth: 767,
    dimensions: { width: 375, height: 667 }
  },
  tablet: {
    name: 'tablet',
    minWidth: 768,
    maxWidth: 1023,
    dimensions: { width: 768, height: 1024 }
  },
  desktop: {
    name: 'desktop',
    minWidth: 1024,
    maxWidth: 1439,
    dimensions: { width: 1440, height: 900 }
  },
  full: {
    name: 'full',
    minWidth: 0,
    maxWidth: Infinity,
    dimensions: { width: window.innerWidth, height: window.innerHeight }
  }
};

export const useViewportAsync = () => {
  const [isResizing, setIsResizing] = useState(false);
  const [currentDimensions, setCurrentDimensions] = useState<ViewportDimensions>({
    width: window.innerWidth,
    height: window.innerHeight
  });

  // Get store actions
  const { viewport, setViewport } = useViewportStore();

  /**
   * Get viewport breakpoint for current dimensions
   */
  const getViewportBreakpoint = useCallback((width: number): Viewport => {
    for (const breakpoint of Object.values(VIEWPORT_BREAKPOINTS)) {
      if (width >= breakpoint.minWidth && width <= breakpoint.maxWidth) {
        return breakpoint.name;
      }
    }
    return 'full'; // Fallback
  }, []);

  /**
   * Get dimensions for a specific viewport
   */
  const getViewportDimensions = useCallback((viewportType: Viewport): ViewportDimensions => {
    return VIEWPORT_BREAKPOINTS[viewportType].dimensions;
  }, []);

  /**
   * Set viewport with dimensions
   */
  const setViewportWithDimensions = useCallback((viewportType: Viewport) => {
    const dimensions = getViewportDimensions(viewportType);
    setCurrentDimensions(dimensions);
    setViewport(viewportType);
  }, [getViewportDimensions, setViewport]);

  /**
   * Auto-detect viewport based on current window size
   */
  const autoDetectViewport = useCallback(() => {
    const detectedViewport = getViewportBreakpoint(currentDimensions.width);
    if (detectedViewport !== viewport) {
      setViewport(detectedViewport);
    }
  }, [currentDimensions.width, viewport, getViewportBreakpoint, setViewport]);

  /**
   * Handle window resize
   */
  const handleResize = useCallback(() => {
    setIsResizing(true);
    
    const newDimensions = {
      width: window.innerWidth,
      height: window.innerHeight
    };
    
    setCurrentDimensions(newDimensions);
    
    // Auto-detect viewport if not manually set
    if (viewport !== 'full') {
      const detectedViewport = getViewportBreakpoint(newDimensions.width);
      if (detectedViewport !== viewport) {
        setViewport(detectedViewport);
      }
    }
    
    // Reset resizing state after a short delay
    setTimeout(() => { 
      setIsResizing(false); 
    }, 150);
  }, [viewport, getViewportBreakpoint, setViewport]);

  /**
   * Reset to full viewport
   */
  const resetToFull = useCallback(() => {
    setCurrentDimensions({
      width: window.innerWidth,
      height: window.innerHeight
    });
    setViewport('full');
  }, [setViewport]);

  /**
   * Get CSS for viewport simulation
   */
  const getViewportCSS = useCallback((viewportType: Viewport): React.CSSProperties => {
    if (viewportType === 'full') {
      return {
        width: '100%',
        height: '100%',
        maxWidth: 'none',
        maxHeight: 'none'
      };
    }

    const breakpoint = VIEWPORT_BREAKPOINTS[viewportType];
    return {
      width: `${breakpoint.dimensions.width}px`,
      height: `${breakpoint.dimensions.height}px`,
      maxWidth: `${breakpoint.dimensions.width}px`,
      maxHeight: `${breakpoint.dimensions.height}px`,
      margin: '0 auto',
      overflow: 'auto'
    };
  }, []);

  // Set up resize listener
  useEffect(() => {
    window.addEventListener('resize', handleResize);
    return () => { 
      window.removeEventListener('resize', handleResize); 
    };
  }, [handleResize]);

  return {
    // State
    isResizing,
    currentDimensions,
    
    // Computed values
    currentBreakpoint: VIEWPORT_BREAKPOINTS[viewport],
    viewportCSS: getViewportCSS(viewport),
    
    // Actions
    setViewportWithDimensions,
    autoDetectViewport,
    resetToFull,
    getViewportDimensions,
    getViewportBreakpoint,
  };
};

/**
 * Hook for viewport persistence
 */
export const useViewportPersistence = () => {
  const { viewport } = useViewportStore();
  const { setViewportWithDimensions } = useViewportAsync();

  // Load saved viewport on mount
  useEffect(() => {
    const savedViewport = localStorage.getItem('devViewport') as Viewport | null;
    if (savedViewport && savedViewport !== viewport) {
      setViewportWithDimensions(savedViewport);
    }
  }, [viewport, setViewportWithDimensions]);

  return {
    currentViewport: viewport,
  };
};


============================
FILE: frontend\src\features\devPreview\index.ts
============================
// Dev-only viewport tooling for testing responsive layouts
export { ViewportFrame } from './components/ViewportFrame';
export { ViewportSwitcher } from './components/ViewportSwitcher';
export type { Viewport } from './state/viewportStore';
export { useViewportStore } from './state/viewportStore';



============================
FILE: frontend\src\features\devPreview\state\viewportStore.ts
============================
import { create } from 'zustand';

export type Viewport = 'desktop' | 'tablet' | 'mobile' | 'full';

type State = {
  viewport: Viewport;
  setViewport: (v: Viewport) => void;
};

const KEY = 'devViewport';

export const useViewportStore = create<State>((set) => ({
  viewport: (localStorage.getItem(KEY) as Viewport | null) ?? 'full',
  setViewport: (v) => {
    localStorage.setItem(KEY, v);
    set({ viewport: v });
  },
}));



============================
FILE: frontend\src\features\faq\components\FAQ.tsx
============================
import React, { useState } from 'react';

import { useFAQContent,useRotatingBackground } from '@/features/faq/hooks';
import { getImageOpacityClasses, getTransitionStyles } from '@/shared/utils';

import FAQCategoryFilter from './FAQCategoryFilter';
import FAQEmptyState from './FAQEmptyState';
import FAQList from './FAQList';
import FAQSearchBar from './FAQSearchBar';

interface FAQProps {
  locationData?: {
    faqIntro?: string;
    city?: string;
    faqs?: Array<{ q: string; a: string }>;
  };
}

const FAQ: React.FC<FAQProps> = ({ locationData }) => {
  const [selectedCategory, setSelectedCategory] = useState('Services');
  const [expandedFaq, setExpandedFaq] = useState<string | number | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  
  // Get FAQ content from database (with fallbacks)
  const { faqTitle, faqSubtitle, faqItems, categories } = useFAQContent({ locationData });
  
  // Rotating background
  const { images, currentIndex, loading: backgroundLoading } = useRotatingBackground();

  // Filter FAQs based on category and search
  const filteredFaqs = faqItems.filter(faq => {
    const matchesCategory = selectedCategory === 'All' || faq.category === selectedCategory;
    const matchesSearch = faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         faq.answer.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  const toggleFaq = (id: string | number) => {
    setExpandedFaq(expandedFaq === id ? null : id);
  };

  return (
    <section id="faq" className="relative h-screen snap-start snap-always overflow-hidden">
      {/* Rotating Background Images with Overlay */}
      <div className="absolute inset-0 z-0">
        {/* Render all images to test if performance optimization causes the pop */}
        {images.map((image, index) => {
          return (
            <img
              key={image.id}
              src={image.src}
              alt={image.alt || `FAQ background image ${String(index + 1)}`}
              className={`absolute inset-0 w-full h-full object-cover ${getImageOpacityClasses(index, currentIndex, 2000)}`}
              style={getTransitionStyles(2000)}
              decoding={index === 0 ? 'sync' : 'async'}
              loading={index === 0 ? 'eager' : 'lazy'}
            />
          );
        })}
        
        {/* Fallback background if no images loaded */}
        {!images.length && !backgroundLoading && (
          <div
            className="absolute inset-0"
            style={{
              backgroundImage: 'url(/images/gallery/dodge-viper-gts-grigio-telesto-studio.png)',
              backgroundSize: 'cover',
              backgroundPosition: 'center',
              backgroundAttachment: 'fixed'
            }}
          />
        )}
        
        {/* Dark overlay */}
        <div className="absolute inset-0 bg-stone-900/85"></div>
      </div>

      {/* Content */}
      <div className="relative z-10 h-full overflow-y-auto pt-[72px] md:pt-[88px]">
        <div className="max-w-6xl mx-auto w-full px-4 py-8">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-4xl md:text-5xl font-bold text-white mb-3 drop-shadow-lg">
              {faqTitle}
            </h1>
            <p className="text-stone-200 text-lg max-w-2xl mx-auto drop-shadow-md">
              {faqSubtitle}
            </p>
          </div>

          {/* Search and Filter Controls */}
          <div className="mb-8">
            <FAQSearchBar 
              searchTerm={searchTerm}
              onSearchChange={setSearchTerm}
            />

            <FAQCategoryFilter
              selectedCategory={selectedCategory}
              onCategoryChange={setSelectedCategory}
              categories={categories}
            />
          </div>

          {/* FAQ Content */}
          <div className="max-w-4xl mx-auto">
            {filteredFaqs.length === 0 ? (
              <FAQEmptyState />
            ) : (
              <FAQList
                faqs={filteredFaqs}
                expandedFaq={expandedFaq}
                onToggleFaq={toggleFaq}
              />
            )}
          </div>
        </div>
      </div>
    </section>
  );
};

/* eslint-disable react-refresh/only-export-components -- Both named and default export needed for compatibility */
export { FAQ };
export default FAQ;
/* eslint-enable react-refresh/only-export-components -- End of multi-export section */


============================
FILE: frontend\src\features\faq\components\FAQCategoryFilter.tsx
============================
import React from 'react';
import { Car, CreditCard, MapPin,Settings, Shield } from 'lucide-react';

import { FilterChip } from '@/shared/ui';

interface FAQCategoryFilterProps {
  selectedCategory: string;
  onCategoryChange: (category: string) => void;
  categories: string[];
}

const categoryIcons: Record<string, React.ComponentType<{ className?: string }>> = {
  All: Car,
  General: Car,
  Services: Car,
  Scheduling: Settings,
  Pricing: CreditCard,
  Preparation: Shield,
  RV: Car,
  Locations: MapPin,
  Payments: CreditCard,
  Warranty: Shield,
  Aftercare: Shield,
};

const FAQCategoryFilter: React.FC<FAQCategoryFilterProps> = ({ 
  selectedCategory, 
  onCategoryChange,
  categories
}) => {
  const renderChip = (categoryName: string) => {
    const isSelected = selectedCategory === categoryName;
    const IconComponent = categoryIcons[categoryName] || MapPin;
    
    return (
      <FilterChip
        key={categoryName}
        onClick={() => {
          onCategoryChange(categoryName);
        }}
        isSelected={isSelected}
        icon={IconComponent}
        className="transform hover:scale-105 backdrop-blur-sm text-sm md:text-base"
      >
        {categoryName}
      </FilterChip>
    );
  };
  
  return (
    <div className="flex flex-wrap justify-center gap-2 md:gap-3 max-w-3xl mx-auto">
      {categories.map(renderChip)}
    </div>
  );
};

export default FAQCategoryFilter;


============================
FILE: frontend\src\features\faq\components\FAQEmptyState.tsx
============================
import React from 'react';
import { Search } from 'lucide-react';

const FAQEmptyState: React.FC = () => {
  return (
    <div className="text-center py-12">
      <div className="bg-stone-800/80 backdrop-blur-sm rounded-lg p-8 border border-stone-700/50 shadow-xl">
        <Search className="h-12 w-12 text-stone-400 mx-auto mb-4" />
        <h3 className="text-xl font-semibold text-white mb-2">No FAQs Found</h3>
        <p className="text-stone-400">
          Try adjusting your search or selecting a different category.
        </p>
      </div>
    </div>
  );
};

export default FAQEmptyState;


============================
FILE: frontend\src\features\faq\components\FAQItem.tsx
============================
import React from 'react';
import { ChevronDown } from 'lucide-react';

import type { FAQItem as FAQItemType } from '@/features/faq/types';

import ServiceAreasLink from './ServiceAreasLink';

interface FAQItemProps {
  faq: FAQItemType;
  isExpanded: boolean;
  onToggle: () => void;
}

const FAQItem: React.FC<FAQItemProps> = ({ faq, isExpanded, onToggle }) => {
  const handleToggle = () => {
    // Analytics tracking for FAQ interactions
    if (faq.id && !isExpanded) {
      // Track FAQ expansion for analytics and A/B testing
      if (typeof window !== 'undefined' && window.gtag) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call -- gtag is from external Google Analytics script
        window.gtag('event', 'faq_expanded', {
          faq_id: faq.id,
          faq_question: faq.question,
          faq_category: faq.category
        });
      }
    }
    onToggle();
  };

  return (
    <div 
      className="bg-stone-800/80 backdrop-blur-sm rounded-lg border border-stone-700/50 overflow-hidden hover:shadow-xl hover:shadow-black/30 transition-all duration-300 h-fit"
      data-faq-id={faq.id}
      data-faq-category={faq.category}
    >
      <button
        onClick={handleToggle}
        className="w-full px-4 py-4 text-left flex justify-between items-start hover:bg-stone-700/40 transition-colors duration-200 group"
      >
        <div className="flex-1 pr-2">
          <h3 className="text-white font-semibold text-base group-hover:text-orange-400 transition-colors duration-200 leading-tight">
            {faq.question}
          </h3>
        </div>
        <ChevronDown
          className={`h-4 w-4 text-stone-400 transition-transform duration-200 flex-shrink-0 mt-1 ${
            isExpanded ? 'rotate-180 text-orange-400' : ''
          }`}
        />
      </button>
      
      <div
        className={`overflow-hidden transition-all duration-300 ease-in-out ${
          isExpanded ? 'max-h-48 opacity-100' : 'max-h-0 opacity-0'
        }`}
      >
        <div className="px-4 pb-4 border-t border-stone-700/30">
          <div className="pt-3">
            <div className="text-stone-300 text-sm leading-relaxed">
              {faq.question === 'What areas do you service?' ? (
                <>
                  {faq.answer.split('We proudly serve')[0]}
                  We proudly serve{' '}
                  <ServiceAreasLink>our service areas</ServiceAreasLink>
                  {faq.answer.includes('We proudly serve.') 
                    ? faq.answer.split('We proudly serve.')[1]
                    : faq.answer.split('We proudly serve')[1] || ''}
                </>
              ) : (
                faq.answer
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FAQItem;


============================
FILE: frontend\src\features\faq\components\FAQList.tsx
============================
import React from 'react';

import type { FAQItem as FAQItemType } from '@/features/faq/types';

import FAQItem from './FAQItem';

interface FAQListProps {
  faqs: FAQItemType[];
  expandedFaq: number | string | null;
  onToggleFaq: (id: number | string) => void;
}

const FAQList: React.FC<FAQListProps> = ({ faqs, expandedFaq, onToggleFaq }) => {
  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-5 lg:gap-6">
      {faqs.map((faq, index) => {
        // Use id if available, otherwise fall back to question or index
        const key = faq.id ?? `faq-${String(index)}`;
        return (
          <FAQItem
            key={key}
            faq={faq}
            isExpanded={expandedFaq === key}
            onToggle={() => {
              onToggleFaq(key);
            }}
          />
        );
      })}
    </div>
  );
};

export default FAQList;


============================
FILE: frontend\src\features\faq\components\FAQSearchBar.tsx
============================
import React from 'react';
import { Search } from 'lucide-react';

interface FAQSearchBarProps {
  searchTerm: string;
  onSearchChange: (term: string) => void;
}

const FAQSearchBar: React.FC<FAQSearchBarProps> = ({ searchTerm, onSearchChange }) => {
  return (
    <div className="relative max-w-md mx-auto mb-6">
      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-stone-400 h-5 w-5" />
      <input
        type="text"
        placeholder="Search FAQs..."
        value={searchTerm}
        onChange={(e) => {
          onSearchChange(e.target.value);
        }}
        className="w-full pl-10 pr-4 py-3 bg-stone-800/80 backdrop-blur-sm border border-stone-600/50 rounded-lg text-white placeholder-stone-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200 shadow-lg"
      />
    </div>
  );
};

export default FAQSearchBar;


============================
FILE: frontend\src\features\faq\components\ServiceAreasLink.tsx
============================
import React, { useState } from 'react';

import { useData } from '@/shared/hooks/useData';
import ServiceAreasModal from '@/shared/ui/modals/ServiceAreasModal';

interface ServiceAreasLinkProps {
  children?: React.ReactNode;
  className?: string;
}

const ServiceAreasLink: React.FC<ServiceAreasLinkProps> = ({ 
  children = 'view our service areas',
  className = ''
}) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  
  // Get tenant data for service areas - hooks must be called unconditionally
  const tenantData = useData();

  // If no service areas, just render as plain text
  if (tenantData.serviceAreas.length === 0) {
    return <span>{children}</span>;
  }

  return (
    <>
      <button
        onClick={() => {
          setIsModalOpen(true);
        }}
        className={`text-orange-400 hover:text-orange-300 underline transition-colors cursor-pointer bg-transparent border-none p-0 font-inherit ${className}`}
      >
        {children}
      </button>
      
      <ServiceAreasModal
        isOpen={isModalOpen}
        onClose={() => {
          setIsModalOpen(false);
        }}
        serviceAreas={tenantData.serviceAreas}
        businessName={tenantData.businessName}
      />
    </>
  );
};

export default ServiceAreasLink;



============================
FILE: frontend\src\features\faq\hooks\index.ts
============================
export { useFAQContent } from './useFAQContent';
export { useFAQData } from './useFAQData';
export { useRotatingBackground } from './useRotatingBackground';


============================
FILE: frontend\src\features\faq\hooks\useFAQContent.ts
============================
import { useMemo } from 'react';

import { useWebsiteContent } from '@/shared/contexts/WebsiteContentContext';
import { useIndustrySiteData } from '@/shared/hooks/useIndustrySiteData';

import type { FAQItem as BaseFAQItem } from '../types';
import { useFAQData } from './useFAQData';

// Extended FAQ Item that allows any category string
export interface FAQItem extends Omit<BaseFAQItem, 'category'> {
  category: string;
}

interface UseFAQContentReturn {
  faqTitle: string;
  faqSubtitle: string;
  faqItems: FAQItem[];
  categories: string[];
}

interface UseFAQContentProps {
  locationData?: {
    faqIntro?: string;
    city?: string;
    faqs?: Array<{ q: string; a: string }>;
  };
}

export const useFAQContent = (props?: UseFAQContentProps): UseFAQContentReturn => {
  // Get industry-specific site data
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- siteData is dynamically imported JSON
  const { siteData } = useIndustrySiteData();
  const locationData = props?.locationData;
  
  // Get website content - hooks must be called unconditionally
  const { content: websiteContent } = useWebsiteContent();
  
  // Get industry-specific FAQ items
  const { faqData: industryFAQs } = useFAQData();
  
  // Get FAQ title and subtitle from database or industry-specific fallbacks
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- siteData is dynamically imported JSON
  const faqTitle = websiteContent?.faq_title 
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- siteData is dynamically imported JSON
    ?? siteData?.faq?.title 
    ?? 'Frequently Asked Questions';
    
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- siteData is dynamically imported JSON
  const faqSubtitle = websiteContent?.faq_subtitle 
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- siteData is dynamically imported JSON
    ?? siteData?.faq?.subtitle 
    ?? locationData?.faqIntro 
    ?? 'Find answers to common questions about our services';
  
  // Get FAQ items from database or fallback to industry-specific FAQs
  const databaseFAQs: FAQItem[] = useMemo(() => {
    if (!websiteContent?.faq_items || !Array.isArray(websiteContent.faq_items)) {
      return [];
    }
    
    return websiteContent.faq_items.map((faq, index) => ({
      id: `db-${String(index)}`,
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- faq properties from database might be null
      question: String(faq.question ?? ''),
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- faq properties from database might be null
      answer: String(faq.answer ?? ''),
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- faq properties from database might be null
      category: String(faq.category ?? 'General')
    }));
  }, [websiteContent?.faq_items]);
  
  // Convert location FAQs to FAQItem format if available
  const locationFAQs: FAQItem[] = useMemo(() => {
    if (!locationData?.faqs) return [];
    
    return locationData.faqs.map((faq, index) => ({
      id: `location-${String(index)}`,
      question: faq.q,
      answer: faq.a,
      category: locationData.city ?? 'Location'
    }));
  }, [locationData]);
  
  // Priority: Database FAQs > Industry FAQs > Location FAQs
  const faqItems = useMemo(() => {
    if (databaseFAQs.length > 0) {
      // Use ONLY database FAQs (tenant has customized)
      return [...databaseFAQs, ...locationFAQs];
    }
    // Fallback to industry-specific FAQs if no database FAQs
    return [...industryFAQs, ...locationFAQs];
  }, [databaseFAQs, industryFAQs, locationFAQs]);
  
  // Extract unique categories
  const categories = useMemo(() => {
    const uniqueCategories = Array.from(new Set(faqItems.map(faq => faq.category)));
    return ['All', ...uniqueCategories];
  }, [faqItems]);

  return {
    faqTitle: String(faqTitle),
    faqSubtitle: String(faqSubtitle),
    faqItems,
    categories
  };
};


============================
FILE: frontend\src\features\faq\hooks\useFAQData.ts
============================
import { useEffect, useState } from 'react';

import { useData } from '@/shared/hooks';

import type { FAQItem } from '../types';
import { loadIndustryFAQs } from '../utils';

export const useFAQData = () => {
  const [openItems, setOpenItems] = useState<Set<string>>(new Set());
  const [faqData, setFaqData] = useState<FAQItem[]>([]);
  const { industry } = useData();

  // Load industry-specific FAQs
  useEffect(() => {
    if (!industry) return;
    
    loadIndustryFAQs(industry)
      .then(setFaqData)
      .catch((error: unknown) => {
        console.error('Failed to load FAQs:', error);
        setFaqData([]);
      });
  }, [industry]);

  const toggleItem = (question: string) => {
    setOpenItems(prev => {
      const newSet = new Set(prev);
      if (newSet.has(question)) {
        newSet.delete(question);
      } else {
        newSet.add(question);
      }
      return newSet;
    });
  };

  const resetState = () => {
    setOpenItems(new Set());
  };

  return {
    faqData,
    openItems,
    toggleItem,
    resetState,
  };
};


============================
FILE: frontend\src\features\faq\hooks\useRotatingBackground.ts
============================
import { useEffect, useState } from 'react';

import { useImageRotation } from '@/shared/hooks';
import { GalleryImage } from '@/shared/types';

// Fisher-Yates shuffle algorithm
function shuffleArray<T>(array: T[]): T[] {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    const temp = shuffled[i];
    const itemAtJ = shuffled[j];
    if (temp !== undefined && itemAtJ !== undefined) {
      shuffled[i] = itemAtJ;
      shuffled[j] = temp;
    }
  }
  return shuffled;
}

export function useRotatingBackground() {
  const [galleryImages, setGalleryImages] = useState<GalleryImage[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Load gallery data
  useEffect(() => {
    let cancelled = false;
    void (async () => {
      try {
        const res = await fetch('/mobile-detailing/data/gallery.json');
        if (!res.ok) throw new Error(`Failed to fetch gallery data: ${String(res.status)}`);
        const data = await res.json() as GalleryImage[];

        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- cancelled flag is set in cleanup
        if (cancelled) return;

        // Shuffle the images for random order
        const shuffledData = shuffleArray(data);
        setGalleryImages(shuffledData);
        setLoading(false);
        setError(null);
      } catch (err) {
        setLoading(false);
        setError(err instanceof Error ? err.message : 'Failed to load gallery data');
      }
    })();

    return () => {
      cancelled = true;
    };
  }, []);

  // Extract image URLs for the rotation utility
  const imageUrls = galleryImages.map(img => img.src);

  // Use the new image rotation utility
  const rotation = useImageRotation({
    images: imageUrls,
    autoRotate: true,
    interval: 7000, // 7 seconds to match original
    fadeDuration: 2000, // 2 seconds fade duration
    preloadNext: true,
    pauseOnHover: false // Background doesn't need hover pause
  });

  const { currentIndex, hasMultipleImages } = rotation;

  return {
    images: galleryImages,
    currentIndex,
    loading,
    error,
    hasMultipleImages
  };
}


============================
FILE: frontend\src\features\faq\index.ts
============================
// Feature barrel - exports components only
// This file re-exports from components/ to maintain the feature capsule pattern

export { default as FAQ } from './components/FAQ';
export { default as FAQCategoryFilter } from './components/FAQCategoryFilter';
export { default as FAQEmptyState } from './components/FAQEmptyState';
export { default as FAQItem } from './components/FAQItem';
export { default as FAQList } from './components/FAQList';
export { default as FAQSearchBar } from './components/FAQSearchBar';
export { default as ServiceAreasLink } from './components/ServiceAreasLink';


============================
FILE: frontend\src\features\faq\types\index.ts
============================
import React from 'react';

// FAQ Types based on legacy structure
export type FAQCategory =
  | "General"
  | "Services"
  | "Scheduling"
  | "Pricing"
  | "Preparation"
  | "Aftercare"
  | "RV"
  | "Marine"
  | "Locations"
  | "Payments"
  | "Warranty"
  | "Location Specific";

export type ServiceTag =
  | "Auto"
  | "Marine"
  | "RV"
  | "Motorcycle"
  | "Paint Correction"
  | "Ceramic Coating"
  | "Paint Protection Film"
  | "Odor Removal";

export interface FAQItem {
  id?: string; // for analytics and A/B testing
  question: string;
  answer: string;
  category: FAQCategory;
  services?: ServiceTag[];
}

export interface FAQCategoryData {
  id: string;
  title: FAQCategory;
  icon: React.ComponentType<Record<string, unknown>>;
  questions: FAQItem[];
}

export interface FAQItemWithIndex extends FAQItem {
  originalIndex: number;
}

export interface FAQProps {
  autoExpand?: boolean;
  customFAQs?: Array<{ id?: string; q: string; a: string }>;
  customFAQIntro?: string;
}

export interface FAQRef {
  expand: () => void;
}

export interface GeoConfig {
  business?: {
    city?: string;
    locality?: string;
    state?: string;
    region?: string;
  };
}

export interface GroupedFAQs {
  [category: string]: FAQItem[];
}

export interface FAQState {
  openItems: Set<string>;
  toggleItem: (id: string) => void;
  resetState: () => void;
}

export interface FAQEffects {
  faqData: FAQItem[];
  isExpanded: boolean;
  resetState: () => void;
  setIsExpanded: (expanded: boolean) => void;
}


============================
FILE: frontend\src\features\faq\utils\index.ts
============================
/**
 * FAQ Data Loader
 * 
 * Re-exports loadIndustryFAQs from shared utils to maintain backward compatibility
 */

export { loadIndustryFAQs } from '@/shared/utils/faqLoader';


============================
FILE: frontend\src\features\footer\components\ContactColumn.tsx
============================
import React from 'react';
import { Mail, MapPin, Phone } from 'lucide-react';

interface ContactColumnProps {
  config?: {
    phone?: string;
    email?: string;
    base_location?: {
      city?: string;
      state_name?: string;
    };
  };
  onRequestQuote?: () => void;
}

const ContactColumn: React.FC<ContactColumnProps> = ({ 
  config, 
  onRequestQuote 
}) => {
  const contactInfo = {
    phone: config?.phone ?? '(555) 123-4567',
    email: config?.email ?? 'hello@thatsmartsite.com',
    location: config?.base_location?.city && config.base_location.state_name 
      ? `${config.base_location.city}, ${config.base_location.state_name}`
      : 'Select Location'
  };

  return (
    <div className="text-center md:text-left">
      <h3 className="font-bold text-orange-400 text-xl mb-6">Get in Touch</h3>
      <div className="flex flex-col space-y-3">
        <div className="flex items-center justify-center md:justify-start space-x-3">
          <Phone className="h-5 w-5 flex-shrink-0 text-orange-400" />
          <a 
            href={`tel:${contactInfo.phone}`}
            className="text-lg text-white hover:text-orange-400 transition-colors duration-200"
          >
            {contactInfo.phone}
          </a>
        </div>
        <div className="flex items-center justify-center md:justify-start space-x-3">
          <Mail className="h-5 w-5 flex-shrink-0 text-orange-400" />
          <button
            onClick={onRequestQuote}
            className="text-lg text-white hover:text-orange-400 transition-colors duration-200 bg-transparent border-none p-0 font-inherit cursor-pointer text-left"
          >
            {contactInfo.email}
          </button>
        </div>
        <div className="flex items-center justify-center md:justify-start space-x-3">
          <MapPin className="h-5 w-5 flex-shrink-0 text-orange-400" />
          <span className="text-lg text-white">
            {contactInfo.location}
          </span>
        </div>
      </div>
    </div>
  );
};

export default ContactColumn;


============================
FILE: frontend\src\features\footer\components\Disclaimer.tsx
============================
import React from 'react';

interface DisclaimerProps {
  businessInfo: {
    name: string;
  };
}

const Disclaimer: React.FC<DisclaimerProps> = ({ businessInfo }) => {
  return (
    <div className="border-t border-stone-600 pt-4 md:pt-8">
      <div className="flex justify-center">
        <div className="text-center">
          <p className="text-gray-300 text-sm md:text-base">
            © 2024 {businessInfo.name}. All rights reserved.
          </p>
        </div>
      </div>
    </div>
  );
};

export default Disclaimer;


============================
FILE: frontend\src\features\footer\components\FollowUs.tsx
============================
import React from 'react';
import { SiFacebook, SiInstagram, SiTiktok, SiYoutube } from 'react-icons/si';

import { useData } from '@/shared/hooks/useData';

interface FollowUsProps {
  socialMedia?: {
    facebook?: string;
    instagram?: string;
    tiktok?: string;
    youtube?: string;
  };
}

const FollowUs: React.FC<FollowUsProps> = ({ socialMedia }) => {
  const { isPreview } = useData();
  
  const socialLinks = [
    {
      platform: 'Facebook',
      url: socialMedia?.facebook,
      icon: SiFacebook,
      label: 'Facebook'
    },
    {
      platform: 'Instagram',
      url: socialMedia?.instagram,
      icon: SiInstagram,
      label: 'Instagram'
    },
    {
      platform: 'TikTok',
      url: socialMedia?.tiktok,
      icon: SiTiktok,
      label: 'TikTok'
    },
    {
      platform: 'YouTube',
      url: socialMedia?.youtube,
      icon: SiYoutube,
      label: 'YouTube'
    }
  ];

  const visibleLinks = socialLinks.filter(link => link.url !== undefined); // Show if URL field exists (even if empty)

  return (
    <div className="text-center">
      <h3 className="font-bold text-orange-400 text-xl mb-6">Follow Us</h3>
      <div className="inline-flex flex-col space-y-3 items-start">
        {visibleLinks.map(({ platform, url, icon: Icon, label }) => {
          const hasUrl = url && url.trim() !== '';
          
          // In preview mode, render as span instead of link
          if (isPreview) {
            return (
              <span
                key={platform}
                className="text-white hover:text-orange-400 transition-colors duration-200 flex items-center space-x-2 md:space-x-3 cursor-pointer"
                title="Social media links available in your live site"
              >
                <Icon className="h-4 w-4 md:h-5 md:w-5 flex-shrink-0" />
                <span className="text-sm md:text-lg">{label}</span>
              </span>
            );
          }
          
          // If no URL, render as span (non-clickable)
          if (!hasUrl) {
            return (
              <span
                key={platform}
                className="text-white hover:text-orange-400 transition-colors duration-200 flex items-center space-x-2 md:space-x-3 cursor-pointer"
                title="Social media link not configured"
              >
                <Icon className="h-4 w-4 md:h-5 md:w-5 flex-shrink-0" />
                <span className="text-sm md:text-lg">{label}</span>
              </span>
            );
          }
          
          // If has URL, render as clickable link
          return (
            <a 
              key={platform}
              href={url} 
              target="_blank" 
              rel="noopener noreferrer" 
              className="text-white hover:text-orange-400 transition-colors duration-200 flex items-center space-x-3"
            >
              <Icon className="h-5 w-5 flex-shrink-0" />
              <span className="text-lg">{label}</span>
            </a>
          );
        })}
      </div>
    </div>
  );
};

export default FollowUs;


============================
FILE: frontend\src\features\footer\components\Footer.tsx
============================
import React from 'react';

import { useData } from '@/shared/hooks/useData';
import CTAButtons from '@/shared/ui/buttons/CTAButtons';
import FooterLocations from '@/shared/ui/navigation/FooterLocations';
import { formatPhoneNumber } from '@/shared/utils/phoneFormatter';

import Disclaimer from './Disclaimer';
import FollowUs from './FollowUs';
import GetInTouch from './GetInTouch';

interface FooterProps {
  onRequestQuote?: () => void;
}

const Footer: React.FC<FooterProps> = ({ onRequestQuote }) => {
  const tenantData = useData();
  
  // All sites are now tenant-based, so use tenant data
  const config = {
    phone: formatPhoneNumber(tenantData.phone),
    email: tenantData.email,
    base_location: {
      city: tenantData.location.split(', ')[0] ?? '',
      state_name: tenantData.location.split(', ')[1] ?? ''
    }
  };

  // Use tenant social media
  const socialMedia = {
    facebook: tenantData.socialMedia.facebook,
    instagram: tenantData.socialMedia.instagram,
    tiktok: tenantData.socialMedia.tiktok,
    youtube: tenantData.socialMedia.youtube
  };

  const businessInfo = {
    name: tenantData.businessName
  };


  return (
    <div className="max-w-6xl mx-auto w-full px-4 md:px-6 lg:px-8">
      {/* Mobile Layout: Vertical stack */}
      <div className="md:hidden space-y-6 mb-6">
        <GetInTouch 
          config={config}
          onRequestQuote={onRequestQuote || (() => {})}
          showLocationSetter={false}
        />
        <FollowUs socialMedia={socialMedia} />
        <FooterLocations serviceAreas={tenantData.serviceAreas} />
      </div>

      {/* Desktop Layout: 3 equal columns */}
      <div className="hidden md:grid md:grid-cols-3 gap-6 md:gap-7 lg:gap-8 mb-6 md:mb-7 lg:mb-8">
        <GetInTouch 
          config={config}
          onRequestQuote={onRequestQuote || (() => {})}
          showLocationSetter={false}
        />
        <FollowUs socialMedia={socialMedia} />
        <FooterLocations serviceAreas={tenantData.serviceAreas} />
      </div>
      
      {/* CTA Buttons - Centered above line break */}
      <div className="flex justify-center mb-4 md:mb-8">
        <CTAButtons 
          getQuoteProps={{ onClick: onRequestQuote }}
          bookNowProps={{ size: 'md' }}
        />
      </div>
      
      {/* Footer Bottom */}
      <Disclaimer 
        businessInfo={businessInfo}
      />
    </div>
  );
};

export default Footer;


============================
FILE: frontend\src\features\footer\components\FooterBottom.tsx
============================
import React from 'react';

interface FooterBottomProps {
  businessInfo: {
    name: string;
  };
  onRequestQuote?: () => void;
}

const FooterBottom: React.FC<FooterBottomProps> = ({ businessInfo, onRequestQuote }) => {
  return (
    <div className="border-t border-stone-600 pt-8">
      <div className="flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0">
        <div className="text-center md:text-left">
          <p className="text-gray-300 text-base">
            © 2024 {businessInfo.name}. All rights reserved.
          </p>
        </div>
        <div className="text-center md:text-right">
          <button
            onClick={onRequestQuote}
            className="bg-orange-500 hover:bg-orange-600 text-white font-semibold px-6 py-3 rounded-lg transition-colors duration-200"
          >
            Get Quote
          </button>
        </div>
      </div>
    </div>
  );
};

export default FooterBottom;


============================
FILE: frontend\src\features\footer\components\GetInTouch.tsx
============================
import React from 'react';
import { Mail, MapPin, Phone } from 'lucide-react';

interface GetInTouchProps {
  config?: {
    phone?: string;
    email?: string;
    base_location?: {
      city?: string;
      state_name?: string;
    };
  };
  onRequestQuote?: () => void;
  showLocationSetter?: boolean;
}

const GetInTouch: React.FC<GetInTouchProps> = ({ 
  config, 
  onRequestQuote,
  showLocationSetter = false
}) => {
  const contactInfo = {
    phone: config?.phone ?? '(555) 123-4567',
    email: config?.email ?? 'hello@thatsmartsite.com',
    location: config?.base_location?.city && config.base_location.state_name 
      ? `${config.base_location.city}, ${config.base_location.state_name}`
      : null // Don't show location for main site
  };

  return (
    <div className="text-center md:text-left">
      <h3 className="font-bold text-orange-400 text-xl mb-6">Get in Touch</h3>
      <div className="flex flex-col space-y-3">
        <div className="flex items-center justify-center md:justify-start space-x-3">
          <Phone className="h-5 w-5 flex-shrink-0 text-orange-400" />
          <a 
            href={`tel:${contactInfo.phone}`}
            className="text-lg text-white hover:text-orange-400 transition-colors duration-200"
          >
            {contactInfo.phone}
          </a>
        </div>
        <div className="flex items-center justify-center md:justify-start space-x-3">
          <Mail className="h-5 w-5 flex-shrink-0 text-orange-400" />
          <button
            onClick={onRequestQuote}
            className="text-lg text-white hover:text-orange-400 transition-colors duration-200 bg-transparent border-none p-0 font-inherit cursor-pointer text-left"
          >
            {contactInfo.email}
          </button>
        </div>
        {contactInfo.location && (
          <div className="hidden md:flex items-center justify-center md:justify-start space-x-3">
            <MapPin className="h-5 w-5 flex-shrink-0 text-orange-400" />
            <span className="text-lg text-white">
              {contactInfo.location}
            </span>
          </div>
        )}
        {showLocationSetter && !contactInfo.location && (
          <div className="flex items-center justify-center md:justify-start space-x-3">
            <MapPin className="h-5 w-5 flex-shrink-0 text-orange-400" />
            <a 
              href="/locations" 
              className="text-lg text-orange-400 hover:text-orange-300 transition-colors duration-200"
            >
              Set Your Location
            </a>
          </div>
        )}
      </div>
    </div>
  );
};

export default GetInTouch;


============================
FILE: frontend\src\features\footer\components\ServiceAreas.tsx
============================
import React from 'react';

interface ServiceAreasProps {
  serviceAreas?: Array<{
    city: string;
    state: string;
    primary?: boolean;
  }>;
  onServiceAreaClick?: (city: string, state: string) => void;
}

const ServiceAreas: React.FC<ServiceAreasProps> = ({ 
  serviceAreas = [],
  onServiceAreaClick 
}) => {
  // Default states list if no service areas provided
  const defaultStates = [
    'California',
    'Texas', 
    'Florida',
    'New York',
    'Illinois',
    'Pennsylvania',
    'Ohio',
    'Georgia',
    'North Carolina',
    'Michigan'
  ];

  const displayItems = serviceAreas.length > 0 ? serviceAreas : defaultStates.map(state => ({ city: '', state }));

  return (
    <div className="text-center md:text-right">
      <h3 className="font-bold text-orange-400 text-xl mb-6">Service Areas</h3>
      <div className="space-y-1">
        {displayItems.map((item, index) => {
          const displayText = item.city ? `${item.city}, ${item.state}` : item.state;
          
          return (
            <button 
              key={`${item.city}-${item.state}-${String(index)}`}
              type="button"
              className={`text-lg cursor-pointer transition-colors duration-200 hover:text-orange-400 block w-full text-center md:text-right bg-transparent border-none p-0 font-inherit ${
                item.primary === true ? 'text-orange-400 font-semibold' : 'text-white'
              }`}
              onClick={() => {
                if (onServiceAreaClick && item.city) {
                  onServiceAreaClick(item.city, item.state);
                }
              }}
            >
              {displayText}
            </button>
          );
        })}
      </div>
    </div>
  );
};

export default ServiceAreas;


============================
FILE: frontend\src\features\footer\components\ServiceAreasColumn.tsx
============================
import React from 'react';

interface ServiceAreasColumnProps {
  serviceAreas?: Array<{
    city: string;
    state: string;
    primary?: boolean;
  }>;
  onServiceAreaClick?: (city: string, state: string) => void;
}

const ServiceAreasColumn: React.FC<ServiceAreasColumnProps> = ({ 
  serviceAreas = [],
  onServiceAreaClick 
}) => {
  // Default states list if no service areas provided
  const defaultStates = [
    'California',
    'Texas', 
    'Florida',
    'New York',
    'Illinois',
    'Pennsylvania',
    'Ohio',
    'Georgia',
    'North Carolina',
    'Michigan'
  ];

  const displayItems = serviceAreas.length > 0 ? serviceAreas : defaultStates.map(state => ({ city: '', state }));

  return (
    <div className="text-center md:text-right">
      <h3 className="font-bold text-orange-400 text-xl mb-6">Service Areas</h3>
      <div className="space-y-1">
        {displayItems.map((item, index) => {
          const displayText = item.city ? `${item.city}, ${item.state}` : item.state;
          
          return (
            <button 
              key={`${item.city}-${item.state}-${String(index)}`}
              type="button"
              className={`text-lg cursor-pointer transition-colors duration-200 hover:text-orange-400 block w-full text-center md:text-right bg-transparent border-none p-0 font-inherit ${
                item.primary === true ? 'text-orange-400 font-semibold' : 'text-white'
              }`}
              onClick={() => {
                if (onServiceAreaClick && item.city) {
                  onServiceAreaClick(item.city, item.state);
                }
              }}
            >
              {displayText}
            </button>
          );
        })}
      </div>
    </div>
  );
};

export default ServiceAreasColumn;


============================
FILE: frontend\src\features\footer\components\SocialMediaColumn.tsx
============================
import React from 'react';
import { SiFacebook, SiInstagram, SiYoutube } from 'react-icons/si';

interface SocialMediaColumnProps {
  socialMedia?: {
    facebook?: string;
    instagram?: string;
    tiktok?: string;
    youtube?: string;
  };
}

const SocialMediaColumn: React.FC<SocialMediaColumnProps> = ({ socialMedia }) => {
  const socialLinks = [
    {
      platform: 'Facebook',
      url: socialMedia?.facebook,
      icon: SiFacebook,
      label: 'Facebook'
    },
    {
      platform: 'Instagram',
      url: socialMedia?.instagram,
      icon: SiInstagram,
      label: 'Instagram'
    },
    {
      platform: 'YouTube',
      url: socialMedia?.youtube,
      icon: SiYoutube,
      label: 'YouTube'
    }
  ];

  const visibleLinks = socialLinks.filter(link => link.url !== undefined); // Show if URL field exists (even if empty)

  return (
    <div className="text-center">
      <h3 className="font-bold text-orange-400 text-xl mb-6">Follow Us</h3>
      <div className="inline-flex flex-col space-y-3 items-start">
        {visibleLinks.map(({ platform, url, icon: Icon, label }) => {
          const hasUrl = url && url.trim() !== '';
          
          // If no URL, render as span (non-clickable)
          if (!hasUrl) {
            return (
              <span
                key={platform}
                className="text-white hover:text-orange-400 transition-colors duration-200 flex items-center space-x-3 cursor-pointer"
                title="Social media link not configured"
              >
                <Icon className="h-5 w-5 flex-shrink-0" />
                <span className="text-lg">{label}</span>
              </span>
            );
          }
          
          // If has URL, render as clickable link
          return (
            <a 
              key={platform}
              href={url} 
              target="_blank" 
              rel="noopener noreferrer" 
              className="text-white hover:text-orange-400 transition-colors duration-200 flex items-center space-x-3"
            >
              <Icon className="h-5 w-5 flex-shrink-0" />
              <span className="text-lg">{label}</span>
            </a>
          );
        })}
      </div>
    </div>
  );
};

export default SocialMediaColumn;


============================
FILE: frontend\src\features\footer\index.ts
============================
// Main public components - only export what other features need
export { default as ContactColumn } from './components/ContactColumn';
export { default as Disclaimer } from './components/Disclaimer';
export { default as FollowUs } from './components/FollowUs';
export { default as Footer } from './components/Footer';
export { default as FooterBottom } from './components/FooterBottom';
export { default as GetInTouch } from './components/GetInTouch';
export { default as ServiceAreas } from './components/ServiceAreas';
export { default as ServiceAreasColumn } from './components/ServiceAreasColumn';
export { default as SocialMediaColumn } from './components/SocialMediaColumn';

// Export types
export type { FooterBottomProps,FooterColumnProps } from './types';


============================
FILE: frontend\src\features\footer\types\index.ts
============================
// Footer types for the new footer structure

export interface ServiceArea {
  city: string;
  state: string;
  primary?: boolean;
}

export interface SocialMediaConfig {
  facebook?: string;
  instagram?: string;
  tiktok?: string;
  youtube?: string;
}

export interface ContactConfig {
  phone?: string;
  email?: string;
  base_location?: {
    city?: string;
    state_name?: string;
  };
}

export interface FooterColumnProps {
  config?: ContactConfig;
  socialMedia?: SocialMediaConfig;
  serviceAreas?: ServiceArea[];
  onRequestQuote?: () => void;
  onQuoteHover?: () => void;
  onServiceAreaClick?: (city: string, state: string) => void;
}

export interface FooterBottomProps {
  businessInfo: {
    name: string;
  };
  onRequestQuote?: () => void;
}


============================
FILE: frontend\src\features\gallery\api\gallery.api.ts
============================
/**
 * Gallery API Layer
 * Handles all gallery-related API calls
 */

import { GalleryImage } from '@/shared/types/gallery';

const GALLERY_DATA_URL = '/mobile-detailing/data/gallery.json';

// Type guard to ensure we have a valid GalleryImage
const isValidGalleryImage = (item: unknown): item is GalleryImage => {
  return typeof item === 'object' && item !== null && 'src' in item && 'tags' in item;
};

export interface GalleryApiResponse {
  success: boolean;
  data: GalleryImage[];
  error?: string;
}

export const galleryApi = {
  /**
   * Fetch gallery images
   */
  getGalleryImages: async (): Promise<GalleryImage[]> => {
    try {
      const response = await fetch(GALLERY_DATA_URL);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch gallery data: ${response.status}`);
      }
      
      const data = await response.json() as GalleryImage[];
      return data;
    } catch (error) {
      console.error('Gallery API Error:', error);
      throw new Error(`Failed to load gallery images: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Get random gallery images for background rotation
   */
  getRandomGalleryImages: async (count: number = 5): Promise<GalleryImage[]> => {
    try {
      // Call the getGalleryImages function directly to avoid circular reference
      const response = await fetch(GALLERY_DATA_URL);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch gallery data: ${response.status}`);
      }
      
      const allImages = await response.json() as GalleryImage[];
      
      // Filter out images that might be used for avatars (you can customize this logic)
      const backgroundImages = allImages.filter((img) => {
        if (!isValidGalleryImage(img)) return false;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access -- TypeScript type inference issue with GalleryImage interface
        const src = img.src.toLowerCase();
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access -- TypeScript type inference issue with GalleryImage interface
        return !src.includes('avatar') && !src.includes('profile');
      });
      
      // Shuffle and take the requested count
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- TypeScript type inference issue with filter result
      const shuffled = [...backgroundImages].sort(() => Math.random() - 0.5);
      return shuffled.slice(0, Math.min(count, shuffled.length));
    } catch (error) {
      console.error('Random Gallery API Error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      throw new Error(`Failed to load random gallery images: ${errorMessage}`);
    }
  },

  /**
   * Get gallery images for a specific category
   */
  getGalleryImagesByCategory: async (category: string): Promise<GalleryImage[]> => {
    try {
      // Call the getGalleryImages function directly to avoid circular reference
      const response = await fetch(GALLERY_DATA_URL);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch gallery data: ${response.status}`);
      }
      
      const allImages = await response.json() as GalleryImage[];
      return allImages.filter((img) => {
        if (!isValidGalleryImage(img)) return false;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access -- TypeScript type inference issue with GalleryImage interface
        return img.tags.some((tag: string) => tag.toLowerCase().includes(category.toLowerCase()));
      });
    } catch (error) {
      console.error('Gallery Category API Error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      throw new Error(`Failed to load gallery images for category ${category}: ${errorMessage}`);
    }
  },

  /**
   * Get featured gallery images
   */
  getFeaturedGalleryImages: async (): Promise<GalleryImage[]> => {
    try {
      const allImages = await galleryApi.getGalleryImages();
      // For now, return all images since there's no featured property
      // In the future, you could add a featured property to the data or use tags
      return allImages;
    } catch (error) {
      console.error('Featured Gallery API Error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      throw new Error(`Failed to load featured gallery images: ${errorMessage}`);
    }
  }
};


============================
FILE: frontend\src\features\gallery\components\Gallery.tsx
============================
import React, { useRef, useState } from 'react';

// Gallery section includes footer as part of its display
// This is intentional and part of the gallery feature's design
// eslint-disable-next-line no-restricted-imports -- Gallery displays footer as bottom half of section
import { Footer } from '@/features/footer';

import { useGallery } from '../hooks/useGallery';
import { useRotatingGallery } from '../hooks/useRotatingGallery';
import { GalleryProps } from '../types';
import GalleryItem from './GalleryItem';
import RotatingGalleryItem from './RotatingGalleryItem';

const Gallery: React.FC<GalleryProps> = ({ onRequestQuote, locationData: _locationData }) => {
  // Mobile: manual swipe carousel
  const { images, loading, error } = useGallery();
  const [currentIndex, setCurrentIndex] = useState(0);
  const touchStartX = useRef<number | null>(null);
  const touchEndX = useRef<number | null>(null);

  // Desktop: auto-rotating gallery
  const { currentImages, nextImages, loading: rotatingLoading, error: rotatingError, fadingIndex } = useRotatingGallery();

  const handlePrevious = () => {
    setCurrentIndex((prev) => (prev > 0 ? prev - 1 : images.length - 1));
  };

  const handleNext = () => {
    setCurrentIndex((prev) => (prev < images.length - 1 ? prev + 1 : 0));
  };

  // Touch/swipe handlers
  const handleTouchStart = (e: React.TouchEvent) => {
    touchStartX.current = e.touches[0]?.clientX ?? null;
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    touchEndX.current = e.touches[0]?.clientX ?? null;
  };

  const handleTouchEnd = () => {
    if (touchStartX.current === null || touchEndX.current === null) return;
    
    const diff = touchStartX.current - touchEndX.current;
    const minSwipeDistance = 50;
    
    if (Math.abs(diff) > minSwipeDistance) {
      if (diff > 0) {
        handleNext();
      } else {
        handlePrevious();
      }
    }
    
    touchStartX.current = null;
    touchEndX.current = null;
  };

  return (
    <>
      {/* MOBILE: Separate full-screen gallery section */}
      <section id="gallery" className="md:hidden relative h-screen snap-start snap-always flex items-center justify-center bg-stone-900 px-4">
        <div className="h-full w-full flex items-center justify-center pt-[72px]">
        {loading ? (
          <div className="text-stone-400">Loading gallery...</div>
        ) : error ? (
          <div className="text-red-400">Error loading gallery: {error}</div>
        ) : images.length === 0 ? (
          <div className="text-stone-400">No images available</div>
        ) : (
          <div className="relative w-full mx-auto flex flex-col h-full justify-center">
            <h2 className="text-3xl font-bold text-white text-center mb-8">Gallery</h2>
            
            {/* Swipeable gallery - full width on mobile */}
            <div
              onTouchStart={handleTouchStart}
              onTouchMove={handleTouchMove}
              onTouchEnd={handleTouchEnd}
              className="w-full"
            >
              {/* Main large image */}
              <ul className="w-full mb-6">
                {images[currentIndex] && <GalleryItem image={images[currentIndex]} />}
              </ul>

              {/* Next 2 thumbnails preview */}
              {images.length > 1 && (
                <div className="grid grid-cols-2 gap-4 px-4">
                  {images[(currentIndex + 1) % images.length] && (
                    <button
                      onClick={() => { setCurrentIndex((currentIndex + 1) % images.length); }}
                      className="rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow"
                    >
                      <img
                        src={images[(currentIndex + 1) % images.length].src}
                        alt={images[(currentIndex + 1) % images.length].alt}
                        className="w-full h-24 object-cover"
                      />
                    </button>
                  )}
                  {images[(currentIndex + 2) % images.length] && (
                    <button
                      onClick={() => { setCurrentIndex((currentIndex + 2) % images.length); }}
                      className="rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow"
                    >
                      <img
                        src={images[(currentIndex + 2) % images.length].src}
                        alt={images[(currentIndex + 2) % images.length].alt}
                        className="w-full h-24 object-cover"
                      />
                    </button>
                  )}
                </div>
              )}
            </div>

            {/* Dots Indicator */}
            {images.length > 1 && (
              <div className="flex justify-center mt-6 space-x-2">
                {images.map((_, index) => (
                  <button
                    key={index}
                    onClick={() => { setCurrentIndex(index); }}
                    className={`w-3 h-3 rounded-full transition-colors ${
                      currentIndex === index
                        ? 'bg-orange-500'
                        : 'bg-gray-400 hover:bg-gray-300'
                    }`}
                    aria-label={`Go to image ${index + 1}`}
                  />
                ))}
              </div>
            )}
          </div>
        )}
        </div>
      </section>

      {/* MOBILE: Separate footer section */}
      <section id="footer" className="md:hidden relative snap-start snap-always bg-stone-900">
        <div className="pt-[72px] py-12">
        <Footer onRequestQuote={onRequestQuote || (() => { /* noop */ })} />
        </div>
      </section>

      {/* DESKTOP: Combined gallery + footer in one section (original) */}
      <section id="gallery-desktop" className="hidden md:block relative h-screen snap-start snap-always overflow-hidden bg-stone-900">
        <div className="h-full pt-[88px]">
        <div className="relative z-10 h-full px-4 pt-20">
          {/* Top Half - Gallery */}
          <div className="h-1/2 flex items-center justify-center px-4 sm:px-6 lg:px-8 relative">
            {rotatingLoading ? (
              <div className="flex items-center justify-center">
                <div className="text-stone-400">Loading gallery...</div>
              </div>
            ) : rotatingError ? (
              <div className="flex items-center justify-center">
                <div className="text-red-400">Error loading gallery: {rotatingError}</div>
              </div>
            ) : currentImages.length === 0 ? (
              <div className="flex items-center justify-center">
                <div className="text-stone-400">No images available</div>
              </div>
            ) : (
              <ul className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-5 lg:gap-6 w-full">
                {currentImages.map((image, index) => (
                  <RotatingGalleryItem 
                    key={image.id} 
                    image={image} 
                    {...(nextImages[index] && { nextImage: nextImages[index] })}
                    isTransitioning={fadingIndex === index}
                    index={index}
                  />
                ))}
              </ul>
            )}
          </div>

          {/* Bottom Half - Footer Content */}
          <div className="h-1/2 flex flex-col justify-center border-t border-stone-700">
            <Footer onRequestQuote={onRequestQuote || (() => { /* noop */ })} />
          </div>
        </div>
        </div>
      </section>
    </>
  );
};

export default Gallery;


============================
FILE: frontend\src\features\gallery\components\GalleryItem.tsx
============================
import React from 'react';

import { GalleryImage } from '../types';

interface GalleryItemProps {
  image: GalleryImage;
}

const GalleryItem: React.FC<GalleryItemProps> = ({ image }) => {
  try {
    return (
    <li>
      <div className="group relative block rounded-lg overflow-hidden shadow-lg transition-transform duration-300 hover:-translate-y-2 hover:shadow-xl">
        <div className="aspect-[3/2]">
          <img
            src={image.src}
            alt={image.alt}
            width={image.width}
            height={image.height}
            loading={image.loading || 'lazy'}
            className="absolute inset-0 w-full h-full object-cover"
            onError={(e) => {
              // Show a simple placeholder if image fails to load
              const target = e.target as HTMLImageElement;
              target.style.display = 'none';
              const parent = target.parentElement;
              if (parent) {
                parent.innerHTML = `
                  <div class="absolute inset-0 w-full h-full bg-stone-700 flex items-center justify-center">
                    <div class="text-center text-stone-400">
                      <div class="text-4xl mb-2">📷</div>
                      <div class="text-sm">Add ${image.src.split('/').pop()}</div>
                    </div>
                  </div>
                `;
              }
            }}
          />
        </div>
        <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent">
          <div className="absolute bottom-0 left-0 right-0 p-4">
            <h3 className="text-white font-semibold text-sm mb-1 truncate">
              {image.title || 'Untitled'}
            </h3>
            <p className="text-stone-300 text-xs overflow-hidden" style={{ display: '-webkit-box', WebkitLineClamp: 2, WebkitBoxOrient: 'vertical' }}>
              {image.caption || 'No description available'}
            </p>
          </div>
        </div>
      </div>
    </li>
    );
  } catch (error) {
    console.error('Error rendering gallery item:', error);
    return (
      <li>
        <div className="group relative block rounded-lg overflow-hidden shadow-lg bg-stone-700">
          <div className="aspect-[3/2] flex items-center justify-center">
            <span className="text-stone-400">Error loading image</span>
          </div>
        </div>
      </li>
    );
  }
};

export default GalleryItem;


============================
FILE: frontend\src\features\gallery\components\RotatingGalleryItem.tsx
============================
import React from 'react';

import { GalleryImage } from '../types';

// Gallery item component with crossfade support
interface RotatingGalleryItemProps {
  image: GalleryImage;
  nextImage?: GalleryImage;
  isTransitioning: boolean;
  index: number;
}

const RotatingGalleryItem: React.FC<RotatingGalleryItemProps> = ({ image, nextImage, isTransitioning, index: _index }) => {
  // Fallback to current image if no next image
  const next = nextImage ?? image;
  
  return (
    <li>
      <div className={`group relative block rounded-lg overflow-hidden shadow-lg transition-all duration-1000 hover:-translate-y-2 hover:shadow-xl ${isTransitioning ? 'is-fading' : ''}`}>
        <div className="aspect-[3/2] relative">
          {/* Base layer: current image */}
          <img
            src={image.src}
            alt={image.alt}
            width={image.width}
            height={image.height}
            loading={image.loading || 'lazy'}
            className={`absolute inset-0 w-full h-full object-cover transition-opacity will-change-opacity ${
              isTransitioning ? 'opacity-0' : 'opacity-100'
            }`}
            style={{ transitionDuration: '1000ms' }}
            onError={(e) => {
              // Show a simple placeholder if image fails to load
              const target = e.target as HTMLImageElement;
              target.style.display = 'none';
              const parent = target.parentElement;
              if (parent) {
                parent.innerHTML = `
                  <div class="absolute inset-0 w-full h-full bg-stone-700 flex items-center justify-center">
                    <div class="text-center text-stone-400">
                      <div class="text-4xl mb-2">📷</div>
                      <div class="text-sm">Add ${image.src.split('/').pop()}</div>
                    </div>
                  </div>
                `;
              }
            }}
          />
          {/* Overlay layer: next image */}
          <img
            src={next.src}
            alt={next.alt}
            width={next.width}
            height={next.height}
            loading="lazy"
            className={`absolute inset-0 w-full h-full object-cover transition-opacity will-change-opacity ${
              isTransitioning ? 'opacity-100' : 'opacity-0'
            }`}
            style={{ transitionDuration: '1000ms' }}
          />
        </div>
        <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent transition-opacity will-change-opacity"
        style={{ transitionDuration: '1000ms' }}>
          <div className="absolute bottom-0 left-0 right-0 p-4">
            <h3 className="text-white font-semibold text-sm mb-1 truncate">
              {isTransitioning ? (next.title || 'Untitled') : (image.title || 'Untitled')}
            </h3>
            <p className="text-stone-300 text-xs overflow-hidden" style={{ display: '-webkit-box', WebkitLineClamp: 2, WebkitBoxOrient: 'vertical' }}>
              {isTransitioning ? (next.caption || 'No description available') : (image.caption || 'No description available')}
            </p>
          </div>
        </div>
      </div>
    </li>
  );
};

export default RotatingGalleryItem;


============================
FILE: frontend\src\features\gallery\hooks\useGallery.ts
============================
import { useEffect, useState } from 'react';

import { galleryApi } from '../api/gallery.api';
import { GalleryImage } from '../types';

export const useGallery = () => {
  const [images, setImages] = useState<GalleryImage[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchGalleryData = async (): Promise<void> => {
      try {
        setLoading(true);
        setError(null);
        
        const galleryImages = await galleryApi.getGalleryImages();
        setImages(galleryImages);
      } catch (err: unknown) {
        setError(err instanceof Error ? err.message : 'Failed to load gallery data');
      } finally {
        setLoading(false);
      }
    };

    void fetchGalleryData();
  }, []);

  return {
    images,
    loading,
    error,
  };
};


============================
FILE: frontend\src\features\gallery\hooks\useRotatingGallery.ts
============================
import { useCallback,useEffect, useRef, useState } from 'react';

import { galleryApi } from '../api/gallery.api';
import { GalleryImage } from '../types';

// Fisher-Yates shuffle algorithm
function shuffleArray<T>(array: T[]): T[] {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    // Safe swap - indices are guaranteed to be valid by loop bounds
    const temp = shuffled[i];
    const itemJ = shuffled[j];
    if (temp !== undefined && itemJ !== undefined) {
      shuffled[i] = itemJ;
      shuffled[j] = temp;
    }
  }
  return shuffled;
}

type RotatingState = {
  currentImages: GalleryImage[];
  loading: boolean;
  error: string | null;
  fadingIndex: number | null; // which card is currently fading (0,1,2)
  nextImages: GalleryImage[]; // next images for crossfade
};

export function useRotatingGallery() {
  const [allImages, setAllImages] = useState<GalleryImage[]>([]);
  const [state, setState] = useState<RotatingState>({
    currentImages: [],
    loading: true,
    error: null,
    fadingIndex: null,
    nextImages: [],
  });

  // Refs to avoid stale closures inside timers
  const allImagesRef = useRef<GalleryImage[]>([]);
  const currentRef = useRef<GalleryImage[]>([]);
  const fadingIndexRef = useRef<number>(-1);
  const nextPtrRef = useRef<number>(0); // next index in allImages to try
  const intervalRef = useRef<number | null>(null);
  const fadeTimeoutRef = useRef<number | null>(null);
  const unFadeTimeoutRef = useRef<{ timeout: number | null; raf: number | null }>({ 
    timeout: null, 
    raf: null 
  });

  // Load data
  useEffect(() => {
    let cancelled = false;
    void (async (): Promise<void> => {
        try {
          const data = await galleryApi.getGalleryImages();

          // Check if component is still mounted before updating state
          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- cancelled can be set to true by cleanup function before async completes
          if (cancelled) return;
          
          const shuffledData = shuffleArray(data) as GalleryImage[];
          setAllImages(shuffledData);
          allImagesRef.current = shuffledData;

          const initial = shuffledData.slice(0, Math.min(3, shuffledData.length));
          currentRef.current = initial;

          // set nextPtr to first unseen image
          nextPtrRef.current = initial.length % shuffledData.length;

          setState(s => ({
            ...s,
            currentImages: initial,
            nextImages: initial,
            loading: false,
            error: null,
          }));
      } catch (err: unknown) {
        // Check if component is still mounted before updating state
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- cancelled can be set to true by cleanup function before async completes
        if (cancelled) return;
        
        setState(s => ({
          ...s,
          loading: false,
          error: err instanceof Error ? err.message : 'Failed to load gallery data',
        }));
      }
    })();

    return () => {
      cancelled = true;
    };
  }, []);

  // Helper: advance nextPtr to an image not currently displayed (avoid dupes)
  const getNextUniqueImage = useCallback((): GalleryImage | null => {
    const all = allImagesRef.current;
    const current = currentRef.current;
    if (all.length === 0) return null;

    const visibleIds = new Set(current.map(i => i.id));
    let tries = 0;
    let ptr = nextPtrRef.current;

    while (tries < all.length) {
      const candidate = all[ptr];
      ptr = (ptr + 1) % all.length;
      tries++;

      if (!candidate) continue;
      if (!visibleIds.has(candidate.id)) {
        // lock in the advanced ptr
        nextPtrRef.current = ptr;
        return candidate;
      }
    }

    // Fallback: if everything is visible (e.g., all.length <= 3), just cycle anyway
    const fallback = all[nextPtrRef.current];
    nextPtrRef.current = (nextPtrRef.current + 1) % all.length;
    return fallback ?? null;
  }, []);

  // One-step rotation: fade one card, swap only that card, un-fade, move to next card index
  const rotateOneCard = useCallback(() => {
    const all = allImagesRef.current;
    if (all.length === 0) return;

    const current = currentRef.current;
    if (current.length === 0) return;

    // if only 1–3 images total, we can still fade them one-by-one but replacement may repeat
    const nextFadeIndex = (fadingIndexRef.current + 1) % Math.min(current.length, 3);
    fadingIndexRef.current = nextFadeIndex;

    // Get replacement image
    const replacement = getNextUniqueImage();
    if (replacement) {
      // Create next images array with replacement
      const nextImages = currentRef.current.slice();
      nextImages[nextFadeIndex] = replacement;
      
      // 1) Set next images first (paint baseline)
      setState(s => ({ ...s, nextImages }));
      
      // 2) Flip the fade flag on the next frame so CSS transitions fire
      const raf = window.requestAnimationFrame(() => {
        setState(s => ({ ...s, fadingIndex: nextFadeIndex }));
      });

      // Store raf id to clean up if needed
      unFadeTimeoutRef.current.raf = raf;

      // After 1000ms (CSS duration), commit nextImages -> currentImages
      const timeout = window.setTimeout(() => {
        // Update current images to the new ones
        currentRef.current = nextImages;
        setState(s => ({ 
          ...s, 
          currentImages: nextImages,
          fadingIndex: null 
        }));
      }, 1000 + 50); // + small buffer
      
      unFadeTimeoutRef.current.timeout = timeout;
    }
  }, [getNextUniqueImage]);

  // Interval: every 7s rotate one card
  useEffect(() => {
    if (allImages.length === 0) return;

    // Clear any existing
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
    }

    intervalRef.current = window.setInterval(rotateOneCard, 7000);

    return () => {
      // Clean up interval
      if (intervalRef.current) clearInterval(intervalRef.current);
      
      // Clean up fade timeouts - capture ref values at cleanup time
      // eslint-disable-next-line react-hooks/exhaustive-deps -- We intentionally capture current ref values at cleanup time, not at effect setup
      const fadeTimeout = fadeTimeoutRef.current;
      // eslint-disable-next-line react-hooks/exhaustive-deps -- We intentionally capture current ref values at cleanup time, not at effect setup
      const unFadeTimeouts = unFadeTimeoutRef.current;
      
      if (fadeTimeout !== null) {
        clearTimeout(fadeTimeout);
      }
      if (unFadeTimeouts.timeout !== null) {
        clearTimeout(unFadeTimeouts.timeout);
      }
      if (unFadeTimeouts.raf !== null) {
        cancelAnimationFrame(unFadeTimeouts.raf);
      }
    };
  }, [allImages.length, rotateOneCard]);

  return {
    currentImages: state.currentImages,   // render these 3
    nextImages: state.nextImages,         // next images for crossfade
    loading: state.loading,
    error: state.error,
    fadingIndex: state.fadingIndex,       // which card should have the fade class
  };
}


============================
FILE: frontend\src\features\gallery\index.ts
============================
// Gallery feature exports
export { default as Gallery } from './components/Gallery';
export { default as GalleryItem } from './components/GalleryItem';
export { default as RotatingGalleryItem } from './components/RotatingGalleryItem';
export { useGallery } from './hooks/useGallery';
export { useRotatingGallery } from './hooks/useRotatingGallery';


============================
FILE: frontend\src\features\gallery\types\index.ts
============================
// Gallery feature types
// GalleryImage and ImageVariant moved to @/shared/types/gallery.types.ts
export type { GalleryImage, ImageVariant } from '@/shared/types/gallery.types';

export interface GalleryProps {
  onRequestQuote?: () => void;
  locationData?: Record<string, unknown>;
}


============================
FILE: frontend\src\features\header\api\tenant.api.ts
============================
/**
 * Tenant API Layer
 * Handles all tenant-related API calls
 */

import { TenantConfig } from '@/shared/types/tenant.types';
import { Business } from '@/shared/types/tenant-business.types';

export interface TenantApiResponse {
  success: boolean;
  data: Business;
  error?: string;
}

export interface TenantsListResponse {
  success: boolean;
  data: TenantConfig[];
  error?: string;
}

export const tenantApi = {
  /**
   * Get all tenants
   */
  getTenants: async (): Promise<TenantConfig[]> => {
    try {
      const response = await fetch('/api/tenants');
      
      if (!response.ok) {
        throw new Error(`Failed to fetch tenants: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as TenantsListResponse;
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to fetch tenants');
      }
      
      return result.data;
    } catch (error) {
      console.error('Tenant API Error:', error);
      throw new Error(`Failed to load tenants: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Get tenant by slug
   */
  getTenantBySlug: async (slug: string): Promise<Business> => {
    try {
      const response = await fetch(`/api/tenants/${slug}`);
      
      if (!response.ok) {
        if (response.status === 404) {
          throw new Error('Business not found');
        }
        throw new Error(`Failed to fetch business: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as TenantApiResponse;
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to fetch business');
      }
      
      return result.data;
    } catch (error) {
      console.error('Tenant API Error:', error);
      throw new Error(`Failed to load business: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Get tenants by industry
   */
  getTenantsByIndustry: async (industry: string): Promise<TenantConfig[]> => {
    try {
      const response = await fetch(`/api/tenants?industry=${encodeURIComponent(industry)}`);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch tenants by industry: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as TenantsListResponse;
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to fetch tenants by industry');
      }
      
      return result.data;
    } catch (error) {
      console.error('Tenant API Error:', error);
      throw new Error(`Failed to load tenants for industry ${industry}: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Get available industries
   */
  getIndustries: async (): Promise<{ industry: string; count: number }[]> => {
    try {
      const response = await fetch('/api/tenants/industries/list');
      
      if (!response.ok) {
        throw new Error(`Failed to fetch industries: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as { success: boolean; data: { industry: string; count: number }[] };
      
      if (!result.success) {
        throw new Error('Failed to fetch industries');
      }
      
      return result.data;
    } catch (error) {
      console.error('Tenant API Error:', error);
      throw new Error(`Failed to load industries: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
};


============================
FILE: frontend\src\features\header\components\BusinessInfo.tsx
============================
import React from 'react';
import { MapPin } from 'lucide-react';

import { formatPhoneNumber } from '@/shared/utils/phoneFormatter';

import { useData } from '../contexts/DataProvider';

const BusinessInfo: React.FC = () => {
  const { businessName, phone, location, isTenant } = useData();
  
  const handleClick = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // All sites are now tenant-based, so show business info
  if (!isTenant) {
    return null;
  }

  return (
    <div className="flex flex-col space-y-1 md:space-y-1 md:ml-2 min-w-0 flex-1">
      {/* Business Name - Full width on mobile, larger on desktop */}
      <button 
        onClick={handleClick}
        className="hover:opacity-80 transition-opacity text-left min-w-0"
      >
        <h1 className="text-base sm:text-lg md:text-xl lg:text-2xl xl:text-3xl font-bold text-white leading-tight truncate">
          {businessName}
        </h1>
      </button>
      
      {/* Phone + Location - side by side on mobile, horizontal on desktop */}
      <div className="flex items-center gap-2 md:gap-2 min-w-0 flex-wrap">
        <a 
          href={`tel:${phone || '5551234580'}`}
          className="text-sm md:text-sm lg:text-base text-stone-300 hover:text-orange-400 transition-colors truncate flex-shrink-0"
        >
          {formatPhoneNumber(phone || '(555) 123-4580')}
        </a>
        <span className="text-stone-400 flex-shrink-0 text-sm">•</span>
        <div className="flex items-center gap-1 min-w-0">
          <MapPin className="h-4 w-4 md:h-4 md:w-4 text-orange-400 flex-shrink-0" />
          <span className="text-sm md:text-sm lg:text-base text-orange-400 truncate">
            {location || 'Service Area'}
          </span>
        </div>
      </div>
    </div>
  );
};

export default BusinessInfo;

============================
FILE: frontend\src\features\header\components\BusinessInfoDisplay.tsx
============================
import React from 'react';

import { useTenant } from '../contexts/TenantContext';
import { useBusiness } from '../hooks/useBusiness';

const BusinessInfoDisplay: React.FC = () => {
  const { slug } = useTenant();
  const { data: business, isLoading, error } = useBusiness(slug || '');

  if (isLoading) {
    return (
      <div className="text-white">
        <div className="animate-pulse">
          <div className="h-4 bg-gray-300 rounded w-32 mb-2"></div>
          <div className="h-3 bg-gray-300 rounded w-24"></div>
        </div>
      </div>
    );
  }

  if (error || !business) {
    return (
      <div className="text-white">
        <div className="text-sm text-gray-300">Business information unavailable</div>
      </div>
    );
  }

  const primaryAreas = business.service_areas
    .filter(area => area.primary)
    .map(area => `${area.city}, ${area.state}`)
    .join(', ');
  
  const firstArea = business.service_areas[0];
  const fallbackArea = firstArea 
    ? `${firstArea.city}, ${firstArea.state}` 
    : '';

  return (
    <div className="text-white">
      <h1 className="text-xl font-bold">{business.business_name}</h1>
      <div className="text-sm text-gray-300">
        <div>Phone: {business.business_phone}</div>
        <div>Owner: {business.owner}</div>
        {business.service_areas.length > 0 && (
          <div>
            Serving: {primaryAreas || fallbackArea}
          </div>
        )}
      </div>
    </div>
  );
};

export default BusinessInfoDisplay;


============================
FILE: frontend\src\features\header\components\DevNavigation.tsx
============================
import React, { useEffect, useRef, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { ChevronDown, ExternalLink, Eye, Home, Settings, Users } from 'lucide-react';

import { env } from '@/shared/env';

import { useTenants } from '../hooks/useTenants';

const DevNavigation: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const [isAdminOpen, setIsAdminOpen] = useState(false);
  const [isTenantsOpen, setIsTenantsOpen] = useState(false);
  const adminRef = useRef<HTMLDivElement>(null);
  const tenantsRef = useRef<HTMLDivElement>(null);

  // Check if on preview page (by URL path)
  const _isPreview = location.pathname === '/preview';

  // Fetch tenants data from API
  const { data: tenants, isLoading, error } = useTenants();

  // Close dropdowns when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (adminRef.current && !adminRef.current.contains(event.target as Node)) {
        setIsAdminOpen(false);
      }
      if (tenantsRef.current && !tenantsRef.current.contains(event.target as Node)) {
        setIsTenantsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => { document.removeEventListener('mousedown', handleClickOutside); };
  }, []);

  const handleAdminHomepage = () => {
    void navigate('/');
    setIsAdminOpen(false);
  };

  const handleAdminDashboard = () => {
    void navigate('/admin-dashboard');
    setIsAdminOpen(false);
  };

  const handleTenantHomepage = (slug: string) => {
    if (env.DEV) {
      // In development, navigate to localhost with slug
      window.location.href = `http://localhost:5173/${slug}`;
    } else {
      // In production, navigate to the actual website
      const tenant = tenants?.find(t => t.slug === slug);
      if (tenant && tenant.contact.socials.facebook) {
        window.open(tenant.contact.socials.facebook, '_blank');
      }
    }
    setIsTenantsOpen(false);
  };

  const handleTenantDashboard = (slug: string) => {
    void navigate(`/${slug}/dashboard`);
    setIsTenantsOpen(false);
  };

  return (
    <div className="fixed top-4 right-4 z-[9999] flex space-x-2" style={{ pointerEvents: 'auto' }}>
      {/* Admin Dropdown */}
      <div className="relative" ref={adminRef}>
        <button
          onClick={() => {
            setIsAdminOpen(!isAdminOpen);
          }}
          className="flex items-center space-x-1 px-3 py-2 text-xs font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md transition-colors duration-200"
        >
          <Settings className="h-3 w-3" />
          <span>Admin</span>
          <ChevronDown className={`h-3 w-3 transition-transform duration-200 ${isAdminOpen ? 'rotate-180' : ''}`} />
        </button>

            {isAdminOpen && (
              <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg border border-gray-200">
            <div className="py-1">
              <button
                onClick={handleAdminHomepage}
                className="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                role="menuitem"
              >
                <Home className="h-4 w-4 mr-3" />
                Main Site
              </button>
              <button
                onClick={handleAdminDashboard}
                className="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                role="menuitem"
              >
                <Settings className="h-4 w-4 mr-3" />
                Admin Dashboard
              </button>
              <button
                onClick={() => {
                  void navigate('/tenant-onboarding');
                  setIsAdminOpen(false);
                }}
                className="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                role="menuitem"
              >
                <Users className="h-4 w-4 mr-3" />
                Tenant Onboarding
              </button>
              <button
                onClick={() => {
                  void navigate('/preview-generator');
                  setIsAdminOpen(false);
                }}
                className="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                role="menuitem"
              >
                <Eye className="h-4 w-4 mr-3" />
                Tenant Preview
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Tenants Dropdown */}
      <div className="relative" ref={tenantsRef}>
        <button
          onClick={() => { setIsTenantsOpen(!isTenantsOpen); }}
          className="flex items-center space-x-1 px-3 py-2 text-xs font-medium text-white bg-green-600 hover:bg-green-700 rounded-md transition-colors duration-200"
        >
          <Users className="h-3 w-3" />
          <span>Tenants</span>
          <ChevronDown className={`h-3 w-3 transition-transform duration-200 ${isTenantsOpen ? 'rotate-180' : ''}`} />
        </button>

            {isTenantsOpen && (
              <div className="absolute right-0 mt-2 w-80 bg-white rounded-md shadow-lg border border-gray-200 max-h-96 overflow-y-auto">
            {isLoading ? (
              <div className="px-4 py-3 text-sm text-gray-500">Loading tenants...</div>
            ) : error ? (
              <div className="px-4 py-3 text-sm text-red-500">Error loading tenants</div>
            ) : !tenants || tenants.length === 0 ? (
              <div className="px-4 py-3 text-sm text-gray-500">No tenants found</div>
            ) : (
              <div className="py-1">
                {tenants.map((tenant) => (
                  <div key={tenant.slug} className="border-b border-gray-100 last:border-b-0">
                    <div className="px-4 py-2 text-sm font-medium text-gray-900 bg-gray-50">
                      <div className="font-mono text-xs">{tenant.slug}</div>
                      <div className="text-xs text-gray-600">{tenant.branding.businessName}</div>
                    </div>
                    <div className="px-2 py-1 space-y-1">
                      <button
                        onClick={() => { handleTenantHomepage(tenant.slug); }}
                        className="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                        role="menuitem"
                      >
                        <ExternalLink className="h-4 w-4 mr-3" />
                        <span>Homepage</span>
                      </button>
                      <button
                        onClick={() => { handleTenantDashboard(tenant.slug); }}
                        className="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                        role="menuitem"
                      >
                        <Settings className="h-4 w-4 mr-3" />
                        <span>Dashboard</span>
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default DevNavigation;


============================
FILE: frontend\src\features\header\components\Header.tsx
============================
import { useEffect, useState } from "react";
import { Menu, X } from 'lucide-react';

import { NAV_LINKS } from '@/features/header/utils/constants';
import { handleSectionClick } from '@/features/header/utils/navigation';
import { useReviewsAvailability } from '@/shared/hooks';
import { getNavId,useSectionStore } from '@/shared/state/sectionStore';

import BusinessInfo from './BusinessInfo';
import Logo from './Logo';
import Navigation from './Navigation';
import SocialMediaIcons from './SocialMediaIcons';

export default function Header() {
  const [open, setOpen] = useState(false);
  const hasReviews = useReviewsAvailability();
  
  // Subscribe to the section store and map to navigation ID
  const currentSection = useSectionStore((s) => s.current);
  const activeSection = getNavId(currentSection) || 'top';

  // Prevent background scroll when mobile menu open
  useEffect(() => {
    document.documentElement.style.overflow = open ? "hidden" : "";
    return () => { document.documentElement.style.overflow = ""; };
  }, [open]);

  return (
    <header
      role="banner"
      className="fixed top-0 left-0 right-0 z-50 bg-black/40 backdrop-blur supports-[backdrop-filter]:backdrop-blur w-full"
    >
      {/* Skip link */}
      <a
        href="#main"
        className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:px-4 focus:py-2 focus:bg-orange-500 focus:text-white focus:rounded-md"
      >
        Skip to content
      </a>

      {/* Bar */}
      <div className="py-3 sm:py-4 md:py-4">
        <div className="max-w-7xl mx-auto px-4 sm:px-4 md:px-6 min-w-0">
          {/* Mobile row (< md 768px) */}
          <div className="flex md:hidden items-center justify-between gap-3 min-w-0">
            <div className="flex items-center gap-2 flex-1 min-w-0 overflow-hidden">
              <Logo />
              <BusinessInfo />
            </div>
            <button
              type="button"
              aria-label={open ? "Close menu" : "Open menu"}
              aria-expanded={open}
              aria-controls="mobile-menu"
              onClick={() => { setOpen(v => !v); }}
              className="flex-shrink-0 inline-flex items-center justify-center p-2 rounded-md text-white hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-orange-400"
            >
              {open ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
            </button>
          </div>

          {/* Desktop row (≥ md 768px) */}
          <div className="hidden md:flex items-center gap-4 lg:gap-6 min-w-0">
            <Logo />
            <BusinessInfo />
            <div className="flex items-center gap-4 lg:gap-6 ml-auto flex-shrink-0">
              <Navigation activeSection={activeSection} />
              <SocialMediaIcons />
            </div>
          </div>
        </div>
      </div>

      {/* Mobile overlay menu */}
      <div
        id="mobile-menu"
        role="dialog"
        aria-modal="true"
        className={`md:hidden absolute inset-x-0 top-full z-50 bg-black/90 transition-opacity duration-200
          ${open ? "opacity-100 pointer-events-auto" : "opacity-0 pointer-events-none"}`}
        aria-hidden={!open}
      >
        <div className="px-4 py-6 space-y-4 max-w-7xl mx-auto">
          <h2 className="sr-only">Mobile Navigation Menu</h2>
          
          {/* Mobile Navigation Links */}
          <nav aria-label="Mobile navigation" className="space-y-2">
            {(() => {
              const handleClick = () => {
                document.documentElement.style.overflow = '';
                setOpen(false);
              };
              
              return NAV_LINKS.filter(link => {
                if (link.name === 'Reviews') return hasReviews;
                return true;
              }).map(link => {
              
              return link.isFAQ ? (
                <button
                  key={link.name}
                  onClick={() => { 
                    handleSectionClick('#faq'); 
                    handleClick();
                  }}
                  className="nav-link w-full text-left px-4 py-3 rounded-lg text-base sm:text-lg text-white bg-transparent hover:text-orange-400 hover:bg-orange-500/10 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200"
                  aria-label={`Scroll to ${link.name} section`}
                >
                  {link.name}
                </button>
              ) : link.isGallery ? (
                <button
                  key={link.name}
                  onClick={() => { 
                    handleSectionClick('#gallery'); 
                    handleClick();
                  }}
                  className="nav-link w-full text-left px-4 py-3 rounded-lg text-base sm:text-lg text-white bg-transparent hover:text-orange-400 hover:bg-orange-500/10 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200"
                  aria-label={`Scroll to ${link.name} section`}
                >
                  {link.name}
                </button>
              ) : link.name === 'Reviews' ? (
                <button
                  key={link.name}
                  onClick={() => { 
                    handleSectionClick('#reviews'); 
                    handleClick();
                  }}
                  className="nav-link w-full text-left px-4 py-3 rounded-lg text-base sm:text-lg text-white bg-transparent hover:text-orange-400 hover:bg-orange-500/10 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200"
                  aria-label={`Scroll to ${link.name} section`}
                >
                  {link.name}
                </button>
              ) : link.name === 'Home' ? (
                <button
                  key={link.name}
                  onClick={() => { 
                    handleSectionClick('#top'); 
                    handleClick();
                  }}
                  className="nav-link w-full text-left px-4 py-3 rounded-lg text-base sm:text-lg text-white bg-transparent hover:text-orange-400 hover:bg-orange-500/10 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200"
                  aria-label={`Scroll to ${link.name} section`}
                >
                  {link.name}
                </button>
              ) : link.name === 'Services' ? (
                <button
                  key={link.name}
                  onClick={() => { 
                    handleSectionClick('#services'); 
                    handleClick();
                  }}
                  className="nav-link w-full text-left px-4 py-3 rounded-lg text-base sm:text-lg text-white bg-transparent hover:text-orange-400 hover:bg-orange-500/10 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200"
                  aria-label={`Scroll to ${link.name} section`}
                >
                  {link.name}
                </button>
              ) : (
                <a
                  key={link.name}
                  href={link.href}
                  onClick={handleClick}
                  className="nav-link block w-full text-left px-4 py-3 rounded-lg text-base sm:text-lg text-white bg-transparent hover:text-orange-400 hover:bg-orange-500/10 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200"
                  aria-label={`Navigate to ${link.name} page`}
                >
                  {link.name}
                </a>
              );
              });
            })()}
            
            {/* Mobile-only Contact link */}
            <button
              onClick={() => { 
                handleSectionClick('#footer'); 
                const closeMobileMenu = () => {
                  document.documentElement.style.overflow = '';
                  setOpen(false);
                };
                closeMobileMenu();
              }}
              className="nav-link w-full text-left px-4 py-3 rounded-lg text-base sm:text-lg text-white bg-transparent hover:text-orange-400 hover:bg-orange-500/10 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200"
              aria-label="Scroll to Contact section"
            >
              Contact
            </button>
          </nav>
        </div>
      </div>
    </header>
  );
}


============================
FILE: frontend\src\features\header\components\index.ts
============================
// Internal components barrel - for use within header feature only
export { default as AuthSection } from './AuthSection';
export { default as BackButton } from './BackButton';
export { default as BusinessInfo } from './BusinessInfo';
export { default as HeaderErrorState } from './HeaderErrorState';
export { default as HeaderLoadingState } from './HeaderLoadingState';
export { default as HeaderNavigation } from './HeaderNavigation';
export { default as LoginButton } from './LoginButton';
export { default as Logo } from './Logo';
export { default as MobileMenu } from './MobileMenu';
export { default as Navigation } from './Navigation';
export { default as SocialMediaIcons } from './SocialMediaIcons';
export { default as UserMenu } from './UserMenu';


============================
FILE: frontend\src\features\header\components\LoginButton.tsx
============================
import React from 'react';

const LoginButton: React.FC = () => {
  return (
    <button className="text-white hover:text-orange-400 transition-colors duration-200 font-medium px-3 py-2 rounded-md">
      Login
    </button>
  );
};

export default LoginButton;

============================
FILE: frontend\src\features\header\components\Logo.tsx
============================
import React from 'react';

import { useData, useTenantConfigLoader } from '@/shared/hooks';
import type { Vertical } from '@/shared/types';
import { getTenantAssetUrl } from '@/shared/utils';

const Logo: React.FC = () => {
  const { industry, isLoading: isDataLoading } = useData();
  const { data: tenantConfig, isLoading: isConfigLoading } = useTenantConfigLoader();
  
  const isLoading = isDataLoading || isConfigLoading;
  const logoUrl = tenantConfig?.branding.logo.url;
  
  const handleClick = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };
  
  // Use tenant config logo, fallback to industry default via asset locator
  const src = logoUrl || getTenantAssetUrl({
    vertical: industry as Vertical,
    type: 'logo',
  });
  const alt = tenantConfig?.branding.businessName || `${industry} Logo`;

  // During loading (including HMR), show a minimal placeholder
  if (isLoading && !src) {
    return (
      <div className="h-10 w-10 sm:h-12 sm:w-12 md:h-14 md:w-14 lg:h-16 lg:w-16 bg-gray-200 animate-pulse rounded flex-shrink-0" />
    );
  }

  return (
    <button 
      onClick={handleClick}
      className="flex items-center hover:opacity-80 transition-opacity flex-shrink-0"
      aria-label={`${industry} home`}
    >
      <picture>
        {/* Prefer WebP when available; fall back to original */}
        <source srcSet={src.endsWith('.webp') ? src : src.replace(/\.(png|jpg|jpeg)$/i, '.webp')} type="image/webp" />
        <img 
          src={src} 
          alt={alt} 
          className="h-10 w-10 sm:h-12 sm:w-12 md:h-14 md:w-14 lg:h-16 lg:w-16"
          width={64}
          height={64}
          decoding="async"
          loading="eager"
        />
      </picture>
    </button>
  );
};

export default Logo;


============================
FILE: frontend\src\features\header\components\Navigation.tsx
============================
import React from 'react';

import { NAV_LINKS } from '@/features/header/utils/constants';
import { handleSectionClick } from '@/features/header/utils/navigation';
import { useReviewsAvailability } from '@/shared/hooks';

interface NavigationProps {
  activeSection: string;
}

const Navigation: React.FC<NavigationProps> = ({ activeSection }) => {
  // Check if reviews are available
  const hasReviews = useReviewsAvailability();

  // Filter navigation links based on reviews availability
  const filteredNavLinks = NAV_LINKS.filter(link => {
    if (link.name === 'Reviews') {
      return hasReviews; // Only show reviews if there are reviews available
    }
    return true; // Show all other links
  });

  // Determine if a nav item is active based on visible section
  const isActive = (link: typeof NAV_LINKS[0]) => {
    const isLinkActive = (
      (link.name === 'Home' && activeSection === 'top') ||
      (link.name === 'Services' && activeSection === 'services') ||
      (link.name === 'Reviews' && activeSection === 'reviews') ||
      (link.name === 'FAQ' && activeSection === 'faq') ||
      (link.name === 'Gallery' && activeSection === 'footer')
    );
    
    return isLinkActive;
  };

  // Base classes for nav items
  const getNavItemClasses = (link: typeof NAV_LINKS[0]) => {
    const isLinkActive = isActive(link);
    
    const baseClasses = "nav-link hover:text-orange-400 focus:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-offset-2 focus:ring-offset-black/20 transition-colors duration-200 p-2 font-inherit cursor-pointer rounded";
    
    const finalClasses = isLinkActive 
      ? `${baseClasses} text-orange-400 bg-transparent border-none ring-2 ring-orange-400 ring-offset-2 ring-offset-black/20` 
      : `${baseClasses} text-white bg-transparent border-none`;
    
    return finalClasses;
  };

  return (
    <nav aria-label="Primary navigation" className="hidden xl:flex space-x-6">
      {filteredNavLinks.map(link => (
        link.isFAQ ? (
          <button
            key={link.name}
            onClick={(e) => { handleSectionClick('#faq'); e.currentTarget.blur(); }}
            className={getNavItemClasses(link)}
            aria-label={`Scroll to ${link.name} section`}
          >
            {link.name}
          </button>
        ) : link.isGallery ? (
          <button
            key={link.name}
            onClick={(e) => { handleSectionClick('#footer'); e.currentTarget.blur(); }}
            className={getNavItemClasses(link)}
            aria-label={`Scroll to ${link.name} section`}
          >
            {link.name}
          </button>
        ) : link.name === 'Reviews' ? (
          <button
            key={link.name}
            onClick={(e) => { handleSectionClick('#reviews'); e.currentTarget.blur(); }}
            className={getNavItemClasses(link)}
            aria-label={`Scroll to ${link.name} section`}
          >
            {link.name}
          </button>
        ) : link.name === 'Home' ? (
          <button
            key={link.name}
            onClick={(e) => { handleSectionClick('#top'); e.currentTarget.blur(); }}
            className={getNavItemClasses(link)}
            aria-label={`Scroll to ${link.name} section`}
          >
            {link.name}
          </button>
        ) : link.name === 'Services' ? (
          <button
            key={link.name}
            onClick={(e) => { handleSectionClick('#services'); e.currentTarget.blur(); }}
            className={getNavItemClasses(link)}
            aria-label={`Scroll to ${link.name} section`}
          >
            {link.name}
          </button>
        ) : (
          <a
            key={link.name}
            href={link.href}
            className={getNavItemClasses(link)}
            aria-label={`Navigate to ${link.name} page`}
          >
            {link.name}
          </a>
        )
      ))}
    </nav>
  );
};

export default Navigation;


============================
FILE: frontend\src\features\header\components\SocialMediaIcons.tsx
============================
import React from 'react';
import { SiFacebook, SiInstagram, SiYoutube } from 'react-icons/si';

import { useData } from '../contexts/DataProvider';

// Custom TikTok icon component
const TikTokIcon: React.FC<{ className?: string }> = ({ className }) => (
  <svg 
    className={className} 
    viewBox="0 0 24 24" 
    fill="none" 
    stroke="currentColor" 
    strokeWidth="2" 
    strokeLinecap="round" 
    strokeLinejoin="round"
  >
    <path d="M9 12a4 4 0 1 0 4 4V4a5 5 0 0 0 5 5" />
  </svg>
);

const SocialMediaIcons: React.FC = () => {
  // Always call hooks unconditionally
  const { isTenant, socialMedia, siteConfig, isPreview } = useData();
  
  // Use tenant social media if available, otherwise use site config
  const socials = isTenant ? socialMedia : siteConfig?.socials;
  
  const socialLinks = [
    {
      platform: 'Facebook',
      url: socials?.facebook,
      icon: SiFacebook,
      ariaLabel: 'Visit our Facebook page'
    },
    {
      platform: 'Instagram',
      url: socials?.instagram,
      icon: SiInstagram,
      ariaLabel: 'Visit our Instagram page'
    },
    {
      platform: 'TikTok',
      url: socials?.tiktok,
      icon: TikTokIcon,
      ariaLabel: 'Visit our TikTok page'
    },
    {
      platform: 'YouTube',
      url: socials?.youtube,
      icon: SiYoutube,
      ariaLabel: 'Visit our YouTube channel'
    }
  ];

  const visibleLinks = socialLinks.filter(link => {
    const url = link.url;
    return typeof url === 'string'; // Show if URL exists (even if empty)
  });

  if (visibleLinks.length === 0) {
    return null;
  }

  return (
    <div className="flex items-center space-x-3 ml-4">
      {visibleLinks.map(({ platform, url, icon: Icon, ariaLabel }) => {
        const href = url as string;
        const hasUrl = href && href.trim() !== '';
        
        // In preview mode, render as span instead of link
        if (isPreview) {
          return (
            <span
              key={platform}
              className="text-white hover:text-orange-400 transition-colors duration-200 cursor-pointer"
              aria-label={ariaLabel}
              title="Social media links available in your live site"
            >
              <Icon className="h-5 w-5" />
            </span>
          );
        }
        
        // If no URL, render as span (non-clickable)
        if (!hasUrl) {
          return (
            <span
              key={platform}
              className="text-white hover:text-orange-400 transition-colors duration-200 cursor-pointer"
              aria-label={ariaLabel}
              title="Social media link not configured"
            >
              <Icon className="h-5 w-5" />
            </span>
          );
        }
        
        // If has URL, render as clickable link
        return (
          <a 
            key={platform}
            href={href} 
            target="_blank" 
            rel="noopener noreferrer"
            className="text-white hover:text-orange-400 transition-colors duration-200"
            aria-label={ariaLabel}
          >
            <Icon className="h-5 w-5" />
          </a>
        );
      })}
    </div>
  );
};

export default SocialMediaIcons;


============================
FILE: frontend\src\features\header\components\UserMenu.tsx
============================
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Building2, ChevronDown, ExternalLink,Home, Shield } from 'lucide-react';

import { env } from '@/shared/env';

import { useTenants } from '../hooks/useTenants';

const UserMenu: React.FC = () => {
  // Admin dropdown with Tenant Onboarding link
  const navigate = useNavigate();
  const [isAdminOpen, setIsAdminOpen] = useState(false);
  const [isTenantsOpen, setIsTenantsOpen] = useState(false);
  const adminMenuRef = useRef<HTMLDivElement>(null);
  const tenantsMenuRef = useRef<HTMLDivElement>(null);
  const { data: tenants, isLoading: tenantsLoading } = useTenants();

  // Close menus when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (adminMenuRef.current && !adminMenuRef.current.contains(event.target as Node)) {
        setIsAdminOpen(false);
      }
      if (tenantsMenuRef.current && !tenantsMenuRef.current.contains(event.target as Node)) {
        setIsTenantsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => { document.removeEventListener('mousedown', handleClickOutside); };
  }, []);

  const handleNavigation = useCallback((path: string) => {
    void navigate(path);
    setIsAdminOpen(false);
    setIsTenantsOpen(false);
  }, [navigate]);

  const handleTenantHomepage = useCallback((slug: string) => {
    // In development, navigate to localhost with the slug
    const isDevelopment = env.DEV;
    if (isDevelopment) {
      window.open(`http://localhost:5173/${slug}`, '_blank', 'noopener,noreferrer');
    } else {
      // In production, use the actual website URL
      window.open(`http://thatsmartsite.com/${slug}`, '_blank', 'noopener,noreferrer');
    }
    setIsTenantsOpen(false);
  }, []);

  return (
    <div className="flex items-center space-x-2">
      {/* Tenants Dropdown */}
      <div className="relative" ref={tenantsMenuRef}>
        <button
          id="tenants-menu-button"
          onClick={() => { 
            setIsTenantsOpen(!isTenantsOpen);
            setIsAdminOpen(false); // Close other menus
          }}
          className="flex items-center space-x-1 bg-green-600 hover:bg-green-700 text-white px-2 py-1.5 rounded-md text-xs font-medium transition-colors"
          aria-expanded={isTenantsOpen}
          aria-haspopup="true"
        >
          <Building2 className="h-3 w-3" />
          <span>Tenants</span>
          <ChevronDown className={`h-3 w-3 transition-transform duration-200 ${isTenantsOpen ? 'rotate-180' : ''}`} />
        </button>

        {/* Tenants Dropdown Menu */}
        {isTenantsOpen && (
          <div 
            className="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50 max-h-96 overflow-y-auto"
            role="menu"
            aria-orientation="vertical"
            aria-labelledby="tenants-menu-button"
          >
            {tenantsLoading ? (
              <div className="px-4 py-2 text-sm text-gray-500">Loading tenants...</div>
            ) : tenants && tenants.length > 0 ? (
              tenants.map((tenant) => (
                <div key={tenant.slug} className="border-b border-gray-100 last:border-b-0">
                  <div className="px-4 py-2 text-sm font-medium text-gray-900 bg-gray-50">
                    <div className="font-semibold">{tenant.branding.businessName}</div>
                    <div className="text-xs text-gray-500 font-mono">/{tenant.slug}</div>
                  </div>
                  
                  <button
                    onClick={() => { handleTenantHomepage(tenant.slug); }}
                    className="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                    role="menuitem"
                  >
                    <ExternalLink className="h-4 w-4 mr-3" />
                    <div className="flex flex-col items-start">
                      <span>Homepage</span>
                      <span className="text-xs text-gray-500 font-mono">
                        {env.DEV ? `http://localhost:5173/${tenant.slug}` : tenant.contact.socials.facebook || 'No website'}
                      </span>
                    </div>
                  </button>
                  
                  <button
                    onClick={() => { handleNavigation(`/${tenant.slug}/dashboard`); }}
                    className="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                    role="menuitem"
                  >
                    <Building2 className="h-4 w-4 mr-3" />
                    <div className="flex flex-col items-start">
                      <span>Dashboard</span>
                      <span className="text-xs text-gray-500 font-mono">/{tenant.slug}/dashboard</span>
                    </div>
                  </button>
                </div>
              ))
            ) : (
              <div className="px-4 py-2 text-sm text-gray-500">No tenants found</div>
            )}
          </div>
        )}
      </div>

      {/* Admin Dropdown */}
      <div className="relative" ref={adminMenuRef}>
        <button
          id="admin-menu-button"
          onClick={() => { 
            setIsAdminOpen(!isAdminOpen);
            setIsTenantsOpen(false); // Close other menus
          }}
          className="flex items-center space-x-1 bg-blue-600 hover:bg-blue-700 text-white px-2 py-1.5 rounded-md text-xs font-medium transition-colors"
          aria-expanded={isAdminOpen}
          aria-haspopup="true"
        >
          <Shield className="h-3 w-3" />
          <span>Admin</span>
          <ChevronDown className={`h-3 w-3 transition-transform duration-200 ${isAdminOpen ? 'rotate-180' : ''}`} />
        </button>

        {/* Admin Dropdown Menu */}
        {isAdminOpen && (
          <div 
            className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50"
            role="menu"
            aria-orientation="vertical"
            aria-labelledby="admin-menu-button"
          >
            <button
              onClick={() => { handleNavigation('/'); }}
              className="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
              role="menuitem"
            >
              <Home className="h-4 w-4 mr-3" />
              Main Site
            </button>
            
            <button
              onClick={() => { 
                handleNavigation('/admin-dashboard'); 
              }}
              className="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
              role="menuitem"
            >
              <Shield className="h-4 w-4 mr-3" />
              Admin Dashboard
            </button>
            
            <button
              onClick={() => { 
                handleNavigation('/tenant-onboarding'); 
              }}
              className="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200"
              role="menuitem"
            >
              <Building2 className="h-4 w-4 mr-3" />
              Tenant Onboarding
            </button>
          </div>
        )}
      </div>

    </div>
  );
};

export default UserMenu;

============================
FILE: frontend\src\features\header\contexts\DataProvider.tsx
============================
// This has been moved to @/shared/contexts/DataContext.tsx
// Re-export from shared for backward compatibility
// eslint-disable-next-line react-refresh/only-export-components -- Backward compatibility re-export
export { DataProvider } from '@/shared/contexts/DataContext';
// eslint-disable-next-line react-refresh/only-export-components -- Backward compatibility re-export
export { useData, useDataOptional } from '@/shared/hooks/useData';

============================
FILE: frontend\src\features\header\contexts\TenantContext.tsx
============================
import React, { createContext, useContext } from 'react';

interface TenantContextType {
  slug: string | null;
}

const TenantContext = createContext<TenantContextType | null>(null);

interface TenantProviderProps {
  children: React.ReactNode;
  slug: string | null;
}

export const TenantProvider: React.FC<TenantProviderProps> = ({ children, slug }) => {
  return (
    <TenantContext.Provider value={{ slug }}>
      {children}
    </TenantContext.Provider>
  );
};

// eslint-disable-next-line react-refresh/only-export-components -- Context hook must be in same file as provider
export const useTenant = (): TenantContextType => {
  const context = useContext(TenantContext);
  if (!context) {
    throw new Error('useTenant must be used within a TenantProvider');
  }
  return context;
};


============================
FILE: frontend\src\features\header\hooks\useBusiness.ts
============================
import { useQuery } from '@tanstack/react-query';

import { tenantApi } from '../api/tenant.api';
// import type { Business } from '../types/business.types';

export const useBusiness = (slug: string) => {
  return useQuery({
    queryKey: ['header','business', slug],
    queryFn: () => tenantApi.getTenantBySlug(slug),
    enabled: !!slug, // Only run query if slug exists
    staleTime: 10 * 60 * 1000, // 10 minutes - business data rarely changes
    retry: 2,
  });
};


============================
FILE: frontend\src\features\header\hooks\useTenants.ts
============================
import { useQuery } from '@tanstack/react-query';

import { tenantApi } from '../api/tenant.api';

export const useTenants = () => {
  return useQuery({
    queryKey: ['header','tenants'],
    queryFn: tenantApi.getTenants,
    staleTime: 5 * 60 * 1000, // 5 minutes
    retry: 2,
  });
};


============================
FILE: frontend\src\features\header\index.ts
============================
// Main public components - only export what other features need
export { default as BusinessInfo } from './components/BusinessInfo';
export { default as BusinessInfoDisplay } from './components/BusinessInfoDisplay';
export { default as DevNavigation } from './components/DevNavigation';
export { default as Header } from './components/Header';
export { default as LoginButton } from './components/LoginButton';
export { default as Logo } from './components/Logo';
export { default as Navigation } from './components/Navigation';
export { default as SocialMediaIcons } from './components/SocialMediaIcons';
export { default as UserMenu } from './components/UserMenu';
export { DataProvider, useData } from './contexts/DataProvider';
export { TenantProvider, useTenant } from './contexts/TenantContext';
export { useBusiness } from './hooks/useBusiness';
export { useTenants } from './hooks/useTenants';
export { default as TenantPage } from './pages/TenantPage';
export type { Business, ServiceArea } from './types/business.types';


============================
FILE: frontend\src\features\header\pages\TenantPage.tsx
============================
import React, { useState } from 'react';

import HomePage from '@main/pages/HomePage';
// Page-level composition - intentionally imports from features
// eslint-disable-next-line no-restricted-imports -- Page composition needs quote modal
import { LazyRequestQuoteModal } from '@/features/quotes';

import { DataProvider } from '../contexts/DataProvider';

const TenantPage: React.FC = () => {
  const [isQuoteModalOpen, setIsQuoteModalOpen] = useState(false);

  const handleOpenQuoteModal = () => { setIsQuoteModalOpen(true); };
  const handleCloseQuoteModal = () => { setIsQuoteModalOpen(false); };

  return (
    <DataProvider>
      <div className="min-h-screen">
        <HomePage onRequestQuote={handleOpenQuoteModal} />
        
        {isQuoteModalOpen && (
          <LazyRequestQuoteModal 
            isOpen={isQuoteModalOpen} 
            onClose={handleCloseQuoteModal} 
          />
        )}
      </div>
    </DataProvider>
  );
};

export default TenantPage;


============================
FILE: frontend\src\features\header\routes\tenantRoutes.tsx
============================
import React from 'react';
import { Route } from 'react-router-dom';

import { TenantPage } from '../pages/TenantPage';

export const tenantRoutes = [
  <Route 
    key="tenant-page" 
    path="/:slug" 
    element={<TenantPage />} 
  />
];


============================
FILE: frontend\src\features\header\types\business.types.ts
============================
export interface Business {
  id: number;
  slug: string;
  business_name: string;
  application_status: string;
  business_phone: string;
  sms_phone: string;
  twilio_phone: string;
  service_areas: ServiceArea[];
  owner: string;
  business_email: string;
  personal_email: string;
  first_name: string;
  last_name: string;
  personal_phone: string;
  business_start_date: string;
  website: string;
  gbp_url: string;
  facebook_url: string;
  youtube_url: string;
  tiktok_url: string;
  instagram_url: string;
  industry: string;
  created_at: string;
  updated_at: string;
}

export interface ServiceArea {
  city: string;
  state: string;
  zip?: string;
  primary?: boolean;
  minimum?: number;
  multiplier?: number;
}

export interface BusinessResponse {
  success: boolean;
  data: Business;
}


============================
FILE: frontend\src\features\header\types\index.ts
============================
// Header feature types - minimal set for current implementation

// Navigation link structure
export interface NavLink {
  name: string;
  href: string;
  isFAQ?: boolean;
  isGallery?: boolean;
}

// Social media configuration
export interface SocialMediaConfig {
  facebook?: string;
  instagram?: string;
  tiktok?: string;
  youtube?: string;
}


============================
FILE: frontend\src\features\header\utils\constants.ts
============================
// Header-specific constants
import { NavLink } from '../types';

export const NAV_LINKS: NavLink[] = [
  { name: 'Home', href: '#top' },
  { name: 'Services', href: '#services' },
  { name: 'Reviews', href: '#reviews' },
  { name: 'FAQ', href: '#faq', isFAQ: true },
  { name: 'Gallery', href: '#gallery', isGallery: true }
];


============================
FILE: frontend\src\features\header\utils\navigation.ts
============================
/**
 * Navigation utility functions
 */

/**
 * Smoothly scrolls to a section by its ID
 * @param sectionId - The ID of the section to scroll to (with or without #)
 */
export const scrollToSection = (sectionId: string): void => {
  const cleanId = sectionId.replace('#', '');
  // NOTE: Using inline window.innerWidth check here is intentional
  // This is a utility function (not a React component), so hooks can't be used
  // We need the current viewport width at the time this function is called
  const isDesktop = window.innerWidth >= 768;
  
  // Map nav ID to actual section ID based on screen size
  let targetId = cleanId;
  if (cleanId === 'services') {
    targetId = isDesktop ? 'services-desktop' : 'services';
  } else if (cleanId === 'footer') {
    targetId = isDesktop ? 'gallery-desktop' : 'footer';
  }
  
  const element = document.getElementById(targetId);
  
  if (element) {
    // Temporarily disable snap scrolling for smooth navigation
    const scrollContainer = document.querySelector('.snap-container');
    
    if (scrollContainer) {
      scrollContainer.classList.remove('snap-y', 'snap-mandatory');
      
      element.scrollIntoView({ behavior: 'smooth' });
      
      // Re-enable snap scrolling after a delay
      setTimeout(() => {
        scrollContainer.classList.add('snap-y', 'snap-mandatory');
      }, 1000);
    } else {
      element.scrollIntoView({ behavior: 'smooth' });
    }
  }
};

/**
 * Handles section click events with smooth scrolling
 * @param sectionId - The ID of the section to scroll to
 */
export const handleSectionClick = (sectionId: string): void => {
  scrollToSection(sectionId);
};


============================
FILE: frontend\src\features\hero\components\ContentContainer.tsx
============================
import React from 'react';

import { ReviewsSummary } from '@/shared/ui';

import CTA from './CTA';
import TextDisplay from './TextDisplay';

interface ContentContainerProps {
  title: string;
  subtitle: string;
  onRequestQuote?: () => void;
  className?: string;
}

const ContentContainer: React.FC<ContentContainerProps> = ({ 
  title, 
  subtitle,
  onRequestQuote,
  className = "" 
}) => {
  return (
    <div className={`flex flex-col items-center justify-end h-full ${className}`}>
      <TextDisplay 
        title={title} 
        subtitle={subtitle}
        className="mb-0 sm:mb-8" 
      />
      <CTA onRequestQuote={onRequestQuote} />
      <ReviewsSummary 
        variant="compact" 
        className="mt-0 sm:mt-6 text-base sm:text-lg md:text-xl" 
      />
    </div>
  );
};

export default ContentContainer;


============================
FILE: frontend\src\features\hero\components\CTA.tsx
============================
import React from 'react';

import { CTAButtons } from '@/shared/ui';

interface CTAProps {
  className?: string;
  onRequestQuote?: () => void;
}

const CTA: React.FC<CTAProps> = ({ 
  className = "",
  onRequestQuote 
}) => {
  return (
    <CTAButtons 
      className={className}
      bookNowProps={{}}
      getQuoteProps={{
        onClick: onRequestQuote
      }}
    />
  );
};

// eslint-disable-next-line react-refresh/only-export-components -- Default export required for component
export default CTA;


============================
FILE: frontend\src\features\hero\components\Hero.tsx
============================
import React from 'react';

import { useHeroContent } from '@/features/hero/hooks/useHeroContent';
import { BREAKPOINTS, useMediaQuery } from '@/shared/hooks';

import ContentContainer from './ContentContainer';
import ImageCarousel from './ImageCarousel';

interface HeroProps {
  onRequestQuote?: () => void;
}

const Hero: React.FC<HeroProps> = ({ onRequestQuote }) => {
  const { title, subtitle } = useHeroContent({});
  const isSmallMobile = useMediaQuery(`(max-width: ${BREAKPOINTS.sm - 1}px)`);

  return (
    <section 
      id="top" 
      className="relative isolate overflow-hidden h-[100dvh] sm:h-screen flex items-end justify-center snap-start snap-always"
    >
      {/* Background layer - carousel */}
      <div className="absolute inset-0 -z-10" style={{ top: '-72px', height: 'calc(100% + 72px)' }}>
        <ImageCarousel />
      </div>
      
      {/* Foreground content */}
      <main
        id="main"
        className="relative z-10 w-full"
        style={{ 
          marginTop: '72px',
          paddingBottom: isSmallMobile ? '56px' : '7rem'
        }}
      >
        <ContentContainer 
          title={title} 
          subtitle={subtitle}
          {...(onRequestQuote && { onRequestQuote })}
          className=""
        />
      </main>
    </section>
  );
};

export default Hero;


============================
FILE: frontend\src\features\hero\components\ImageCarousel.tsx
============================
import React from 'react';

import { useImageRotation } from '@/shared/hooks';
import { useData } from '@/shared/hooks/useData';
import { getTransitionStyles } from '@/shared/utils/imageRotation';
// Available when needed: toAvif, toWebp for modern image format support

interface HeroImage {
  url: string;
  mobileUrl?: string; // Optional mobile-specific image (portrait orientation)
  alt: string;
  width?: number;
  height?: number;
  priority?: boolean;
}

interface ImageCarouselProps {
  autoRotate?: boolean;
  interval?: number;
}

const ImageCarousel: React.FC<ImageCarouselProps> = ({ 
  autoRotate = true, 
  interval = 7000
}) => {
  const { siteConfig } = useData();
  
  // Get hero images from main site config
  const heroImages = (siteConfig?.hero as { Images?: HeroImage[] } | undefined)?.Images || [];
  const imageData: HeroImage[] = heroImages;
  const images: string[] = imageData.map(img => img.url);

  // Use the new image rotation utility (must be called unconditionally)
  const rotation = useImageRotation({
    images: images.length > 0 ? images : [''], // Provide dummy array if empty
    autoRotate,
    interval,
    fadeDuration: 2000, // 2s fade duration to match original
    preloadNext: true,
    pauseOnHover: false // Hero doesn't need hover pause
  });

  const { currentIndex } = rotation;
  
  // Guard: nothing to render (must be after ALL hooks)
  if (images.length === 0) {
    return null;
  }

  return (
    <div className="absolute inset-0 pointer-events-none" aria-hidden="true">
      {images.map((image, index) => {
        const imgData: HeroImage | undefined = imageData[index];
        const desktopUrl = image;
        const mobileUrl = imgData?.mobileUrl;

        return (
          <div
            key={index}
            className="absolute inset-0"
            style={getTransitionStyles(2000)}
          >
            {mobileUrl ? (
              <>
                {/* Mobile portrait (≤640px) */}
                <img
                  src={mobileUrl}
                  alt={imgData.alt || ''}
                  className="absolute inset-0 w-full h-full object-cover object-top sm:hidden"
                  style={{
                    opacity: index === currentIndex ? 1 : 0,
                    transition: 'opacity 2s ease-in-out',
                    width: '100%',
                    height: '100%',
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    zIndex: index === currentIndex ? 2 : 1
                  }}
                  loading={index === 0 ? 'eager' : 'lazy'}
                  decoding="async"
                />
                {/* Tablet/Desktop (≥640px) */}
                <img
                  src={desktopUrl}
                  alt={imgData.alt || ''}
                  className="absolute inset-0 w-full h-full object-cover object-center hidden sm:block"
                  style={{
                    opacity: index === currentIndex ? 1 : 0,
                    transition: 'opacity 2s ease-in-out',
                    width: '100%',
                    height: '100%',
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    zIndex: index === currentIndex ? 2 : 1
                  }}
                  loading={index === 0 ? 'eager' : 'lazy'}
                  decoding="async"
                />
              </>
            ) : (
              <img
                src={desktopUrl}
                alt={imgData?.alt || ''}
                className="absolute inset-0 w-full h-full object-cover object-top sm:object-center"
                style={{
                  opacity: index === currentIndex ? 1 : 0,
                  transition: 'opacity 2s ease-in-out',
                  width: '100%',
                  height: '100%',
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  zIndex: index === currentIndex ? 2 : 1
                }}
                loading={index === 0 ? 'eager' : 'lazy'}
                decoding="async"
              />
            )}
          </div>
        );
      })}
      <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-black/40 to-black/30 pointer-events-none" />
    </div>
  );
};

export default ImageCarousel;


============================
FILE: frontend\src\features\hero\components\TextDisplay.tsx
============================
import React from 'react';

interface TextDisplayProps {
  title: string;
  subtitle: string;
  className?: string;
}

const TextDisplay: React.FC<TextDisplayProps> = ({ 
  title, 
  subtitle,
  className = "" 
}) => {
  return (
    <div className={`text-center text-white max-w-4xl mx-auto px-4 sm:px-6 ${className}`}>
      <h1 className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl xl:text-6xl font-bold mb-1 sm:mb-4 md:mb-6 [text-wrap:balance] leading-tight">
        {title}
      </h1>
      <p className="text-base sm:text-lg md:text-xl lg:text-2xl xl:text-3xl text-gray-200 leading-relaxed">
        {subtitle}
      </p>
    </div>
  );
};

export default TextDisplay;


============================
FILE: frontend\src\features\hero\hooks\useHeroContent.ts
============================
import { useWebsiteContent } from '@/shared/contexts/WebsiteContentContext';
import { useIndustrySiteData } from '@/shared/hooks/useIndustrySiteData';
import type { LocationPage } from '@/shared/types/location';

interface UseHeroContentReturn {
  title: string;
  subtitle: string;
  isLocation: boolean;
  locationName: string;
}

interface UseHeroContentProps {
  locationData?: LocationPage;
}

export const useHeroContent = (props?: UseHeroContentProps): UseHeroContentReturn => {
  // Get industry-specific site data
  const { siteData } = useIndustrySiteData();
  
  // Always call hooks unconditionally
  const { content: websiteContent } = useWebsiteContent();
  
  // Use passed locationData as fallback
  const locationData = props?.locationData;
  
  // All sites are now tenant-based, so use database content or industry-specific site data
  // Priority: Database content > Industry-specific site data > Fallback
  const title = String(websiteContent?.hero_title || siteData?.hero.h1 || 'Professional Services');
  const subtitle = String(websiteContent?.hero_subtitle || siteData?.hero.sub || 'Quality service for your needs');

  return {
    title,
    subtitle,
    isLocation: false, // All sites are now tenant-based
    locationName: locationData?.city ?? ''
  };
};


============================
FILE: frontend\src\features\hero\index.ts
============================
// Hero feature public exports
export { default as ContentContainer } from './components/ContentContainer';
export { default as CTA } from './components/CTA';
export { default as Hero } from './components/Hero';
export { default as ImageCarousel } from './components/ImageCarousel';
export { default as TextDisplay } from './components/TextDisplay';

============================
FILE: frontend\src\features\locations\api\locations.api.ts
============================
// Locations API calls

import type { LocationData, SearchResult } from '../schemas/locations.schemas';

export const locationsApi = {
  // Search for locations by city, state, or zip code
  searchLocations: async (query: string): Promise<SearchResult[]> => {
    // For now, we'll use a simple mock implementation
    // In a real app, this would call a geocoding API like Google Places, Mapbox, etc.
    
    const mockResults: SearchResult[] = [
      {
        city: 'New York',
        state: 'NY',
        zipCode: '10001',
        coordinates: { lat: 40.7128, lng: -74.0060 }
      },
      {
        city: 'Los Angeles',
        state: 'CA',
        zipCode: '90210',
        coordinates: { lat: 34.0522, lng: -118.2437 }
      },
      {
        city: 'Chicago',
        state: 'IL',
        zipCode: '60601',
        coordinates: { lat: 41.8781, lng: -87.6298 }
      },
      {
        city: 'Houston',
        state: 'TX',
        zipCode: '77001',
        coordinates: { lat: 29.7604, lng: -95.3698 }
      },
      {
        city: 'Phoenix',
        state: 'AZ',
        zipCode: '85001',
        coordinates: { lat: 33.4484, lng: -112.0740 }
      }
    ];

    // Filter results based on query
    const filteredResults = mockResults.filter(result => 
      result.city.toLowerCase().includes(query.toLowerCase()) ||
      result.state.toLowerCase().includes(query.toLowerCase()) ||
      result.zipCode.includes(query)
    );

    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 300));

    return filteredResults;
  },

  // Get location by coordinates (reverse geocoding)
  getLocationByCoordinates: async (_lat: number, _lng: number): Promise<LocationData | null> => {
    // Mock implementation - in real app, would call reverse geocoding API
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // Return a mock location based on coordinates
    return {
      city: 'Sample City',
      state: 'SC',
      zipCode: '12345',
      fullLocation: 'Sample City, SC'
    };
  },

  // Validate location data
  validateLocation: async (location: LocationData): Promise<boolean> => {
    // Mock validation - in real app, would validate against a real geocoding service
    await new Promise(resolve => setTimeout(resolve, 100));
    
    return location.city.length > 0 && location.state.length > 0;
  },

  // Get popular locations (for suggestions)
  getPopularLocations: async (): Promise<SearchResult[]> => {
    // Mock popular locations
    await new Promise(resolve => setTimeout(resolve, 200));
    
    return [
      {
        city: 'New York',
        state: 'NY',
        zipCode: '10001',
        coordinates: { lat: 40.7128, lng: -74.0060 }
      },
      {
        city: 'Los Angeles',
        state: 'CA',
        zipCode: '90210',
        coordinates: { lat: 34.0522, lng: -118.2437 }
      },
      {
        city: 'Chicago',
        state: 'IL',
        zipCode: '60601',
        coordinates: { lat: 41.8781, lng: -87.6298 }
      }
    ];
  },

  // Get service areas for a business
  getServiceAreas: async (businessSlug: string): Promise<LocationData[]> => {
    const token = localStorage.getItem('token');
    const response = await fetch(`/api/affiliates/${businessSlug}/service-areas`, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token ?? ''}`
      }
    });
    
    if (!response.ok) {
      throw new Error('Failed to fetch service areas');
    }
    
    const data = await response.json() as { serviceAreas?: LocationData[] };
    return data.serviceAreas || [];
  },

  // Add service area
  addServiceArea: async (businessSlug: string, location: LocationData): Promise<void> => {
    const token = localStorage.getItem('token');
    const response = await fetch(`/api/affiliates/${businessSlug}/service-areas`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token ?? ''}`
      },
      body: JSON.stringify(location)
    });
    
    if (!response.ok) {
      throw new Error('Failed to add service area');
    }
  },

  // Remove service area
  removeServiceArea: async (businessSlug: string, locationId: string): Promise<void> => {
    const token = localStorage.getItem('token');
    const response = await fetch(`/api/affiliates/${businessSlug}/service-areas/${locationId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token ?? ''}`
      }
    });
    
    if (!response.ok) {
      throw new Error('Failed to remove service area');
    }
  }
};


============================
FILE: frontend\src\features\locations\components\LocationSelector.tsx
============================
import React, { useEffect, useRef, useState } from 'react';
import { ChevronDown, MapPin } from 'lucide-react';

import { locationsApi } from '../api/locations.api';
import type { LocationData, SearchResult } from '../schemas/locations.schemas';

interface LocationSelectorProps {
  locations: LocationData[];
  selectedLocation?: LocationData;
  onLocationSelect: (location: LocationData) => void;
  placeholder?: string;
  className?: string;
}

const LocationSelector: React.FC<LocationSelectorProps> = ({
  locations,
  selectedLocation,
  onLocationSelect,
  placeholder = "Select a location",
  className = ""
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const selectorRef = useRef<HTMLDivElement>(null);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (selectorRef.current && !selectorRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => { document.removeEventListener('mousedown', handleClickOutside); };
  }, []);

  // Handle search
  const handleSearch = async (term: string) => {
    setSearchTerm(term);
    
    if (term.length < 2) {
      setSearchResults([]);
      return;
    }

    setIsLoading(true);
    try {
      const results = await locationsApi.searchLocations(term);
      setSearchResults(results);
    } catch (error) {
      console.error('Location search failed:', error);
      setSearchResults([]);
    } finally {
      setIsLoading(false);
    }
  };

  // Handle location selection
  const handleLocationSelect = (result: SearchResult) => {
    const locationData: LocationData = {
      city: result.city,
      state: result.state,
      zipCode: result.zipCode || '',
      fullLocation: `${result.city}, ${result.state}`
    };

    onLocationSelect(locationData);
    setIsOpen(false);
    setSearchTerm('');
    setSearchResults([]);
  };

  // Handle existing location selection
  const handleExistingLocationSelect = (location: LocationData) => {
    onLocationSelect(location);
    setIsOpen(false);
  };

  return (
    <div ref={selectorRef} className={`relative ${className}`}>
      {/* Selector Button */}
      <button
        onClick={() => { setIsOpen(!isOpen); }}
        className="w-full flex items-center justify-between px-4 py-3 text-left bg-white border border-gray-300 rounded-lg hover:border-gray-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors duration-200"
      >
        <div className="flex items-center">
          <MapPin className="h-4 w-4 text-gray-400 mr-2" />
          <span className={selectedLocation ? 'text-gray-900' : 'text-gray-500'}>
            {selectedLocation ? selectedLocation.fullLocation : placeholder}
          </span>
        </div>
        <ChevronDown className={`h-4 w-4 text-gray-400 transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`} />
      </button>

      {/* Dropdown */}
      {isOpen && (
        <div className="absolute z-50 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto">
          {/* Search Input */}
          <div className="p-3 border-b border-gray-200">
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => {
                void handleSearch(e.target.value);
              }}
              placeholder="Search for a location..."
              className="w-full px-3 py-2 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
            />
          </div>

          {/* Loading State */}
          {isLoading && (
            <div className="px-4 py-3 text-gray-500 text-center">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-orange-500 mx-auto"></div>
              <span className="ml-2 text-sm">Searching...</span>
            </div>
          )}

          {/* Search Results */}
          {searchTerm.length >= 2 && searchResults.length > 0 && (
            <div className="py-1">
              <div className="px-3 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wide">
                Search Results
              </div>
              {searchResults.map((result, index) => (
                <button
                  key={`search-${result.city}-${result.state}-${String(index)}`}
                  onClick={() => {
                    handleLocationSelect(result);
                  }}
                  className="w-full px-4 py-3 text-left hover:bg-gray-50 focus:bg-gray-50 focus:outline-none"
                >
                  <div className="flex items-center space-x-3">
                    <MapPin className="h-4 w-4 text-gray-400 flex-shrink-0" />
                    <div>
                      <div className="font-medium text-gray-900">
                        {result.city}, {result.state}
                      </div>
                      {result.zipCode && (
                        <div className="text-sm text-gray-500">
                          {result.zipCode}
                        </div>
                      )}
                    </div>
                  </div>
                </button>
              ))}
            </div>
          )}

          {/* Existing Locations */}
          {locations.length > 0 && (
            <div className="py-1">
              <div className="px-3 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wide">
                Your Locations
              </div>
              {locations.map((location, index) => (
                <button
                  key={`existing-${location.city}-${location.state}-${String(index)}`}
                  onClick={() => {
                    handleExistingLocationSelect(location);
                  }}
                  className={`w-full px-4 py-3 text-left hover:bg-gray-50 focus:bg-gray-50 focus:outline-none ${
                    selectedLocation?.fullLocation === location.fullLocation ? 'bg-orange-50 text-orange-600' : ''
                  }`}
                >
                  <div className="flex items-center space-x-3">
                    <MapPin className="h-4 w-4 text-gray-400 flex-shrink-0" />
                    <div>
                      <div className="font-medium">
                        {location.fullLocation}
                      </div>
                      {location.zipCode && (
                        <div className="text-sm text-gray-500">
                          {location.zipCode}
                        </div>
                      )}
                    </div>
                  </div>
                </button>
              ))}
            </div>
          )}

          {/* No Results */}
          {searchTerm.length >= 2 && !isLoading && searchResults.length === 0 && (
            <div className="px-4 py-3 text-gray-500 text-center text-sm">
              No locations found
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default LocationSelector;


============================
FILE: frontend\src\features\locations\data\areas.json
============================
{
  "us_states": [
    { "name": "Alabama", "abbreviation": "AL" },
    { "name": "Alaska", "abbreviation": "AK" },
    { "name": "Arizona", "abbreviation": "AZ" },
    { "name": "Arkansas", "abbreviation": "AR" },
    { "name": "California", "abbreviation": "CA" },
    { "name": "Colorado", "abbreviation": "CO" },
    { "name": "Connecticut", "abbreviation": "CT" },
    { "name": "Delaware", "abbreviation": "DE" },
    { "name": "Florida", "abbreviation": "FL" },
    { "name": "Georgia", "abbreviation": "GA" },
    { "name": "Hawaii", "abbreviation": "HI" },
    { "name": "Idaho", "abbreviation": "ID" },
    { "name": "Illinois", "abbreviation": "IL" },
    { "name": "Indiana", "abbreviation": "IN" },
    { "name": "Iowa", "abbreviation": "IA" },
    { "name": "Kansas", "abbreviation": "KS" },
    { "name": "Kentucky", "abbreviation": "KY" },
    { "name": "Louisiana", "abbreviation": "LA" },
    { "name": "Maine", "abbreviation": "ME" },
    { "name": "Maryland", "abbreviation": "MD" },
    { "name": "Massachusetts", "abbreviation": "MA" },
    { "name": "Michigan", "abbreviation": "MI" },
    { "name": "Minnesota", "abbreviation": "MN" },
    { "name": "Mississippi", "abbreviation": "MS" },
    { "name": "Missouri", "abbreviation": "MO" },
    { "name": "Montana", "abbreviation": "MT" },
    { "name": "Nebraska", "abbreviation": "NE" },
    { "name": "Nevada", "abbreviation": "NV" },
    { "name": "New Hampshire", "abbreviation": "NH" },
    { "name": "New Jersey", "abbreviation": "NJ" },
    { "name": "New Mexico", "abbreviation": "NM" },
    { "name": "New York", "abbreviation": "NY" },
    { "name": "North Carolina", "abbreviation": "NC" },
    { "name": "North Dakota", "abbreviation": "ND" },
    { "name": "Ohio", "abbreviation": "OH" },
    { "name": "Oklahoma", "abbreviation": "OK" },
    { "name": "Oregon", "abbreviation": "OR" },
    { "name": "Pennsylvania", "abbreviation": "PA" },
    { "name": "Rhode Island", "abbreviation": "RI" },
    { "name": "South Carolina", "abbreviation": "SC" },
    { "name": "South Dakota", "abbreviation": "SD" },
    { "name": "Tennessee", "abbreviation": "TN" },
    { "name": "Texas", "abbreviation": "TX" },
    { "name": "Utah", "abbreviation": "UT" },
    { "name": "Vermont", "abbreviation": "VT" },
    { "name": "Virginia", "abbreviation": "VA" },
    { "name": "Washington", "abbreviation": "WA" },
    { "name": "West Virginia", "abbreviation": "WV" },
    { "name": "Wisconsin", "abbreviation": "WI" },
    { "name": "Wyoming", "abbreviation": "WY" }
  ],
  "major_cities": [
    { "city": "New York", "state": "NY", "zipCode": "10001" },
    { "city": "Los Angeles", "state": "CA", "zipCode": "90210" },
    { "city": "Chicago", "state": "IL", "zipCode": "60601" },
    { "city": "Houston", "state": "TX", "zipCode": "77001" },
    { "city": "Phoenix", "state": "AZ", "zipCode": "85001" },
    { "city": "Philadelphia", "state": "PA", "zipCode": "19101" },
    { "city": "San Antonio", "state": "TX", "zipCode": "78201" },
    { "city": "San Diego", "state": "CA", "zipCode": "92101" },
    { "city": "Dallas", "state": "TX", "zipCode": "75201" },
    { "city": "San Jose", "state": "CA", "zipCode": "95101" },
    { "city": "Austin", "state": "TX", "zipCode": "78701" },
    { "city": "Jacksonville", "state": "FL", "zipCode": "32201" },
    { "city": "Fort Worth", "state": "TX", "zipCode": "76101" },
    { "city": "Columbus", "state": "OH", "zipCode": "43201" },
    { "city": "Charlotte", "state": "NC", "zipCode": "28201" },
    { "city": "San Francisco", "state": "CA", "zipCode": "94101" },
    { "city": "Indianapolis", "state": "IN", "zipCode": "46201" },
    { "city": "Seattle", "state": "WA", "zipCode": "98101" },
    { "city": "Denver", "state": "CO", "zipCode": "80201" },
    { "city": "Washington", "state": "DC", "zipCode": "20001" }
  ],
  "service_areas": [
    {
      "region": "Northeast",
      "states": ["NY", "NJ", "CT", "MA", "RI", "VT", "NH", "ME", "PA"],
      "major_cities": ["New York", "Boston", "Philadelphia", "Hartford", "Providence"]
    },
    {
      "region": "Southeast",
      "states": ["FL", "GA", "SC", "NC", "VA", "WV", "KY", "TN", "AL", "MS", "AR", "LA"],
      "major_cities": ["Miami", "Atlanta", "Charlotte", "Nashville", "Orlando", "Tampa"]
    },
    {
      "region": "Midwest",
      "states": ["IL", "IN", "OH", "MI", "WI", "MN", "IA", "MO", "ND", "SD", "NE", "KS"],
      "major_cities": ["Chicago", "Detroit", "Cleveland", "Minneapolis", "Milwaukee", "St. Louis"]
    },
    {
      "region": "Southwest",
      "states": ["TX", "OK", "NM", "AZ", "CO", "UT", "NV"],
      "major_cities": ["Houston", "Dallas", "Phoenix", "Denver", "Austin", "San Antonio"]
    },
    {
      "region": "West Coast",
      "states": ["CA", "OR", "WA", "AK", "HI"],
      "major_cities": ["Los Angeles", "San Francisco", "Seattle", "Portland", "San Diego"]
    }
  ]
}


============================
FILE: frontend\src\features\locations\hooks\index.ts
============================
// Locations feature hooks
export { useLocationPageState } from './useLocationPageState';

============================
FILE: frontend\src\features\locations\hooks\useLocationPageState.ts
============================
import { useCallback, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { useQueryClient } from '@tanstack/react-query';

import { useTenantConfigLoader } from '@/shared/hooks';

/**
 * Hook to manage location page state and interactions
 * Handles quote modals, booking navigation, and tenant detection
 */
export function useLocationPageState() {
  const [isQuoteModalOpen, setIsQuoteModalOpen] = useState(false);
  const navigate = useNavigate();
  const params = useParams<{ slug?: string; businessSlug?: string; tenantSlug?: string }>();
  const queryClient = useQueryClient();
  
  // Get business slug from URL params
  const businessSlug = params.slug || params.businessSlug || params.tenantSlug || '';
  
  // Load tenant config to determine if this is an affiliate
  const { data: tenantConfig } = useTenantConfigLoader({ slug: businessSlug });
  const isAffiliate = (tenantConfig?.isAffiliate as boolean | undefined) ?? false;

  const handleOpenQuoteModal = useCallback(() => {
    setIsQuoteModalOpen(true);
  }, []);

  const handleCloseQuoteModal = useCallback(() => {
    setIsQuoteModalOpen(false);
  }, []);

  const handleBookNow = useCallback(() => {
    // Navigate to booking page
    if (businessSlug) {
      void navigate(`/${businessSlug}/booking`);
    } else {
      void navigate('/booking');
    }
  }, [businessSlug, navigate]);

  const handleQuoteModalPrefetch = useCallback(() => {
    // Prefetch quote modal dependencies
    // This is called on hover to prepare the modal
    void queryClient.prefetchQuery({
      queryKey: ['quote-modal-prefetch'],
      queryFn: () => {
        // Prefetch any data needed for the quote modal
        return Promise.resolve(null);
      },
      staleTime: 5 * 60 * 1000, // 5 minutes
    });
  }, [queryClient]);

  return {
    isAffiliate,
    businessSlug,
    isQuoteModalOpen,
    handleOpenQuoteModal,
    handleCloseQuoteModal,
    handleBookNow,
    handleQuoteModalPrefetch,
  };
}



============================
FILE: frontend\src\features\locations\index.ts
============================
// Re-export location components
export { default as LocationSelector } from './components/LocationSelector';

// Re-export location utilities
export * from './utils';

// Re-export location types
export * from './types';

// Re-export specific types that are commonly used
export type { AutocompleteSessionToken, AutocompleteSuggestion, PlacesLibrary } from './types/places.types';



============================
FILE: frontend\src\features\locations\LocationPage.tsx
============================
import { useEffect } from "react";

// Page-level composition - intentionally imports from multiple features
// This is a top-level page that composes multiple feature components
// eslint-disable-next-line no-restricted-imports -- Page composition
import { FAQ } from '@/features/faq';
// eslint-disable-next-line no-restricted-imports -- Page composition
import { Footer } from '@/features/footer';
// eslint-disable-next-line no-restricted-imports -- Page composition
import { Hero } from '@/features/hero';
import { useLocationPageState } from '@/features/locations/hooks';
// eslint-disable-next-line no-restricted-imports -- Page composition
import { RequestQuoteModal } from '@/features/quotes';
// eslint-disable-next-line no-restricted-imports -- Page composition
import { Reviews } from '@/features/reviews';
// eslint-disable-next-line no-restricted-imports -- Page composition
import { Services } from '@/features/services';
import HomePageLayout from '@/shared/components/HomePageLayout';
import { useBrowserTab, useMetaTags } from '@/shared/hooks';
import type { LocationPage as LocationPageType } from '@/shared/types/location';
import { generateAllSchemas, injectAllSchemas } from '@/shared/utils/schemaUtils';

// Page-level composition - allowed to import from multiple features
export default function LocationPage({ area }: { area: LocationPageType }) {  
  const locationPageState = useLocationPageState();
  const {
    isAffiliate,
    businessSlug,
    isQuoteModalOpen,
    handleOpenQuoteModal,
    handleCloseQuoteModal,
    handleBookNow,
    handleQuoteModalPrefetch
  } = locationPageState;

  // Update browser tab title
  useBrowserTab({
    title: area.seo.title,
    useBusinessName: false, // Location pages have their own title
  });

  // Update meta tags for SEO
  useMetaTags({
    title: area.seo.title,
    description: area.seo.description,
    ogImage: area.seo.ogImage ?? area.images?.[0]?.url,
    twitterImage: area.seo.twitterImage ?? area.seo.ogImage ?? area.images?.[0]?.url,
    canonicalPath: area.seo.canonicalPath,
  });

  // Generate and inject Schema.org JSON-LD schemas
  useEffect(() => {
    const schemas = generateAllSchemas(area, 'location');
    injectAllSchemas(schemas);
  }, [area]);

  return (
    <HomePageLayout>
      <section id="hero">
        <Hero 
          onRequestQuote={handleOpenQuoteModal} 
          onBookNow={handleBookNow}
          onQuoteHover={handleQuoteModalPrefetch}
          {...(area.hero.h1 || area.hero.sub ? {
            customContent: {
              title: area.hero.h1,
              ...(area.hero.sub && { subtitle: area.hero.sub })
            }
          } : {})}
        />
      </section>

      <section id="services">
        <Services />
      </section>
      <section id="reviews">
        <Reviews 
          tenantSlug={businessSlug}
          {...(area.reviewsSection?.heading && { customHeading: area.reviewsSection.heading })}
          {...(area.reviewsSection?.intro && { customIntro: area.reviewsSection.intro })}
          {...(area.reviewsSection?.feedKey && { feedKey: area.reviewsSection.feedKey })}
        />
      </section>
      <FAQ 
        {...(area.faqs && { customFAQs: area.faqs })}
        {...(area.faqIntro && { customFAQIntro: area.faqIntro })}
      />
      <section id="footer">
        <Footer 
          onRequestQuote={handleOpenQuoteModal} 
          onBookNow={handleBookNow}
          onQuoteHover={handleQuoteModalPrefetch}
        />
      </section>
      
      {/* Centralized Modals - Now using lazy loading */}
      {isAffiliate && (
        <RequestQuoteModal
          isOpen={isQuoteModalOpen}
          onClose={handleCloseQuoteModal}
        />
      )}
    </HomePageLayout>
  );
}


============================
FILE: frontend\src\features\locations\schemas\locations.schemas.ts
============================
import { z } from 'zod';

// Coordinates schema
export const coordinatesSchema = z.object({
  lat: z.number().min(-90).max(90),
  lng: z.number().min(-180).max(180),
});

// Location data schema
export const locationDataSchema = z.object({
  city: z.string().min(1),
  state: z.string().min(2).max(2), // State abbreviation
  zipCode: z.string().optional(),
  fullLocation: z.string().min(1),
  coordinates: coordinatesSchema.optional(),
});

// Search result schema
export const searchResultSchema = z.object({
  city: z.string().min(1),
  state: z.string().min(2).max(2),
  zipCode: z.string().optional(),
  coordinates: coordinatesSchema.optional(),
});

// Service area schema
export const serviceAreaSchema = z.object({
  id: z.string().optional(),
  city: z.string().min(1),
  state: z.string().min(2).max(2),
  zipCode: z.string().optional(),
  fullLocation: z.string().min(1),
  primary: z.boolean().optional(),
  coordinates: coordinatesSchema.optional(),
});

// Location search props schema
export const locationSearchPropsSchema = z.object({
  placeholder: z.string().optional(),
  className: z.string().optional(),
  id: z.string().optional(),
  showIcon: z.boolean().optional(),
  buttonClassName: z.string().optional(),
  displayText: z.string().optional(),
  gapClassName: z.string().optional(),
});

// Location selector props schema
export const locationSelectorPropsSchema = z.object({
  locations: z.array(locationDataSchema),
  selectedLocation: locationDataSchema.optional(),
  placeholder: z.string().optional(),
  className: z.string().optional(),
});

// Export types
export type Coordinates = z.infer<typeof coordinatesSchema>;
export type LocationData = z.infer<typeof locationDataSchema>;
export type SearchResult = z.infer<typeof searchResultSchema>;
export type ServiceArea = z.infer<typeof serviceAreaSchema>;
export type LocationSearchProps = z.infer<typeof locationSearchPropsSchema>;
export type LocationSelectorProps = z.infer<typeof locationSelectorPropsSchema>;


============================
FILE: frontend\src\features\locations\types\index.ts
============================
// Locations feature types
export * from './places.types';


============================
FILE: frontend\src\features\locations\types\places.types.ts
============================
// Google Places API types for location autocomplete

export interface AutocompleteSuggestion {
  placePrediction: {
    place: string;
    placeId: string;
    text: {
      text: string;
      matches: Array<{
        endOffset: number;
        startOffset: number;
      }>;
    };
    structuredFormat: {
      mainText: {
        text: string;
        matches: Array<{
          endOffset: number;
          startOffset: number;
        }>;
      };
      secondaryText: {
        text: string;
        matches: Array<{
          endOffset: number;
          startOffset: number;
        }>;
      };
    };
    types: string[];
  };
}

export interface AutocompleteRequest {
  input: string;
  sessionToken: AutocompleteSessionToken;
  includedRegionCodes?: string[];
  locationBias?: google.maps.LatLngBounds | google.maps.LatLng;
  locationRestriction?: google.maps.LatLngBounds | google.maps.LatLng;
  includedPrimaryTypes?: string[];
  includedSecondaryTypes?: string[];
  languageCode?: string;
  regionCode?: string;
  origin?: google.maps.LatLng;
}

export interface AutocompleteResponse {
  suggestions: AutocompleteSuggestion[];
}

export interface AutocompleteSessionToken {
  // This is a Google Maps API object, so we just need to type it as an object
  // The actual implementation is provided by Google Maps
  [key: string]: unknown;
}

export interface PlacesLibrary {
  AutocompleteSuggestion: {
    fetchAutocompleteSuggestions(request: AutocompleteRequest): Promise<AutocompleteResponse>;
  };
  AutocompleteSessionToken: new () => AutocompleteSessionToken;
}


============================
FILE: frontend\src\features\locations\utils\googleMaps.helpers.ts
============================
// Google Maps helper functions with proper typing

export function getGoogle(): (typeof google) | undefined {
  return (window as unknown as { google?: typeof google }).google;
}

export function hasImportLibrary(): boolean {
  const g = getGoogle();
  // v=beta exposes maps.importLibrary
  return !!g?.maps.importLibrary;
}

export function hasMaps(): boolean {
  const g = getGoogle();
  return !!g?.maps;
}


============================
FILE: frontend\src\features\locations\utils\googlePlace.ts
============================
export type PlaceField = 'address_components' | 'formatted_address' | 'geometry' | 'name';

export interface ParsedPlace {
  street?: string;
  city?: string;
  state?: string;
  postalCode?: string;
  country?: string;
  formattedAddress?: string;
  lat?: number;
  lng?: number;
  name?: string;
}

const getComponent = (
  list: google.maps.GeocoderAddressComponent[] | undefined,
  type: string,
  long = true
): string | undefined => {
  if (!list) return;
  const comp = list.find(c => c.types.includes(type));
  return long ? comp?.long_name : comp?.short_name;
};

export const parsePlace = (place: google.maps.places.PlaceResult): ParsedPlace => {
  const comps = place.address_components;
  const location = place.geometry?.location;

  return {
    street: getComponent(comps, 'route'),
    city: getComponent(comps, 'locality') ?? getComponent(comps, 'sublocality'),
    state: getComponent(comps, 'administrative_area_level_1', false),
    postalCode: getComponent(comps, 'postal_code'),
    country: getComponent(comps, 'country', false),
    formattedAddress: place.formatted_address,
    lat: location?.lat(),
    lng: location?.lng(),
    name: place.name
  };
};

export async function importPlaces(): Promise<google.maps.PlacesLibrary> {
  const w = window as Window & { google?: typeof google };
  if (!w.google?.maps.importLibrary) throw new Error('Google Maps not loaded');
  return (await w.google.maps.importLibrary('places')) as google.maps.PlacesLibrary;
}

============================
FILE: frontend\src\features\locations\utils\index.ts
============================
// Locations feature utilities
export * from './googleMaps.helpers';
export * from './googlePlace';
export * from './placesLoader';


============================
FILE: frontend\src\features\locations\utils\placesLoader.ts
============================
/* eslint-disable @typescript-eslint/no-unnecessary-condition -- Google Maps API checks require optional chaining that TypeScript thinks is unnecessary */
// A small, typed loader around the new importLibrary('places') API.

import { config } from '@/shared/env';

const MAPS_SRC_MATCH = 'maps.googleapis.com';

function wait(ms: number) {
  return new Promise<void>((res) => setTimeout(res, ms));
}

/** Ensures the <script> is present; returns once it finishes loading or errors. */
async function injectMapsScript(): Promise<void> {
  if (window.google?.maps) return; // already loaded
  if (!document.querySelector(`script[src*="${MAPS_SRC_MATCH}"]`)) {
    const apiKey = config.googleMapsApiKey;
    if (!apiKey) throw new Error('Missing VITE_GOOGLE_MAPS_API_KEY');

    const script = document.createElement('script');
    script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=beta&loading=async`;
    script.async = true;
    script.defer = true;

    // Wrap load/error in a promise
    await new Promise<void>((resolve, reject) => {
      script.onload = () => { resolve(); };
      script.onerror = () => { reject(new Error('Failed to load Google Maps JS API')); };
      document.head.appendChild(script);
    });
  } else {
    // A script tag exists; give it a moment to finish if needed
    // (helps in Fast Refresh / quick reload flows)
    for (let i = 0; i < 20 && !window.google?.maps; i++) {
      await wait(100);
    }
  }
}

/** Loads the Places library (typed) or returns null if not available yet. */
export async function importPlacesLib(): Promise<google.maps.PlacesLibrary | null> {
  await injectMapsScript();

  const g = window.google;
  if (!g?.maps?.importLibrary) return null;

  const lib = await g.maps.importLibrary('places') as google.maps.PlacesLibrary;
  return lib;
}

/** Convenience "is ready?" probe */
export async function ensurePlacesReady(): Promise<boolean> {
  const lib = await importPlacesLib();
  return !!lib;
}
/* eslint-enable @typescript-eslint/no-unnecessary-condition -- Re-enable after Google Maps API checks */


============================
FILE: frontend\src\features\preview\api\preview.api.ts
============================
/**
 * Preview API Client
 * 
 * HTTP calls for preview token generation and verification.
 * No UI imports, no DOM usage - pure API layer.
 */

import { config } from '@/shared/env';
import { safeValidationMessage } from '@/shared/utils/errorHandling';

import type {
  CreatePreviewResponse,
  PreviewErrorResponse,
  PreviewPayload,
  VerifyPreviewResponse,
} from '../types/preview.types';
import { PreviewPayloadSchema } from '../types/preview.types';

/**
 * Create a preview token
 * @param payload - Business information for preview
 * @returns Promise with preview URL and token
 */
export async function createPreview(
  payload: PreviewPayload
): Promise<CreatePreviewResponse> {
  // Validate payload before sending
  const validation = PreviewPayloadSchema.safeParse(payload);
  if (!validation.success) {
    throw new Error(safeValidationMessage(validation.error));
  }

  try {
    const response = await fetch(`${config.apiUrl || ''}/api/previews`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(validation.data),
    });

    if (!response.ok) {
      const error = await response.json() as PreviewErrorResponse;
      const errorMsg = error.message || 'Failed to create preview';
      throw new Error(errorMsg);
    }

    const result = await response.json() as CreatePreviewResponse;
    return result;
  } catch (error) {
    // Provide more helpful error messages for mobile devices
    if (error instanceof TypeError && error.message.includes('fetch')) {
      throw new Error('Unable to connect to server. Please check your network connection and ensure you can reach the backend server.');
    }
    throw error;
  }
}

/**
 * Verify a preview token
 * @param token - JWT token to verify
 * @returns Promise with decoded payload
 */
export async function verifyPreview(token: string): Promise<PreviewPayload> {
  try {
    const response = await fetch(
      `${config.apiUrl || ''}/api/preview/verify?t=${encodeURIComponent(token)}`,
      {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );

    if (!response.ok) {
      const error = await response.json() as PreviewErrorResponse;
      const errorMsg = error.message || 'Failed to verify preview';
      throw new Error(errorMsg);
    }

    const data = await response.json() as VerifyPreviewResponse;
    
    // Validate the payload from the backend
    const validation = PreviewPayloadSchema.safeParse(data.payload);
    if (!validation.success) {
      throw new Error('Invalid payload received from server');
    }

    return validation.data;
  } catch (error) {
    // Provide more helpful error messages for mobile devices
    if (error instanceof TypeError && error.message.includes('fetch')) {
      throw new Error('Unable to connect to server. Please check your network connection and ensure you can reach the backend server.');
    }
    throw error;
  }
}



============================
FILE: frontend\src\features\preview\components\PreviewBanner.tsx
============================
/**
 * Preview Banner
 * 
 * Sticky banner at the top of preview pages indicating this is a demo.
 * Includes CTA to "Get this site" (conversion flow - to be implemented later).
 */

import React from 'react';
import { Eye } from 'lucide-react';

interface PreviewBannerProps {
  businessName: string;
}

export const PreviewBanner: React.FC<PreviewBannerProps> = ({ businessName }) => {
  const handleGetThisSite = () => {
    // TODO: Wire to onboarding flow in later phase
    alert('Conversion to tenant onboarding will be implemented in the next phase!');
  };

  return (
    <div className="fixed top-0 left-0 right-0 z-[100] bg-gradient-to-r from-orange-500 to-orange-600 text-white shadow-lg">
      <div className="max-w-7xl mx-auto px-4 py-3 flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <Eye className="h-5 w-5" />
          <div className="flex flex-col">
            <span className="text-sm font-semibold">Preview Mode</span>
            <span className="text-xs opacity-90">
              This is how your site for {businessName} would look
            </span>
          </div>
        </div>

        <button
          type="button"
          onClick={handleGetThisSite}
          className="bg-white text-orange-600 px-6 py-2 rounded-md font-semibold hover:bg-orange-50 transition-colors shadow-md text-sm md:text-base"
        >
          Get This Site
        </button>
      </div>
    </div>
  );
};



============================
FILE: frontend\src\features\preview\components\PreviewCTAButton.tsx
============================
/**
 * Preview CTA Button
 * 
 * Fixed position "Get This Site" button for preview mode.
 * Can be positioned in top-left or top-right.
 */

import React from 'react';
import { useNavigate } from 'react-router-dom';
import { Sparkles } from 'lucide-react';

import { useData } from '@/shared/hooks/useData';
import { useSectionStore } from '@/shared/state/sectionStore';

interface PreviewCTAButtonProps {
  position?: 'left' | 'right';
}

export const PreviewCTAButton: React.FC<PreviewCTAButtonProps> = ({ position = 'left' }) => {
  const navigate = useNavigate();
  const data = useData();
  const currentSection = useSectionStore((s) => s.current);

  const handleGetThisSite = () => {
    // Pass preview data to onboarding form
    void navigate('/tenant-onboarding', {
      state: {
        fromPreview: true,
        businessName: data.businessName,
        phone: data.phone,
        city: data.serviceAreas[0]?.city || '',
        state: data.serviceAreas[0]?.state || '',
        industry: data.industry,
      },
    });
  };

  // Only show button in specific sections: hero (top), gallery, and footer
  const shouldShowButton = currentSection === 'top' || 
                          currentSection === 'gallery' || 
                          currentSection === 'gallery-desktop' || 
                          currentSection === 'footer';

  // Debug logging removed for production

  // Don't render if not in an allowed section
  if (!shouldShowButton) {
    return null;
  }

  // Hide right button on mobile (show only on desktop)
  if (position === 'right') {
    return (
      <div className="hidden md:block fixed top-4 right-4 z-[10000]" style={{ pointerEvents: 'auto' }}>
        <button
          type="button"
          onClick={handleGetThisSite}
          className="flex items-center space-x-2 px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white font-semibold rounded-md transition-colors shadow-lg"
        >
          <Sparkles className="h-4 w-4" />
          <span>Get This Site</span>
        </button>
      </div>
    );
  }

  // Left button: positioned below header on mobile, top-left on desktop
  return (
    <div className="fixed left-4 z-[10000] top-[88px] md:top-4" style={{ pointerEvents: 'auto' }}>
      <button
        type="button"
        onClick={handleGetThisSite}
        className="flex items-center space-x-2 px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white font-semibold rounded-md transition-colors shadow-lg"
      >
        <Sparkles className="h-4 w-4" />
        <span>Get This Site</span>
      </button>
    </div>
  );
};



============================
FILE: frontend\src\features\preview\components\PreviewDataProvider.tsx
============================
/**
 * Preview Data Provider
 * 
 * Wraps preview pages with the ACTUAL DataContext used by all components.
 * This allows existing components (Header, Hero, etc.) to work
 * without modification in preview mode.
 */

import React, { useEffect, useState } from 'react';

import { DataContext } from '@/shared/contexts/DataContext';
import type { MainSiteConfig } from '@/shared/types/location';
import type { IndustryTemplate } from '@/shared/utils/industryRegistry';
import { getIndustryTemplate } from '@/shared/utils/industryRegistry';

import type { PreviewPayload } from '../types/preview.types';

interface PreviewDataProviderProps {
  children: React.ReactNode;
  payload: PreviewPayload;
}

/**
 * PreviewDataProvider
 * 
 * Provides mock data to the actual DataContext that all components use.
 * This makes existing components work without modification in preview mode.
 */
export const PreviewDataProvider: React.FC<PreviewDataProviderProps> = ({
  children,
  payload,
}) => {
  const [siteConfig, setSiteConfig] = useState<IndustryTemplate | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    async function loadTemplate() {
      try {
        setIsLoading(true);
        const template = await getIndustryTemplate(payload.industry);
        setSiteConfig(template);
      } catch (error) {
        console.error('Failed to load industry template:', error);
      } finally {
        setIsLoading(false);
      }
    }

    void loadTemplate();
  }, [payload.industry]);

  // Generate email from business name
  const generateEmail = (businessName: string) => {
    // Convert "JP's Mobile Detail" → "jpsmobiledetail"
    const domain = businessName
      .toLowerCase()
      .replace(/[^a-z0-9\s]/g, '') // Remove special chars
      .replace(/\s+/g, '')          // Remove spaces
      .trim();
    return `info@${domain}.com`;
  };

  // Create mock context value matching the real DataContext interface
  const mockContextValue = {
    businessName: payload.businessName,
    phone: payload.phone,
    email: generateEmail(payload.businessName),
    owner: payload.businessName,
    location: `${payload.city}, ${payload.state}`,
    industry: payload.industry,
    serviceAreas: [
      {
        city: payload.city,
        state: payload.state,
        primary: true,
      },
    ],
    socialMedia: {
      facebook: '#',
      instagram: '#',
      youtube: '#',
      tiktok: '#',
      googleBusiness: '#',
    },
    siteConfig: siteConfig as MainSiteConfig | null,
    isLoading,
    isTenant: true,
    isPreview: true, // Mark as preview mode
  };

  // Provide to the ACTUAL DataContext that components are using
  return (
    <DataContext.Provider value={mockContextValue}>
      {children}
    </DataContext.Provider>
  );
};



============================
FILE: frontend\src\features\preview\components\PreviewError.tsx
============================
/**
 * Preview Error State
 * 
 * Displayed when preview link is invalid, expired, or fails to load.
 */

import React from 'react';
import { AlertCircle, Mail, Phone } from 'lucide-react';

interface PreviewErrorProps {
  error: string;
}

export const PreviewError: React.FC<PreviewErrorProps> = ({ error }) => {
  const isExpired = error.toLowerCase().includes('expired');
  
  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black flex items-center justify-center px-4">
      <div className="max-w-md w-full bg-gray-800 rounded-lg shadow-xl p-8 text-center space-y-6">
        <AlertCircle className="h-16 w-16 text-red-500 mx-auto" />
        <h2 className="text-2xl font-bold text-white">Preview Unavailable</h2>
        <p className="text-gray-300">{error}</p>
        
        {isExpired && (
          <div className="bg-orange-900/30 border border-orange-700 rounded-md p-4">
            <p className="text-orange-200 text-sm">
              Preview links expire after 7 days for security.
            </p>
          </div>
        )}
        
        <div className="pt-4 space-y-4">
          <p className="text-sm text-gray-400">
            Need a new preview link or have questions?
          </p>
          
          <div className="flex flex-col space-y-3">
            <a
              href="tel:+15551234567"
              className="flex items-center justify-center space-x-2 px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-md transition-colors"
            >
              <Phone className="h-4 w-4" />
              <span>Call Us</span>
            </a>
            
            <a
              href="mailto:hello@thatsmartsite.com"
              className="flex items-center justify-center space-x-2 px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-md transition-colors"
            >
              <Mail className="h-4 w-4" />
              <span>Email Sales</span>
            </a>
          </div>
          
          <a 
            href="/"
            className="text-sm text-orange-400 hover:text-orange-300 block pt-2"
          >
            Visit our main site →
          </a>
        </div>
      </div>
    </div>
  );
};



============================
FILE: frontend\src\features\preview\components\PreviewLoading.tsx
============================
/**
 * Preview Loading State
 * 
 * Displayed while preview data is being loaded/verified.
 */

import React from 'react';
import { Loader2 } from 'lucide-react';

export const PreviewLoading: React.FC = () => {
  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black flex items-center justify-center">
      <div className="text-center space-y-4">
        <Loader2 className="h-12 w-12 text-orange-500 animate-spin mx-auto" />
        <h2 className="text-2xl font-semibold text-white">Loading Preview...</h2>
        <p className="text-gray-400">Setting up your demo site</p>
      </div>
    </div>
  );
};



============================
FILE: frontend\src\features\preview\components\PreviewPage.tsx
============================
/**
 * Preview Page
 * 
 * Displays a preview of a tenant site with injected business info.
 * Used for sales demos - no tenant record is created yet.
 */

import React, { useState } from 'react';

import { FAQ } from '@/features/faq';
import { Gallery } from '@/features/gallery';
import { Header } from '@/features/header';
import { Hero } from '@/features/hero';
import { LazyRequestQuoteModal } from '@/features/quotes';
import { Reviews } from '@/features/reviews';
import { ServicesGrid } from '@/features/services';
import { useBrowserTab, useIsDesktop, useScrollSpy } from '@/shared/hooks';
import { SeoHead } from '@/shared/seo';
import type { SectionId } from '@/shared/state/sectionStore';

import { usePreviewParams } from '../hooks/usePreviewParams';
import { PreviewCTAButton } from './PreviewCTAButton';
import { PreviewDataProvider } from './PreviewDataProvider';
import { PreviewError } from './PreviewError';
import { PreviewLoading } from './PreviewLoading';

const PreviewPage: React.FC = () => {
  const { payload, isLoading, error } = usePreviewParams();
  const [isQuoteModalOpen, setIsQuoteModalOpen] = useState(false);
  const isDesktop = useIsDesktop();

  const handleOpenQuoteModal = () => {
    setIsQuoteModalOpen(true);
  };
  
  const handleCloseQuoteModal = () => {
    setIsQuoteModalOpen(false);
  };

  // Update browser tab title with business name
  useBrowserTab({
    title: payload?.businessName ? `${payload.businessName} - Preview` : 'Platform Preview',
    useBusinessName: false, // Don't use default business name, we have custom format
  });

  // Section tracking for scroll spy
  const sectionIds: SectionId[] = isDesktop 
    ? ['top', 'services', 'services-desktop', 'reviews', 'faq', 'gallery', 'gallery-desktop', 'footer']
    : ['top', 'services', 'reviews', 'faq', 'gallery', 'footer'];
  
  useScrollSpy({ 
    ids: sectionIds, 
    headerPx: isDesktop ? 88 : 72, 
    updateHash: false 
  });

  // Loading state
  if (isLoading) {
    return <PreviewLoading />;
  }

  // Error state
  if (error || !payload) {
    return <PreviewError error={error || 'Failed to load preview'} />;
  }

  // Render preview with injected data
  return (
    <PreviewDataProvider payload={payload}>
      {/* SEO Head with noindex for preview pages */}
      <SeoHead 
        title={payload.businessName ? `${payload.businessName} - Preview` : 'Platform Preview'}
        description={`Preview of ${payload.businessName || 'business'} website`}
        noindex={true}
      />
      
      {/* Fixed "Get This Site" buttons in both corners */}
      <PreviewCTAButton position="left" />
      <PreviewCTAButton position="right" />
      
      <div className="h-screen snap-y snap-mandatory overflow-y-scroll snap-container">
        {/* Regular site components - they'll get preview data from context */}
        <Header />
        <Hero onRequestQuote={handleOpenQuoteModal} />
        <ServicesGrid />
        <Reviews />
        <FAQ />
        <Gallery onRequestQuote={handleOpenQuoteModal} />
      </div>
      
      {/* Quote Modal */}
      {isQuoteModalOpen && (
        <LazyRequestQuoteModal 
          isOpen={isQuoteModalOpen} 
          onClose={handleCloseQuoteModal} 
        />
      )}
    </PreviewDataProvider>
  );
};

export default PreviewPage;



============================
FILE: frontend\src\features\preview\hooks\usePreviewAsync.ts
============================
/**
 * Preview Async Operations Hook
 * Handles all async operations for preview functionality
 * Separated from Zustand store to maintain clean separation of concerns
 */

import { useCallback, useState } from 'react';
import { useQuery } from '@tanstack/react-query';

import { createPreview, verifyPreview } from '../api/preview.api';
import { usePreviewStore } from '../state/previewStore';
import type { PreviewPayload } from '../types/preview.types';

export interface PreviewGenerationResult {
  success: boolean;
  previewUrl?: string;
  error?: string;
}

export const usePreviewAsync = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationError, setGenerationError] = useState<string | null>(null);

  // Get store actions
  const { setLoading, setError, setPayload } = usePreviewStore();

  /**
   * Generate preview for given payload
   */
  const generatePreview = useCallback(async (payload: PreviewPayload): Promise<PreviewGenerationResult> => {
    setIsGenerating(true);
    setGenerationError(null);
    setLoading(true);
    setError(null);

    try {
      // Validate payload - properties are always defined in type
      // if (!payload.businessName || !payload.phone || !payload.industry) {
      //   throw new Error('Missing required preview data');
      // }

      // Generate preview using API
      const result = await createPreview(payload);
      
      if (result.success && result.url) {
        // Update store with generated preview
        setPayload({
          ...payload,
          previewUrl: result.url,
          generatedAt: new Date().toISOString(),
        });

        return {
          success: true,
          previewUrl: result.url
        };
      } else {
        throw new Error('Failed to generate preview');
      }

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to generate preview';
      setGenerationError(errorMessage);
      setError(errorMessage);
      
      return {
        success: false,
        error: errorMessage
      };
    } finally {
      setIsGenerating(false);
      setLoading(false);
    }
  }, [setLoading, setError, setPayload]);

  /**
   * Verify preview token
   */
  const verifyPreviewToken = useCallback(async (token: string): Promise<PreviewPayload | null> => {
    try {
      setLoading(true);
      setError(null);

      const payload = await verifyPreview(token);
      
      setPayload(payload);
      return payload;

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to verify preview token';
      setError(errorMessage);
      return null;
    } finally {
      setLoading(false);
    }
  }, [setLoading, setError, setPayload]);

  /**
   * Save preview configuration
   */
  const savePreviewConfig = useCallback(async (payload: PreviewPayload): Promise<boolean> => {
    try {
      setLoading(true);
      
      // TODO: Replace with actual API call
      // For now, simulate API call
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Update store
      setPayload(payload);
      return true;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to save preview configuration';
      setError(errorMessage);
      return false;
    } finally {
      setLoading(false);
    }
  }, [setLoading, setError, setPayload]);

  /**
   * Clear preview data
   */
  const clearPreview = useCallback(() => {
    setError(null);
    setGenerationError(null);
    setIsGenerating(false);
  }, [setError]);

  return {
    // State
    isGenerating,
    generationError,
    
    // Actions
    generatePreview,
    verifyPreviewToken,
    savePreviewConfig,
    clearPreview,
  };
};

/**
 * Hook for preview data persistence
 */
export const usePreviewPersistence = () => {
  const { payload } = usePreviewStore();
  const { savePreviewConfig } = usePreviewAsync();

  // Auto-save preview data when it changes
  const { data: autoSaveEnabled } = useQuery({
    queryKey: ['preview','autoSave', payload],
    queryFn: async () => {
      if (payload) {
        await savePreviewConfig(payload);
      }
      return true;
    },
    enabled: !!payload,
    staleTime: 10000, // 10 seconds
  });

  return {
    autoSaveEnabled,
    hasPreviewData: !!payload,
  };
};


============================
FILE: frontend\src\features\preview\hooks\usePreviewParams.ts
============================
/**
 * usePreviewParams Hook
 * 
 * Reads preview parameters from URL (either token or individual params),
 * validates them, and hydrates the preview store.
 * 
 * Supports two modes:
 * 1. Token mode: ?t=<jwt>
 * 2. URL params mode: ?name=&phone=&industry= (for quick testing)
 */

import { useEffect, useState } from 'react';
import { useSearchParams } from 'react-router-dom';

import { safeErrorMessage, safeValidationMessage } from '@/shared/utils/errorHandling';

import { verifyPreview } from '../api/preview.api';
import { usePreviewStore } from '../state/previewStore';
import type { PreviewPayload } from '../types/preview.types';
import { PreviewPayloadSchema } from '../types/preview.types';

interface UsePreviewParamsResult {
  payload: PreviewPayload | null;
  isLoading: boolean;
  error: string | null;
}

export function usePreviewParams(): UsePreviewParamsResult {
  const [searchParams] = useSearchParams();
  const { payload, isLoading, error, setPayload, setLoading, setError } = usePreviewStore();
  const [hasInitialized, setHasInitialized] = useState(false);

  useEffect(() => {
    // Only run once on mount
    if (hasInitialized) return;
    setHasInitialized(true);

    async function loadPreview() {
      setLoading(true);
      setError(null);

      try {
        // Check if token mode is used
        const token = searchParams.get('t');

        if (token) {
          // Token mode: verify with backend
          const verifiedPayload = await verifyPreview(token);
          setPayload(verifiedPayload);
          return;
        }

        // URL params mode: validate and use directly
        const name = searchParams.get('name');
        const phone = searchParams.get('phone');
        const city = searchParams.get('city');
        const state = searchParams.get('state');
        const industry = searchParams.get('industry');

        if (!name || !phone || !city || !state || !industry) {
          throw new Error('Missing required parameters. Please use a valid preview link.');
        }

        const validation = PreviewPayloadSchema.safeParse({
          businessName: name,
          phone,
          city,
          state: state.toUpperCase(),
          industry,
        });

        if (!validation.success) {
          throw new Error(safeValidationMessage(validation.error));
        }

        setPayload(validation.data);
      } catch (err: unknown) {
        setError(safeErrorMessage(err));
      } finally {
        setLoading(false);
      }
    }

    void loadPreview();
  }, [searchParams, hasInitialized, setPayload, setLoading, setError]);

  return {
    payload,
    isLoading,
    error,
  };
}



============================
FILE: frontend\src\features\preview\index.ts
============================
/**
 * Preview Feature Exports
 * 
 * Barrel file for preview feature public API.
 */

export { createPreview, verifyPreview } from './api/preview.api';
export { PreviewCTAButton } from './components/PreviewCTAButton';
export { PreviewDataProvider } from './components/PreviewDataProvider';
export { PreviewError } from './components/PreviewError';
export { PreviewLoading } from './components/PreviewLoading';
export { default as PreviewPage } from './components/PreviewPage';
export { usePreviewParams } from './hooks/usePreviewParams';
export { default as PreviewGeneratorPage } from './pages/PreviewGeneratorPage';
export { usePreviewStore } from './state/previewStore';
export type { PreviewPayload } from './types/preview.types';
export { PreviewPayloadSchema } from './types/preview.types';



============================
FILE: frontend\src\features\preview\pages\PreviewGeneratorPage.tsx
============================
/**
 * Preview Generator Page
 * 
 * Internal sales tool to quickly generate preview links.
 * Form inputs for business info → generates token → navigates to preview.
 */

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Eye, Loader2, Sparkles, Zap } from 'lucide-react';

import { useBrowserTab } from '@/shared/hooks';
import { formatPhoneNumber } from '@/shared/utils/phoneFormatter';

import { createPreview } from '../api/preview.api';
import type { PreviewPayload } from '../types/preview.types';

const INDUSTRIES = [
  { value: 'mobile-detailing', label: 'Mobile Detailing' },
  { value: 'maid-service', label: 'Maid Service' },
  { value: 'lawncare', label: 'Lawn Care' },
  { value: 'pet-grooming', label: 'Pet Grooming' },
] as const;

// Test data for quick autofill by industry
const TEST_DATA = {
  'mobile-detailing': {
    businessName: "JP's Mobile Detail",
    phone: '(702) 420-3140',
    city: 'Bullhead City',
    state: 'AZ'
  },
  'maid-service': {
    businessName: 'Sparkle Clean Maids',
    phone: '(602) 555-5678',
    city: 'Phoenix',
    state: 'AZ'
  },
  'lawncare': {
    businessName: 'Green Horizons Lawn Care',
    phone: '(928) 555-9012',
    city: 'Flagstaff',
    state: 'AZ'
  },
  'pet-grooming': {
    businessName: 'Pampered Paws Grooming',
    phone: '(520) 555-3456',
    city: 'Tucson',
    state: 'AZ'
  }
} as const;

const PreviewGeneratorPage: React.FC = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Set browser tab title and favicon for preview generator page
  useBrowserTab({
    title: 'Preview Generator - That Smart Site',
    useBusinessName: false,
  });
  
  const [formData, setFormData] = useState({
    businessName: '',
    phone: '',
    city: '',
    state: '',
    industry: 'mobile-detailing' as PreviewPayload['industry'],
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setIsLoading(true);

    void (async () => {
      try {
        const response = await createPreview(formData);
        
        // Navigate to the preview page with the token
        void navigate(response.url);
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : 'Failed to create preview';
        setError(errorMessage);
      } finally {
        setIsLoading(false);
      }
    })();
  };

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const formatted = formatPhoneNumber(e.target.value);
    setFormData((prev) => ({ ...prev, phone: formatted }));
  };

  const handleStateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.toUpperCase().slice(0, 2); // Max 2 chars, uppercase
    setFormData((prev) => ({ ...prev, state: value }));
  };

  const handleAutofill = () => {
    const testData = TEST_DATA[formData.industry];
    setFormData({
      industry: formData.industry,
      businessName: testData.businessName,
      phone: testData.phone,
      city: testData.city,
      state: testData.state
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black flex items-center justify-center px-4 py-12">
      <div className="max-w-md w-full">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-orange-500 rounded-full mb-4">
            <Sparkles className="h-8 w-8 text-white" />
          </div>
          <h1 className="text-3xl font-bold text-white mb-2">Tenant Preview Generator</h1>
          <p className="text-gray-400">
            Create instant preview sites for sales demos
          </p>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="bg-gray-800 rounded-lg shadow-xl p-8 space-y-6">
          {/* Business Name */}
          <div>
            <label htmlFor="businessName" className="block text-sm font-medium text-gray-200 mb-2">
              Business Name
            </label>
            <input
              type="text"
              id="businessName"
              name="businessName"
              value={formData.businessName}
              onChange={handleChange}
              required
              minLength={2}
              maxLength={100}
              placeholder="JP's Mobile Detail"
              className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            />
          </div>

          {/* Phone */}
          <div>
            <label htmlFor="phone" className="block text-sm font-medium text-gray-200 mb-2">
              Phone Number
            </label>
            <input
              type="tel"
              id="phone"
              name="phone"
              value={formData.phone}
              onChange={handlePhoneChange}
              required
              minLength={14}
              maxLength={14}
              placeholder="(928) 555-1234"
              className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            />
          </div>

          {/* City & State */}
          <div className="grid grid-cols-3 gap-4">
            <div className="col-span-2">
              <label htmlFor="city" className="block text-sm font-medium text-gray-200 mb-2">
                City
              </label>
              <input
                type="text"
                id="city"
                name="city"
                value={formData.city}
                onChange={handleChange}
                required
                minLength={2}
                maxLength={50}
                placeholder="Phoenix"
                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>
            <div>
              <label htmlFor="state" className="block text-sm font-medium text-gray-200 mb-2">
                State
              </label>
              <input
                type="text"
                id="state"
                name="state"
                value={formData.state}
                onChange={handleStateChange}
                required
                minLength={2}
                maxLength={2}
                placeholder="AZ"
                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent uppercase"
              />
            </div>
          </div>

          {/* Industry */}
          <div>
            <label htmlFor="industry" className="block text-sm font-medium text-gray-200 mb-2">
              Industry
            </label>
            <select
              id="industry"
              name="industry"
              value={formData.industry}
              onChange={handleChange}
              required
              className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            >
              {INDUSTRIES.map((industry) => (
                <option key={industry.value} value={industry.value}>
                  {industry.label}
                </option>
              ))}
            </select>
          </div>

          {/* Autofill Button */}
          <button
            type="button"
            onClick={handleAutofill}
            className="w-full flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md transition-colors border border-blue-500"
          >
            <Zap className="h-4 w-4" />
            <span>Quick Fill Test Data</span>
          </button>

          {/* Error Message */}
          {error && (
            <div className="bg-red-900/50 border border-red-700 rounded-md p-4">
              <p className="text-sm text-red-200">{error}</p>
            </div>
          )}

          {/* Submit Button */}
          <button
            type="submit"
            disabled={isLoading}
            className="w-full flex items-center justify-center space-x-2 px-6 py-3 bg-orange-500 hover:bg-orange-600 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-semibold rounded-md transition-colors shadow-lg"
          >
            {isLoading ? (
              <>
                <Loader2 className="h-5 w-5 animate-spin" />
                <span>Generating Preview...</span>
              </>
            ) : (
              <>
                <Eye className="h-5 w-5" />
                <span>Generate Preview</span>
              </>
            )}
          </button>

          {/* Help Text */}
          <p className="text-xs text-gray-400 text-center">
            Preview links expire after 7 days
          </p>
        </form>

          {/* Back Link */}
        <div className="mt-6 text-center">
          <button
            onClick={() => { void navigate('/'); }}
            className="text-sm text-gray-400 hover:text-white transition-colors"
          >
            ← Back to Home
          </button>
        </div>
      </div>
    </div>
  );
};

export default PreviewGeneratorPage;



============================
FILE: frontend\src\features\preview\state\previewStore.ts
============================
/**
 * Preview Store
 * 
 * Zustand store for managing preview state.
 * Holds the current preview payload (businessName, phone, industry).
 */

import { create } from 'zustand';

import type { PreviewPayload } from '../types/preview.types';

interface PreviewState {
  payload: PreviewPayload | null;
  isLoading: boolean;
  error: string | null;
  setPayload: (payload: PreviewPayload) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  clearPreview: () => void;
}

export const usePreviewStore = create<PreviewState>((set) => ({
  payload: null,
  isLoading: false,
  error: null,
  
  setPayload: (payload) => {
    set({
      payload,
      error: null,
    });
  },
  
  setLoading: (loading) => {
    set({
      isLoading: loading,
    });
  },
  
  setError: (error) => {
    set({
      error,
      isLoading: false,
    });
  },
  
  clearPreview: () => {
    set({
      payload: null,
      error: null,
      isLoading: false,
    });
  },
}));



============================
FILE: frontend\src\features\preview\types\preview.types.ts
============================
/**
 * Preview Types
 * 
 * Type definitions and Zod schemas for preview functionality.
 */

import { z } from 'zod';

// Zod schema for preview payload validation
export const PreviewPayloadSchema = z.object({
  businessName: z
    .string()
    .min(2, 'Business name must be at least 2 characters')
    .max(100, 'Business name must be less than 100 characters'),
  phone: z
    .string()
    .min(7, 'Phone number must be at least 7 characters')
    .max(20, 'Phone number must be less than 20 characters'),
  city: z
    .string()
    .min(2, 'City must be at least 2 characters')
    .max(50, 'City must be less than 50 characters'),
  state: z
    .string()
    .length(2, 'State must be 2 characters (e.g., AZ, CA)')
    .regex(/^[A-Z]{2}$/, 'State must be uppercase letters'),
  industry: z.enum(['mobile-detailing', 'maid-service', 'lawncare', 'pet-grooming'], {
    errorMap: () => ({ message: 'Invalid industry type' }),
  }),
});

// TypeScript type derived from schema
export type PreviewPayload = z.infer<typeof PreviewPayloadSchema>;

// API response types
export interface CreatePreviewResponse {
  success: boolean;
  url: string;
  token: string;
  expiresIn: string;
}

export interface VerifyPreviewResponse {
  success: boolean;
  payload: PreviewPayload;
}

export interface PreviewErrorResponse {
  error: string;
  message: string;
  details?: Array<{
    field: string;
    message: string;
  }>;
}



============================
FILE: frontend\src\features\quotes\api\quotes.api.ts
============================
// Quote-specific API calls
import { apiService } from '@/shared/api/api';

export const quotesApi = {
  // Submit a quote request
  submitQuoteRequest: async (quoteData: {
    name: string;
    email: string;
    phone: string;
    vehicleType: string;
    vehicleMake: string;
    vehicleModel: string;
    vehicleYear: string;
    services: string[];
    message?: string;
    location: string;
    businessSlug?: string;
  }) => {
    return await apiService.submitQuoteRequest(quoteData);
  },

  // Get quote by ID
  getQuote: async (quoteId: string) => {
    const response = await fetch(`/api/quotes/${quoteId}`);
    if (!response.ok) {
      throw new Error(`Failed to fetch quote: ${response.statusText}`);
    }
    return await response.json() as unknown;
  },

  // Update quote status
  updateQuoteStatus: async (quoteId: string, status: string) => {
    const response = await fetch(`/api/quotes/${quoteId}/status`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ status }),
    });
    if (!response.ok) {
      throw new Error(`Failed to update quote status: ${response.statusText}`);
    }
    return await response.json() as unknown;
  },

  // Get quotes for a business
  getBusinessQuotes: async (businessSlug: string, limit = 10, offset = 0) => {
    const response = await fetch(`/api/quotes?business_slug=${businessSlug}&limit=${String(limit)}&offset=${String(offset)}`);
    if (!response.ok) {
      throw new Error(`Failed to fetch business quotes: ${response.statusText}`);
    }
    return await response.json() as unknown;
  },

  // Get user quotes
  getUserQuotes: async (userId: string, limit = 10, offset = 0) => {
    const response = await fetch(`/api/quotes?user_id=${userId}&limit=${String(limit)}&offset=${String(offset)}`);
    if (!response.ok) {
      throw new Error(`Failed to fetch user quotes: ${response.statusText}`);
    }
    return await response.json() as unknown;
  },

  // Cancel quote
  cancelQuote: async (quoteId: string, reason?: string) => {
    const response = await fetch(`/api/quotes/${quoteId}/cancel`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ reason }),
    });
    if (!response.ok) {
      throw new Error(`Failed to cancel quote: ${response.statusText}`);
    }
    return await response.json() as unknown;
  }
};


============================
FILE: frontend\src\features\quotes\components\ContactSection.tsx
============================
import React from 'react';
import { Mail, MapPin,Phone, User } from 'lucide-react';

import { formatPhoneNumberAsTyped } from '@/shared/utils';

import { type QuoteFormData } from '../types';

interface ContactSectionProps {
  formData: QuoteFormData;
  fieldErrors: Record<string, string[]>;
  isSubmitting: boolean;
  onInputChange: (field: keyof QuoteFormData, value: string) => void;
}

const ContactSection: React.FC<ContactSectionProps> = ({
  formData,
  fieldErrors,
  isSubmitting,
  onInputChange
}) => {
  return (
    <div>
      <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
        <User className="mr-2 text-orange-500" size={20} /> Contact Information
      </h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-white mb-1">Full Name</label>
          <div className="relative">
            <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-stone-400" size={18} />
            <input
              type="text"
              id="name"
              value={formData.name}
              onChange={(e) => { onInputChange('name', e.target.value); }}
              className={`w-full pl-10 pr-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${
                fieldErrors.name ? 'border-red-500' : 'border-stone-600'
              }`}
              placeholder="Enter your full name"
              disabled={isSubmitting}
            />
          </div>
          {fieldErrors.name && (
            <p className="mt-1 text-sm text-red-300">{fieldErrors.name[0]}</p>
          )}
        </div>
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-white mb-1">Email Address</label>
          <div className="relative">
            <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-stone-400" size={18} />
            <input
              type="email"
              id="email"
              value={formData.email}
              onChange={(e) => { onInputChange('email', e.target.value); }}
              className={`w-full pl-10 pr-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${
                fieldErrors.email ? 'border-red-500' : 'border-stone-600'
              }`}
              placeholder="Enter your email"
              disabled={isSubmitting}
            />
          </div>
          {fieldErrors.email && (
            <p className="mt-1 text-sm text-red-300">{fieldErrors.email[0]}</p>
          )}
        </div>
        <div>
          <label htmlFor="phone" className="block text-sm font-medium text-white mb-1">Phone Number</label>
          <div className="relative">
            <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-stone-400" size={18} />
            <input
              type="tel"
              id="phone"
              value={formData.phone}
              onChange={(e) => {
                const formatted = formatPhoneNumberAsTyped(e.target.value, e.target.selectionStart || 0);
                onInputChange('phone', formatted.value);
              }}
              className={`w-full pl-10 pr-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${
                fieldErrors.phone ? 'border-red-500' : 'border-stone-600'
              }`}
              placeholder="(555) 123-4567"
              disabled={isSubmitting}
            />
          </div>
          {fieldErrors.phone && (
            <p className="mt-1 text-sm text-red-300">{fieldErrors.phone[0]}</p>
          )}
        </div>
        <div className="col-span-1 md:col-span-2">
          <div className="block text-sm font-medium text-white mb-1">Location</div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
            <div>
              <label htmlFor="city" className="block text-xs font-medium text-stone-300 mb-1">City</label>
              <div className="relative">
                <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 text-stone-400" size={16} />
                <input
                  type="text"
                  id="city"
                  value={formData.city || ''}
                  onChange={(e) => { onInputChange('city', e.target.value); }}
                  className={`w-full pl-9 pr-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${
                    fieldErrors.city ? 'border-red-500' : 'border-stone-600'
                  }`}
                  placeholder="City"
                  disabled={isSubmitting}
                />
              </div>
              {fieldErrors.city && (
                <p className="mt-1 text-xs text-red-300">{fieldErrors.city[0]}</p>
              )}
            </div>
            <div>
              <label htmlFor="state" className="block text-xs font-medium text-stone-300 mb-1">State</label>
              <div className="relative">
                <input
                  type="text"
                  id="state"
                  value={formData.state || ''}
                  onChange={(e) => { onInputChange('state', e.target.value); }}
                  className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${
                    fieldErrors.state ? 'border-red-500' : 'border-stone-600'
                  }`}
                  placeholder="State"
                  maxLength={2}
                  disabled={isSubmitting}
                />
              </div>
              {fieldErrors.state && (
                <p className="mt-1 text-xs text-red-300">{fieldErrors.state[0]}</p>
              )}
            </div>
            <div>
              <label htmlFor="zipCode" className="block text-xs font-medium text-stone-300 mb-1">Zip Code</label>
              <div className="relative">
                <input
                  type="text"
                  id="zipCode"
                  value={formData.zipCode || ''}
                  onChange={(e) => { onInputChange('zipCode', e.target.value); }}
                  className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${
                    fieldErrors.zipCode ? 'border-red-500' : 'border-stone-600'
                  }`}
                  placeholder="12345"
                  maxLength={5}
                  disabled={isSubmitting}
                />
              </div>
              {fieldErrors.zipCode && (
                <p className="mt-1 text-xs text-red-300">{fieldErrors.zipCode[0]}</p>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ContactSection;


============================
FILE: frontend\src\features\quotes\components\index.ts
============================
// Quotes feature components
export { default as ContactSection } from './ContactSection';
export { default as LazyRequestQuoteModal } from './LazyRequestQuoteModal';
export { default as QuoteForm } from './QuoteForm';
export { default as RequestQuoteModal } from './RequestQuoteModal';
export { default as ServicesSection } from './ServicesSection';
export { default as SuccessMessage } from './SuccessMessage';
export { default as VehicleSection } from './VehicleSection';


============================
FILE: frontend\src\features\quotes\components\LazyRequestQuoteModal.tsx
============================
import React, { Suspense } from 'react';

import { type RequestQuoteModalProps } from '../types';

// Lazy load the modal component
const RequestQuoteModal = React.lazy(() => import('./RequestQuoteModal'));

const LazyRequestQuoteModal: React.FC<RequestQuoteModalProps> = (props) => {
  return (
    <Suspense fallback={<div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
      <div className="bg-stone-800 text-white p-6 rounded-lg">
        <div className="animate-pulse">Loading quote form...</div>
      </div>
    </div>}>
      <RequestQuoteModal {...props} />
    </Suspense>
  );
};

export default LazyRequestQuoteModal;


============================
FILE: frontend\src\features\quotes\components\QuoteForm.tsx
============================
import React from 'react';

import { useDataOptional } from '@/shared/hooks/useData';
import { Button } from '@/shared/ui';

import { type QuoteFormData } from '../types';
import ContactSection from './ContactSection';
import ServicesSection from './ServicesSection';
import VehicleSection from './VehicleSection';

interface QuoteFormProps {
  formData: QuoteFormData;
  fieldErrors: Record<string, string[]>;
  isSubmitting: boolean;
  error: string | null;
  services: string[];
  serviceAreas: Array<{ city: string; state: string; primary?: boolean }>;
  isAffiliate: boolean;
  businessLocation: string;
  handleInputChange: (field: keyof QuoteFormData, value: string) => void;
  handleServiceToggle: (serviceName: string) => void;
  handleSubmit: (e: React.FormEvent) => void;
}

const QuoteForm: React.FC<QuoteFormProps> = ({
  formData,
  fieldErrors,
  isSubmitting,
  error,
  services,
  serviceAreas,
  isAffiliate,
  businessLocation,
  handleInputChange,
  handleServiceToggle,
  handleSubmit
}) => {
  // Check if in preview mode
  const data = useDataOptional();
  const isPreview = data?.isPreview || false;
  
  const handleFormSubmit = (e: React.FormEvent) => {
    if (isPreview) {
      e.preventDefault();
      return; // Block submission in preview mode
    }
    handleSubmit(e);
  };
  
  return (
    <form onSubmit={handleFormSubmit} className="space-y-6">
      {error && (
        <div className="bg-red-900 border border-red-600 text-red-300 px-4 py-3 rounded relative" role="alert">
          <strong className="font-bold">Error:</strong>
          <span className="block sm:inline"> {error}</span>
        </div>
      )}

      <ContactSection
        formData={formData}
        fieldErrors={fieldErrors}
        isSubmitting={isSubmitting}
        isAffiliate={isAffiliate}
        businessLocation={businessLocation}
        serviceAreas={serviceAreas}
        onInputChange={handleInputChange}
      />

      <VehicleSection
        formData={formData}
        fieldErrors={fieldErrors}
        isSubmitting={isSubmitting}
        onInputChange={handleInputChange}
      />

      <ServicesSection
        formData={formData}
        fieldErrors={fieldErrors}
        isSubmitting={isSubmitting}
        services={services}
        onServiceToggle={handleServiceToggle}
        onInputChange={handleInputChange}
      />

      {isPreview && (
        <div className="bg-orange-900/30 border border-orange-700 rounded-md p-4 text-center">
          <p className="text-orange-200 text-sm">
            This is a preview. Click <strong>&quot;Get This Site&quot;</strong> to activate quote requests.
          </p>
        </div>
      )}

      <div className="flex justify-end">
        <Button
          type={isPreview ? 'button' : 'submit'}
          variant="primary"
          size="lg"
          className={`min-w-[150px] ${
            isPreview 
              ? 'bg-gray-600 cursor-not-allowed opacity-60' 
              : 'bg-orange-600 hover:bg-orange-700'
          } text-white border-orange-600`}
          loading={isSubmitting}
          disabled={isSubmitting || isPreview}
        >
          {isPreview ? 'Preview Mode' : 'Submit Quote'}
        </Button>
      </div>
    </form>
  );
};

export default QuoteForm;


============================
FILE: frontend\src\features\quotes\components\RequestQuoteModal.tsx
============================
import React, { useCallback } from 'react';

import { Modal } from '@/shared/ui';

import { useQuoteFormLogic, useQuoteModal } from '../hooks';
import { type RequestQuoteModalProps } from '../types';
import QuoteForm from './QuoteForm';
import SuccessMessage from './SuccessMessage';

const RequestQuoteModal: React.FC<RequestQuoteModalProps> = ({ isOpen, onClose }) => {
  const {
    formData,
    fieldErrors,
    isSubmitted,
    isSubmitting,
    error,
    services,
    serviceAreas,
    businessName,
    businessLocation,
    isAffiliate,
    handleInputChange,
    handleServiceToggle,
    handleSubmit,
    resetForm
  } = useQuoteFormLogic();

  const { handleClose } = useQuoteModal({ isOpen, onClose });

  const handleCloseWithReset = useCallback(() => {
    handleClose();
    resetForm();
  }, [handleClose, resetForm]);

  const modalTitle = isSubmitted 
    ? 'Quote Request Sent!' 
    : `Request a Quote ${businessName ? `for ${businessName}` : ''}`;

  const modalDescription = isSubmitted 
    ? 'Thank you for your interest! We will get back to you soon.' 
    : 'Fill out the form below and we\'ll get back to you with a personalized quote.';

  return (
    <Modal
      isOpen={isOpen}
      onClose={handleCloseWithReset}
      title={modalTitle}
      description={modalDescription}
      size="xl"
      className="bg-stone-800 text-white"
    >
      {isSubmitted ? (
        <SuccessMessage onClose={handleCloseWithReset} />
      ) : (
        <QuoteForm
          formData={formData}
          fieldErrors={fieldErrors}
          isSubmitting={isSubmitting}
          error={error || undefined}
          services={services}
          serviceAreas={serviceAreas}
          isAffiliate={isAffiliate}
          businessLocation={businessLocation}
          handleInputChange={handleInputChange}
          handleServiceToggle={handleServiceToggle}
          handleSubmit={() => void handleSubmit()}
        />
      )}
    </Modal>
  );
};

export default RequestQuoteModal;

============================
FILE: frontend\src\features\quotes\components\ServicesSection.tsx
============================
import React from 'react';
import { MessageSquare,Wrench } from 'lucide-react';

import { sanitizeText } from '@/shared/utils';

import { type QuoteFormData } from '../types';

interface ServicesSectionProps {
  formData: QuoteFormData;
  fieldErrors: Record<string, string[]>;
  isSubmitting: boolean;
  onServiceToggle: (serviceName: string) => void;
  onInputChange: (field: keyof QuoteFormData, value: string) => void;
}

const ServicesSection: React.FC<ServicesSectionProps> = ({
  formData,
  fieldErrors,
  isSubmitting,
  onServiceToggle,
  onInputChange
}) => {
  // Define the specific service options in the requested layout
  const serviceOptions = [
    { label: 'Interior', value: 'Interior' },
    { label: 'Paint Correction', value: 'Paint Correction' },
    { label: 'Exterior', value: 'Exterior' },
    { label: 'Ceramic Coating', value: 'Ceramic Coating' },
    { label: 'Other', value: 'Other' },
    { label: 'Paint Protection Film (PPF)', value: 'Paint Protection Film (PPF)' }
  ];

  return (
    <>
      {/* Services Needed */}
      <div>
        <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
          <Wrench className="mr-2 text-orange-500" size={20} /> Services Needed
        </h3>
        <div className="grid grid-cols-2 gap-3">
          {serviceOptions.map(service => (
            <label key={service.value} className="flex items-center space-x-2 cursor-pointer">
              <input
                type="checkbox"
                checked={formData.services.includes(service.value)}
                onChange={() => { onServiceToggle(service.value); }}
                className="h-5 w-5 text-orange-600 rounded focus:ring-orange-500 bg-stone-700 border-stone-600"
                disabled={isSubmitting}
              />
              <span className="text-white text-sm">{service.label}</span>
            </label>
          ))}
        </div>
        {fieldErrors.services && (
          <p className="mt-1 text-sm text-red-300">{fieldErrors.services[0]}</p>
        )}
      </div>

      {/* Additional Message */}
      <div>
        <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
          <MessageSquare className="mr-2 text-orange-500" size={20} /> Additional Message (Optional)
        </h3>
        <textarea
          id="message"
          value={formData.message}
          onChange={(e) => { onInputChange('message', sanitizeText(e.target.value)); }}
          rows={4}
          className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${
            fieldErrors.message ? 'border-red-500' : 'border-stone-600'
          }`}
          placeholder="Tell us more about your needs..."
          disabled={isSubmitting}
        ></textarea>
        {fieldErrors.message && (
          <p className="mt-1 text-sm text-red-300">{fieldErrors.message[0]}</p>
        )}
      </div>
    </>
  );
};

export default ServicesSection;


============================
FILE: frontend\src\features\quotes\components\SuccessMessage.tsx
============================
import React from 'react';
import { CheckCircle } from 'lucide-react';

import { Button } from '@/shared/ui';

interface SuccessMessageProps {
  onClose: () => void;
}

const SuccessMessage: React.FC<SuccessMessageProps> = ({ onClose }) => {
  return (
    <div className="text-center py-8">
      <CheckCircle size={64} className="text-orange-500 mx-auto mb-4" />
      <p className="text-lg text-white mb-2">Thank you for your quote request!</p>
      <p className="text-stone-300">We have received your information and will get back to you shortly.</p>
      <Button 
        onClick={onClose} 
        className="mt-6 bg-orange-600 hover:bg-orange-700 text-white border-orange-600"
      >
        Close
      </Button>
    </div>
  );
};

export default SuccessMessage;


============================
FILE: frontend\src\features\quotes\components\VehicleSection.tsx
============================
import React, { useMemo } from 'react';
import { Car } from 'lucide-react';

import { getMakesForType, getModelsForMake, getVehicleYears } from '@/data/mobile-detailing/vehicle_data';

import { type QuoteFormData } from '../types';

interface VehicleSectionProps {
  formData: QuoteFormData;
  fieldErrors: Record<string, string[]>;
  isSubmitting: boolean;
  onInputChange: (field: keyof QuoteFormData, value: string) => void;
}

const VehicleSection: React.FC<VehicleSectionProps> = ({
  formData,
  fieldErrors,
  isSubmitting,
  onInputChange
}) => {
  // Get available makes and models based on selected vehicle type
  const availableMakes = useMemo(() => {
    return getMakesForType(formData.vehicleType.toLowerCase());
  }, [formData.vehicleType]);

  const availableModels = useMemo(() => {
    if (!formData.vehicleMake) return [];
    return getModelsForMake(formData.vehicleType.toLowerCase(), formData.vehicleMake);
  }, [formData.vehicleType, formData.vehicleMake]);

  const vehicleYears = useMemo(() => {
    return getVehicleYears();
  }, []);

  // Determine if we should show Length instead of Color
  const showLength = ['RV', 'Boat'].includes(formData.vehicleType);
  const lengthOrColorLabel = showLength ? 'Length' : 'Color';
  const lengthOrColorField = showLength ? 'vehicleLength' : 'vehicleColor';
  const lengthOrColorValue = showLength ? formData.vehicleLength || '' : formData.vehicleColor || '';
  const lengthOrColorPlaceholder = showLength ? 'e.g., 25 ft, 30 ft' : 'e.g., White, Black, Silver';

  return (
    <div>
      <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
        <Car className="mr-2 text-orange-500" size={20} /> Vehicle Information
      </h3>
      
      {/* Vehicle Type */}
      <div className="mb-4">
        <label htmlFor="vehicleType" className="block text-sm font-medium text-white mb-1">Vehicle Type</label>
        <select
          id="vehicleType"
          value={formData.vehicleType}
          onChange={(e) => { onInputChange('vehicleType', e.target.value); }}
          className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${
            fieldErrors.vehicleType ? 'border-red-500' : 'border-stone-600'
          }`}
          disabled={isSubmitting}
        >
          <option value="" className="bg-stone-700 text-white">Select Type</option>
          <option value="Car" className="bg-stone-700 text-white">Car</option>
          <option value="Truck" className="bg-stone-700 text-white">Truck</option>
          <option value="SUV" className="bg-stone-700 text-white">SUV</option>
          <option value="RV" className="bg-stone-700 text-white">RV</option>
          <option value="Boat" className="bg-stone-700 text-white">Boat</option>
          <option value="Motorcycle" className="bg-stone-700 text-white">Motorcycle</option>
          <option value="Other" className="bg-stone-700 text-white">Other</option>
        </select>
        {fieldErrors.vehicleType && (
          <p className="mt-1 text-sm text-red-300">{fieldErrors.vehicleType[0]}</p>
        )}
      </div>

      {/* Make and Model Row */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <div>
          <label htmlFor="vehicleMake" className="block text-sm font-medium text-white mb-1">Vehicle Make</label>
          <select
            id="vehicleMake"
            value={formData.vehicleMake}
            onChange={(e) => { onInputChange('vehicleMake', e.target.value); }}
            className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${
              fieldErrors.vehicleMake ? 'border-red-500' : 'border-stone-600'
            }`}
            disabled={isSubmitting || !formData.vehicleType}
          >
            <option value="" className="bg-stone-700 text-white">Select Make</option>
            {availableMakes.map(make => (
              <option key={make} value={make} className="bg-stone-700 text-white">{make}</option>
            ))}
          </select>
          {fieldErrors.vehicleMake && (
            <p className="mt-1 text-sm text-red-300">{fieldErrors.vehicleMake[0]}</p>
          )}
        </div>
        <div>
          <label htmlFor="vehicleModel" className="block text-sm font-medium text-white mb-1">Vehicle Model</label>
          <select
            id="vehicleModel"
            value={formData.vehicleModel}
            onChange={(e) => { onInputChange('vehicleModel', e.target.value); }}
            className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${
              fieldErrors.vehicleModel ? 'border-red-500' : 'border-stone-600'
            }`}
            disabled={isSubmitting || !formData.vehicleMake}
          >
            <option value="" className="bg-stone-700 text-white">Select Model</option>
            {availableModels.map(model => (
              <option key={model} value={model} className="bg-stone-700 text-white">{model}</option>
            ))}
          </select>
          {fieldErrors.vehicleModel && (
            <p className="mt-1 text-sm text-red-300">{fieldErrors.vehicleModel[0]}</p>
          )}
        </div>
      </div>

      {/* Year and Length/Color Row */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label htmlFor="vehicleYear" className="block text-sm font-medium text-white mb-1">Vehicle Year</label>
          <select
            id="vehicleYear"
            value={formData.vehicleYear}
            onChange={(e) => { onInputChange('vehicleYear', e.target.value); }}
            className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${
              fieldErrors.vehicleYear ? 'border-red-500' : 'border-stone-600'
            }`}
            disabled={isSubmitting}
          >
            <option value="" className="bg-stone-700 text-white">Select Year</option>
            {vehicleYears.map(year => (
              <option key={year} value={year.toString()} className="bg-stone-700 text-white">
                {year}
              </option>
            ))}
          </select>
          {fieldErrors.vehicleYear && (
            <p className="mt-1 text-sm text-red-300">{fieldErrors.vehicleYear[0]}</p>
          )}
        </div>
        <div>
          <label htmlFor={lengthOrColorField} className="block text-sm font-medium text-white mb-1">{lengthOrColorLabel}</label>
          <input
            type={showLength ? 'number' : 'text'}
            id={lengthOrColorField}
            value={lengthOrColorValue}
            onChange={(e) => { onInputChange(lengthOrColorField as keyof QuoteFormData, e.target.value); }}
            className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${
              fieldErrors[lengthOrColorField] ? 'border-red-500' : 'border-stone-600'
            }`}
            placeholder={lengthOrColorPlaceholder}
            disabled={isSubmitting}
            {...(showLength && { min: '1', step: '1' })}
          />
          {fieldErrors[lengthOrColorField] && (
            <p className="mt-1 text-sm text-red-300">{fieldErrors[lengthOrColorField][0]}</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default VehicleSection;


============================
FILE: frontend\src\features\quotes\hooks\index.ts
============================
// Quotes feature hooks
export { useQuoteForm } from './useQuoteForm';
export { useQuoteFormLogic } from './useQuoteFormLogic';
export { useQuoteFormState } from './useQuoteFormState';
export { useQuoteModal } from './useQuoteModal';
export { useQuoteSubmission } from './useQuoteSubmission';
export { useQuoteTenantData } from './useQuoteTenantData';
export { useQuoteValidation } from './useQuoteValidation';
export { useQuoteVehicleData } from './useQuoteVehicleData';


============================
FILE: frontend\src\features\quotes\hooks\useQuoteForm.ts
============================
import { useCallback, useEffect, useState } from 'react';

import { useData, useTenantConfigLoader, useVehicleData } from '@/shared/hooks';
import { 
  sanitizeText, 
  validateEmail, 
  validateMessage,
  validateName, 
  validatePhone, 
  validateVehicleField
} from '@/shared/utils';

import { quotesApi } from '../api/quotes.api';
import { type QuoteFormData, type QuoteRequest, quoteRequestSchema,type ServiceArea } from '../types';

export const useQuoteForm = () => {
  const { vehicleTypes, getMakes, getModels } = useVehicleData();
  
  // Get tenant data from centralized hooks
  const { businessName } = useData();
  const { data: tenantConfig } = useTenantConfigLoader();
  const slug = tenantConfig?.slug;
  
  const [formData, setFormData] = useState<QuoteFormData>({
    name: '',
    email: '',
    phone: '',
    city: '',
    state: '',
    zipCode: '',
    services: [],
    vehicleType: '',
    vehicleMake: '',
    vehicleModel: '',
    vehicleYear: '',
    message: ''
  });
  const [fieldErrors, setFieldErrors] = useState<Record<string, string[]>>({});
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  
  // Progressive form state
  const [completedSections, setCompletedSections] = useState({
    contact: false,
    vehicle: false,
    services: false
  });

  // Available services
  const services = [
    'Interior',
    'Exterior',
    'Interior & Exterior',
    'Paint Correction',
    'Ceramic Coating',
    'Paint Protection Film (PPF)',
    'Other'
  ];

  // Get available makes and models based on selected vehicle type
  const availableMakes = formData.vehicleType ? getMakes(formData.vehicleType) : [];
  const availableModels = formData.vehicleType && formData.vehicleMake ? 
    getModels(formData.vehicleType, formData.vehicleMake) : [];

  // Reset vehicle make and model when vehicle type changes
  useEffect(() => {
    if (formData.vehicleType) {
      setFormData(prev => ({
        ...prev,
        vehicleMake: '',
        vehicleModel: ''
      }));
    }
  }, [formData.vehicleType]);

  // Reset vehicle model when vehicle make changes
  useEffect(() => {
    if (formData.vehicleMake) {
      setFormData(prev => ({
        ...prev,
        vehicleModel: ''
      }));
    }
  }, [formData.vehicleMake]);

  // Get service areas from tenant config (if available)
  const serviceAreas = useCallback((): ServiceArea[] => {
    // For now, return empty - service areas will be added to tenant config later
    // When ready, will use: tenantConfig?.serviceAreas
    return [];
  }, []);

  // Get business location from tenant config
  const businessLocation = tenantConfig 
    ? `${tenantConfig.contact.baseLocation.city}, ${tenantConfig.contact.baseLocation.state}`
    : '';

  // businessName and slug loaded from useData() and useTenantConfigLoader()

  // Form validation
  const validateField = useCallback((field: string, value: string): string[] => {
    const errors: string[] = [];
    
    switch (field) {
      case 'name':
        if (!value.trim()) {
          errors.push('Name is required');
        } else if (value.length < 2) {
          errors.push('Name must be at least 2 characters');
        }
        validateName(value); // Call for side effects if any
        break;
      case 'email':
        if (!value.trim()) {
          errors.push('Email is required');
        } else if (!value.includes('@')) {
          errors.push('Please enter a valid email address');
        }
        validateEmail(value); // Call for side effects if any
        break;
      case 'phone':
        if (!value.trim()) {
          errors.push('Phone number is required');
        } else if (value.length < 10) {
          errors.push('Please enter a valid phone number');
        }
        validatePhone(value); // Call for side effects if any
        break;
      case 'city':
      case 'state':
      case 'zipCode':
        if (!value.trim()) {
          errors.push(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);
        }
        break;
      case 'vehicleType':
      case 'vehicleMake':
      case 'vehicleModel':
      case 'vehicleYear':
        if (!value.trim()) {
          errors.push(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);
        } else if (value.length < 2) {
          errors.push(`Please enter a valid ${field}`);
        }
        validateVehicleField(field, value); // Call for side effects if any
        break;
      case 'message':
        if (value.trim() && value.length > 1000) {
          errors.push('Message must be less than 1000 characters');
        }
        validateMessage(value); // Call for side effects if any
        break;
    }
    
    return errors;
  }, []);

  // Handle input changes
  const handleInputChange = useCallback((field: string, value: string) => {
    const sanitizedValue = sanitizeText(value);
    setFormData(prev => ({ ...prev, [field]: sanitizedValue }));
    
    // Clear field errors when user starts typing
    if (fieldErrors[field]?.length) {
      setFieldErrors(prev => ({ ...prev, [field]: [] }));
    }
  }, [fieldErrors]);

  // Handle service selection
  const handleServiceToggle = useCallback((service: string) => {
    setFormData(prev => ({
      ...prev,
      services: prev.services.includes(service)
        ? prev.services.filter(s => s !== service)
        : [...prev.services, service]
    }));
  }, []);

  // Validate all fields
  const validateAllFields = useCallback((): boolean => {
    const errors: Record<string, string[]> = {};
    let isValid = true;
    
    // Validate required fields
    const requiredFields = ['name', 'email', 'phone', 'location', 'vehicleType', 'vehicleMake', 'vehicleModel', 'vehicleYear'];
    for (const field of requiredFields) {
      const fieldErrors = validateField(field, String(formData[field as keyof QuoteFormData]));
      if (fieldErrors.length > 0) {
        errors[field] = fieldErrors;
        isValid = false;
      }
    }
    
    // Validate services
    if (formData.services.length === 0) {
      errors['services'] = ['At least one service must be selected'];
      isValid = false;
    }
    
    // Validate message if provided
    if (formData.message && formData.message.trim()) {
      const messageErrors = validateField('message', formData.message);
      if (messageErrors.length > 0) {
        errors['message'] = messageErrors;
        isValid = false;
      }
    }
    
    setFieldErrors(errors);
    return isValid;
  }, [formData, validateField]);

  // Submit form
  const handleSubmit = useCallback(async () => {
    if (!validateAllFields()) {
      return;
    }
    
    setIsSubmitting(true);
    setError('');
    
    try {
      const quoteData: QuoteRequest = {
        name: formData.name,
        email: formData.email,
        phone: formData.phone,
        vehicleType: formData.vehicleType,
        vehicleMake: formData.vehicleMake,
        vehicleModel: formData.vehicleModel,
        vehicleYear: formData.vehicleYear,
        services: formData.services,
        city: formData.city,
        state: formData.state,
        zipCode: formData.zipCode,
        ...(formData.message && { message: formData.message }),
        ...(slug && { businessSlug: slug })
      };
      
      // Validate with schema
      const validatedData = quoteRequestSchema.parse(quoteData);
      
      await quotesApi.submitQuoteRequest(validatedData as Parameters<typeof quotesApi.submitQuoteRequest>[0]);
      setIsSubmitted(true);
    } catch (error) {
      console.error('Error submitting quote request:', error);
      setError('Failed to submit quote request. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  }, [formData, slug, validateAllFields]);

  // Reset form
  const resetForm = useCallback(() => {
    setFormData({
      name: '',
      email: '',
      phone: '',
      location: '',
      services: [],
      vehicleType: '',
      vehicleMake: '',
      vehicleModel: '',
      vehicleYear: '',
      message: ''
    });
    setFieldErrors({});
    setIsSubmitted(false);
    setIsSubmitting(false);
    setError('');
    setCompletedSections({
      contact: false,
      vehicle: false,
      services: false
    });
  }, []);

  return {
    // Form data
    formData,
    fieldErrors,
    isSubmitted,
    isSubmitting,
    error,
    completedSections,
    
    // Available options
    vehicleTypes: vehicleTypes.map(vt => vt.name),
    availableMakes,
    availableModels,
    services,
    serviceAreas: serviceAreas(),
    
    // Business info (from tenant config)
    businessName: businessName || '',
    businessLocation,
    businessSlug: slug || '',
    
    // Actions
    handleInputChange,
    handleServiceToggle,
    handleSubmit,
    resetForm,
    validateField,
    validateAllFields,
    
    // Setters for external control
    setFormData,
    setFieldErrors,
    setIsSubmitted,
    setIsSubmitting,
    setError,
    setCompletedSections
  };
};


============================
FILE: frontend\src\features\quotes\hooks\useQuoteFormLogic.refactored.ts
============================
import { type FormEvent, useCallback } from 'react';

import { type QuoteFormData } from '../types';
import { useQuoteFormState } from './useQuoteFormState';
import { useQuoteSubmission } from './useQuoteSubmission';
import { useQuoteTenantData } from './useQuoteTenantData';
import { useQuoteValidation } from './useQuoteValidation';
import { useQuoteVehicleData } from './useQuoteVehicleData';

/**
 * Main hook that combines all quote form functionality
 * Now much cleaner and focused on orchestration
 */
export const useQuoteFormLogic = () => {
  // Form state management
  const formState = useQuoteFormState();
  
  // Vehicle data handling
  const vehicleData = useQuoteVehicleData(formState.formData, formState.updateFormData);
  
  // Validation logic
  const validation = useQuoteValidation();
  
  // Submission logic
  const submission = useQuoteSubmission();
  
  // Tenant data handling
  const tenantData = useQuoteTenantData(formState.updateFormData);

  // Available services
  const services = [
    'Interior',
    'Exterior',
    'Interior & Exterior',
    'Paint Correction',
    'Ceramic Coating',
    'Paint Protection Film (PPF)',
    'Other'
  ];

  // Form handlers
  const handleInputChange = useCallback((field: keyof QuoteFormData, value: string) => {
    formState.updateFormData(field, value);
    formState.clearFieldErrors(field);
  }, [formState]);

  const handleServiceToggle = useCallback((service: string) => {
    const currentServices = formState.formData.services;
    const updatedServices = currentServices.includes(service)
      ? currentServices.filter(s => s !== service)
      : [...currentServices, service];
    
    formState.updateFormData('services', updatedServices);
  }, [formState]);

  const handleSubmit = useCallback(async (e: FormEvent) => {
    e.preventDefault();
    
    const allErrors = validation.validateAllFields(formState.formData);
    
    if (Object.keys(allErrors).length > 0) {
      Object.entries(allErrors).forEach(([field, errors]) => {
        formState.updateFieldErrors(field, errors);
      });
      return;
    }

    formState.setIsSubmitting(true);
    
    await submission.submitQuote(
      formState.formData,
      tenantData.slug,
      () => {
        formState.setIsSubmitted(true);
        formState.resetForm();
      },
      formState.setError
    );
    
    formState.setIsSubmitting(false);
  }, [formState, validation, submission, tenantData.slug]);

  const resetForm = useCallback(() => {
    formState.resetForm();
  }, [formState]);

  return {
    // Form state
    formData: formState.formData,
    fieldErrors: formState.fieldErrors,
    isSubmitted: formState.isSubmitted,
    isSubmitting: formState.isSubmitting,
    error: formState.error,
    
    // Vehicle data
    vehicleTypes: vehicleData.vehicleTypes,
    availableMakes: vehicleData.availableMakes,
    availableModels: vehicleData.availableModels,
    
    // Services and tenant data
    services,
    serviceAreas: tenantData.serviceAreas(),
    businessName: tenantData.businessName || '',
    businessLocation: tenantData.businessLocation,
    businessSlug: tenantData.slug || '',
    isAffiliate: !!tenantData.slug,
    
    // Handlers
    handleInputChange,
    handleServiceToggle,
    handleSubmit,
    resetForm
  };
};


============================
FILE: frontend\src\features\quotes\hooks\useQuoteFormLogic.test.ts
============================
// Test file to debug the useQuoteFormLogic hook
import { renderHook } from '@testing-library/react';

import { useQuoteFormLogic } from './useQuoteFormLogic';

// Mock the dependencies
jest.mock('@/features/booking/hooks', () => ({
  useVehicleData: () => ({
    vehicleTypes: [],
    getMakes: jest.fn(),
    getModels: jest.fn()
  })
}));

jest.mock('@/shared/hooks', () => ({
  useLocation: () => ({
    selectedLocation: null
  }),
  useSiteContext: () => ({
    isAffiliate: false
  })
}));

jest.mock('@/shared/utils', () => ({
  validateEmail: jest.fn(),
  validateMessage: jest.fn(),
  validateName: jest.fn(),
  validatePhone: jest.fn(),
  validateVehicleField: jest.fn()
}));

describe('useQuoteFormLogic', () => {
  it('should not throw an error', () => {
    expect(() => {
      renderHook(() => useQuoteFormLogic());
    }).not.toThrow();
  });
});


============================
FILE: frontend\src\features\quotes\hooks\useQuoteFormLogic.ts
============================
import { type FormEvent, useCallback } from 'react';

import { type QuoteFormData } from '../types';
import { useQuoteFormState } from './useQuoteFormState';
import { useQuoteSubmission } from './useQuoteSubmission';
import { useQuoteTenantData } from './useQuoteTenantData';
import { useQuoteValidation } from './useQuoteValidation';
import { useQuoteVehicleData } from './useQuoteVehicleData';

/**
 * Main hook that combines all quote form functionality
 * Now much cleaner and focused on orchestration
 */
export const useQuoteFormLogic = () => {
  // Form state management
  const formState = useQuoteFormState();
  
  // Vehicle data handling
  const vehicleData = useQuoteVehicleData(formState.formData, formState.updateFormData);
  
  // Validation logic
  const validation = useQuoteValidation();
  
  // Submission logic
  const submission = useQuoteSubmission();
  
  // Tenant data handling
  const tenantData = useQuoteTenantData(formState.updateFormData);

  // Available services
  const services = [
    'Interior',
    'Exterior',
    'Interior & Exterior',
    'Paint Correction',
    'Ceramic Coating',
    'Paint Protection Film (PPF)',
    'Other'
  ];

  // Form handlers
  const handleInputChange = useCallback((field: keyof QuoteFormData, value: string) => {
    formState.updateFormData(field, value);
    formState.clearFieldErrors(field);
  }, [formState]);

  const handleServiceToggle = useCallback((service: string) => {
    const currentServices = formState.formData.services;
    const updatedServices = currentServices.includes(service)
      ? currentServices.filter(s => s !== service)
      : [...currentServices, service];
    
    formState.updateFormData('services', updatedServices);
  }, [formState]);

  const handleSubmit = useCallback(async (e: FormEvent) => {
    e.preventDefault();
    
    const allErrors = validation.validateAllFields(formState.formData);
    
    if (Object.keys(allErrors).length > 0) {
      Object.entries(allErrors).forEach(([field, errors]) => {
        formState.updateFieldErrors(field, errors);
      });
      return;
    }

    formState.setIsSubmitting(true);
    
    await submission.submitQuote(
      formState.formData,
      tenantData.slug,
      () => {
        formState.setIsSubmitted(true);
        formState.resetForm();
      },
      formState.setError
    );
    
    formState.setIsSubmitting(false);
  }, [formState, validation, submission, tenantData.slug]);

  const resetForm = useCallback(() => {
    formState.resetForm();
  }, [formState]);

  return {
    // Form state
    formData: formState.formData,
    fieldErrors: formState.fieldErrors,
    isSubmitted: formState.isSubmitted,
    isSubmitting: formState.isSubmitting,
    error: formState.error,
    
    // Vehicle data
    vehicleTypes: vehicleData.vehicleTypes,
    availableMakes: vehicleData.availableMakes,
    availableModels: vehicleData.availableModels,
    
    // Services and tenant data
    services,
    serviceAreas: tenantData.serviceAreas(),
    businessName: tenantData.businessName || '',
    businessLocation: tenantData.businessLocation,
    businessSlug: tenantData.slug || '',
    isAffiliate: !!tenantData.slug,
    
    // Handlers
    handleInputChange,
    handleServiceToggle,
    handleSubmit,
    resetForm
  };
};


============================
FILE: frontend\src\features\quotes\hooks\useQuoteFormState.ts
============================
import { useState } from 'react';

import { type QuoteFormData } from '../types';

/**
 * Hook to manage quote form state
 * Separates form state from business logic
 */
export const useQuoteFormState = () => {
  const [formData, setFormData] = useState<QuoteFormData>({
    name: '',
    email: '',
    phone: '',
    city: '',
    state: '',
    zipCode: '',
    services: [],
    vehicleType: '',
    vehicleMake: '',
    vehicleModel: '',
    vehicleYear: '',
    message: ''
  });
  const [fieldErrors, setFieldErrors] = useState<Record<string, string[]>>({});
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');

  const updateFormData = (field: keyof QuoteFormData, value: string | string[]) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const updateFieldErrors = (field: string, errors: string[]) => {
    setFieldErrors(prev => ({ ...prev, [field]: errors }));
  };

  const clearFieldErrors = (field: string) => {
    setFieldErrors(prev => {
      const { [field]: _, ...newErrors } = prev;
      return newErrors;
    });
  };

  const resetForm = () => {
    setFormData({
      name: '',
      email: '',
      phone: '',
      city: '',
      state: '',
      zipCode: '',
      services: [],
      vehicleType: '',
      vehicleMake: '',
      vehicleModel: '',
      vehicleYear: '',
      message: ''
    });
    setFieldErrors({});
    setIsSubmitted(false);
    setIsSubmitting(false);
    setError('');
  };

  return {
    formData,
    fieldErrors,
    isSubmitted,
    isSubmitting,
    error,
    updateFormData,
    updateFieldErrors,
    clearFieldErrors,
    resetForm,
    setIsSubmitted,
    setIsSubmitting,
    setError
  };
};


============================
FILE: frontend\src\features\quotes\hooks\useQuoteModal.ts
============================
import { type MouseEvent, useCallback, useEffect, useState } from 'react';

import { RequestQuoteModalProps } from '../types';

export const useQuoteModal = ({ isOpen, onClose }: RequestQuoteModalProps) => {
  const [isVisible, setIsVisible] = useState(false);
  const [isAnimating, setIsAnimating] = useState(false);

  // Define handleClose first before it's used
  const handleClose = useCallback(() => {
    // Close immediately; parent controls visibility. Do not block while opening.
    onClose();
  }, [onClose]);

  const handleBackdropClick = useCallback((e: MouseEvent) => {
    if (e.target === e.currentTarget) {
      handleClose();
    }
  }, [handleClose]);

  // Handle modal open/close with animation
  useEffect(() => {
    if (isOpen) {
      setIsVisible(true);
      // Small delay to ensure DOM is ready for animation
      const timer = setTimeout(() => { setIsAnimating(true); }, 10);
      return () => { clearTimeout(timer); };
    } else {
      setIsAnimating(false);
      // Wait for animation to complete before hiding
      const timer = setTimeout(() => { setIsVisible(false); }, 300);
      return () => { clearTimeout(timer); };
    }
  }, [isOpen]);

  // Handle escape key
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isOpen) {
        handleClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
      // Prevent body scroll
      document.body.style.overflow = 'hidden';
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
      document.body.style.overflow = 'unset';
    };
  }, [isOpen, handleClose]);

  return {
    isVisible,
    isAnimating,
    handleClose,
    handleBackdropClick
  };
};


============================
FILE: frontend\src\features\quotes\hooks\useQuoteSubmission.ts
============================
import { useCallback } from 'react';

import { useAnalytics } from '@/shared/hooks/useAnalytics';

import { quotesApi } from '../api/quotes.api';
import { type QuoteFormData, quoteRequestSchema } from '../types';

/**
 * Hook to handle quote form submission
 * Separates submission logic from form state
 */
export const useQuoteSubmission = () => {
  const { logEvent } = useAnalytics();
  const submitQuote = useCallback(async (
    formData: QuoteFormData,
    slug: string | undefined,
    onSuccess: () => void,
    onError: (error: string) => void
  ) => {
    try {
      // Validate form data with Zod schema
      const validatedData = quoteRequestSchema.parse({
        name: formData.name,
        email: formData.email,
        phone: formData.phone,
        city: formData.city,
        state: formData.state,
        zipCode: formData.zipCode,
        services: formData.services,
        vehicleType: formData.vehicleType,
        vehicleMake: formData.vehicleMake,
        vehicleModel: formData.vehicleModel,
        vehicleYear: formData.vehicleYear,
        message: formData.message || undefined
      });

      const apiData = {
        ...validatedData,
        message: validatedData.message ?? '',
        businessSlug: slug ?? undefined
      };

      await quotesApi.submitQuoteRequest(apiData as Parameters<typeof quotesApi.submitQuoteRequest>[0]);
      logEvent('quote_submitted', {
        slug: slug || '',
        services_count: validatedData.services.length,
        vehicle_type: validatedData.vehicleType || '',
        city: validatedData.city || '',
      });
      onSuccess();
    } catch (err) {
      console.error('Quote submission error:', err);
      onError('Failed to submit quote. Please try again.');
    }
  }, [logEvent]);

  return {
    submitQuote
  };
};


============================
FILE: frontend\src\features\quotes\hooks\useQuoteTenantData.ts
============================
import { useCallback, useEffect } from 'react';

import { useData, useTenantConfigLoader } from '@/shared/hooks';

/**
 * Hook to handle tenant data and business context
 * Separates tenant logic from form logic
 */
export const useQuoteTenantData = (updateFormData: (field: string, value: string) => void) => {
  const { businessName } = useData();
  const { data: tenantConfig } = useTenantConfigLoader();
  const slug = tenantConfig?.slug;

  // Get business location from tenant config
  const businessLocation = tenantConfig 
    ? `${tenantConfig.contact.baseLocation.city}, ${tenantConfig.contact.baseLocation.state}`
    : '';

  // Get service areas from tenant config (if available)
  const serviceAreas = useCallback((): Array<{ city: string; state: string; primary?: boolean }> => {
    // For now, return empty - service areas will be added to tenant config later
    // When ready, will use: tenantConfig?.serviceAreas
    return [];
  }, []);

  // Set initial location if available
  useEffect(() => {
    if (businessLocation && tenantConfig) {
      // Use tenant location data
      updateFormData('city', tenantConfig.contact.baseLocation.city);
      updateFormData('state', tenantConfig.contact.baseLocation.state);
    }
  }, [businessLocation, tenantConfig, updateFormData]);

  return {
    businessName,
    slug,
    businessLocation,
    serviceAreas
  };
};


============================
FILE: frontend\src\features\quotes\hooks\useQuoteValidation.ts
============================
import { useCallback } from 'react';

import {
  validateEmail,
  validateMessage,
  validateName,
  validatePhone,
  validateVehicleField
} from '@/shared/utils';

import { type QuoteFormData } from '../types';

/**
 * Hook to handle quote form validation
 * Separates validation logic from form state
 */
export const useQuoteValidation = () => {
  const validateField = useCallback((field: keyof QuoteFormData, value: string): string[] => {
    const errors: string[] = [];
    
    switch (field) {
      case 'name':
        if (!value.trim()) {
          errors.push('Name is required.');
        } else {
          const nameErrors = validateName(value);
          if (nameErrors.length > 0) {
            errors.push(...nameErrors);
          }
        }
        break;
        
      case 'email':
        if (!value.trim()) {
          errors.push('Email is required.');
        } else {
          const emailErrors = validateEmail(value);
          if (emailErrors.length > 0) {
            errors.push(...emailErrors);
          }
        }
        break;
        
      case 'phone':
        if (!value.trim()) {
          errors.push('Phone number is required.');
        } else {
          const phoneErrors = validatePhone(value);
          if (phoneErrors.length > 0) {
            errors.push(...phoneErrors);
          }
        }
        break;
        
      case 'city':
        if (!value.trim()) {
          errors.push('City is required.');
        }
        break;
        
      case 'state':
        if (!value.trim()) {
          errors.push('State is required.');
        }
        break;
        
      case 'zipCode':
        if (!value.trim()) {
          errors.push('ZIP code is required.');
        }
        break;
        
      case 'vehicleType':
        if (!value.trim()) {
          errors.push('Vehicle type is required.');
        }
        break;
        
      case 'vehicleMake':
        if (!value.trim()) {
          errors.push('Vehicle make is required.');
        }
        break;
        
      case 'vehicleModel':
        if (!value.trim()) {
          errors.push('Vehicle model is required.');
        }
        break;
        
      case 'vehicleYear':
        if (!value.trim()) {
          errors.push('Vehicle year is required.');
        } else {
          const vehicleErrors = validateVehicleField('year', value);
          if (vehicleErrors.length > 0) {
            errors.push(...vehicleErrors);
          }
        }
        break;
        
      case 'message':
        if (value.trim()) {
          const messageErrors = validateMessage(value);
          if (messageErrors.length > 0) {
            errors.push(...messageErrors);
          }
        }
        break;
    }
    
    return errors;
  }, []);

  const validateAllFields = useCallback((formData: QuoteFormData): Record<string, string[]> => {
    const allErrors: Record<string, string[]> = {};
    
    const fieldsToValidate: (keyof QuoteFormData)[] = [
      'name', 'email', 'phone', 'city', 'state', 'zipCode',
      'vehicleType', 'vehicleMake', 'vehicleModel', 'vehicleYear'
    ];
    
    fieldsToValidate.forEach(field => {
      const value = formData[field];
      if (typeof value === 'string') {
        const errors = validateField(field, value);
        if (errors.length > 0) {
          allErrors[field] = errors;
        }
      }
    });
    
    // Validate message if provided
    if (formData.message) {
      const messageErrors = validateField('message', formData.message);
      if (messageErrors.length > 0) {
        allErrors.message = messageErrors;
      }
    }
    
    return allErrors;
  }, [validateField]);

  return {
    validateField,
    validateAllFields
  };
};


============================
FILE: frontend\src\features\quotes\hooks\useQuoteVehicleData.ts
============================
import { useEffect } from 'react';

import { useVehicleData } from '@/shared/hooks';

import { type QuoteFormData } from '../types';

/**
 * Hook to manage vehicle data and dependencies
 * Handles vehicle type, make, model relationships
 */
export const useQuoteVehicleData = (formData: QuoteFormData, updateFormData: (field: keyof QuoteFormData, value: string) => void) => {
  const { vehicleTypes, getMakes, getModels } = useVehicleData();

  // Get available makes and models based on selected vehicle type
  const availableMakes = formData.vehicleType ? getMakes(formData.vehicleType) : [];
  const availableModels = formData.vehicleType && formData.vehicleMake ?
    getModels(formData.vehicleType, formData.vehicleMake) : [];

  // Reset vehicle make and model when vehicle type changes
  useEffect(() => {
    if (formData.vehicleType) {
      updateFormData('vehicleMake', '');
      updateFormData('vehicleModel', '');
    }
  }, [formData.vehicleType, updateFormData]);

  // Reset vehicle model when vehicle make changes
  useEffect(() => {
    if (formData.vehicleMake) {
      updateFormData('vehicleModel', '');
    }
  }, [formData.vehicleMake, updateFormData]);

  return {
    vehicleTypes,
    availableMakes,
    availableModels
  };
};


============================
FILE: frontend\src\features\quotes\index.ts
============================
// Re-export quotes components
export * from './components';



============================
FILE: frontend\src\features\quotes\types\index.ts
============================
// Quotes feature types
export * from './quotes.types';


============================
FILE: frontend\src\features\quotes\types\quotes.types.ts
============================
// Quote validation schemas and types
import { z } from 'zod';

// Quote request schema
export const quoteRequestSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.email('Invalid email address'),
  phone: z.string().min(10, 'Phone number must be at least 10 digits'),
  vehicleType: z.string().min(1, 'Vehicle type is required'),
  vehicleMake: z.string().min(1, 'Vehicle make is required'),
  vehicleModel: z.string().min(1, 'Vehicle model is required'),
  vehicleYear: z.string().min(4, 'Vehicle year must be 4 digits'),
  services: z.array(z.string()).min(1, 'At least one service must be selected'),
  message: z.string().optional(),
  city: z.string().min(1, 'City is required'),
  state: z.string().min(2, 'State is required'),
  zipCode: z.string().min(5, 'Zip code must be at least 5 digits'),
  businessSlug: z.string().optional()
});

// Quote update schema
export const quoteUpdateSchema = z.object({
  status: z.enum(['pending', 'in_progress', 'completed', 'cancelled']),
  notes: z.string().optional(),
  estimatedPrice: z.number().optional(),
  estimatedDuration: z.number().optional()
});

// Quote response schema
export const quoteResponseSchema = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  phone: z.string(),
  vehicleType: z.string(),
  vehicleMake: z.string(),
  vehicleModel: z.string(),
  vehicleYear: z.string(),
  services: z.array(z.string()),
  message: z.string().optional(),
  city: z.string(),
  state: z.string(),
  zipCode: z.string(),
  businessSlug: z.string().optional(),
  status: z.enum(['pending', 'in_progress', 'completed', 'cancelled']),
  createdAt: z.string(),
  updatedAt: z.string(),
  estimatedPrice: z.number().optional(),
  estimatedDuration: z.number().optional(),
  notes: z.string().optional()
});

// Quote list query schema
export const quoteListQuerySchema = z.object({
  business_slug: z.string().optional(),
  user_id: z.string().optional(),
  status: z.enum(['pending', 'in_progress', 'completed', 'cancelled']).optional(),
  limit: z.number().min(1).max(100).default(10),
  offset: z.number().min(0).default(0)
});

// Quote cancellation schema
export const quoteCancellationSchema = z.object({
  reason: z.string().optional(),
  notes: z.string().optional()
});

// Export types
export type QuoteRequest = z.infer<typeof quoteRequestSchema>;
export type QuoteUpdate = z.infer<typeof quoteUpdateSchema>;
export type QuoteResponse = z.infer<typeof quoteResponseSchema>;
export type QuoteListQuery = z.infer<typeof quoteListQuerySchema>;
export type QuoteCancellation = z.infer<typeof quoteCancellationSchema>;

// Quote status enum
export const QuoteStatus = {
  PENDING: 'pending',
  IN_PROGRESS: 'in_progress',
  COMPLETED: 'completed',
  CANCELLED: 'cancelled'
} as const;

export type QuoteStatusType = typeof QuoteStatus[keyof typeof QuoteStatus];

// Component prop types
export interface RequestQuoteModalProps {
  isOpen: boolean;
  onClose: () => void;
}

// Form data type
export interface QuoteFormData {
  name: string;
  email: string;
  phone: string;
  city: string;
  state: string;
  zipCode: string;
  services: string[];
  vehicleType: string;
  vehicleMake: string;
  vehicleModel: string;
  vehicleYear: string;
  vehicleColor?: string;
  vehicleLength?: string;
  message?: string;
}

// Service area type
export interface ServiceArea {
  city: string;
  state: string;
  primary?: boolean;
}


============================
FILE: frontend\src\features\reviews\api\index.ts
============================
// Reviews feature API exports
export * from './reviewsApi';


============================
FILE: frontend\src\features\reviews\api\reviewsApi.ts
============================
// Reviews API client
import type { DatabaseReview, ReviewQueryParams, ReviewsResponse } from '../types';

const API_BASE_URL = '/api/reviews';

export const reviewsApi = {
  // Get reviews with filtering
  getReviews: async (params: ReviewQueryParams = {}): Promise<ReviewsResponse> => {
    const searchParams = new URLSearchParams();
    
    Object.entries(params).forEach(([key, value]) => {
      if (value !== undefined && value !== '') {
        searchParams.append(key, String(value));
      }
    });

    const response = await fetch(`${API_BASE_URL}?${searchParams.toString()}`);
    
    if (!response.ok) {
      throw new Error(`Failed to fetch reviews: ${response.statusText}`);
    }

    return response.json() as Promise<ReviewsResponse>;
  },

  // Get a specific review by ID
  getReview: async (id: string): Promise<{ success: boolean; data: DatabaseReview }> => {
    const response = await fetch(`${API_BASE_URL}/${id}`);
    
    if (!response.ok) {
      throw new Error(`Failed to fetch review: ${response.statusText}`);
    }

    return response.json() as Promise<{ success: boolean; data: DatabaseReview }>;
  },

  // Submit a new review
  submitReview: async (reviewData: {
    tenant_slug: string;
    customer_name: string;
    rating: number;
    comment: string;
    reviewer_url?: string;
    vehicle_type?: 'car' | 'truck' | 'suv' | 'boat' | 'rv' | 'motorcycle';
    paint_correction?: boolean;
    ceramic_coating?: boolean;
    paint_protection_film?: boolean;
    source?: 'website' | 'google' | 'yelp' | 'facebook';
    avatar_filename?: string;
  }): Promise<{ success: boolean; data: DatabaseReview }> => {
    const response = await fetch(API_BASE_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(reviewData),
    });

    if (!response.ok) {
      throw new Error(`Failed to submit review: ${response.statusText}`);
    }

    return response.json() as Promise<{ success: boolean; data: DatabaseReview }>;
  },

};


============================
FILE: frontend\src\features\reviews\components\GoogleReviewsTest.tsx
============================
/**
 * GoogleReviewsTest Component
 * 
 * Test component to demonstrate Google Reviews integration
 * Shows how to use the useGoogleReviews hook
 */

import React from 'react';
import { useGoogleReviews } from '../hooks';

interface GoogleReviewsTestProps {
  tenantSlug: string;
}

const GoogleReviewsTest: React.FC<GoogleReviewsTestProps> = ({ tenantSlug }) => {
  const {
    reviews,
    summary,
    isLoading,
    isError,
    error,
    source,
    message,
    shouldShowReviews
  } = useGoogleReviews({ tenantSlug });

  if (isLoading) {
    return (
      <div className="p-4 bg-gray-50 rounded-lg">
        <p className="text-gray-600">Loading Google reviews...</p>
      </div>
    );
  }

  if (isError) {
    return (
      <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
        <p className="text-red-600">Error loading reviews: {error?.message}</p>
      </div>
    );
  }

  return (
    <div className="p-6 bg-white border border-gray-200 rounded-lg">
      <div className="mb-4">
        <h3 className="text-lg font-semibold text-gray-900">Google Reviews Test</h3>
        <p className="text-sm text-gray-600">
          Source: <span className="font-mono bg-gray-100 px-2 py-1 rounded">{source}</span>
        </p>
        {message && (
          <p className="text-xs text-gray-500 mt-1">{message}</p>
        )}
      </div>

      {summary && (
        <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <h4 className="font-medium text-blue-900 mb-2">Review Summary</h4>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="text-blue-700">Total Reviews:</span>
              <span className="ml-2 font-semibold">{summary.totalReviews}</span>
            </div>
            <div>
              <span className="text-blue-700">Average Rating:</span>
              <span className="ml-2 font-semibold">{summary.averageRating}/5</span>
            </div>
          </div>
        </div>
      )}

      <div className="space-y-4">
        <h4 className="font-medium text-gray-900">Reviews ({reviews.length})</h4>
        {reviews.map((review) => (
          <div key={review.id} className="border border-gray-200 rounded-lg p-4">
            <div className="flex items-start space-x-3">
              {review.profileImage && (
                <img
                  src={review.profileImage}
                  alt={review.customerName}
                  className="w-10 h-10 rounded-full object-cover"
                />
              )}
              <div className="flex-1">
                <div className="flex items-center space-x-2 mb-1">
                  <span className="font-medium text-gray-900">{review.customerName}</span>
                  <div className="flex items-center">
                    {[...Array(5)].map((_, i) => (
                      <span
                        key={i}
                        className={`text-sm ${
                          i < review.rating ? 'text-yellow-400' : 'text-gray-300'
                        }`}
                      >
                        ★
                      </span>
                    ))}
                  </div>
                  <span className="text-sm text-gray-500">{review.rating}/5</span>
                </div>
                <p className="text-gray-700 text-sm">{review.reviewText}</p>
                <p className="text-xs text-gray-500 mt-2">
                  {new Date(review.date).toLocaleDateString()}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>

      {!shouldShowReviews && (
        <div className="text-center py-8 text-gray-500">
          <p>No reviews found for this tenant.</p>
          <p className="text-sm mt-2">
            {source === 'mock' ? 'Mock reviews are only shown for dummy tenants.' : 'Reviews will appear here once Google OAuth is connected and reviews are available.'}
          </p>
        </div>
      )}
    </div>
  );
};

export default GoogleReviewsTest;


============================
FILE: frontend\src\features\reviews\components\index.ts
============================
// Reviews feature components
export { default as ReviewCard } from './ReviewCard';
export { default as ReviewModal } from './ReviewModal';
export { default as Reviews } from './Reviews';
export { default as ReviewsCarousel } from './ReviewsCarousel';
export { default as ReviewsHeader } from './ReviewsHeader';


============================
FILE: frontend\src\features\reviews\components\ReviewCard.tsx
============================
import React from 'react';

import type { Review } from '../types';

interface ReviewCardProps {
  review: Review;
  onReviewClick?: (review: Review) => void;
}

const ReviewCard: React.FC<ReviewCardProps> = ({ review, onReviewClick }) => {
  const handleClick = () => {
    onReviewClick?.(review);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      onReviewClick?.(review);
    }
  };

  return (
    <div 
      className="relative bg-white/10 backdrop-blur-sm rounded-lg p-6 md:p-8 lg:p-9 cursor-pointer hover:bg-white/20 transition-colors"
      onClick={handleClick}
      onKeyDown={handleKeyDown}
      role="button"
      tabIndex={0}
      aria-label={`Review by ${review.customerName}`}
    >
      <div className="flex items-center mb-4 md:mb-5 lg:mb-6">
        <div className="flex items-center space-x-4">
          <div className="w-16 h-16 bg-orange-500 rounded-full flex items-center justify-center text-white font-semibold overflow-hidden">
            {review.profileImage ? (
              <picture>
                <source
                  type="image/webp"
                  srcSet={`${review.profileImage.replace(/\.(png|jpg|jpeg)$/i, '.webp')} 64w`}
                  sizes="64px"
                />
                <img 
                  src={review.profileImage} 
                  alt={review.customerName}
                  className="w-full h-full object-cover rounded-full"
                  width={64}
                  height={64}
                  loading="lazy"
                  decoding="async"
                />
              </picture>
            ) : (
              review.customerName.charAt(0).toUpperCase()
            )}
          </div>
          <div>
            <h3 className="text-white font-semibold text-lg">{review.customerName}</h3>
            <div className="flex items-center">
              {Array.from({ length: 5 }).map((_, i) => (
                <span
                  key={i}
                  className={`text-2xl ${
                    i < review.rating ? 'text-yellow-400' : 'text-gray-400'
                  }`}
                >
                  ★
                </span>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Review Content - Word Count Based */}
      <div className="flex flex-col justify-start pb-16">
        {/* Review Title */}
        {review.title && (
          <h5 className="text-white font-medium mb-2 text-base">
            {review.title.split(' ').slice(0, 8).join(' ')}
            {review.title.split(' ').length > 8 && '...'}
          </h5>
        )}

        <p className="text-gray-300 text-base leading-relaxed">
          {review.reviewText.split(' ').slice(0, 25).join(' ')}
          {review.reviewText.split(' ').length > 25 && '...'}
        </p>
      </div>

      {/* Service Category and Review Source Icon - Fixed Bottom */}
      <div className="absolute bottom-4 left-4 right-4 flex items-center justify-between">
        <div>
          {review.serviceCategory && (
            <span className="text-sm bg-white/20 text-white px-3 py-2 rounded-full">
              {review.serviceCategory}
            </span>
          )}
        </div>
        <div>
          {review.reviewSource && (
            <picture>
              <source
                type="image/webp"
                srcSet={`/shared/icons/${review.reviewSource}.webp`}
                sizes="20px"
              />
              <img 
                src={`/shared/icons/${review.reviewSource}.png`}
                alt={review.reviewSource}
                className="w-5 h-5 rounded"
                width={20}
                height={20}
                loading="lazy"
                decoding="async"
              />
            </picture>
          )}
        </div>
      </div>
    </div>
  );
};

export default ReviewCard;


============================
FILE: frontend\src\features\reviews\components\ReviewModal.tsx
============================
import React from 'react';

import type { Review } from '../types/types';

interface ReviewModalProps {
  review: Review | null;
  isOpen: boolean;
  onClose: () => void;
}

const ReviewModal: React.FC<ReviewModalProps> = ({ review, isOpen, onClose }) => {
  if (!isOpen || !review) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-stone-900 rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto border border-stone-700">
        <div className="p-6">
          <div className="flex justify-between items-start mb-4">
            <h3 className="text-2xl font-bold text-white">Review Details</h3>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-orange-400 text-2xl transition-colors"
            >
              ×
            </button>
          </div>
          
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-4">
              {review.reviewerUrl ? (
                <a 
                  href={review.reviewerUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="w-16 h-16 bg-orange-500 rounded-full flex items-center justify-center text-white font-semibold text-xl overflow-hidden hover:bg-orange-600 transition-colors"
                >
                  {review.profileImage ? (
                    <picture>
                      <source
                        type="image/webp"
                        srcSet={`${review.profileImage.replace(/\.(png|jpg|jpeg)$/i, '.webp')} 64w`}
                        sizes="64px"
                      />
                      <img 
                        src={review.profileImage} 
                        alt={review.customerName}
                        className="w-full h-full object-cover rounded-full"
                        width={64}
                        height={64}
                        loading="lazy"
                        decoding="async"
                      />
                    </picture>
                  ) : (
                    review.customerName.charAt(0).toUpperCase()
                  )}
                </a>
              ) : (
                <div className="w-16 h-16 bg-orange-500 rounded-full flex items-center justify-center text-white font-semibold text-xl overflow-hidden">
                  {review.profileImage ? (
                    <picture>
                      <source
                        type="image/webp"
                        srcSet={`${review.profileImage.replace(/\.(png|jpg|jpeg)$/i, '.webp')} 64w`}
                        sizes="64px"
                      />
                      <img 
                        src={review.profileImage} 
                        alt={review.customerName}
                        className="w-full h-full object-cover rounded-full"
                        width={64}
                        height={64}
                        loading="lazy"
                        decoding="async"
                      />
                    </picture>
                  ) : (
                    review.customerName.charAt(0).toUpperCase()
                  )}
                </div>
              )}
              <div>
                {review.reviewerUrl ? (
                  <a 
                    href={review.reviewerUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-xl font-semibold text-white hover:text-orange-400 transition-colors"
                  >
                    {review.customerName}
                  </a>
                ) : (
                  <h4 className="text-xl font-semibold text-white">{review.customerName}</h4>
                )}
                <div className="flex items-center">
                  {Array.from({ length: 5 }, (_, i) => (
                    <span
                      key={i}
                      className={`text-xl ${
                        i < review.rating ? 'text-yellow-400' : 'text-gray-300'
                      }`}
                    >
                      ★
                    </span>
                  ))}
                </div>
              </div>
            </div>
            <div className="flex items-center">
              {review.reviewSource && review.reviewerUrl && (
                <a 
                  href={review.reviewerUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="hover:opacity-80 transition-opacity"
                >
                  <picture>
                    <source
                      type="image/webp"
                      srcSet={`/shared/icons/${review.reviewSource}.webp`}
                      sizes="32px"
                    />
                    <img 
                      src={`/shared/icons/${review.reviewSource}.png`}
                      alt={review.reviewSource}
                      className="w-8 h-8 rounded"
                      width={32}
                      height={32}
                      loading="lazy"
                      decoding="async"
                    />
                  </picture>
                </a>
              )}
              {review.reviewSource && !review.reviewerUrl && (
                <picture>
                  <source
                    type="image/webp"
                    srcSet={`/shared/icons/${review.reviewSource}.webp`}
                    sizes="32px"
                  />
                  <img 
                    src={`/shared/icons/${review.reviewSource}.png`}
                    alt={review.reviewSource}
                    className="w-8 h-8 rounded"
                    width={32}
                    height={32}
                    loading="lazy"
                    decoding="async"
                  />
                </picture>
              )}
            </div>
          </div>

          {/* Review Title */}
          {review.title && (
            <h5 className="text-lg font-medium text-white mb-3">
              {review.title}
            </h5>
          )}
          
          <p className="text-gray-300 leading-relaxed mb-4">
            {review.reviewText}
          </p>

          {/* Additional Info */}
          <div className="flex flex-wrap gap-2 mb-4">
            {review.serviceCategory && (
              <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-orange-500/20 text-orange-400 border border-orange-500/30">
                {review.serviceCategory}
              </span>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ReviewModal;


============================
FILE: frontend\src\features\reviews\components\Reviews.tsx
============================
import React, { useState } from 'react';

import { useData } from '@/shared/hooks/useData';
import ReviewsSummary from '@/shared/ui/ReviewsSummary';
import { getImageOpacityClasses, getTransitionStyles } from '@/shared/utils';

import { useReviews, useReviewsContent, useRotatingReviews } from '../hooks';
import type { Review, ReviewQueryParams, ReviewsProps } from '../types/types';
import ReviewModal from './ReviewModal';
import ReviewsCarousel from './ReviewsCarousel';
import ReviewsHeader from './ReviewsHeader';

const Reviews: React.FC<ReviewsProps> = ({
  maxReviews = 50,
  tenantSlug,
  customHeading,
  customIntro,
  feedKey,
  locationData
}) => {
  const [selectedReview, setSelectedReview] = useState<Review | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  
  // Get content from database (with fallbacks)
  const { title, subtitle } = useReviewsContent({ locationData, customHeading, customIntro });
  
  // Get tenant context
  let isTenant = false;
  try {
    const tenantData = useData();
    isTenant = tenantData.isTenant || false;
  } catch {
    // Not in tenant context, so it's main site
    isTenant = false;
  }

  // Build query parameters based on props and site context
  const queryParams: ReviewQueryParams = {
    limit: maxReviews
  };

  // Add tenant slug if provided
  if (tenantSlug) {
    queryParams.tenant_slug = tenantSlug;
  }

  // TODO: Implement feedKey for GBP/Yelp integration
  // The feedKey prop is available for future implementation of external review feeds
  // Example: feedKey: "gbp:bullhead-city-az" for Google Business Profile
  // Example: feedKey: "yelp:las-vegas-nv" for Yelp integration
  const finalFeedKey = feedKey || (locationData as { reviewsSection?: { feedKey?: string } } | undefined)?.reviewsSection?.feedKey;
  // FeedKey available for future implementation
  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- Reserved for future use
  const _feedKey = finalFeedKey;

  if (isTenant) {
    // For tenant sites, use the tenant slug from the URL
    const urlSlug = window.location.pathname.split('/')[1];
    if (urlSlug) {
      queryParams.tenant_slug = urlSlug;
    }
  }

  // Fetch reviews from database
  const { reviews, loading, error } = useReviews(queryParams);
  

  // Use rotating review images as background
  const { images: backgroundImages, currentIndex, loading: _backgroundLoading } = useRotatingReviews(reviews);

  const handleReviewClick = (review: Review) => {
    setSelectedReview(review);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedReview(null);
  };

  // Show loading state
  if (loading) {
    return (
      <section id="reviews" className="relative h-screen snap-start snap-always overflow-hidden">
        {/* Rotating Background Images with Overlay */}
        <div className="absolute inset-0 z-0">
          {backgroundImages.map((image, index) => (
            <img
              key={image}
              src={image}
              alt={`Customer reviews background ${index + 1}`}
              className={`absolute inset-0 w-full h-full object-cover ${getImageOpacityClasses(index, currentIndex, 2000)}`}
              style={getTransitionStyles(2000)}
              decoding={index === 0 ? 'sync' : 'async'}
              loading={index === 0 ? 'eager' : 'lazy'}
            />
          ))}
          {/* Dark overlay */}
          <div className="absolute inset-0 bg-stone-900/85"></div>
        </div>
        <div className="relative z-10 h-full flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4"></div>
            <p className="text-white text-lg">Loading reviews...</p>
          </div>
        </div>
      </section>
    );
  }

  // Show error state
  if (error) {
    return (
      <section id="reviews" className="relative h-screen snap-start snap-always overflow-hidden">
        {/* Rotating Background Images with Overlay */}
        <div className="absolute inset-0 z-0">
          {backgroundImages.map((image, index) => (
            <img
              key={image}
              src={image}
              alt={`Customer reviews background ${index + 1}`}
              className={`absolute inset-0 w-full h-full object-cover ${getImageOpacityClasses(index, currentIndex, 2000)}`}
              style={getTransitionStyles(2000)}
              decoding={index === 0 ? 'sync' : 'async'}
              loading={index === 0 ? 'eager' : 'lazy'}
            />
          ))}
          {/* Dark overlay */}
          <div className="absolute inset-0 bg-stone-900/85"></div>
        </div>
        <div className="relative z-10 h-full flex items-center justify-center">
          <div className="text-center">
            <p className="text-red-400 text-lg mb-4">Error loading reviews</p>
            <p className="text-white text-sm">{error}</p>
          </div>
        </div>
      </section>
    );
  }

  // Show empty state
  if (!reviews.length) {
    return (
      <section id="reviews" className="relative h-screen snap-start snap-always overflow-hidden">
        {/* Rotating Background Images with Overlay */}
        <div className="absolute inset-0 z-0">
          {backgroundImages.map((image, index) => (
            <img
              key={image}
              src={image}
              alt={`Customer reviews background ${index + 1}`}
              className={`absolute inset-0 w-full h-full object-cover ${getImageOpacityClasses(index, currentIndex, 2000)}`}
              style={getTransitionStyles(2000)}
              decoding={index === 0 ? 'sync' : 'async'}
              loading={index === 0 ? 'eager' : 'lazy'}
            />
          ))}
          {/* Dark overlay */}
          <div className="absolute inset-0 bg-stone-900/85"></div>
        </div>
        <div className="relative z-10 h-full flex items-center justify-center">
          <div className="text-center">
            <p className="text-white text-lg">No reviews available</p>
          </div>
        </div>
      </section>
    );
  }

  return (
    <section id="reviews" className="relative h-screen snap-start snap-always overflow-hidden">
      <div className="h-full pt-[80px] md:pt-[88px]">
      {/* Rotating Background Images with Overlay */}
      <div className="absolute inset-0 z-0">
        {backgroundImages.map((image, index) => (
          <img
            key={image}
            src={image}
            alt={`Customer reviews background ${index + 1}`}
            className={`absolute inset-0 w-full h-full object-cover ${getImageOpacityClasses(index, currentIndex, 2000)}`}
            style={getTransitionStyles(2000)}
            decoding={index === 0 ? 'sync' : 'async'}
            loading={index === 0 ? 'eager' : 'lazy'}
          />
        ))}
        {/* Dark overlay */}
        <div className="absolute inset-0 bg-stone-900/85"></div>
      </div>
      
      {/* Content */}
      <div className="relative z-10 h-full flex flex-col items-center justify-start md:justify-center px-4 pt-[20px] md:pt-0">
        <div className="max-w-6xl mx-auto w-full">
          <ReviewsHeader 
            title={title}
            subtitle={subtitle}
          />
          <ReviewsSummary className="mb-8" />
          <ReviewsCarousel 
            reviews={reviews}
            onReviewClick={handleReviewClick}
          />
        </div>
      </div>

      <ReviewModal
        review={selectedReview}
        isOpen={isModalOpen}
        onClose={handleCloseModal}
      />
      </div>
    </section>
  );
};

export default Reviews;


============================
FILE: frontend\src\features\reviews\components\ReviewsCarousel.tsx
============================
import React, { useRef, useState } from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';

import { useIsMobile, useIsTablet } from '@/shared/hooks';

import type { Review } from '../types';
import ReviewCard from './ReviewCard';

interface ReviewsCarouselProps {
  reviews: Review[];
  onReviewClick?: (review: Review) => void;
  maxVisible?: number;
}

const ReviewsCarousel: React.FC<ReviewsCarouselProps> = ({ 
  reviews, 
  onReviewClick,
  maxVisible = 3
}) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const touchStartX = useRef<number | null>(null);
  const touchEndX = useRef<number | null>(null);

  // Determine how many reviews to show based on screen size
  // Mobile: 1, Tablet: 2, Desktop: 3
  const isMobile = useIsMobile();
  const isTablet = useIsTablet();
  const visibleCount = isMobile ? 1 : isTablet ? 2 : maxVisible;

  const handlePrevious = () => {
    setCurrentIndex((prev) => (prev > 0 ? prev - 1 : reviews.length - 1));
  };

  const handleNext = () => {
    setCurrentIndex((prev) => (prev < reviews.length - 1 ? prev + 1 : 0));
  };

  // Touch/swipe handlers
  const handleTouchStart = (e: React.TouchEvent) => {
    touchStartX.current = e.touches[0]?.clientX ?? null;
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    touchEndX.current = e.touches[0]?.clientX ?? null;
  };

  const handleTouchEnd = () => {
    if (touchStartX.current === null || touchEndX.current === null) return;
    
    const diff = touchStartX.current - touchEndX.current;
    const minSwipeDistance = 50;
    
    if (Math.abs(diff) > minSwipeDistance) {
      if (diff > 0) {
        // Swiped left - show next
        handleNext();
      } else {
        // Swiped right - show previous
        handlePrevious();
      }
    }
    
    touchStartX.current = null;
    touchEndX.current = null;
  };

  const getVisibleReviews = () => {
    // Mobile: show 1 review only
    if (isMobile) {
      return [reviews[currentIndex]].filter(Boolean);
    }
    
    // Desktop/Tablet: show multiple reviews
    const visible: Review[] = [];
    for (let i = 0; i < visibleCount; i++) {
      const index = (currentIndex + i) % reviews.length;
      const review = reviews[index];
      if (review) {
        visible.push(review);
      }
    }
    return visible;
  };

  if (reviews.length === 0) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-300 text-lg">No reviews available</p>
      </div>
    );
  }

  return (
    <div className="relative w-full max-w-6xl mx-auto">
      {/* Navigation Arrows - Hidden on mobile, shown on desktop */}
      {reviews.length > 1 && (
        <>
          <button
            onClick={handlePrevious}
            className="hidden md:flex absolute -left-12 top-1/2 -translate-y-1/2 z-20 bg-orange-500 hover:bg-orange-600 text-white p-3 rounded-full transition-colors shadow-lg items-center justify-center"
            aria-label="Previous review"
          >
            <ChevronLeft className="h-5 w-5" />
          </button>

          <button
            onClick={handleNext}
            className="hidden md:flex absolute -right-12 top-1/2 -translate-y-1/2 z-20 bg-orange-500 hover:bg-orange-600 text-white p-3 rounded-full transition-colors shadow-lg items-center justify-center"
            aria-label="Next review"
          >
            <ChevronRight className="h-5 w-5" />
          </button>
        </>
      )}

      {/* Reviews Container - Swipeable on mobile */}
      <div 
        className="px-4 md:px-0"
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        {/* Mobile: 1 review, Tablet: 2 reviews, Desktop: 3 reviews */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {getVisibleReviews().map((review) => (
            <ReviewCard
              key={review.id}
              review={review}
              onReviewClick={onReviewClick}
            />
          ))}
        </div>
      </div>

      {/* Dots Indicator - Show on mobile for swipe feedback */}
      {reviews.length > 1 && (
        <div className="flex justify-center mt-4 md:mt-8 space-x-2">
          {reviews.map((_, index) => (
            <button
              key={index}
              onClick={() => { setCurrentIndex(index); }}
              className={`w-2 h-2 md:w-3 md:h-3 rounded-full transition-colors ${
                currentIndex === index
                  ? 'bg-orange-500'
                  : 'bg-gray-400 hover:bg-gray-300'
              }`}
              aria-label={`Go to review ${index + 1}`}
            />
          ))}
        </div>
      )}
    </div>
  );
};

export default ReviewsCarousel;


============================
FILE: frontend\src\features\reviews\components\ReviewsHeader.tsx
============================
import React from 'react';

interface ReviewsHeaderProps {
  title?: string;
  subtitle?: string;
}

const ReviewsHeader: React.FC<ReviewsHeaderProps> = ({
  title = "Customer Reviews",
  subtitle = "See what our customers are saying about our mobile detailing services"
}) => {
  return (
    <div className="text-center mb-12">
      <h2 className="text-4xl md:text-5xl font-bold text-white mb-4">
        {title}
      </h2>
      <p className="text-xl text-gray-300 max-w-3xl mx-auto">
        {subtitle}
      </p>
    </div>
  );
};

export default ReviewsHeader;


============================
FILE: frontend\src\features\reviews\hooks\index.ts
============================
// Reviews feature hooks
export * from './useReviews';
export * from './useReviewsContent';
export * from './useReviewsRating';
export * from './useRotatingReviews';
export * from './useGoogleReviews';


============================
FILE: frontend\src\features\reviews\hooks\useGoogleReviews.ts
============================
/**
 * useGoogleReviews Hook
 * 
 * Fetches Google Business Profile reviews with mock fallback
 * Integrates with the backend Google Reviews API
 */

import { useQuery } from '@tanstack/react-query';
import { useMemo } from 'react';

export interface GoogleReview {
  reviewId: string;
  reviewer: {
    displayName: string;
    profilePhotoUrl?: string;
  };
  comment: string;
  starRating: 'ONE' | 'TWO' | 'THREE' | 'FOUR' | 'FIVE';
  createTime: string;
  updateTime: string;
}

export interface GoogleReviewsResponse {
  success: boolean;
  data: GoogleReview[];
  source: 'google' | 'mock';
  tenantSlug: string;
  message: string;
}

export interface UseGoogleReviewsOptions {
  tenantSlug?: string;
  enabled?: boolean;
  refetchInterval?: number;
}

/**
 * Convert Google star rating to number
 */
function starRatingToNumber(rating: string): number {
  const ratingMap: Record<string, number> = {
    'ONE': 1,
    'TWO': 2,
    'THREE': 3,
    'FOUR': 4,
    'FIVE': 5
  };
  return ratingMap[rating] || 5;
}

/**
 * Transform Google review to frontend format
 */
function transformGoogleReview(review: GoogleReview) {
  return {
    id: review.reviewId,
    customerName: review.reviewer.displayName,
    profileImage: review.reviewer.profilePhotoUrl,
    rating: starRatingToNumber(review.starRating),
    reviewText: review.comment,
    date: review.createTime,
    isVerified: true, // Google reviews are verified
    isFeatured: false,
    source: 'google' as const
  };
}

/**
 * Hook to fetch Google Business Profile reviews
 */
export function useGoogleReviews(options: UseGoogleReviewsOptions = {}) {
  const { tenantSlug, enabled = true, refetchInterval } = options;

  const {
    data: response,
    isLoading,
    isError,
    error,
    refetch,
    isRefetching
  } = useQuery({
    queryKey: ['google-reviews', tenantSlug],
    queryFn: async (): Promise<GoogleReviewsResponse> => {
      if (!tenantSlug) {
        throw new Error('Tenant slug is required');
      }

      const response = await fetch(`/api/google-reviews/${tenantSlug}`);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch reviews: ${response.status} ${response.statusText}`);
      }

      return response.json();
    },
    enabled: enabled && !!tenantSlug,
    refetchInterval,
    staleTime: 5 * 60 * 1000, // 5 minutes
    retry: 2
  });

  // Transform the data for frontend consumption
  const reviews = useMemo(() => {
    if (!response?.data) return [];
    return response.data.map(transformGoogleReview);
  }, [response?.data]);

  // Calculate summary statistics
  const summary = useMemo(() => {
    if (!reviews.length) return null;

    const totalReviews = reviews.length;
    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
    const averageRating = totalRating / totalReviews;
    const ratingDistribution = reviews.reduce((dist, review) => {
      dist[review.rating] = (dist[review.rating] || 0) + 1;
      return dist;
    }, {} as Record<number, number>);

    return {
      totalReviews,
      averageRating: Math.round(averageRating * 10) / 10,
      ratingDistribution,
      source: response?.source || 'unknown'
    };
  }, [reviews, response?.source]);

  // Determine if review section should be shown
  const shouldShowReviews = reviews.length > 0;

  return {
    reviews,
    summary,
    isLoading,
    isError,
    error: error as Error | null,
    refetch,
    isRefetching,
    source: response?.source,
    message: response?.message,
    shouldShowReviews
  };
}

/**
 * Hook to get Google Reviews health status
 */
export function useGoogleReviewsHealth(tenantSlug?: string) {
  const {
    data: health,
    isLoading,
    isError,
    error
  } = useQuery({
    queryKey: ['google-reviews-health', tenantSlug],
    queryFn: async () => {
      if (!tenantSlug) {
        throw new Error('Tenant slug is required');
      }

      const response = await fetch(`/api/google-reviews/${tenantSlug}/health`);
      
      if (!response.ok) {
        throw new Error(`Health check failed: ${response.status} ${response.statusText}`);
      }

      return response.json();
    },
    enabled: !!tenantSlug,
    refetchInterval: 60 * 1000, // Check every minute
    staleTime: 30 * 1000 // 30 seconds
  });

  return {
    health,
    isLoading,
    isError,
    error: error as Error | null
  };
}


============================
FILE: frontend\src\features\reviews\hooks\useReviews.ts
============================
// Hook for fetching reviews
import { useQuery } from '@tanstack/react-query';

import { reviewsApi } from '../api';
import type { DatabaseReview,Review, ReviewQueryParams } from '../types';

// Convert database review to frontend review format
const convertDatabaseReviewToReview = (dbReview: DatabaseReview): Review => {
  const review: Review = {
    id: dbReview.id.toString(),
    customerName: dbReview.customer_name,
    rating: dbReview.rating,
    reviewText: dbReview.comment,
    date: dbReview.published_at || dbReview.created_at,
    reviewSource: dbReview.source,
  };

  // Add optional fields only if they exist
  if (dbReview.avatar_filename) {
    review.profileImage = `/uploads/avatars/${dbReview.avatar_filename}`;
  }
  if (dbReview.reviewer_url) {
    review.reviewerUrl = dbReview.reviewer_url;
  }
  if (dbReview.vehicle_type) {
    review.serviceCategory = dbReview.vehicle_type;
  }

  return review;
};

export const useReviews = (params: ReviewQueryParams = {}) => {
  // Create a stable query key based on params
  const queryKey = ['reviews', params];
  
  // Only fetch if we have meaningful params
  const hasParams = Object.values(params).some(value => value !== undefined && value !== '');
  
  const {
    data: response,
    isLoading: loading,
    error,
    refetch
  } = useQuery({
    queryKey,
    queryFn: async () => {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => { controller.abort(); }, 5000); // 5 second timeout
      
      try {
        const response = await reviewsApi.getReviews(params);
        clearTimeout(timeoutId);
        
        if (!response.success) {
          throw new Error(response.error || 'Failed to fetch reviews');
        }
        
        return response;
      } catch (err) {
        clearTimeout(timeoutId);
        throw err;
      }
    },
    enabled: hasParams,
    staleTime: 5 * 60 * 1000, // 5 minutes
    retry: 1
  });

  // Convert database reviews to frontend format
  const reviews = response?.data ? response.data.map(convertDatabaseReviewToReview) : [];
  const pagination = response?.pagination || null;
  const errorMessage = error instanceof Error ? error.message : null;

  const loadMore = () => {
    if (pagination?.hasMore) {
      // For now, just refetch with current params
      // TODO: Implement proper pagination with offset
      refetch();
    }
  };

  return {
    reviews,
    loading,
    error: errorMessage,
    pagination,
    refetch,
    loadMore
  };
};


============================
FILE: frontend\src\features\reviews\hooks\useReviewsAvailability.ts
============================
// This hook has been moved to @/shared/hooks/useReviewsAvailability.ts
// Re-export from shared for backward compatibility
export { useReviewsAvailability } from '@/shared/hooks/useReviewsAvailability';


============================
FILE: frontend\src\features\reviews\hooks\useReviewsContent.ts
============================
import { useWebsiteContent } from '@/shared/contexts/WebsiteContentContext';
import { useIndustrySiteData } from '@/shared/hooks/useIndustrySiteData';

interface UseReviewsContentReturn {
  title: string;
  subtitle: string;
}

interface UseReviewsContentProps {
  locationData?: unknown;
  customHeading?: string;
  customIntro?: string;
}

export const useReviewsContent = (props?: UseReviewsContentProps): UseReviewsContentReturn => {
  // Get industry-specific site data
  const { siteData } = useIndustrySiteData();
  
  // Always call hooks unconditionally
  const { content: websiteContent } = useWebsiteContent();
  
  // Use passed locationData as fallback (reserved for future use)
  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- Reserved for future location-specific data
  const _locationData = props?.locationData;
  
  // All sites are now tenant-based, so use database content or industry-specific site data
  // Priority: Custom props > Database content > Industry-specific site data > Fallback
  const title = props?.customHeading
    || websiteContent?.reviews_title
    || (siteData?.reviews?.title ?? 'Customer Reviews');
    
  const subtitle = props?.customIntro
    || websiteContent?.reviews_subtitle
    || (siteData?.reviews?.subtitle ?? 'What our customers say');

  return {
    title,
    subtitle
  };
};



============================
FILE: frontend\src\features\reviews\hooks\useReviewsRating.ts
============================
import { useWebsiteContent } from '@/shared/contexts/WebsiteContentContext';
import { useDataOptional } from '@/shared/hooks/useData';

interface UseReviewsRatingReturn {
  averageRating: number;
  totalReviews: number;
  googleBusinessUrl: string;
}

export const useReviewsRating = (): UseReviewsRatingReturn => {
  // Always call hooks unconditionally (hooks rules)
  const data = useDataOptional();
  const { content: websiteContent } = useWebsiteContent();
  
  const isPreview = data?.isPreview || false;
  
  // In preview mode, return impressive stats
  if (isPreview) {
    return {
      averageRating: 4.9,
      totalReviews: 863,
      googleBusinessUrl: '#', // Dead link in preview
    };
  }
  
  // Pull reviews data from database, with sensible defaults
  const averageRating = websiteContent?.reviews_avg_rating ?? 4.9;
  const totalReviews = websiteContent?.reviews_total_count ?? 112;
  
  // Get Google Business URL from tenant's social media data (from DataContext)
  // Fall back to legacy site.json if available, then to a default placeholder
  const googleBusinessUrl = 
    data?.socialMedia.googleBusiness
    ?? data?.siteConfig?.socials?.googleBusiness
    ?? '#';

  return {
    averageRating,
    totalReviews,
    googleBusinessUrl
  };
};



============================
FILE: frontend\src\features\reviews\hooks\useRotatingReviews.ts
============================
import { useEffect,useState } from 'react';

import { useImageRotation } from '@/shared/hooks';

import type { Review } from '../types';

// Fisher-Yates shuffle algorithm
function shuffleArray<T>(array: T[]): T[] {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    const temp = shuffled[i];
    if (temp !== undefined && shuffled[j] !== undefined) {
      shuffled[i] = shuffled[j];
      shuffled[j] = temp;
    }
  }
  return shuffled;
}

export function useRotatingReviews(reviews: Review[]) {
  const [reviewImages, setReviewImages] = useState<string[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Load gallery images for background rotation (no avatar images)
  useEffect(() => {
    let cancelled = false;
    void (async (): Promise<void> => {
      try {
        setLoading(true);
        setError(null);

        let images: string[] = [];

        // Load gallery images for background rotation (no avatar images)
        try {
          const res = await fetch('/mobile-detailing/data/gallery.json');
          if (!res.ok) throw new Error(`Failed to fetch gallery data: ${res.status}`);
          const galleryData: unknown = await res.json();
          const galleryImages = Array.isArray(galleryData) 
            ? galleryData.map((img: unknown) => {
                if (typeof img === 'object' && img !== null && 'src' in img) {
                  return (img as { src: unknown }).src;
                }
                return null;
              }).filter((src): src is string => typeof src === 'string')
            : [];
          
          // Use only gallery images for background rotation
          images = shuffleArray(galleryImages);
          
          // If we still don't have enough images, add some defaults
          if (images.length < 3) {
            const defaultImages = [
              '/mobile-detailing/images/gallery/dodge-viper-gts-grigio-telesto-studio.png',
              '/mobile-detailing/images/gallery/bmw-m4-competition-grigio-telesto-studio.png'
            ];
            images = shuffleArray([...images, ...defaultImages]);
          }
        } catch (galleryError: unknown) {
          // Fallback to default images only
          console.warn('Failed to load gallery images:', galleryError);
          images = ['/mobile-detailing/images/gallery/dodge-viper-gts-grigio-telesto-studio.png'];
        }

        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- Prevents state updates after component unmount
        if (!cancelled) {
          setReviewImages(images);
          setLoading(false);
          setError(null);
        }
      } catch (err: unknown) {
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- Prevents state updates after component unmount
        if (!cancelled) {
          setLoading(false);
          setError(err instanceof Error ? err.message : 'Failed to load review images');
        }
      }
    })();

    return () => {
      cancelled = true;
    };
  }, [reviews]);

  // Use the image rotation utility
  const rotation = useImageRotation({
    images: reviewImages,
    autoRotate: true,
    interval: 8000, // Match FAQ interval
    fadeDuration: 2000, // 2 seconds fade duration
    preloadNext: true,
    pauseOnHover: false // Background doesn't need hover pause
  });

  const { currentIndex, hasMultipleImages } = rotation;
  
  return {
    images: reviewImages,
    currentIndex,
    loading,
    error,
    hasMultipleImages,
    ...rotation
  };
}


============================
FILE: frontend\src\features\reviews\index.ts
============================
// Reviews feature public exports (components only per cursorrules)
export { default as ReviewCard } from './components/ReviewCard';
export { default as ReviewModal } from './components/ReviewModal';
export { default as Reviews } from './components/Reviews';
export { default as ReviewsCarousel } from './components/ReviewsCarousel';
export { default as ReviewsHeader } from './components/ReviewsHeader';


============================
FILE: frontend\src\features\reviews\state\index.ts
============================
// Reviews feature state management
// TODO: Add state management if needed (Zustand/Jotai)


============================
FILE: frontend\src\features\reviews\types\index.ts
============================
// Reviews feature types
export * from './types';


============================
FILE: frontend\src\features\reviews\types\types.ts
============================
// Database review interface (matches reputation.reviews table)
export interface DatabaseReview {
  id: number;
  tenant_slug: string;
  customer_name: string;
  rating: number;
  comment: string;
  reviewer_url?: string;
  vehicle_type?: 'car' | 'truck' | 'suv' | 'boat' | 'rv' | 'motorcycle';
  paint_correction: boolean;
  ceramic_coating: boolean;
  paint_protection_film: boolean;
  source: 'website' | 'google' | 'yelp' | 'facebook';
  avatar_filename?: string;
  status: 'pending' | 'approved' | 'rejected';
  created_at: string;
  updated_at: string;
  published_at?: string;
}

// Frontend review interface (simplified for display)
export interface Review {
  id: string;
  customerName: string;
  profileImage?: string;
  rating: number;
  reviewText: string;
  title?: string;
  date: string;
  isVerified?: boolean;
  isFeatured?: boolean;
  helpfulVotes?: number;
  totalVotes?: number;
  serviceCategory?: string;
  businessName?: string;
  businessSlug?: string;
  reviewSource?: 'website' | 'google' | 'yelp' | 'facebook' | 'imported';
  reviewerUrl?: string;
}

// API response interfaces
export interface ReviewsResponse {
  success: boolean;
  data: DatabaseReview[];
  pagination?: {
    total: number;
    limit: number;
    offset: number;
    hasMore: boolean;
  };
  message?: string;
  error?: string;
}

// Review query parameters
export interface ReviewQueryParams {
  tenant_slug?: string;
  limit?: number;
  offset?: number;
}

// Component props
export interface ReviewsProps {
  maxReviews?: number;
  tenantSlug?: string;
  customHeading?: string;
  customIntro?: string;
  feedKey?: string; // for future GBP/Yelp integration
  locationData?: Record<string, unknown>; // location-specific data
}


============================
FILE: frontend\src\features\reviews\utils\index.ts
============================
// Reviews feature utilities
export * from './reviewUtils';


============================
FILE: frontend\src\features\reviews\utils\reviewUtils.ts
============================
// Review utility functions
import { getTenantAssetUrl } from '@/shared/utils';

import type { DatabaseReview,Review } from '../types';

// Convert database review to frontend review format
export const convertDatabaseReviewToReview = (dbReview: DatabaseReview): Review => ({
  id: dbReview.id.toString(),
  customerName: dbReview.customer_name,
  profileImage: dbReview.avatar_filename ? getTenantAssetUrl({
    vertical: 'mobile-detailing', // Reviews are cross-vertical, using default
    type: 'avatar',
    filename: dbReview.avatar_filename,
  }) : undefined,
  rating: dbReview.rating,
  reviewText: dbReview.comment,
  date: dbReview.published_at || dbReview.created_at,
  reviewSource: dbReview.source,
  reviewerUrl: dbReview.reviewer_url,
  serviceCategory: dbReview.vehicle_type,
});

// Sort reviews by featured status, rating, and date
export const sortReviews = (reviews: Review[]): Review[] => {
  return [...reviews].sort((a, b) => {
    // First, sort by featured status
    if (a.isFeatured !== b.isFeatured) {
      return (b.isFeatured ? 1 : 0) - (a.isFeatured ? 1 : 0);
    }
    // Then, sort by rating (5 stars first)
    if (a.rating !== b.rating) {
      return b.rating - a.rating;
    }
    // Finally, sort by date (newest first)
    return new Date(b.date).getTime() - new Date(a.date).getTime();
  });
};

// Format review date for display
export { formatDateForDisplay as formatReviewDate } from '@/shared/utils';


============================
FILE: frontend\src\features\seo\api\seo.api.ts
============================
/**
 * API functions for SEO configuration
 */

import type { SEOApiResponse, SEOConfig, SEOUpdateRequest } from '../types/seo.types';

export const fetchSEO = async (): Promise<SEOConfig> => {
  const res = await fetch("/api/seo/config");
  if (!res.ok) {
    throw new Error(`Failed to fetch SEO config: ${res.statusText}`);
  }
  const data = await res.json() as SEOApiResponse;
  if (!data.success || !data.data) {
    throw new Error(data.error || 'Failed to fetch SEO config');
  }
  return data.data;
};

export const updateSEO = async (data: SEOUpdateRequest): Promise<SEOConfig> => {
  const res = await fetch("/api/seo/config", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  });
  
  if (!res.ok) {
    throw new Error(`Failed to update SEO config: ${res.statusText}`);
  }
  
  const response = await res.json() as SEOApiResponse;
  if (!response.success || !response.data) {
    throw new Error(response.error || 'Failed to update SEO config');
  }
  return response.data;
};


============================
FILE: frontend\src\features\seo\hooks\useTenantSEO.ts
============================
/**
 * Hook for managing tenant SEO configuration
 */

import { useEffect, useState } from 'react';

import { fetchSEO, updateSEO } from '../api/seo.api';
import type { SEOConfig, SEOUpdateRequest } from '../types/seo.types';

export const useTenantSEO = () => {
  const [seo, setSeo] = useState<SEOConfig>({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadSEO = async () => {
      try {
        setLoading(true);
        const seoData = await fetchSEO();
        setSeo(seoData);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load SEO data');
      } finally {
        setLoading(false);
      }
    };

    void loadSEO();
  }, []);

  const save = async (field: string, value: string | string[]) => {
    try {
      const updated = { ...seo, [field]: value };
      setSeo(updated);
      await updateSEO(updated as SEOUpdateRequest);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to save SEO data');
      // Revert on error
      setSeo(seo);
    }
  };

  return { seo, save, loading, error };
};


============================
FILE: frontend\src\features\seo\index.ts
============================
/**
 * SEO Feature - Barrel exports
 */

export { fetchSEO, updateSEO } from './api/seo.api';
export { useTenantSEO } from './hooks/useTenantSEO';
export { SeoSettingsPage } from './pages/SeoSettingsPage';
export type { SEOApiResponse, SEOConfig, SEOUpdateRequest } from './types/seo.types';


============================
FILE: frontend\src\features\seo\pages\SeoSettingsPage.tsx
============================
/**
 * SEO Settings Page
 * 
 * Dashboard page for tenants to edit their SEO configuration.
 */

import React from 'react';

import { Input } from '@/shared/ui';

interface SeoSettingsPageProps {
  seo: {
    meta_title?: string;
    meta_description?: string;
    keywords?: string[];
  };
  onSave: (field: string, value: string | string[]) => void;
}

export const SeoSettingsPage: React.FC<SeoSettingsPageProps> = ({ seo, onSave }) => {
  const handleKeywordsChange = (value: string) => {
    const keywords = value.split(',').map(k => k.trim()).filter(Boolean);
    onSave('keywords', keywords);
  };

  const keywordsString = seo.keywords?.join(', ') || '';

  return (
    <div className="p-6 space-y-4">
      <h1 className="text-xl font-bold">SEO Settings</h1>
      
      <div className="space-y-4">
        <div>
          <label htmlFor="meta-title" className="block text-sm font-medium mb-2">Meta Title</label>
          <Input 
            id="meta-title"
            value={seo.meta_title || ''} 
            onChange={(e) => { onSave('meta_title', e.target.value); }} 
            placeholder="Enter your page title (max 60 characters)"
            maxLength={60}
          />
          <p className="text-xs text-gray-500 mt-1">
            {seo.meta_title?.length || 0}/60 characters
          </p>
        </div>
        
        <div>
          <label htmlFor="meta-description" className="block text-sm font-medium mb-2">Meta Description</label>
          <Input 
            id="meta-description"
            value={seo.meta_description || ''} 
            onChange={(e) => { onSave('meta_description', e.target.value); }} 
            placeholder="Enter your page description (max 160 characters)"
            maxLength={160}
          />
          <p className="text-xs text-gray-500 mt-1">
            {seo.meta_description?.length || 0}/160 characters
          </p>
        </div>
        
        <div>
          <label htmlFor="keywords" className="block text-sm font-medium mb-2">Keywords</label>
          <Input 
            id="keywords"
            value={keywordsString} 
            onChange={(e) => { handleKeywordsChange(e.target.value); }} 
            placeholder="Enter keywords separated by commas"
          />
          <p className="text-xs text-gray-500 mt-1">
            Separate keywords with commas
          </p>
        </div>
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\seo\types\seo.types.ts
============================
/**
 * Type definitions for SEO feature
 */

export interface SEOConfig {
  id?: number;
  business_id: number;
  meta_title?: string;
  meta_description?: string;
  keywords?: string[];
  og_image?: string;
  twitter_image?: string;
  canonical_path?: string;
  robots_directive?: string;
  jsonld_overrides?: Record<string, unknown>;
  analytics_config?: Record<string, unknown>;
  created_at?: string;
  updated_at?: string;
}

export interface SEOUpdateRequest {
  meta_title?: string;
  meta_description?: string;
  keywords?: string[];
  og_image?: string;
  twitter_image?: string;
  canonical_path?: string;
  robots_directive?: string;
  jsonld_overrides?: Record<string, unknown>;
  analytics_config?: Record<string, unknown>;
}

export interface SEOApiResponse {
  success: boolean;
  data?: SEOConfig;
  error?: string;
}


============================
FILE: frontend\src\features\services\api\services.api.ts
============================
/**
 * Services API Layer
 * Handles all service-related API calls
 */

export interface Service {
  id: string;
  name: string;
  description: string;
  price: number;
  duration: number;
  category: string;
  vehicle_type: string;
  tenant_id: string;
  created_at: string;
  updated_at: string;
}

export interface ServiceCategory {
  id: string;
  name: string;
  description: string;
  vehicle_type: string;
}

export interface CreateServiceRequest {
  name: string;
  description: string;
  price: number;
  duration: number;
  category: string;
  vehicle_type: string;
  tenant_id: string;
}

export interface UpdateServiceRequest {
  name?: string;
  description?: string;
  price?: number;
  duration?: number;
  category?: string;
  vehicle_type?: string;
}

export interface ServicesApiResponse {
  success: boolean;
  data: Service | Service[];
  error?: string;
}

export const servicesApi = {
  /**
   * Get services for a tenant and vehicle type
   */
  getServices: async (tenantId: string, vehicleId: string, categoryId: string): Promise<Service[]> => {
    try {
      const response = await fetch(`/api/services/tenant/${tenantId}/vehicle/${vehicleId}/category/${categoryId}`);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch services: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as ServicesApiResponse;
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to fetch services');
      }
      
      return Array.isArray(result.data) ? result.data : [result.data];
    } catch (error) {
      console.error('Services API Error:', error);
      throw new Error(`Failed to load services: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Create a new service
   */
  createService: async (serviceData: CreateServiceRequest): Promise<Service> => {
    try {
      const response = await fetch('/api/services', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(serviceData),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to create service: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as ServicesApiResponse;
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to create service');
      }
      
      return result.data as Service;
    } catch (error) {
      console.error('Services API Error:', error);
      throw new Error(`Failed to create service: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Get a specific service by ID
   */
  getService: async (serviceId: string): Promise<Service> => {
    try {
      const response = await fetch(`/api/services/${serviceId}`);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch service: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as ServicesApiResponse;
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to fetch service');
      }
      
      return result.data as Service;
    } catch (error) {
      console.error('Services API Error:', error);
      throw new Error(`Failed to load service: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Update a service
   */
  updateService: async (serviceId: string, serviceData: UpdateServiceRequest): Promise<Service> => {
    try {
      const response = await fetch(`/api/services/${serviceId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(serviceData),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to update service: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as ServicesApiResponse;
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to update service');
      }
      
      return result.data as Service;
    } catch (error) {
      console.error('Services API Error:', error);
      throw new Error(`Failed to update service: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Delete a service
   */
  deleteService: async (serviceId: string): Promise<void> => {
    try {
      const response = await fetch(`/api/services/${serviceId}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        throw new Error(`Failed to delete service: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as { success: boolean; error?: string };
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to delete service');
      }
    } catch (error) {
      console.error('Services API Error:', error);
      throw new Error(`Failed to delete service: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Get service categories
   */
  getServiceCategories: async (vehicleType: string): Promise<ServiceCategory[]> => {
    try {
      const response = await fetch(`/api/services/categories?vehicle_type=${encodeURIComponent(vehicleType)}`);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch service categories: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as { success: boolean; data: ServiceCategory[] };
      
      if (!result.success) {
        throw new Error('Failed to fetch service categories');
      }
      
      return result.data;
    } catch (error) {
      console.error('Services API Error:', error);
      throw new Error(`Failed to load service categories: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
};


============================
FILE: frontend\src\features\services\components\BeforeAfterSlider.tsx
============================
import React, { useEffect, useRef, useState } from 'react';

interface BeforeAfterSliderProps {
  beforeImage: string;
  afterImage: string;
  beforeLabel?: string;
  afterLabel?: string;
  className?: string;
}

const BeforeAfterSlider: React.FC<BeforeAfterSliderProps> = ({
  beforeImage,
  afterImage,
  beforeLabel = "BEFORE",
  afterLabel = "AFTER",
  className = ""
}) => {
  const [sliderPosition, setSliderPosition] = useState(50);
  const [isDragging, setIsDragging] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);

  const handleMouseMove = (e: React.MouseEvent) => {
    if (!isDragging || !containerRef.current) return;
    
    const rect = containerRef.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const percentage = (x / rect.width) * 100;
    setSliderPosition(Math.max(0, Math.min(100, percentage)));
  };

  const handleMouseDown = () => {
    setIsDragging(true);
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    if (!containerRef.current || !e.touches[0]) return;
    
    const rect = containerRef.current.getBoundingClientRect();
    const x = e.touches[0].clientX - rect.left;
    const percentage = (x / rect.width) * 100;
    setSliderPosition(Math.max(0, Math.min(100, percentage)));
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    switch (e.key) {
      case 'ArrowLeft':
        e.preventDefault();
        setSliderPosition(Math.max(0, sliderPosition - 1));
        break;
      case 'ArrowRight':
        e.preventDefault();
        setSliderPosition(Math.min(100, sliderPosition + 1));
        break;
      case 'Home':
        e.preventDefault();
        setSliderPosition(0);
        break;
      case 'End':
        e.preventDefault();
        setSliderPosition(100);
        break;
    }
  };

  useEffect(() => {
    const handleGlobalMouseUp = () => { setIsDragging(false); };
    const handleGlobalMouseMove = (e: MouseEvent) => {
      if (!isDragging || !containerRef.current) return;
      
      const rect = containerRef.current.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const percentage = (x / rect.width) * 100;
      setSliderPosition(Math.max(0, Math.min(100, percentage)));
    };

    if (isDragging) {
      document.addEventListener('mousemove', handleGlobalMouseMove);
      document.addEventListener('mouseup', handleGlobalMouseUp);
    }

    return () => {
      document.removeEventListener('mousemove', handleGlobalMouseMove);
      document.removeEventListener('mouseup', handleGlobalMouseUp);
    };
  }, [isDragging]);

  return (
    <div className={`relative w-full aspect-[3/2] rounded-2xl overflow-hidden bg-stone-700 ring-1 ring-white/10 ${className}`}>
      <div 
        ref={containerRef}
        className="relative w-full h-full cursor-col-resize select-none"
        role="slider"
        tabIndex={0}
        aria-label="Before and after image slider"
        aria-valuenow={sliderPosition}
        aria-valuemin={0}
        aria-valuemax={100}
        aria-valuetext={`${Math.round(sliderPosition)}% - showing ${sliderPosition < 50 ? 'before' : 'after'} image`}
        aria-orientation="horizontal"
        onMouseMove={handleMouseMove}
        onMouseDown={handleMouseDown}
        onMouseUp={handleMouseUp}
        onTouchMove={handleTouchMove}
        onTouchStart={() => { setIsDragging(true); }}
        onTouchEnd={() => { setIsDragging(false); }}
        onKeyDown={handleKeyDown}
      >
        {/* Before Image (Background) */}
        <div className="absolute inset-0">
          <img 
            src={beforeImage} 
            alt={`${beforeLabel}: original state`}
            width={600}
            height={400}
            loading="lazy"
            decoding="async"
            className="w-full h-full object-cover"
          />
          <div className="absolute top-4 left-4 bg-black/70 text-white px-3 py-1 rounded-full text-sm font-medium">
            {beforeLabel}
          </div>
        </div>

        {/* After Image (Clipped) */}
        <div 
          className="absolute inset-0 overflow-hidden"
          style={{ clipPath: `inset(0 ${String(100 - sliderPosition)}% 0 0)` }}
        >
          <img 
            src={afterImage} 
            alt={`${afterLabel}: improved state`}
            width={600}
            height={400}
            loading="lazy"
            decoding="async"
            className="w-full h-full object-cover"
          />
          <div className="absolute top-4 right-4 bg-black/70 text-white px-3 py-1 rounded-full text-sm font-medium">
            {afterLabel}
          </div>
        </div>

        {/* Slider Line */}
        <div 
          className="absolute top-0 bottom-0 w-1 bg-white shadow-lg z-10"
          style={{ left: `${String(sliderPosition)}%` }}
        >
          {/* Slider Handle */}
          <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-white rounded-full shadow-lg flex items-center justify-center cursor-col-resize">
            <div className="w-1 h-4 bg-stone-300"></div>
            <div className="w-1 h-4 bg-stone-300 ml-1"></div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BeforeAfterSlider;


============================
FILE: frontend\src\features\services\components\Process.tsx
============================
import React from 'react';

import type { ProcessStep as ProcessStepType, ServiceData } from '@/features/services/types/service-data';

interface ProcessProps {
  serviceData: ServiceData;
}

const ProcessStep = ({ 
  step, 
  isReversed = false 
}: { 
  step: ProcessStepType; 
  isReversed?: boolean;
}) => (
  <div className={`grid gap-8 lg:grid-cols-2 items-start ${isReversed ? 'lg:grid-flow-col-dense' : ''}`}>
    {/* Text Content */}
    <div className={`${isReversed ? 'lg:col-start-2' : ''} space-y-4`}>
      <div className="flex items-center mb-6">
        <div className="flex h-12 w-12 items-center justify-center rounded-full bg-orange-500 text-white text-xl font-bold mr-4 flex-shrink-0">
          {step.number}
        </div>
        <h3 className="text-xl font-semibold text-white">{step.title}</h3>
      </div>
      {Array.isArray(step.bullets) ? (
        <ul className="text-slate-300 leading-relaxed space-y-2 pl-6">
          {step.bullets.map((item: string, index: number) => (
            <li key={index} className="flex items-start">
              <span className="text-orange-400 mr-3 text-lg flex-shrink-0" aria-hidden="true">•</span>
              <span className="text-slate-300 text-lg">{item}</span>
            </li>
          ))}
        </ul>
      ) : (
        <p className="text-slate-300 leading-relaxed pl-6">{step.description}</p>
      )}
    </div>
    
    {/* Image */}
    <div className={`${isReversed ? 'lg:col-start-1' : ''} flex justify-center lg:justify-start`}>
      <div className="aspect-[4/3] rounded-2xl bg-stone-700 ring-1 ring-white/10 overflow-hidden w-full max-w-md">
        {step.image?.src ? (
          <img 
            src={step.image.src} 
            alt={step.image.alt || step.title}
            width={600}
            height={450}
            loading="lazy"
            decoding="async"
            className="w-full h-full object-cover"
          />
        ) : (
          <div className="w-full h-full flex items-center justify-center text-white/50">
            Step {step.number} Image
          </div>
        )}
      </div>
    </div>
  </div>
);

const Process: React.FC<ProcessProps> = ({ serviceData }) => {
  const steps = serviceData.process?.steps || [];

  return (
    <section className="bg-stone-900 py-16">
      <div className="container mx-auto max-w-6xl px-4 sm:px-6 lg:px-8">
        <h2 className="text-2xl sm:text-3xl font-bold text-white mb-12">
          {serviceData.process?.title || "Process"}
        </h2>
        <div className="space-y-20">
          {steps.map((step: ProcessStepType, index: number) => (
            <ProcessStep 
              key={step.number} 
              step={step} 
              isReversed={index % 2 === 1} 
            />
          ))}
        </div>
      </div>
    </section>
  );
};

export default Process;


============================
FILE: frontend\src\features\services\components\ProtectionComparisonChart.tsx
============================
import React from 'react';

import {
  DEFAULT_RATINGS,
  METRIC_LABELS,
  type MetricKey,
  PRODUCT_LABELS,
  type ProductKey,
  type Ratings
} from '@/features/services/utils/protectionComparison';

export interface ProtectionComparisonChartProps {
  ratings?: Ratings;
  title?: string;
  description?: string;
  className?: string;
}

const StarIcon: React.FC<{ filled: boolean; className?: string }> = ({ filled, className = '' }) => (
  <svg 
    viewBox="0 0 16 16" 
    className={`w-4 h-4 ${className}`}
    fill={filled ? 'currentColor' : 'none'}
    stroke="currentColor"
    strokeWidth="1"
  >
    <path d="M8 1l2 4h4l-3 3 1 4-4-2-4 2 1-4-3-3h4l2-4z" />
  </svg>
);

// Helper functions for type-safe access
const getProductLabel = (product: ProductKey): string => PRODUCT_LABELS[product];
const getMetricLabel = (metric: MetricKey): string => METRIC_LABELS[metric];

const RatingStars: React.FC<{ 
  rating: number; 
  product: ProductKey; 
  metric: MetricKey;
  className?: string;
}> = ({ rating, product, metric, className = '' }) => {
  return (
    <div 
      className={`flex items-center gap-1 ${className}`}
      role="img"
      aria-label={`${getProductLabel(product)} — ${getMetricLabel(metric)}: ${String(rating)} out of 5 stars`}
    >
      {[1, 2, 3, 4, 5].map((star) => (
        <StarIcon 
          key={star}
          filled={star <= rating}
          className={star <= rating ? 'text-orange-500' : 'text-stone-600'}
        />
      ))}
      <span className="sr-only">{rating}/5</span>
    </div>
  );
};

export const ProtectionComparisonChart: React.FC<ProtectionComparisonChartProps> = ({
  ratings = DEFAULT_RATINGS,
  title = 'Protection Options Compared',
  description,
  className = ''
}) => {
  const metrics: MetricKey[] = ['protection', 'longevity', 'ease', 'chipResistance'];
  const products: ProductKey[] = ['wax', 'sealant', 'ceramic', 'ppf'];
  
  // Type-safe accessor for ratings
  const getRating = (product: ProductKey, metric: MetricKey): number => ratings[product][metric];

  return (
    <figure className={`rounded-2xl border border-stone-600 p-4 md:p-6 bg-stone-800 shadow-sm ${className}`}>
      <div className="mb-6 text-center">
        <figcaption className="text-lg md:text-xl font-semibold text-white">
          {title}
        </figcaption>
        {description && (
          <p className="text-sm text-slate-300 mt-2">{description}</p>
        )}
      </div>

      {/* Mobile: Stacked layout */}
      <div className="block md:hidden space-y-4">
        {metrics.map((metric) => (
          <div key={metric} className="border border-stone-600 rounded-lg p-3">
            <h3 className="text-sm font-medium text-white mb-3">
              {getMetricLabel(metric)}
            </h3>
            <div className="space-y-3">
              {products.map((product) => (
                <div key={product} className="flex items-center justify-between">
                  <span className="text-sm text-slate-300 min-w-0 flex-shrink-0 mr-3">
                    {getProductLabel(product)}
                  </span>
                  <div className="flex-1 min-w-0">
                    <RatingStars 
                      rating={getRating(product, metric)} 
                      product={product} 
                      metric={metric}
                    />
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>

      {/* Desktop: Grid layout */}
      <div className="hidden md:block">
        {/* Header row */}
        <div className="grid grid-cols-5 gap-6 mb-4">
          <div className="text-sm font-medium text-slate-400"></div>
          {products.map((product) => (
            <div 
              key={product}
              className="text-sm font-medium text-center text-white"
            >
              {getProductLabel(product)}
            </div>
          ))}
        </div>

        {/* Metric rows */}
        {metrics.map((metric) => (
          <div key={metric} className="grid grid-cols-5 gap-6 items-center py-3 border-b border-stone-600 last:border-b-0">
            <div className="text-sm font-medium text-slate-300">
              {getMetricLabel(metric)}
            </div>
            {products.map((product) => (
              <div key={product} className="flex justify-center">
                <RatingStars 
                  rating={getRating(product, metric)} 
                  product={product} 
                  metric={metric}
                />
              </div>
            ))}
          </div>
        ))}
      </div>
    </figure>
  );
};


============================
FILE: frontend\src\features\services\components\Results.tsx
============================
import React from 'react';

import { ServiceData } from '@/features/services/types/service.types';

import BeforeAfterSlider from './BeforeAfterSlider';

interface ResultsProps {
  serviceData: ServiceData;
}

const Results: React.FC<ResultsProps> = ({ serviceData }) => {
  const before = serviceData.results?.images?.before?.src;
  const after = serviceData.results?.images?.after?.src;

  return (
    <section className="bg-stone-800 py-16">
      <div className="container mx-auto max-w-6xl px-4 sm:px-6 lg:px-8">
        <h2 className="text-2xl sm:text-3xl font-bold text-white mb-12 text-center">
          Results
        </h2>
        
        <div className="grid gap-8 lg:grid-cols-2 items-center">
          {/* Before/After Images or Video */}
          {serviceData.results?.video ? (
            <div className="text-center">
              <div className="rounded-2xl bg-stone-700 ring-1 ring-white/10 overflow-hidden w-80 sm:w-[22.4rem] lg:w-[25.6rem] mx-auto">
                <video 
                  src={serviceData.results.video.src}
                  controls
                  className="w-full h-full object-cover"
                  aria-label={serviceData.results.video.alt || "Results video"}
                  playsInline
                  style={{ aspectRatio: '2/3' }}
                >
                  <track kind="captions" />
                  Your browser does not support the video tag.
                </video>
              </div>
            </div>
          ) : before && after ? (
            <div className="w-full">
              <BeforeAfterSlider
                beforeImage={before}
                afterImage={after}
                beforeLabel="BEFORE"
                afterLabel="AFTER"
                className="w-full"
              />
            </div>
          ) : null}
          
          {/* Results List */}
          <div>
            <h3 className="text-xl font-semibold text-white mb-6">What You&apos;ll Get</h3>
            <ul className="space-y-4 text-slate-300">
              {serviceData.results?.bullets?.map((bullet: string, index: number) => (
                <li key={index} className="flex items-start">
                  <span className="text-orange-400 mr-3 text-lg">•</span>
                  <span className="text-lg text-slate-300">{bullet}</span>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Results;


============================
FILE: frontend\src\features\services\components\ServiceCard.tsx
============================
import React from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';

import { ServiceCardProps } from '@/features/services/types/service.types';

const ServiceCard: React.FC<ServiceCardProps> = ({ 
  service, 
  className = "" 
}) => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  
  const handleClick = () => {
    // Preserve preview token if present
    const token = searchParams.get('t');
    const route = token ? `${service.route}?t=${token}` : service.route;
    void navigate(route);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      const token = searchParams.get('t');
      const route = token ? `${service.route}?t=${token}` : service.route;
      void navigate(route);
    }
  };
  
  return (
    <li>
      <div
        onClick={handleClick}
        onKeyDown={handleKeyDown}
        role="button"
        tabIndex={0}
        aria-label={`View ${service.title}`}
        className={`group relative block rounded-lg overflow-hidden shadow-lg transition-transform duration-300 hover:-translate-y-2 hover:shadow-xl cursor-pointer ${className}`}
      >
        <div className="h-40 sm:h-64 lg:h-[24rem] xl:h-[28rem]">
          <img 
            src={service.imageUrl} 
            alt="" /* decorative; title is visible text */
            loading={service.imagePriority ? "eager" : "lazy"}
            decoding={service.imagePriority ? "sync" : "async"}
            // eslint-disable-next-line react/no-unknown-property -- fetchPriority is a valid HTML attribute
            {...(service.imagePriority && { fetchPriority: 'high' as const })}
            width={service.imageWidth || 600}
            height={service.imageHeight || 400}
            className="absolute inset-0 w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
          />
        </div>
        
        {/* Content Overlay */}
        <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent">
          <div className="absolute bottom-0 left-0 right-0 p-3 sm:p-6 lg:p-8 text-white text-center">
            <h3 className="text-base sm:text-xl lg:text-2xl font-semibold">
              {service.title}
            </h3>
          </div>
        </div>
      </div>
    </li>
  );
};

export default ServiceCard;


============================
FILE: frontend\src\features\services\components\ServiceCTA.tsx
============================
import React from 'react';

import { ServiceData } from '@/features/services/types/service.types';
import { CTAButtons } from '@/shared/ui';

interface ServiceCTAProps {
  serviceData: ServiceData;
  onRequestQuote?: () => void;
}

const ServiceCTA: React.FC<ServiceCTAProps> = ({ serviceData, onRequestQuote }) => {
  return (
    <section className="bg-stone-900 py-16">
      <div className="container mx-auto max-w-4xl px-4 sm:px-6 lg:px-8 text-center">
        <h2 className="text-2xl sm:text-3xl font-bold text-white mb-4">
          {serviceData.cta?.title || "Ready to get started?"}
        </h2>
        {serviceData.cta?.description && (
          <p className="text-slate-300 mb-8">
            {serviceData.cta.description}
          </p>
        )}
        
        <CTAButtons 
          layout="horizontal"
          bookNowProps={{
            children: serviceData.cta?.primary?.label || serviceData.hero.ctas?.[0]?.label || "Book Now"
          }}
          getQuoteProps={{
            children: serviceData.cta?.secondary?.label || serviceData.hero.ctas?.[1]?.label || "Request Quote",
            variant: "outline-white",
            onClick: onRequestQuote || (() => { /* No handler provided */ })
          }}
        />
      </div>
    </section>
  );
};

export default ServiceCTA;


============================
FILE: frontend\src\features\services\components\ServiceHero.tsx
============================
import React from 'react';

import { ServiceData } from '@/features/services/types/service.types';
import { CTAButtons } from '@/shared/ui';

interface ServiceHeroProps {
  serviceData: ServiceData;
  onRequestQuote?: () => void;
}

const ServiceHero: React.FC<ServiceHeroProps> = ({ serviceData, onRequestQuote }) => {
  return (
    <section className="bg-stone-900 py-16 sm:py-24">
      <div className="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        {/* Image and Content Grid */}
        <div className="grid gap-8 lg:grid-cols-[3fr_2fr] items-center mb-8">
          {/* Service Image */}
          <div className="aspect-[3/2] rounded-2xl bg-stone-800/80 ring-1 ring-white/10 overflow-hidden">
            {serviceData.hero.image?.src ? (
              <img 
                src={serviceData.hero.image.src} 
                alt={serviceData.hero.image.alt}
                width={800}
                height={533}
                loading="lazy"
                decoding="async"
                className="w-full h-full object-cover"
              />
            ) : (
              <div className="w-full h-full flex items-center justify-center text-white/50">
                Image Placeholder
              </div>
            )}
          </div>
          
          {/* Content */}
          <div>
            <h1 className="text-3xl sm:text-4xl font-extrabold text-white">
              {serviceData.hero.headline || serviceData.title || "Service Title"}
            </h1>
            <p className="mt-3 text-slate-300 text-xl md:text-2xl">
              {serviceData.hero.subheadline || serviceData.shortDescription || "Short subhead that sells the value. Placeholder copy."}
            </p>
            
            {/* CTA Buttons */}
            <div className="mt-6">
              <CTAButtons 
                layout="horizontal"
                bookNowProps={{
                  children: serviceData.hero.ctas?.[0]?.label || "Book Now"
                }}
                getQuoteProps={{
                  children: serviceData.hero.ctas?.[1]?.label || "Request Quote",
                  variant: "outline-white",
                  onClick: onRequestQuote
                }}
              />
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default ServiceHero;


============================
FILE: frontend\src\features\services\components\ServicesGrid.tsx
============================
import React from 'react';

import { useServices } from '@/features/services/hooks/useServices';
import { ServicesGridProps } from '@/features/services/types/service.types';

import ServiceCard from './ServiceCard';

const ServicesGrid: React.FC<ServicesGridProps> = ({ locationData }) => {
  const { services } = useServices(locationData);

  // Split services for mobile: first 3 and last 3
  const firstThreeServices = services.slice(0, 3);
  const lastThreeServices = services.slice(3, 6);

  return (
    <>
      {/* MOBILE: First 3 services with header */}
      <section 
        id="services" 
        className="md:hidden relative z-0 h-screen snap-start snap-always bg-stone-800 px-4 py-4"
      >
        <div className="mx-auto w-full h-full flex flex-col justify-center">
          <h2 className="text-3xl font-bold text-white text-center mb-4">
            Our Services
          </h2>
          
          <ul className="grid grid-cols-1 gap-4">
            {firstThreeServices.map((service) => (
              <ServiceCard
                key={service.id}
                service={service}
              />
            ))}
          </ul>
        </div>
      </section>

      {/* MOBILE: Last 3 services */}
      <section 
        className="md:hidden relative z-0 h-screen snap-start snap-always bg-stone-800 px-4 py-2"
      >
        <div className="mx-auto w-full h-full flex flex-col justify-start pt-[80px]">
          <ul className="grid grid-cols-1 gap-4 [&>li>div>div]:h-[calc((100vh-200px)/3)]">
            {lastThreeServices.map((service) => (
              <ServiceCard
                key={service.id}
                service={service}
              />
            ))}
          </ul>
        </div>
      </section>

      {/* DESKTOP: All services in one section */}
      <section 
        id="services-desktop" 
        className="hidden md:block relative z-0 min-h-screen snap-start snap-always bg-stone-800 px-4 sm:px-6 md:px-8 lg:px-10 xl:px-12 py-8 md:py-12 pt-[100px] md:pt-[120px]"
      >
        <div className="mx-auto w-full">
          <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold text-white text-center mb-4 md:mb-6 lg:mb-8">
            Our Services
          </h2>
          
          {/* Mobile: 1 column, Tablet: 2 columns, Desktop: 3 columns */}
          <ul className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 lg:gap-8">
            {services.map((service) => (
              <ServiceCard
                key={service.id}
                service={service}
              />
            ))}
          </ul>
        </div>
      </section>
    </>
  );
};

export default ServicesGrid;


============================
FILE: frontend\src\features\services\components\WhatItIs.tsx
============================
import React from 'react';

import { ServiceData } from '@/features/services/types/service.types';

import { ProtectionComparisonChart } from './ProtectionComparisonChart';

interface WhatItIsProps {
  serviceData: ServiceData;
}

const WhatItIs: React.FC<WhatItIsProps> = ({ serviceData }) => {
  const hasChart = serviceData.whatItIs?.chart?.type === 'protection-comparison';
  const isPaintCorrection = serviceData.slug === 'paint-correction';
  const isCeramicCoating = serviceData.slug === 'ceramic-coating';
  
  return (
    <section className="bg-stone-800 py-16">
      <div className="container mx-auto max-w-6xl px-4 sm:px-6 lg:px-8">
        {/* Protection Comparison Chart - First */}
        {hasChart && serviceData.whatItIs?.chart && (
          <div className="mb-12">
            <ProtectionComparisonChart
              ratings={serviceData.whatItIs.chart.data}
              title={serviceData.whatItIs.chart.title}
              description={serviceData.whatItIs.chart.description}
            />
          </div>
        )}
        
        {/* Text Content - Second */}
        {isPaintCorrection ? (
          // Special two-column layout for paint correction
          <div className="grid gap-10 lg:grid-cols-2">
            <div className="space-y-10">
              <div>
                <h2 className="text-3xl sm:text-4xl font-bold text-white mb-4">What It Is</h2>
                <p className="text-slate-300 mb-6 text-lg">
                  {serviceData.whatItIs?.description || "Explain what the service is. Placeholder text."}
                </p>
              </div>
              
              <div>
                <ul className="space-y-2 text-slate-300">
                  {serviceData.whatItIs?.benefits?.map((benefit: string, index: number) => (
                    <li key={index} className="flex items-start">
                      <span className="text-orange-400 mr-3 text-lg" aria-hidden="true">•</span>
                      <span className="text-lg">{benefit}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
            
            <div className="flex flex-col justify-center">
              {serviceData.whatItIs?.image?.src && (
                <div className="rounded-2xl bg-stone-700 ring-1 ring-white/10 overflow-hidden w-full max-w-lg mx-auto">
                  <img 
                    src={serviceData.whatItIs.image.src} 
                    alt={serviceData.whatItIs.image.alt || "Service illustration"}
                    width={500}
                    height={400}
                    loading="lazy"
                    decoding="async"
                    className="w-full h-full object-contain"
                  />
                </div>
              )}
              {serviceData.whatItIs?.video?.src && (
                <div className="rounded-2xl bg-stone-700 ring-1 ring-white/10 overflow-hidden w-80 sm:w-[22.4rem] lg:w-[25.6rem] mx-auto">
                  <video 
                    src={serviceData.whatItIs.video.src}
                    controls
                    className="w-full h-full object-cover"
                    aria-label={serviceData.whatItIs.video.alt || "Service video"}
                    playsInline
                    style={{ aspectRatio: '2/3' }}
                  >
                    <track kind="captions" />
                    Your browser does not support the video tag.
                  </video>
                </div>
              )}
            </div>
          </div>
        ) : isCeramicCoating ? (
          // Two column layout for ceramic coating (after chart)
          <div className="grid gap-10 lg:grid-cols-2">
            <div>
              <h2 className="text-2xl sm:text-3xl font-bold text-white mb-4">What It Is</h2>
              <p className="text-slate-300 mb-6">
                {serviceData.whatItIs?.description || "Explain what the service is. Placeholder text."}
              </p>
            </div>
            
            <div className="flex flex-col justify-center">
              <ul className="space-y-2 text-slate-300">
                {serviceData.whatItIs?.benefits?.map((benefit: string, index: number) => (
                  <li key={index} className="flex items-start">
                    <span className="text-orange-400 mr-3 text-lg" aria-hidden="true">•</span>
                    <span className="text-lg">{benefit}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        ) : (
          // Two column layout for other services
          <div className="grid gap-10 lg:grid-cols-2">
            <div className={`space-y-6 ${serviceData.whatItIs?.video?.src ? 'flex flex-col justify-center' : ''}`}>
              <div>
                <h2 className="text-3xl sm:text-4xl font-bold text-white mb-4">What It Is</h2>
                <p className="text-slate-300 mb-6 text-lg">
                  {serviceData.whatItIs?.description || "Explain what the service is. Placeholder text."}
                </p>
              </div>
              
              <div>
                <ul className="space-y-2 text-slate-300">
                  {serviceData.whatItIs?.benefits?.map((benefit: string, index: number) => (
                    <li key={index} className="flex items-start">
                      <span className="text-orange-400 mr-3 text-lg" aria-hidden="true">•</span>
                      <span className="text-lg">{benefit}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
            
            <div className="flex flex-col justify-center">
              {serviceData.whatItIs?.image?.src && (
                <div className="rounded-2xl bg-stone-700 ring-1 ring-white/10 overflow-hidden w-full max-w-lg mx-auto">
                  <img 
                    src={serviceData.whatItIs.image.src} 
                    alt={serviceData.whatItIs.image.alt || "Service illustration"}
                    width={500}
                    height={400}
                    loading="lazy"
                    decoding="async"
                    className="w-full h-full object-contain"
                  />
                </div>
              )}
              {serviceData.whatItIs?.video?.src && (
                <div className="rounded-2xl bg-stone-700 ring-1 ring-white/10 overflow-hidden w-80 sm:w-[22.4rem] lg:w-[25.6rem] mx-auto">
                  <video 
                    src={serviceData.whatItIs.video.src}
                    controls
                    className="w-full h-full object-cover"
                    aria-label={serviceData.whatItIs.video.alt || "Service video"}
                    playsInline
                    style={{ aspectRatio: '2/3' }}
                  >
                    <track kind="captions" />
                    Your browser does not support the video tag.
                  </video>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default WhatItIs;


============================
FILE: frontend\src\features\services\hooks\useServicePage.ts
============================
import { useParams } from 'react-router-dom';

import { ServiceData } from '@/features/services/types/service.types';

import { useServices } from './useServices';

export const useServicePage = () => {
  const { serviceType } = useParams<{ serviceType: string }>();
  const { getAutoDetailingData, getMarineDetailingData, getRvDetailingData, getCeramicCoatingData, getPaintCorrectionData, getPpfData } = useServices();
  
  
  // Load the appropriate service data based on serviceType
  const getServiceData = (): ServiceData | null => {
    switch (serviceType) {
      case 'auto-detailing':
        return getAutoDetailingData();
      case 'marine-detailing':
        return getMarineDetailingData();
      case 'rv-detailing':
        return getRvDetailingData();
      case 'ceramic-coating':
        return getCeramicCoatingData();
      case 'paint-correction':
        return getPaintCorrectionData();
      case 'paint-protection-film':
      case 'ppf-installation':
        return getPpfData();
      case 'aircraft-detailing':
        // Aircraft detailing not implemented yet, fallback to auto-detailing
        return getAutoDetailingData();
      // Add other services as you create their JSON files
      default:
        // Fallback to auto-detailing for unknown services
        return getAutoDetailingData();
    }
  };

  const serviceData = getServiceData();

  return {
    serviceType,
    serviceData,
    isLoading: false,
    error: null
  };
};


============================
FILE: frontend\src\features\services\hooks\useServices.ts
============================
import { useNavigate } from 'react-router-dom';

import assetsData from '@/data/mobile-detailing/assets.json';
import autoDetailingData from '@/data/mobile-detailing/services/auto-detailing.json';
import ceramicCoatingData from '@/data/mobile-detailing/services/ceramic-coating.json';
import marineDetailingData from '@/data/mobile-detailing/services/marine-detailing.json';
import paintCorrectionData from '@/data/mobile-detailing/services/paint-correction.json';
import ppfData from '@/data/mobile-detailing/services/ppf.json';
import rvDetailingData from '@/data/mobile-detailing/services/rv-detailing.json';
import { Service } from '@/features/services/types/service.types';
import { env } from '@/shared/env';
import { useTenantSlug } from '@/shared/hooks/useTenantSlug';
import type { LocationPage } from '@/shared/types/location';
import { getServiceImageFromLocation } from '@/shared/utils/schemaUtils';

// Transform assets.json services.grid data to Service format with location-specific images
const getServicesFromSiteData = (locationData: LocationPage | null | undefined, tenantSlug?: string): Service[] => {
  return assetsData.services.grid.map((service, index) => {
    // Get thumbnail data for this service
    const thumbnail = assetsData.services.thumbnails[service.slug as keyof typeof assetsData.services.thumbnails];
    // Determine service role for location-specific images
    let serviceRole: "auto" | "marine" | "rv" | null = null;
    if (service.slug.includes('auto-detailing')) {
      serviceRole = 'auto';
    } else if (service.slug.includes('marine-detailing')) {
      serviceRole = 'marine';
    } else if (service.slug.includes('rv-detailing')) {
      serviceRole = 'rv';
    }

    // Get location-specific image if available, otherwise use default thumbnail
    const imageData = serviceRole && locationData 
      ? getServiceImageFromLocation(locationData, serviceRole, thumbnail.url || '')
      : {
          url: thumbnail.url || '',
          alt: thumbnail.alt || '',
          width: thumbnail.width || 400,
          height: thumbnail.height || 300,
          priority: service.priority
        };

    // Construct route based on environment
    // Development: /{tenantSlug}/services/{serviceSlug}
    // Production: /service/{serviceSlug}
    const route = env.DEV && tenantSlug
      ? `/${tenantSlug}/services/${service.slug}`
      : `/service/${service.slug}`;
    

    const serviceData = {
      id: (index + 1).toString(),
      title: service.title,
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- service.alt from JSON, type refinement planned
      description: service.alt, // Using alt text as description
      imageUrl: imageData.url,
      route: route,
      category: service.slug.split('-')[0] || 'general', // Extract category from slug
      imageWidth: imageData.width,
      imageHeight: imageData.height,
      imagePriority: imageData.priority
    };
    
    
    return serviceData;
  });
};

export const useServices = (locationData: LocationPage | null | undefined) => {
  const navigate = useNavigate();
  const tenantSlug = useTenantSlug(); // Use the proper tenant slug hook

  const handleServiceClick = (service: Service) => {
    void navigate(service.route);
  };

  const getServices = () => {
    return getServicesFromSiteData(locationData, tenantSlug);
  };

  const getServiceById = (id: string) => {
    return getServicesFromSiteData(locationData, tenantSlug).find(service => service.id === id);
  };

  const getServicesByCategory = (category: string) => {
    return getServicesFromSiteData(locationData, tenantSlug).filter(service => service.category === category);
  };

  const getAutoDetailingData = () => {
    return autoDetailingData;
  };

  const getMarineDetailingData = () => {
    return marineDetailingData;
  };

  const getRvDetailingData = () => {
    return rvDetailingData;
  };

  const getCeramicCoatingData = () => {
    return ceramicCoatingData;
  };

  const getPaintCorrectionData = () => {
    return paintCorrectionData;
  };

  const getPpfData = () => {
    return ppfData;
  };


  return {
    services: getServices(),
    handleServiceClick,
    getServiceById,
    getServicesByCategory,
    getAutoDetailingData,
    getMarineDetailingData,
    getRvDetailingData,
    getCeramicCoatingData,
    getPaintCorrectionData,
    getPpfData,
  };
};


============================
FILE: frontend\src\features\services\index.ts
============================
// Services feature public exports
export { default as BeforeAfterSlider } from './components/BeforeAfterSlider';
export { default as Process } from './components/Process';
export { ProtectionComparisonChart } from './components/ProtectionComparisonChart';
export { default as Results } from './components/Results';
export { default as ServiceCard } from './components/ServiceCard';
export { default as ServiceCTA } from './components/ServiceCTA';
export { default as ServiceHero } from './components/ServiceHero';
export { default as Services } from './components/ServicesGrid';
export { default as ServicesGrid } from './components/ServicesGrid';
export { default as WhatItIs } from './components/WhatItIs';


============================
FILE: frontend\src\features\services\types\service-data.ts
============================
export interface ImageRef {
  src: string;
  alt?: string;
  caption?: string;
}

export interface VideoRef {
  src: string;
  alt?: string;
}

export interface CTAButton {
  label: string;
  href: string;
}

export interface ProcessStep {
  number: number;
  title: string;
  bullets?: string[];
  description?: string;
  image?: ImageRef;
}

export interface ChartData {
  type: string;
  title: string;
  description: string;
  data: Record<string, unknown>; // Chart-specific data structure
}

export interface ServiceData {
  id: string;
  slug: string;
  route: string;
  title: string;
  shortDescription?: string;
  
  seo?: {
    metaTitle: string;
    metaDescription: string;
    keywords: string[];
    canonicalPath: string;
    ogImage: string;
    robots: string;
  };
  
  hero: {
    image?: ImageRef;
    headline?: string;
    subheadline?: string;
    ctas?: CTAButton[];
  };
  
  overview?: {
    summary: string;
    benefits: string[];
    features: string[];
  };
  
  whatItIs?: {
    description?: string;
    benefits?: string[];
    image?: ImageRef;
    video?: VideoRef;
    chart?: ChartData;
  };
  
  process?: {
    title?: string;
    steps: ProcessStep[];
  };
  
  results?: {
    bullets?: string[];
    images?: {
      before?: ImageRef;
      after?: ImageRef;
    };
    video?: VideoRef;
    containerSize?: string;
  };
  
  gallery?: {
    title: string;
    images: ImageRef[];
  };
  
  pricing?: {
    title: string;
    tiers: Array<{
      id: string;
      name: string;
      price: {
        label: string;
        min: number;
        currency: string;
      };
      description: string;
      popular: boolean;
      features: string[];
    }>;
  };
  
  faq?: {
    title: string;
    items: Array<{
      q: string;
      a: string;
    }>;
  };
  
  cta?: {
    title?: string;
    description?: string;
    primary?: CTAButton;
    secondary?: CTAButton;
  };
  
  jsonLd?: {
    service: Record<string, unknown>; // Schema.org Service JSON-LD structure
  };
}


============================
FILE: frontend\src\features\services\types\service.types.ts
============================
import type { LocationPage } from '@/shared/types/location';

export interface Service {
  id: string;
  title: string;
  description: string;
  imageUrl: string;
  route: string;
  category: string;
  imageWidth?: number;
  imageHeight?: number;
  imagePriority?: boolean;
}

export interface ServiceCardProps {
  service: Service;
  className?: string;
}

export interface ServicesGridProps {
  services?: Service[];
  onServiceClick?: (service: Service) => void;
  className?: string;
  locationData?: LocationPage | null;
}

// Re-export ServiceData from service-data.ts
export type { ServiceData } from './service-data';


============================
FILE: frontend\src\features\services\utils\protectionComparison.ts
============================
/**
 * Protection comparison utilities for mobile detailing services
 * Used to compare wax, sealant, ceramic coating, and PPF protection options
 */

export type MetricKey = 'protection' | 'longevity' | 'ease' | 'chipResistance';

export type ProductKey = 'wax' | 'sealant' | 'ceramic' | 'ppf';

export type Ratings = Record<ProductKey, Record<MetricKey, 1|2|3|4|5>>;

export const DEFAULT_RATINGS: Ratings = {
  wax:      { protection: 1, longevity: 1, ease: 2, chipResistance: 1 },
  sealant:  { protection: 2, longevity: 2, ease: 2, chipResistance: 1 },
  ceramic:  { protection: 4, longevity: 4, ease: 4, chipResistance: 1 },
  ppf:      { protection: 5, longevity: 5, ease: 3, chipResistance: 5 },
};

export const METRIC_LABELS: Record<MetricKey, string> = {
  protection: 'Protection',
  longevity: 'Longevity',
  ease: 'Ease of Wash',
  chipResistance: 'Rock-Chip Resistance',
};

export const PRODUCT_LABELS: Record<ProductKey, string> = {
  wax: 'Wax',
  sealant: 'Sealant',
  ceramic: 'Ceramic',
  ppf: 'PPF',
};

export const PRODUCT_COLORS: Record<ProductKey, string> = {
  wax: 'bg-amber-500',
  sealant: 'bg-blue-500',
  ceramic: 'bg-purple-500',
  ppf: 'bg-emerald-500',
};



============================
FILE: frontend\src\features\tenantDashboard\api\analytics.ts
============================
import { useQuery } from '@tanstack/react-query';

export interface AnalyticsSummary {
  totalSessions: number;
  totalUsers: number;
  totalPageViews: number;
  averageBounceRate: number;
  averageSessionDuration: number;
  dailyData: Array<{
    date: string;
    sessions: number;
    users: number;
    pageViews: number;
    bounceRate: number;
    sessionDuration: number;
  }>;
  period: string;
  lastUpdated: string;
}

export interface RealtimeData {
  activeUsers: number;
  countries: Array<{
    country: string;
    users: number;
  }>;
  lastUpdated: string;
}

export interface GoogleAnalyticsStatus {
  connected: boolean;
  propertyId?: string;
  lastSync?: string;
  scopes?: string[];
}

/**
 * Hook to fetch Google Analytics connection status
 */
export function useGoogleAnalyticsStatus(tenantId?: number) {
  return useQuery<GoogleAnalyticsStatus>({
    queryKey: ['analytics', 'status', tenantId],
    queryFn: async () => {
      const response = await fetch(`/api/google/analytics/status?tenant_id=${tenantId}`);
      if (!response.ok) {
        throw new Error('Failed to fetch analytics status');
      }
      const data = await response.json();
      return data.data;
    },
    enabled: !!tenantId,
    refetchInterval: 30000, // Refetch every 30 seconds
  });
}

/**
 * Hook to fetch Google Analytics summary data
 */
export function useAnalyticsSummary(tenantId?: number, days: number = 7) {
  return useQuery<AnalyticsSummary>({
    queryKey: ['analytics', 'summary', tenantId, days],
    queryFn: async () => {
      const response = await fetch(`/api/google/analytics/summary?tenant_id=${tenantId}&days=${days}`);
      if (!response.ok) {
        throw new Error('Failed to fetch analytics summary');
      }
      const data = await response.json();
      return data.data;
    },
    enabled: !!tenantId,
    refetchInterval: 5 * 60 * 1000, // Refetch every 5 minutes
  });
}

/**
 * Hook to fetch real-time analytics data
 */
export function useRealtimeData(tenantId?: number) {
  return useQuery<RealtimeData>({
    queryKey: ['analytics', 'realtime', tenantId],
    queryFn: async () => {
      const response = await fetch(`/api/google/analytics/realtime?tenant_id=${tenantId}`);
      if (!response.ok) {
        throw new Error('Failed to fetch realtime data');
      }
      const data = await response.json();
      return data.data;
    },
    enabled: !!tenantId,
    refetchInterval: 30 * 1000, // Refetch every 30 seconds
  });
}

/**
 * Function to initiate Google Analytics OAuth flow
 */
export function initiateGoogleAnalyticsAuth(tenantId: number): void {
  const authUrl = `/api/google/analytics/auth?tenant_id=${tenantId}`;
  window.open(authUrl, '_blank', 'width=600,height=700');
}


============================
FILE: frontend\src\features\tenantDashboard\api\dashboard.api.ts
============================
/**
 * Dashboard API Layer
 * Handles all dashboard-related API calls
 */

export interface DashboardData {
  id: string;
  slug: string;
  business_name: string;
  first_name: string;
  last_name: string;
  business_phone: string;
  personal_phone: string;
  business_email: string;
  personal_email: string;
  industry: string;
  application_status: string;
  business_start_date: string;
  service_areas: ServiceArea[];
  created_at: string;
  updated_at: string;
}

export interface ServiceArea {
  id?: string;
  city: string;
  state: string;
  zip?: number;
  primary: boolean;
  minimum: number;
  multiplier: number;
}

export interface DashboardApiResponse {
  success: boolean;
  data: DashboardData;
  error?: string;
}

export const dashboardApi = {
  /**
   * Get dashboard data for a tenant
   */
  getDashboardData: async (slug: string): Promise<DashboardData> => {
    try {
      const response = await fetch(`/api/tenants/${slug}`, {
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      if (!response.ok) {
        if (response.status === 404) {
          throw new Error('Tenant not found');
        }
        throw new Error(`Failed to fetch dashboard data: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as DashboardApiResponse;
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to fetch dashboard data');
      }
      
      return result.data;
    } catch (error) {
      console.error('Dashboard API Error:', error);
      throw new Error(`Failed to load dashboard data: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Update tenant information
   */
  updateTenantInfo: async (slug: string, data: Partial<DashboardData>): Promise<DashboardData> => {
    try {
      const response = await fetch(`/api/tenants/${slug}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to update tenant info: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as DashboardApiResponse;
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to update tenant info');
      }
      
      return result.data;
    } catch (error) {
      console.error('Dashboard API Error:', error);
      throw new Error(`Failed to update tenant info: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Get tenant health status
   */
  getTenantHealth: async (slug: string): Promise<{ status: string; lastChecked: string; issues: string[] }> => {
    try {
      const response = await fetch(`/api/tenants/${slug}/health`);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch tenant health: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as { success: boolean; data: { status: string; lastChecked: string; issues: string[] } };
      
      if (!result.success) {
        throw new Error('Failed to fetch tenant health');
      }
      
      return result.data;
    } catch (error) {
      console.error('Dashboard API Error:', error);
      throw new Error(`Failed to load tenant health: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
};


============================
FILE: frontend\src\features\tenantDashboard\api\healthApi.ts
============================
/**
 * API client for tenant dashboard health monitoring
 */

export interface HealthData {
  tenantSlug: string;
  hasData: boolean;
  lastUpdated?: string;
  performance?: {
    mobile?: PerformanceData;
    desktop?: PerformanceData;
  };
  overall?: {
    score: number;
    status: string;
    checkedAt: string;
    errorMessage?: string;
  };
  message?: string;
}

export interface PerformanceData {
  overallScore: number;
  performanceScore: number;
  accessibilityScore: number;
  bestPracticesScore: number;
  seoScore: number;
  coreWebVitals: {
    lcp: { value: number; score: number };
    fid: { value: number; score: number };
    cls: { value: number; score: number };
    fcp: { value: number; score: number };
    ttfb: { value: number; score: number };
  };
  metrics: {
    speedIndex: { value: number; score: number };
    interactive: { value: number; score: number };
    totalBlockingTime: { value: number; score: number };
  };
  status: string;
  checkedAt: string;
  opportunities: OptimizationOpportunity[];
  diagnostics: DiagnosticItem[];
  cruxData?: Record<string, unknown>;
}

export interface OptimizationOpportunity {
  id: string;
  title: string;
  description: string;
  savings: number;
  savingsBytes: number;
}

export interface DiagnosticItem {
  id: string;
  title: string;
  description: string;
  score: number;
  displayValue?: string;
}

export interface HealthHistoryItem {
  check_type: string;
  strategy: string;
  overall_score: number;
  performance_score: number;
  accessibility_score: number;
  best_practices_score: number;
  seo_score: number;
  status: string;
  checked_at: string;
}

export interface HealthHistoryResponse {
  success: boolean;
  data: {
    tenantSlug: string;
    history: HealthHistoryItem[];
    period: string;
    totalRecords: number;
  };
}

export interface HealthScanResponse {
  success: boolean;
  message: string;
  data: {
    tenantSlug: string;
    url: string;
    overallScore: number;
    summary: {
      status: string;
      priority: string[];
      recommendations: OptimizationOpportunity[];
    };
    timestamp: string;
  };
}

/**
 * Get current health status for a tenant
 */
export const getHealthStatus = async (tenantSlug: string): Promise<{ success: boolean; data: HealthData }> => {
  const response = await fetch(`/api/health-monitoring/${tenantSlug}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({})) as { error?: string };
    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
  }

  return response.json() as Promise<{ success: boolean; data: HealthData }>;
};

/**
 * Trigger a comprehensive health scan for a tenant
 */
export const triggerHealthScan = async (tenantSlug: string): Promise<HealthScanResponse> => {
  const response = await fetch(`/api/health-monitoring/${tenantSlug}/scan`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({})) as { error?: string };
    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
  }

  return response.json() as Promise<HealthScanResponse>;
};

/**
 * Get health monitoring history for a tenant
 */
export const getHealthHistory = async (
  tenantSlug: string,
  options: { days?: number; limit?: number } = {}
): Promise<HealthHistoryResponse> => {
  const params = new URLSearchParams();
  
  if (options.days) params.append('days', options.days.toString());
  if (options.limit) params.append('limit', options.limit.toString());

  const response = await fetch(`/api/health-monitoring/${tenantSlug}/history?${params}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({})) as { error?: string };
    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
  }

  return response.json() as Promise<HealthHistoryResponse>;
};

/**
 * Helper function to get score color based on value
 */
export const getScoreColor = (score: number): string => {
  if (score >= 90) return 'text-green-500';
  if (score >= 70) return 'text-yellow-500';
  if (score >= 50) return 'text-orange-500';
  return 'text-red-500';
};

/**
 * Helper function to get score background color
 */
export const getScoreBgColor = (score: number): string => {
  if (score >= 90) return 'bg-green-500';
  if (score >= 70) return 'bg-yellow-500';
  if (score >= 50) return 'bg-orange-500';
  return 'bg-red-500';
};

/**
 * Helper function to get status color
 */
export const getStatusColor = (status: string): string => {
  switch (status) {
    case 'healthy':
      return 'text-green-500 bg-green-100';
    case 'warning':
      return 'text-yellow-600 bg-yellow-100';
    case 'critical':
      return 'text-red-600 bg-red-100';
    case 'error':
      return 'text-red-800 bg-red-200';
    default:
      return 'text-gray-600 bg-gray-100';
  }
};

/**
 * Helper function to format display values
 */
export const formatDisplayValue = (value: number | string | null | undefined, unit: string = ''): string => {
  if (value === null || value === undefined) return 'N/A';
  
  // Convert string to number if needed
  const numericValue = typeof value === 'string' ? parseFloat(value) : value;
  if (isNaN(numericValue)) return 'N/A';
  
  if (unit === 'ms') {
    return `${Math.round(numericValue)}ms`;
  } else if (unit === 's') {
    return `${(numericValue / 1000).toFixed(2)}s`;
  } else if (unit === 'bytes') {
    if (numericValue > 1024 * 1024) {
      return `${(numericValue / (1024 * 1024)).toFixed(1)}MB`;
    } else if (numericValue > 1024) {
      return `${(numericValue / 1024).toFixed(1)}KB`;
    }
    return `${numericValue}B`;
  }
  
  return numericValue.toString();
};


============================
FILE: frontend\src\features\tenantDashboard\api\locationsApi.ts
============================
// API functions for locations management

interface ServiceAreaData {
  city: string;
  state: string;
  zip?: string;
  primary?: boolean;
  minimum?: number;
  multiplier?: number;
}

interface ApiResponse {
  success: boolean;
  message?: string;
  error?: string;
  data?: unknown;
}

export const saveLocationData = async (tenantSlug: string, locationData: ServiceAreaData[]) => {
  const response = await fetch(`/api/locations/service-areas/${tenantSlug}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ serviceAreas: locationData }),
  });

  if (!response.ok) {
    const error = await response.json() as ApiResponse;
    throw new Error(error.error || 'Failed to save location data');
  }

  return response.json() as Promise<ApiResponse>;
};

export const saveServiceAreas = async (tenantSlug: string, serviceAreas: ServiceAreaData[]) => {
  const response = await fetch(`/api/locations/service-areas/${tenantSlug}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ serviceAreas }),
  });

  if (!response.ok) {
    const error = await response.json() as ApiResponse;
    throw new Error(error.error || 'Failed to save service areas');
  }

  return response.json() as Promise<ApiResponse>;
};

export const addServiceArea = async (tenantSlug: string, areaData: ServiceAreaData) => {
  const response = await fetch(`/api/locations/service-areas/${tenantSlug}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(areaData),
  });

  if (!response.ok) {
    const error = await response.json() as ApiResponse;
    throw new Error(error.error || 'Failed to add service area');
  }

  return response.json() as Promise<ApiResponse>;
};

export const deleteServiceArea = async (tenantSlug: string, areaId: string) => {
  const response = await fetch(`/api/locations/service-areas/${tenantSlug}/${areaId}`, {
    method: 'DELETE',
  });

  if (!response.ok) {
    const error = await response.json() as ApiResponse;
    throw new Error(error.error || 'Failed to delete service area');
  }

  return response.json() as Promise<ApiResponse>;
};


============================
FILE: frontend\src\features\tenantDashboard\api\reviewsApi.ts
============================
/**
 * API client for tenant dashboard reviews
 */

export interface TenantReviewData {
  customer_name: string;
  rating: number;
  comment: string;
  reviewer_url?: string;
  vehicle_type?: 'car' | 'truck' | 'suv' | 'boat' | 'rv' | 'motorcycle';
  paint_correction?: boolean;
  ceramic_coating?: boolean;
  paint_protection_film?: boolean;
  source?: 'website' | 'google' | 'yelp' | 'facebook';
  avatar_filename?: string;
}

export interface TenantReview {
  id: number;
  tenant_slug: string;
  customer_name: string;
  rating: number;
  comment: string;
  reviewer_url?: string;
  vehicle_type?: string;
  paint_correction: boolean;
  ceramic_coating: boolean;
  paint_protection_film: boolean;
  source: string;
  avatar_filename?: string;
  status: 'pending' | 'approved' | 'rejected';
  created_at: string;
  updated_at: string;
  published_at?: string;
}

export interface CreateReviewResponse {
  success: boolean;
  data: TenantReview;
  message: string;
}

export interface GetReviewsResponse {
  success: boolean;
  data: TenantReview[];
  pagination: {
    total: number;
    limit: number;
    offset: number;
    hasMore: boolean;
  };
}

export interface BusinessData {
  id: number;
  slug: string;
  business_name: string;
  application_status: string;
  phone: string;
  sms_phone: string;
  twilio_phone: string;
  service_areas: Array<{ city: string; state: string; zip?: string; primary?: boolean }>;
  owner: string;
  business_email: string;
  personal_email: string;
  first_name: string;
  last_name: string;
  personal_phone: string;
  business_start_date: string;
  website: string;
  gbp_url: string;
  google_maps_url: string;
  facebook_url: string;
  youtube_url: string;
  tiktok_url: string;
  instagram_url: string;
  created_at: string;
  updated_at: string;
}

export interface GetBusinessResponse {
  success: boolean;
  data: BusinessData;
}

/**
 * Create a new review
 * Note: No authentication required - reviews are public submissions
 */
export const createReview = async (
  tenantSlug: string,
  reviewData: TenantReviewData
): Promise<CreateReviewResponse> => {
  const response = await fetch('/api/tenant-reviews', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      tenant_slug: tenantSlug,
      ...reviewData,
    }),
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({})) as { message?: string };
    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
  }

  return response.json() as Promise<CreateReviewResponse>;
};

/**
 * Delete a review
 */
export const deleteReview = async (reviewId: number): Promise<{ success: boolean; message: string }> => {
  const response = await fetch(`/api/tenant-reviews/${reviewId}`, {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({})) as { message?: string };
    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
  }

  return response.json() as Promise<{ success: boolean; message: string }>;
};

/**
 * Upload avatar for a review
 */
export const uploadAvatar = async (
  avatarFile: File,
  customerName: string,
  reviewId: number
): Promise<{ success: boolean; message: string; avatarUrl?: string; filename?: string }> => {
  const formData = new FormData();
  formData.append('avatar', avatarFile);
  formData.append('customerName', customerName);
  formData.append('reviewId', reviewId.toString());

  const response = await fetch('/api/tenant-reviews/upload-avatar', {
    method: 'POST',
    body: formData,
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({})) as { message?: string };
    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
  }

  return response.json() as Promise<{ success: boolean; message: string; avatarUrl?: string; filename?: string }>;
};

/**
 * Get reviews for a specific tenant (public endpoint)
 */
export const getReviews = async (
  tenantSlug: string,
  options: {
    limit?: number;
    offset?: number;
  } = {}
): Promise<GetReviewsResponse> => {
  const params = new URLSearchParams();
  
  if (options.limit) params.append('limit', options.limit.toString());
  if (options.offset) params.append('offset', options.offset.toString());

  const response = await fetch(`/api/tenant-reviews/${tenantSlug}?${params}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({})) as { message?: string };
    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
  }

  return response.json() as Promise<GetReviewsResponse>;
};

/**
 * Get reviews for a specific tenant (authenticated endpoint)
 */
export const getTenantReviews = async (
  tenantSlug: string,
  options: {
    status?: 'pending' | 'approved' | 'rejected';
    limit?: number;
    offset?: number;
  } = {}
): Promise<GetReviewsResponse> => {
  const params = new URLSearchParams();
  
  if (options.status) params.append('status', options.status);
  if (options.limit) params.append('limit', options.limit.toString());
  if (options.offset) params.append('offset', options.offset.toString());

  const response = await fetch(`/api/tenant-reviews/${tenantSlug}?${params}`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${localStorage.getItem('token') || ''}`,
    },
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({})) as { message?: string };
    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
  }

  return response.json() as Promise<GetReviewsResponse>;
};

/**
 * Get business data for a specific tenant (including GBP URL)
 */
export const getBusinessData = async (tenantSlug: string): Promise<GetBusinessResponse> => {
  const response = await fetch(`/api/tenants/${tenantSlug}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({})) as { error?: string };
    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
  }

  return response.json() as Promise<GetBusinessResponse>;
};

/**
 * Scrape Google Business Profile or Google Maps for rating and review count
 */
export const scrapeGoogleBusinessProfile = async (
  url: string,
  tenantSlug?: string
): Promise<{
  success: boolean;
  data?: {
    averageRating: string | null;
    totalReviews: string | null;
    businessName: string | null;
    gbpUrl: string;
  };
  message: string;
}> => {
  const response = await fetch('/api/tenant-reviews/scrape-google-business', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      gbpUrl: url, // Backend still expects gbpUrl parameter name
      tenantSlug,
    }),
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({})) as { message?: string };
    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
  }

  return response.json() as Promise<{
    success: boolean;
    data?: {
      averageRating: string | null;
      totalReviews: string | null;
      businessName: string | null;
      gbpUrl: string;
    };
    message: string;
  }>;
};

/**
 * Update review status (admin/tenant only)
 */
export const updateReviewStatus = async (
  reviewId: number,
  status: 'pending' | 'approved' | 'rejected'
): Promise<{ success: boolean; data: TenantReview; message: string }> => {
  const response = await fetch(`/api/tenant-reviews/${reviewId}/status`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${localStorage.getItem('token') || ''}`,
    },
    body: JSON.stringify({ status }),
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({})) as { message?: string };
    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
  }

  return response.json() as Promise<{ success: boolean; data: TenantReview; message: string }>;
};


============================
FILE: frontend\src\features\tenantDashboard\api\websiteContentApi.ts
============================
// API functions for website content management

import type { WebsiteContentData } from '@/shared/api/websiteContent.api';

// Save website content for a tenant
export const saveWebsiteContent = async (tenantSlug: string, contentData: Partial<WebsiteContentData>): Promise<{ success: boolean; message?: string }> => {
  try {
    // Backend expects flat structure, so just pass contentData as is
    // The WebsiteContentTab component already manages the flat structure
    const response = await fetch(`/api/website-content/${tenantSlug}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(contentData),
    });

    if (!response.ok) {
      const errorData = await response.json() as { error?: string };
      throw new Error(errorData.error || 'Failed to save website content');
    }

    const result = await response.json() as { success: boolean; message?: string };
    return result;
  } catch (error) {
    console.error('Error saving website content:', error);
    throw error;
  }
};

// Get website content for a tenant
export const getWebsiteContent = async (tenantSlug: string): Promise<WebsiteContentData> => {
  try {
    const response = await fetch(`/api/website-content/${tenantSlug}`);

    if (!response.ok) {
      const errorData = await response.json() as { error?: string };
      throw new Error(errorData.error || 'Failed to fetch website content');
    }

    const result = await response.json() as { success: boolean; content?: WebsiteContentData };
    // Backend returns { success: true, content: {...} }
    // Return the content directly or throw if missing
    if (!result.content) {
      throw new Error('No content data received from server');
    }
    return result.content;
  } catch (error) {
    console.error('Error fetching website content:', error);
    throw error;
  }
};


============================
FILE: frontend\src\features\tenantDashboard\components\AddToHomeScreen.tsx
============================
/**
 * Add to Home Screen Component
 * Prompts users to install the PWA on mobile devices only
 * Works on iOS and Android mobile devices
 * Desktop and tablet users will not see this prompt
 */

/**
 * AddToHomeScreen Component - DISABLED FOR NOW
 * 
 * This component provides PWA "Add to Home Screen" functionality for tenant dashboards.
 * Moved from onboarding flow to dashboard where it makes more sense.
 * 
 * TODO: Enable this component in the tenant dashboard when ready.
 */

import React from 'react';

interface AddToHomeScreenProps {
  tenantSlug?: string;
  businessName?: string;
  onClose?: () => void;
  autoShow?: boolean;
}

export const AddToHomeScreen: React.FC<AddToHomeScreenProps> = ({
  tenantSlug: _tenantSlug,
  businessName: _businessName = 'Dashboard',
  onClose: _onClose,
  autoShow: _autoShow = true
}) => {
  // DISABLED FOR NOW - Component moved from onboarding to dashboard
  // TODO: Enable when ready to add PWA functionality to tenant dashboard
  return null;
};

============================
FILE: frontend\src\features\tenantDashboard\components\AutoSaveStatus.tsx
============================
import React from 'react';
import { AlertCircle,CheckCircle } from 'lucide-react';

interface AutoSaveStatusProps {
  isSaving: boolean;
  error: string | null;
  className?: string;
}

export const AutoSaveStatus: React.FC<AutoSaveStatusProps> = ({ 
  isSaving, 
  error, 
  className = "flex items-center mt-2 space-x-2" 
}) => {
  return (
    <div className={className}>
      {isSaving && (
        <div className="flex items-center text-blue-400 text-sm">
          <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-blue-400 mr-2"></div>
          Saving...
        </div>
      )}
      {error && (
        <div className="flex items-center text-red-400 text-sm">
          <AlertCircle className="h-3 w-3 mr-1" />
          {error}
        </div>
      )}
      {!isSaving && !error && (
        <div className="flex items-center text-green-400 text-sm">
          <CheckCircle className="h-3 w-3 mr-1" />
          All changes saved
        </div>
      )}
    </div>
  );
};

export default AutoSaveStatus;


============================
FILE: frontend\src\features\tenantDashboard\components\Dashboard.tsx
============================
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';

import type { DashboardTab, DetailerData } from '../types';
import { DashboardHeader } from './DashboardHeader';
import { DashboardLayout } from './DashboardLayout';
import { DashboardTabs } from './DashboardTabs';
import { TabContent } from './TabContent';



const Dashboard: React.FC = () => {
  const { businessSlug } = useParams<{ businessSlug: string }>();
  const [activeTab, setActiveTab] = useState<DashboardTab>('overview');
  const [detailerData, setDetailerData] = useState<DetailerData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch tenant data based on business slug
  useEffect(() => {
    const fetchTenantData = async () => {
      if (!businessSlug) {
        setError('No business slug provided');
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        const token = localStorage.getItem('token');
        const url = `/api/tenants/${businessSlug}`;
        // eslint-disable-next-line no-restricted-globals, no-restricted-syntax -- Dashboard component needs direct fetch for initialization
        const response = await fetch(url, {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token ?? ''}`
          }
        });

        if (response.ok) {
          const data = await response.json() as { success: boolean; data?: unknown };
          if (data.success && data.data) {
            const tenant = data.data as {
              business_name?: string;
              first_name?: string;
              last_name?: string;
              owner?: string;
              business_email?: string;
              personal_email?: string;
              phone?: string;
              service_areas?: Array<{ city: string; state: string }>;
              created_at?: string;
            };
            // Transform tenant data to DetailerData format
            const transformedData: DetailerData = {
              business_name: tenant.business_name || 'Unknown Business',
              first_name: tenant.first_name || (tenant.owner ? tenant.owner.split(' ')[0] : '') || 'Unknown',
              last_name: tenant.last_name || (tenant.owner ? tenant.owner.split(' ').slice(1).join(' ') : '') || 'Unknown',
              email: tenant.business_email || tenant.personal_email || 'No email',
              phone: tenant.phone || 'No phone',
              location: tenant.service_areas && Array.isArray(tenant.service_areas) && tenant.service_areas.length > 0 
                ? `${tenant.service_areas[0]?.city ?? ''}, ${tenant.service_areas[0]?.state ?? ''}` 
                : 'No location',
              services: tenant.service_areas && Array.isArray(tenant.service_areas) && tenant.service_areas.length > 0 
                ? tenant.service_areas.map((area: { city: string }) => area.city).slice(0, 4)
                : ['Mobile Detailing'],
              memberSince: tenant.created_at ? new Date(tenant.created_at).getFullYear().toString() : 'Unknown'
            };
            setDetailerData(transformedData);
          } else {
            setError('Tenant not found');
          }
        } else {
          setError('Failed to fetch tenant data');
        }
      } catch {
        setError('Failed to fetch tenant data');
      } finally {
        setLoading(false);
      }
    };

    void fetchTenantData();
  }, [businessSlug]);

  const handleDataUpdate = (data: Partial<DetailerData>) => {
    if (detailerData) {
      setDetailerData({ ...detailerData, ...data });
    }
  };

  const handleBackToForm = () => {
    // Navigate back to main site or form
  };

  if (loading) {
    return (
      <DashboardLayout>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center">
            <p className="text-lg text-gray-600">Loading tenant dashboard...</p>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  if (error || !detailerData) {
    return (
      <DashboardLayout>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center">
            <p className="text-lg text-red-600">Error: {error || 'Failed to load tenant data'}</p>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <DashboardHeader 
          detailerData={detailerData}
          onBackToForm={handleBackToForm}
        />
        
        <DashboardTabs 
          activeTab={activeTab}
          onTabChange={setActiveTab}
        />
        
        <TabContent 
          activeTab={activeTab}
          detailerData={detailerData}
          onDataUpdate={handleDataUpdate}
        />
      </div>
    </DashboardLayout>
  );
};

export default Dashboard;


============================
FILE: frontend\src\features\tenantDashboard\components\DashboardHeader.tsx
============================
import React from 'react';
import { Calendar,Car } from 'lucide-react';

import type { DetailerData } from '../types';

interface DashboardHeaderProps {
  detailerData: DetailerData;
  onBackToForm: () => void;
}

export const DashboardHeader: React.FC<DashboardHeaderProps> = ({ 
  detailerData
}) => {
  return (
    <div className="bg-stone-800 rounded-2xl shadow-lg border border-stone-700 mb-8 overflow-hidden">
      <div className="px-8 py-8">
        <div className="flex flex-col lg:flex-row items-start lg:items-center justify-between">
          {/* Left side - Business Info */}
          <div className="flex items-center space-x-6 mb-6 lg:mb-0">
            {/* Business Avatar/Logo */}
            <div className="relative">
              <div className="h-20 w-20 bg-stone-700 rounded-2xl flex items-center justify-center shadow-sm border border-stone-600">
                <Car className="h-10 w-10 text-orange-500" />
              </div>
              <div className="absolute -bottom-2 -right-2 h-6 w-6 bg-green-500 rounded-full border-2 border-stone-800 shadow-sm"></div>
            </div>
            {/* Business Details */}
            <div>
              <h1 className="text-3xl font-bold mb-2 text-white">
                {detailerData.business_name || "Your Business Name"}
              </h1>
              <p className="text-gray-300 text-lg mb-1">
                {detailerData.first_name && detailerData.last_name 
                  ? `${detailerData.first_name} ${detailerData.last_name}` 
                  : "Owner Name"}
              </p>
              <div className="flex items-center text-gray-400 mb-1">
                <Car className="h-4 w-4 mr-2" />
                <span>{detailerData.location || "Business Location"}</span>
              </div>
              <div className="flex items-center text-gray-400">
                <Calendar className="h-4 w-4 mr-2" />
                <span>In business since {detailerData.memberSince || "2019"}</span>
              </div>
            </div>
          </div>
          
          {/* Right side - Quick Stats */}
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-6 w-full lg:w-auto">
            <div className="bg-stone-700 rounded-xl p-4 text-center border border-stone-600">
              <div className="text-2xl font-bold text-white">$2,450</div>
              <div className="text-gray-300 text-sm">This Week</div>
            </div>
            <div className="bg-stone-700 rounded-xl p-4 text-center border border-stone-600">
              <div className="text-2xl font-bold text-white">23</div>
              <div className="text-gray-300 text-sm">Appointments</div>
            </div>
            <div className="bg-stone-700 rounded-xl p-4 text-center border border-stone-600">
              <div className="text-2xl font-bold text-white">142</div>
              <div className="text-gray-300 text-sm">Customers</div>
            </div>
            <div className="bg-stone-700 rounded-xl p-4 text-center border border-stone-600">
              <div className="text-2xl font-bold text-white">4.9★</div>
              <div className="text-gray-300 text-sm">Rating</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\components\DashboardLayout.tsx
============================
import React from 'react';

interface DashboardLayoutProps {
  children: React.ReactNode;
}

export const DashboardLayout: React.FC<DashboardLayoutProps> = ({ children }) => {
  return (
    <div className="min-h-screen bg-stone-900 transition-colors duration-500">
      {children}
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\components\DashboardPage.tsx
============================
import React, { useEffect, useState } from 'react';

import type { DashboardTab, DetailerData } from '@/features/tenantDashboard/types';
import { useBrowserTab } from '@/shared/hooks';
import { useTenantSlug } from '@/shared/hooks/useTenantSlug';

import { dashboardApi } from '../api/dashboard.api';
import { DashboardHeader } from './DashboardHeader';
import { DashboardLayout } from './DashboardLayout';
import { DashboardTabs } from './DashboardTabs';
import { TabContent } from './TabContent';

const DashboardPage: React.FC = () => {
  const slug = useTenantSlug();
  const [activeTab, setActiveTab] = useState<DashboardTab>('overview');
  const [detailerData, setDetailerData] = useState<DetailerData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);



  // Set browser tab title and favicon for tenant dashboard
  useBrowserTab({
    title: detailerData?.businessName 
      ? `${detailerData.businessName} - Dashboard`
      : 'Dashboard - That Smart Site',
  });

  // Fetch tenant data based on business slug
  useEffect(() => {
    const fetchTenantData = async () => {
      if (!slug) {
        setError('No business slug provided');
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        const tenant = await dashboardApi.getDashboardData(slug);
        
        // Transform tenant data to DetailerData format
        const transformedData: DetailerData = {
          business_name: tenant.business_name || 'Unknown Business',
          first_name: tenant.first_name || 'Unknown',
          last_name: tenant.last_name || 'Unknown',
          email: tenant.business_email || tenant.personal_email || 'No email',
          phone: tenant.business_phone || tenant.personal_phone || 'No phone',
          location: tenant.service_areas.length > 0 
            ? `${tenant.service_areas[0]?.city ?? ''}, ${tenant.service_areas[0]?.state ?? ''}` 
            : 'No location',
          services: tenant.service_areas.length > 0 
            ? tenant.service_areas.map((area: { city: string }) => area.city).slice(0, 4)
            : ['Mobile Detailing'],
          memberSince: tenant.created_at ? new Date(tenant.created_at).getFullYear().toString() : 'Unknown'
        };
        setDetailerData(transformedData);
      } catch (error) {
        setError(error instanceof Error ? error.message : 'Failed to fetch business data');
      } finally {
        setLoading(false);
      }
    };

    void fetchTenantData();
  }, [slug]);

  const handleDataUpdate = (data: Partial<DetailerData>) => {
    if (detailerData) {
      setDetailerData({ ...detailerData, ...data });
    }
  };

  const handleBackToForm = () => {
    // Navigate back to main site or form
  };

  if (loading) {
    return (
      <DashboardLayout>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center">
            <p className="text-lg text-gray-600">Loading business dashboard...</p>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  if (error || !detailerData) {
    return (
      <DashboardLayout>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center">
            <p className="text-lg text-red-600">Error: {error || 'Failed to load business data'}</p>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <DashboardHeader 
          detailerData={detailerData}
          onBackToForm={handleBackToForm}
        />
        
        <DashboardTabs 
          activeTab={activeTab}
          onTabChange={setActiveTab}
          tenantSlug={slug}
        />
        
        <TabContent 
          activeTab={activeTab}
          detailerData={detailerData}
          onDataUpdate={handleDataUpdate}
          tenantSlug={slug}
        />
      </div>
    </DashboardLayout>
  );
};

export default DashboardPage;


============================
FILE: frontend\src\features\tenantDashboard\components\DashboardTabs.tsx
============================
import React from 'react';

import type { DashboardTab } from '@/features/tenantDashboard/types';
import { DASHBOARD_TABS } from '@/features/tenantDashboard/utils/constants';

import { getTabConfig } from '../config/tabConfig';

interface DashboardTabsProps {
  activeTab: DashboardTab;
  onTabChange: (tab: DashboardTab) => void;
  tenantSlug?: string;
}

export const DashboardTabs: React.FC<DashboardTabsProps> = ({ 
  activeTab, 
  onTabChange,
  tenantSlug
}) => {
  // Get tab configuration for this tenant
  const tabConfig = getTabConfig(tenantSlug);
  
  // Filter tabs based on configuration
  const visibleTabs = DASHBOARD_TABS.filter(tab => {
    switch (tab.id) {
      case 'schedule':
        return tabConfig.schedule;
      case 'customers':
        return tabConfig.customers;
      case 'services':
        return tabConfig.services;
      case 'locations':
        return tabConfig.locations;
      case 'profile':
        return tabConfig.profile;
      case 'website':
        return tabConfig.website;
      case 'overview':
        return true; // Overview is always visible
      default:
        return true;
    }
  });

  return (
    <div className="mb-6">
      <nav className="flex space-x-1 bg-stone-800 rounded-xl p-1 shadow-lg border border-stone-700">
        {visibleTabs.map((tab) => {
          const Icon = tab.icon;
          return (
            <button
              key={tab.id}
              onClick={() => { onTabChange(tab.id); }}
              className={`flex items-center px-4 py-3 rounded-lg text-sm font-medium transition-all duration-200 ${
                activeTab === tab.id
                  ? 'bg-orange-500 text-white shadow-md hover:bg-orange-600'
                  : 'text-gray-300 hover:text-white hover:bg-stone-700'
              }`}
            >
              <Icon className="h-4 w-4 mr-2" />
              <span className="hidden sm:inline">{tab.name}</span>
            </button>
          );
        })}
      </nav>
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\components\TabContent.tsx
============================
import React from 'react';

import type { DashboardTab, DetailerData } from '@/features/tenantDashboard/types';

import { getTabConfig } from '../config/tabConfig';
import CustomersTab from '../tabs/customers/CustomersTab';
import LocationsTab from '../tabs/locations/LocationsTab';
import OverviewTab from '../tabs/overview/OverviewTab';
import ProfileTab from '../tabs/profile/ProfileTab';
import ScheduleTab from '../tabs/schedule/ScheduleTab';
import ServicesTab from '../tabs/services/SimpleFixedServicesTab';
import WebsiteTab from '../tabs/website/WebsiteTab';

interface TabContentProps {
  activeTab: DashboardTab;
  detailerData: DetailerData;
  onDataUpdate: (data: Partial<DetailerData>) => void;
  tenantSlug?: string;
}

export const TabContent: React.FC<TabContentProps> = ({ 
  activeTab, 
  detailerData, 
  onDataUpdate,
  tenantSlug
}) => {
  // Get tab configuration for this tenant
  const tabConfig = getTabConfig(tenantSlug);
  
  // Check if the current tab is enabled
  const isTabEnabled = (tab: DashboardTab): boolean => {
    switch (tab) {
      case 'schedule':
        return tabConfig.schedule;
      case 'customers':
        return tabConfig.customers;
      case 'services':
        return tabConfig.services;
      case 'locations':
        return tabConfig.locations;
      case 'profile':
        return tabConfig.profile;
      case 'website':
        return tabConfig.website;
      case 'overview':
        return true; // Overview is always enabled
      default:
        return true;
    }
  };

  // If the current tab is disabled, show a message
  if (!isTabEnabled(activeTab)) {
    return (
      <div className="transition-all duration-300 ease-in-out">
        <div className="bg-stone-800 rounded-lg p-8 text-center border border-stone-700">
          <div className="text-orange-400 text-6xl mb-4">🔒</div>
          <h3 className="text-xl font-semibold text-white mb-2">Feature Not Available</h3>
          <p className="text-gray-300 mb-4">
            This feature is not currently enabled for your account.
          </p>
          <p className="text-sm text-gray-400">
            Contact support to upgrade your plan and unlock this feature.
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="transition-all duration-300 ease-in-out">
      {activeTab === 'overview' && <OverviewTab />}
      {activeTab === 'website' && <WebsiteTab tenantSlug={tenantSlug} />}
      {activeTab === 'locations' && <LocationsTab detailerData={detailerData} />}
      {activeTab === 'profile' && (
        <ProfileTab 
          detailerData={detailerData} 
          onDataUpdate={onDataUpdate} 
        />
      )}
      {activeTab === 'schedule' && <ScheduleTab />}
      {activeTab === 'customers' && <CustomersTab />}
      {activeTab === 'services' && <ServicesTab />}
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\config\README.md
============================
# Dashboard Tab Configuration

This system allows you to enable/disable dashboard tabs for different tenants based on their subscription level or preferences.

## Configuration Files

- `tabConfig.ts` - Main configuration file
- `README.md` - This documentation

## How to Use

### 1. Default Configuration

The `DEFAULT_TAB_CONFIG` object controls which tabs are visible by default for all tenants:

```typescript
export const DEFAULT_TAB_CONFIG: TabConfig = {
  schedule: false,
  customers: false,
  performance: true,
  services: false,
  locations: true,
  profile: true,
};
```

### 2. Tenant-Specific Configuration

To customize tabs for specific tenants, add them to the `TENANT_TAB_CONFIGS` object:

```typescript
export const TENANT_TAB_CONFIGS: Record<string, Partial<TabConfig>> = {
  'jps': {
    schedule: true,    // Enable schedule for JPS
    customers: true,   // Enable customers for JPS
    services: false,   // Keep services disabled
  },
  'premium-tenant': {
    schedule: true,
    customers: true,
    services: true,    // Enable all features for premium
  },
  'basic-tenant': {
    schedule: false,
    customers: false,
    services: false,   // Disable most features for basic
  },
};
```

### 3. Available Tabs

- `overview` - Always visible (cannot be disabled)
- `website` - Website content and performance management (with Content, Performance, Health, and Domain sub-tabs)
- `locations` - Service area management
- `profile` - Business profile settings
- `schedule` - Appointment scheduling
- `customers` - Customer management
- `services` - Service management

### 4. How It Works

1. When a tenant accesses the dashboard, the system checks for tenant-specific configuration
2. If found, it merges the tenant config with the default config
3. If not found, it uses the default configuration
4. Tabs are filtered based on the final configuration
5. Disabled tabs show a "Feature Not Available" message

### 5. Adding New Tenants

To add a new tenant configuration:

1. Open `tabConfig.ts`
2. Add a new entry to `TENANT_TAB_CONFIGS` with the tenant's slug as the key
3. Set the desired tab visibility (true/false)
4. Save the file

Example:
```typescript
'new-tenant': {
  schedule: true,
  customers: false,
  performance: true,
  services: true,
  locations: true,
  profile: true,
},
```

### 6. Dynamic Configuration (Future Enhancement)

In the future, this could be enhanced to:
- Load configuration from a database
- Allow real-time updates without code changes
- Support different subscription tiers
- Include feature expiration dates


============================
FILE: frontend\src\features\tenantDashboard\config\tabConfig.ts
============================
/**
 * Dashboard Tab Configuration
 * Controls which tabs are visible for tenants
 * Can be customized per tenant or globally
 */

export interface TabConfig {
  schedule: boolean;
  customers: boolean;
  services: boolean;
  locations: boolean;
  profile: boolean;
  website: boolean;
}

// Default configuration - can be overridden per tenant
export const DEFAULT_TAB_CONFIG: TabConfig = {
  schedule: false,
  customers: false,
  services: false,
  locations: true,
  profile: true,
  website: true,
};

// Tenant-specific configurations (optional)
// This allows for per-tenant customization
export const TENANT_TAB_CONFIGS: Record<string, Partial<TabConfig>> = {
  // Example configurations:
  // 'jps': { schedule: true, customers: true },
  // 'premium-tenant': { schedule: true, customers: true, services: true },
  // 'basic-tenant': { schedule: false, customers: false, services: false },
  
  // Current configuration for 'jps' tenant (as requested):
  'jps': {
    schedule: false,
    customers: false,
    services: false,
    locations: true,
    profile: true,
    website: true,
  },
};

/**
 * Get tab configuration for a specific tenant
 * Falls back to default config if no tenant-specific config exists
 */
export const getTabConfig = (tenantSlug?: string): TabConfig => {
  if (!tenantSlug) {
    return DEFAULT_TAB_CONFIG;
  }
  
  const tenantConfig = TENANT_TAB_CONFIGS[tenantSlug];
  if (!tenantConfig) {
    return DEFAULT_TAB_CONFIG;
  }
  
  // Merge tenant config with default config
  return {
    ...DEFAULT_TAB_CONFIG,
    ...tenantConfig,
  };
};


============================
FILE: frontend\src\features\tenantDashboard\hooks\index.ts
============================
export { useDashboardData } from './useDashboardData';


============================
FILE: frontend\src\features\tenantDashboard\hooks\useDashboardData.ts
============================
import { useCallback, useState } from 'react';

import type { DetailerData } from '../types';

export const useDashboardData = (initialData: DetailerData) => {
  const [detailerData, setDetailerData] = useState<DetailerData>(initialData);

  const updateDetailerData = useCallback((updates: Partial<DetailerData>) => {
    setDetailerData(prev => ({ ...prev, ...updates }));
  }, []);

  const resetDetailerData = useCallback(() => {
    setDetailerData(initialData);
  }, [initialData]);

  return {
    detailerData,
    updateDetailerData,
    resetDetailerData
  };
};


============================
FILE: frontend\src\features\tenantDashboard\hooks\useTenantBusinessData.ts
============================
import { useCallback, useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';

import { config } from '@/../config/env';

export interface TenantServiceArea {
  city: string;
  state: string;
  zip?: string;
  primary: boolean;
  minimum?: number;
  multiplier?: number;
}

export interface TenantBusinessData {
  id: string;
  slug: string;
  business_name: string;
  application_status: string;
  phone: string;
  sms_phone?: string;
  twilio_phone?: string;
  service_areas: TenantServiceArea[];
  owner?: string;
  business_email?: string;
  personal_email?: string;
  first_name?: string;
  last_name?: string;
  personal_phone?: string;
  business_start_date?: string;
  website?: string;
  gbp_url?: string;
  facebook_url?: string;
  youtube_url?: string;
  tiktok_url?: string;
  instagram_url?: string;
  created_at: string;
  updated_at: string;
}

export const useTenantBusinessData = () => {
  const [businessData, setBusinessData] = useState<TenantBusinessData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  
  const { slug } = useParams<{ slug: string }>();

  const fetchBusinessData = useCallback(async () => {
    if (!slug) {
      setError('No business slug provided');
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      setError(null);
      
      const token = localStorage.getItem('token');
      const response = await fetch(`${config.apiUrl}/api/tenants/${slug}`, {
        headers: {
          'Authorization': `Bearer ${String(token)}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json() as {
          success: boolean;
          data?: TenantBusinessData;
        };
        
        if (data.success && data.data) {
          setBusinessData(data.data);
        } else {
          setError('Failed to fetch business data');
        }
      } else {
        const errorData = await response.json() as {
          error?: string;
          message?: string;
        };
        setError(errorData.error || errorData.message || 'Failed to fetch business data');
      }
    } catch (error) {
      console.error('Error fetching business data:', error);
      setError('Failed to fetch business data');
    } finally {
      setLoading(false);
    }
  }, [slug]);

  useEffect(() => {
    void fetchBusinessData();
  }, [fetchBusinessData, refreshTrigger]);

  // Get service areas with first entry as primary
  const serviceAreas = businessData?.service_areas || [];
  const primaryServiceArea = serviceAreas.length > 0 ? serviceAreas[0] : null;
  const otherServiceAreas = serviceAreas.slice(1);

  return {
    businessData,
    serviceAreas,
    primaryServiceArea,
    otherServiceAreas,
    loading,
    error,
    refetch: () => {
      setRefreshTrigger(prev => prev + 1);
    }
  };
};


============================
FILE: frontend\src\features\tenantDashboard\index.ts
============================
// Re-export dashboard components
export { default as Dashboard } from './components/Dashboard';
export { DashboardHeader } from './components/DashboardHeader';
export { DashboardLayout } from './components/DashboardLayout';
export { default as DashboardPage } from './components/DashboardPage';
export { DashboardTabs } from './components/DashboardTabs';
export { TabContent } from './components/TabContent';


============================
FILE: frontend\src\features\tenantDashboard\schemas\dashboard.schemas.ts
============================
import { z } from 'zod';

// Dashboard tab schema
export const dashboardTabSchema = z.enum([
  'overview',
  'schedule', 
  'customers',
  'performance',
  'services',
  'locations',
  'profile'
]);

// Detailer data schema
export const detailerDataSchema = z.object({
  business_name: z.string().min(1),
  first_name: z.string().min(1),
  last_name: z.string().min(1),
  email: z.email(),
  phone: z.string().min(1),
  location: z.string().min(1),
  services: z.array(z.string()),
  memberSince: z.string().min(1),
  bio: z.string().optional(),
});

// Dashboard metrics schema
export const dashboardMetricsSchema = z.object({
  dailyRevenue: z.number().min(0),
  weeklyRevenue: z.number().min(0),
  monthlyRevenue: z.number().min(0),
  totalAppointments: z.number().min(0),
  totalCustomers: z.number().min(0),
  averageRating: z.number().min(0).max(5),
});

// Appointment schema
export const appointmentSchema = z.object({
  id: z.string().min(1),
  customer: z.string().min(1),
  service: z.string().min(1),
  time: z.string().min(1),
  date: z.string().min(1),
  status: z.enum(['confirmed', 'pending', 'cancelled']),
  duration: z.number().min(0),
  phone: z.string().optional(),
});

// Customer schema
export const customerSchema = z.object({
  id: z.string().min(1),
  name: z.string().min(1),
  email: z.email(),
  phone: z.string().min(1),
  lastVisit: z.string().min(1),
  totalSpent: z.number().min(0),
  visits: z.number().min(0),
  rating: z.number().min(0).max(5),
  status: z.enum(['active', 'inactive']),
  favoriteService: z.string().min(1),
});

// Service schema
export const serviceSchema = z.object({
  id: z.string().min(1),
  name: z.string().min(1),
  description: z.string().min(1),
  price: z.number().min(0),
  duration: z.number().min(0),
  category: z.string().min(1),
  active: z.boolean(),
  popularity: z.number().min(0).max(100),
});

// Service area schema
export const serviceAreaSchema = z.object({
  id: z.string().optional(),
  city: z.string().min(1),
  state: z.string().min(1),
  primary: z.boolean().optional(),
});

// Profile update schema
export const profileUpdateSchema = z.object({
  business_name: z.string().min(1).optional(),
  first_name: z.string().min(1).optional(),
  last_name: z.string().min(1).optional(),
  email: z.email().optional(),
  phone: z.string().min(1).optional(),
  bio: z.string().optional(),
});

// Export types
export type DashboardTab = z.infer<typeof dashboardTabSchema>;
export type DetailerData = z.infer<typeof detailerDataSchema>;
export type DashboardMetrics = z.infer<typeof dashboardMetricsSchema>;
export type Appointment = z.infer<typeof appointmentSchema>;
export type Customer = z.infer<typeof customerSchema>;
export type Service = z.infer<typeof serviceSchema>;
export type ServiceArea = z.infer<typeof serviceAreaSchema>;
export type ProfileUpdate = z.infer<typeof profileUpdateSchema>;


============================
FILE: frontend\src\features\tenantDashboard\tabs\customers\CustomersTab.tsx
============================
import React from "react";
const CustomersTab: React.FC = () => <div>Customers Tab (placeholder)</div>;
export default CustomersTab;


============================
FILE: frontend\src\features\tenantDashboard\tabs\customers\index.ts
============================
export { default as CustomersTab } from "./CustomersTab";


============================
FILE: frontend\src\features\tenantDashboard\tabs\index.ts
============================
export * from './customers';
export * from './locations';
export * from './overview';
export * from './performance';
export * from './profile';
export * from './schedule';
export * from './services';


============================
FILE: frontend\src\features\tenantDashboard\tabs\locations\components\AddLocationModal.tsx
============================
import React, { useCallback, useState } from 'react';
import { MapPin, Plus, X } from 'lucide-react';

import { isValidStateCode } from '@/shared';
import { Button } from '@/shared/ui';

import type { LocationFormData, LocationValidationErrors } from '../types';


interface AddLocationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onAdd: (location: LocationFormData) => Promise<{ success: boolean; error?: string }>;
}

export const AddLocationModal: React.FC<AddLocationModalProps> = ({
  isOpen,
  onClose,
  onAdd
}) => {
  const [formData, setFormData] = useState<LocationFormData>({
    city: '',
    state: '',
    zip: '',
    minimum: 0,
    multiplier: 1.0
  });
  const [errors, setErrors] = useState<LocationValidationErrors>({});
  const [isSubmitting, setIsSubmitting] = useState(false);


  const validateForm = useCallback((): boolean => {
    const newErrors: LocationValidationErrors = {};

    if (!formData.city.trim()) {
      newErrors.city = 'City is required';
    }

    if (!formData.state.trim()) {
      newErrors.state = 'State is required';
    } else if (!isValidStateCode(formData.state)) {
      newErrors.state = 'Please enter a valid 2-letter state code (e.g., CA, NY, TX)';
    }

    if (formData.zip && !/^\d{5}(-\d{4})?$/.test(formData.zip)) {
      newErrors.zip = 'ZIP code must be 5 digits or 5+4 format';
    }

    if (formData.minimum < 0) {
      newErrors.minimum = 'Minimum must be a positive number';
    }

    if (formData.multiplier <= 0) {
      newErrors.multiplier = 'Multiplier must be greater than 0';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  }, [formData]);

  const handleSubmit = useCallback(async (e: React.FormEvent): Promise<void> => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    
    try {
      const result = await onAdd(formData);
      
      if (result.success) {
        setFormData({ city: '', state: '', zip: '', minimum: 0, multiplier: 1.0 });
        setErrors({});
        onClose();
      } else {
        setErrors({ general: result.error || 'Failed to add location' });
      }
    } catch {
      setErrors({ general: 'An unexpected error occurred' });
    } finally {
      setIsSubmitting(false);
    }
  }, [formData, onAdd, onClose, validateForm]);

  const handleInputChange = (field: keyof LocationFormData, value: string | number) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center space-x-2">
            <MapPin className="h-5 w-5 text-orange-500" />
            <h2 className="text-lg font-semibold text-gray-900">Add Service Location</h2>
          </div>
          <Button
            onClick={onClose}
            variant="ghost"
            size="sm"
            className="text-gray-400 hover:text-gray-600 p-1"
          >
            <X className="h-5 w-5" />
          </Button>
        </div>

        <form onSubmit={(e) => { void handleSubmit(e); }} className="p-6 space-y-4">
          {errors.general && (
            <div className="bg-red-50 border border-red-200 rounded-md p-3">
              <p className="text-sm text-red-600">{errors.general}</p>
            </div>
          )}

          {/* Location Fields */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label htmlFor="city" className="block text-sm font-medium text-gray-700 mb-1">
                City *
              </label>
              <input
                id="city"
                type="text"
                value={formData.city}
                onChange={(e) => { handleInputChange('city', e.target.value); }}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent ${
                  errors.city ? 'border-red-300' : 'border-gray-300'
                }`}
                placeholder="Enter city name"
              />
              {errors.city && (
                <p className="mt-1 text-sm text-red-600">{errors.city}</p>
              )}
            </div>

            <div>
              <label htmlFor="state" className="block text-sm font-medium text-gray-700 mb-1">
                State *
              </label>
              <input
                id="state"
                type="text"
                value={formData.state}
                onChange={(e) => { handleInputChange('state', e.target.value.toUpperCase()); }}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent ${
                  errors.state ? 'border-red-500 bg-red-50' : 'border-gray-300'
                }`}
                placeholder="CA, NY, TX"
                maxLength={2}
              />
              {errors.state && (
                <p className="mt-1 text-sm text-red-600">{errors.state}</p>
              )}
            </div>

            <div>
              <label htmlFor="zip" className="block text-sm font-medium text-gray-700 mb-1">
                ZIP Code
              </label>
              <input
                id="zip"
                type="text"
                value={formData.zip}
                onChange={(e) => { handleInputChange('zip', e.target.value); }}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent ${
                  errors.zip ? 'border-red-300' : 'border-gray-300'
                }`}
                placeholder="12345 or 12345-6789"
              />
              {errors.zip && (
                <p className="mt-1 text-sm text-red-600">{errors.zip}</p>
              )}
            </div>
          </div>

          {/* Pricing fields */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label htmlFor="minimum" className="block text-sm font-medium text-gray-700 mb-1">
                Minimum
              </label>
              <input
                type="number"
                id="minimum"
                value={formData.minimum || ''}
                onChange={(e) => { handleInputChange('minimum', parseFloat(e.target.value) || 0); }}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent ${
                  errors.minimum ? 'border-red-300' : 'border-gray-300'
                }`}
                placeholder="0.00"
                step="0.01"
                min="0"
              />
              {errors.minimum && (
                <p className="mt-1 text-sm text-red-600">{errors.minimum}</p>
              )}
            </div>

            <div>
              <label htmlFor="multiplier" className="block text-sm font-medium text-gray-700 mb-1">
                Multiplier
              </label>
              <input
                type="number"
                id="multiplier"
                value={formData.multiplier || ''}
                onChange={(e) => { handleInputChange('multiplier', parseFloat(e.target.value) || 1.0); }}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent ${
                  errors.multiplier ? 'border-red-300' : 'border-gray-300'
                }`}
                placeholder="1.00"
                step="0.01"
                min="0.01"
              />
              {errors.multiplier && (
                <p className="mt-1 text-sm text-red-600">{errors.multiplier}</p>
              )}
            </div>
          </div>

          <div className="flex justify-end space-x-3 pt-4">
            <Button
              type="button"
              onClick={onClose}
              variant="secondary"
              size="md"
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200"
            >
              Cancel
            </Button>
            <Button
              type="submit"
              variant="primary"
              size="md"
              className="px-4 py-2 text-sm font-medium bg-orange-500 hover:bg-orange-600 disabled:bg-orange-300"
              loading={isSubmitting}
              disabled={isSubmitting}
              leftIcon={<Plus className="h-4 w-4" />}
            >
              Add Location
            </Button>
          </div>
        </form>

      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\locations\components\DeleteLocationModal.tsx
============================
import React from 'react';
import { AlertTriangle, Trash2, X } from 'lucide-react';

import { Button } from '@/shared/ui';

import type { ServiceArea } from '../types';

interface DeleteLocationModalProps {
  isOpen: boolean;
  location: ServiceArea | null;
  onClose: () => void;
  onConfirm: () => Promise<void>;
  isDeleting?: boolean;
}

export const DeleteLocationModal: React.FC<DeleteLocationModalProps> = ({
  isOpen,
  location,
  onClose,
  onConfirm,
  isDeleting = false
}) => {
  if (!isOpen || !location) return null;

  const formatLocation = () => {
    const parts = [location.city, location.state];
    if (location.zip) {
      parts.push(location.zip);
    }
    return parts.join(', ');
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center space-x-2">
            <AlertTriangle className="h-5 w-5 text-red-500" />
            <h2 className="text-lg font-semibold text-gray-900">Delete Location</h2>
          </div>
          <Button
            onClick={onClose}
            variant="ghost"
            size="sm"
            className="text-gray-400 hover:text-gray-600 disabled:text-gray-300 p-1"
            disabled={isDeleting}
          >
            <X className="h-5 w-5" />
          </Button>
        </div>

        <div className="p-6">
          <div className="mb-4">
            <p className="text-sm text-gray-600 mb-2">
              Are you sure you want to delete this service location?
            </p>
            <div className="bg-gray-50 border border-gray-200 rounded-md p-3">
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center">
                  <Trash2 className="h-4 w-4 text-orange-500" />
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-900">{location.city}</p>
                  <p className="text-xs text-gray-500">{formatLocation()}</p>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-yellow-50 border border-yellow-200 rounded-md p-3 mb-4">
            <div className="flex">
              <AlertTriangle className="h-4 w-4 text-yellow-400 mt-0.5 mr-2 flex-shrink-0" />
              <div>
                <p className="text-sm text-yellow-800">
                  <strong>Warning:</strong> This action cannot be undone. Customers in this area will no longer be able to find your services.
                </p>
              </div>
            </div>
          </div>

          <div className="flex justify-end space-x-3">
            <Button
              onClick={onClose}
              variant="secondary"
              size="md"
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 disabled:bg-gray-50 disabled:text-gray-400"
              disabled={isDeleting}
            >
              Cancel
            </Button>
            <Button
              onClick={() => { void onConfirm(); }}
              variant="destructive"
              size="md"
              className="px-4 py-2 text-sm font-medium bg-red-500 hover:bg-red-600 disabled:bg-red-300"
              loading={isDeleting}
              disabled={isDeleting}
              leftIcon={<Trash2 className="h-4 w-4" />}
            >
              Delete Location
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\locations\components\index.ts
============================
export { default as AddLocationModal } from './AddLocationModal';
export { default as DeleteLocationModal } from './DeleteLocationModal';
export { default as LocationSearch } from './LocationSearch';
export { default as PrimaryServiceArea } from './PrimaryServiceArea';
export { default as ServiceAreasList } from './ServiceAreasList';


============================
FILE: frontend\src\features\tenantDashboard\tabs\locations\components\LocationCard.tsx
============================
import React from 'react';
import { Edit,MapPin, Trash2 } from 'lucide-react';

import type { ServiceArea } from '../types';

interface LocationCardProps {
  location: ServiceArea;
  onEdit?: (location: ServiceArea) => void;
  onDelete?: (locationId: string) => void;
  isDeleting?: boolean;
}

export const LocationCard: React.FC<LocationCardProps> = ({
  location,
  onEdit,
  onDelete,
  isDeleting = false
}) => {
  const formatLocation = () => {
    const parts = [location.city, location.state];
    if (location.zip) {
      parts.push(location.zip.toString());
    }
    return parts.join(', ');
  };

  return (
    <div className="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
      <div className="flex items-start justify-between">
        <div className="flex items-start space-x-3">
          <div className="flex-shrink-0">
            <div className="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center">
              <MapPin className="h-5 w-5 text-orange-500" />
            </div>
          </div>
          <div className="flex-1 min-w-0">
            <h3 className="text-sm font-medium text-gray-900 truncate">
              {location.city}
              {location.primary && (
                <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-orange-100 text-orange-800">
                  Primary
                </span>
              )}
            </h3>
            <p className="text-sm text-gray-500 mt-1">
              {formatLocation()}
            </p>
            <div className="text-xs text-gray-400 mt-1 space-y-1">
              <p>Min: ${location.minimum} | Multiplier: {location.multiplier}x</p>
            </div>
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          {onEdit && (
            <button
              onClick={() => { onEdit(location); }}
              className="p-1 text-gray-400 hover:text-orange-500 transition-colors"
              title="Edit location"
            >
              <Edit className="h-4 w-4" />
            </button>
          )}
          {onDelete && (
            <button
              onClick={() => { onDelete(`${location.city}-${location.state}`); }}
              disabled={isDeleting}
              className="p-1 text-gray-400 hover:text-red-500 disabled:text-gray-300 transition-colors"
              title="Delete location"
            >
              <Trash2 className="h-4 w-4" />
            </button>
          )}
        </div>
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\locations\components\LocationSearch.tsx
============================
import React, { useEffect } from 'react';
import { MapPin, X } from 'lucide-react';

import { Button } from '@/shared/ui';

import { useLocationSearch } from '../hooks/useLocationSearch';

interface LocationSearchProps {
  apiLoaded: boolean;
  onLocationSelect: (place: { city: string; state: string; zipCode: string }) => void;
  onCancel: () => void;
  placeholder?: string;
  label?: string;
  className?: string;
}

const LocationSearch: React.FC<LocationSearchProps> = ({
  apiLoaded,
  onLocationSelect,
  onCancel,
  placeholder = "Enter city or ZIP code",
  label = "Search for a city or ZIP code",
  className = "",
}) => {
  const {
    input,
    predictions,
    showPredictions,
    isLoading,
    dropdownStyle,
    inputRef,
    predictionsRef,
    handleInputChange,
    reset,
    setDropdownStyle,
  } = useLocationSearch({ apiLoaded });

  // Update dropdown position when predictions change
  useEffect(() => {
    if (showPredictions && inputRef.current && predictionsRef.current) {
      const inputRect = inputRef.current.getBoundingClientRect();
      const predictionsHeight = predictionsRef.current.scrollHeight;
      const spaceBelow = window.innerHeight - inputRect.bottom;
      const spaceAbove = inputRect.top;

      if (spaceBelow < predictionsHeight && spaceAbove > predictionsHeight) {
        setDropdownStyle({
          position: 'absolute',
          top: 'auto',
          bottom: '100%',
          left: 0,
          right: 0,
          zIndex: 50,
        });
      } else {
        setDropdownStyle({
          position: 'absolute',
          top: '100%',
          left: 0,
          right: 0,
          zIndex: 50,
        });
      }
    }
  }, [showPredictions, setDropdownStyle, inputRef, predictionsRef]);

  const handlePredictionClick = (prediction: google.maps.places.AutocompleteSuggestion) => {
    try {
      // Extract location data from the AutocompleteSuggestion
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access -- Google Maps types are incomplete
      const structuredFormat = prediction.placePrediction?.structuredFormat;
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access -- Google Maps types are incomplete
      const mainText: string = (structuredFormat?.mainText?.text as string | undefined) ?? '';
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access -- Google Maps types are incomplete
      const secondaryText: string = (structuredFormat?.secondaryText?.text as string | undefined) ?? '';
      
      // Parse the location data
      // For postal_code type: mainText is ZIP, secondaryText is "City, State"
      // For locality type: mainText is City, secondaryText is "State, Country"
      const types = prediction.placePrediction?.types ?? [];
      let city = '';
      let state = '';
      let zipCode = '';

      if (types.includes('postal_code')) {
        zipCode = mainText;
        const parts = secondaryText.split(',').map((s: string) => s.trim());
        city = parts[0] ?? '';
        state = parts[1] ?? '';
      } else if (types.includes('locality')) {
        city = mainText;
        const parts = secondaryText.split(',').map((s: string) => s.trim());
        state = parts[0] ?? '';
      }

      onLocationSelect({ city, state, zipCode });
      reset();
    } catch (err: unknown) {
      console.error('Error parsing place:', err);
    }
  };

  const handleCancel = () => {
    reset();
    onCancel();
  };

  return (
    <div className={`space-y-4 ${className}`}>
      <div className="flex items-center justify-between">
        <label htmlFor="location-search-input" className="block text-sm font-medium text-gray-300">
          {label}
        </label>
        <Button
          onClick={handleCancel}
          variant="ghost"
          size="sm"
          className="text-gray-400 hover:text-gray-300 p-1"
          title="Cancel"
        >
          <X className="h-5 w-5" />
        </Button>
      </div>
      
      <div className="relative">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <MapPin className="h-5 w-5 text-gray-400" />
        </div>
        <input
          id="location-search-input"
          ref={inputRef}
          type="text"
          value={input}
          onChange={(e) => { void handleInputChange(e.target.value); }}
          placeholder={apiLoaded ? placeholder : "Loading..."}
          style={{ colorScheme: 'dark' }}
          className={`w-full pl-10 pr-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent ${
            apiLoaded ? 'border-stone-700 bg-stone-700 text-white' : 'border-gray-200 bg-gray-50 text-gray-900'
          }`}
          disabled={!apiLoaded}
        />
        {isLoading && (
          <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-orange-500"></div>
          </div>
        )}
      </div>
      
      {!apiLoaded && (
        <p className="mt-1 text-xs text-gray-500">Loading Google Places API...</p>
      )}

      {/* Predictions Dropdown */}
      {showPredictions && predictions.length > 0 && (
        <div
          ref={predictionsRef}
          style={dropdownStyle}
          className="bg-stone-800 border border-stone-700 rounded-md shadow-lg max-h-60 overflow-y-auto"
        >
          {predictions.map((prediction, index) => {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access -- Google Maps types are incomplete
            const structuredFormat = prediction.placePrediction?.structuredFormat;
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access -- Google Maps types are incomplete
            const mainText: string = (structuredFormat?.mainText?.text as string | undefined) ?? '';
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access -- Google Maps types are incomplete
            const secondaryText: string = (structuredFormat?.secondaryText?.text as string | undefined) ?? '';
            
            return (
              <button
                key={index}
                onClick={() => { handlePredictionClick(prediction); }}
                className="w-full px-4 py-3 text-left hover:bg-stone-700 transition-colors border-b border-stone-700 last:border-b-0"
              >
                <div className="text-white text-sm">{mainText}</div>
                {secondaryText && (
                  <div className="text-gray-400 text-xs mt-1">{secondaryText}</div>
                )}
              </button>
            );
          })}
        </div>
      )}
    </div>
  );
};

export default LocationSearch;


============================
FILE: frontend\src\features\tenantDashboard\tabs\locations\components\PrimaryServiceArea.tsx
============================
import React, { useState } from 'react';
import { MapPin } from 'lucide-react';

import { isValidStateCode } from '@/shared';
import { Button } from '@/shared/ui';

import type { ServiceArea } from '../types';

interface PrimaryServiceAreaProps {
  primaryServiceArea: ServiceArea | undefined;
  isEditMode: boolean;
  onEditModeChange: (editMode: boolean) => void;
  onLocationUpdate: (field: keyof ServiceArea, value: string | number) => void;
  apiLoaded: boolean;
}

const PrimaryServiceArea: React.FC<PrimaryServiceAreaProps> = ({
  primaryServiceArea,
  isEditMode,
  onEditModeChange,
  onLocationUpdate,
  apiLoaded: _apiLoaded,
}) => {
  const [errors, setErrors] = useState<{ state?: string }>({});

  const _handleLocationSelect = (place: { city: string; state: string; zipCode: string }) => {
    onLocationUpdate('city', place.city);
    onLocationUpdate('state', place.state);
    onLocationUpdate('zip', parseInt(place.zipCode) || null);
    onEditModeChange(false);
  };

  const handleCancel = () => {
    setErrors({});
    onEditModeChange(false);
  };

  const handleStateChange = (value: string) => {
    const upperValue = value.toUpperCase();
    onLocationUpdate('state', upperValue);
    
    // Clear error when user starts typing
    if (errors.state) {
      setErrors({});
    }
  };

  const handleSave = () => {
    if (!primaryServiceArea) return;
    
    // Validate state
    if (!isValidStateCode(primaryServiceArea.state)) {
      setErrors({ state: 'Please enter a valid 2-letter state code (e.g., CA, NY, TX)' });
      return;
    }
    
    // Clear errors and exit edit mode
    setErrors({});
    onEditModeChange(false);
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-orange-500">Primary Service Area</h3>
      </div>
      
      <div className="bg-stone-800 border border-stone-700 rounded-lg p-6">
        {!primaryServiceArea ? (
          <div className="bg-yellow-50 border border-yellow-200 rounded-md p-4">
            <p className="text-sm text-yellow-600">No primary service area found</p>
          </div>
        ) : isEditMode ? (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label htmlFor="primary-city" className="block text-sm font-medium text-gray-300 mb-1">City *</label>
                <input
                  id="primary-city"
                  type="text"
                  value={primaryServiceArea.city}
                  onChange={(e) => { onLocationUpdate('city', e.target.value); }}
                  className="w-full px-3 py-2 border border-stone-700 bg-stone-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                  placeholder="Enter city name"
                />
              </div>
              <div>
                <label htmlFor="primary-state" className="block text-sm font-medium text-gray-300 mb-1">State *</label>
                <input
                  id="primary-state"
                  type="text"
                  value={primaryServiceArea.state}
                  onChange={(e) => { handleStateChange(e.target.value); }}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 ${
                    errors.state ? 'border-red-500 bg-red-900/20' : 'border-stone-700 bg-stone-700'
                  } text-white`}
                  placeholder="CA, NY, TX"
                  maxLength={2}
                />
                {errors.state && (
                  <p className="mt-1 text-sm text-red-400">{errors.state}</p>
                )}
              </div>
              <div>
                <label htmlFor="primary-zip" className="block text-sm font-medium text-gray-300 mb-1">ZIP Code</label>
                <input
                  id="primary-zip"
                  type="text"
                  value={primaryServiceArea.zip || ''}
                  onChange={(e) => { onLocationUpdate('zip', e.target.value); }}
                  className="w-full px-3 py-2 border border-stone-700 bg-stone-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                  placeholder="12345 or 12345-6789"
                />
              </div>
            </div>
            <div className="flex justify-end space-x-3">
              <Button
                onClick={handleCancel}
                variant="secondary"
                size="sm"
                className="px-4 py-2"
              >
                Cancel
              </Button>
              <Button
                onClick={handleSave}
                variant="primary"
                size="sm"
                className="px-4 py-2"
              >
                Save
              </Button>
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <div className="block text-sm font-medium text-gray-300 mb-1">City</div>
                <div className="flex items-center space-x-2">
                  <MapPin className="h-4 w-4 text-gray-400" />
                  <span className="text-white">{primaryServiceArea.city}</span>
                </div>
              </div>
              <div>
                <div className="block text-sm font-medium text-gray-300 mb-1">State</div>
                <span className="text-white">{primaryServiceArea.state}</span>
              </div>
              <div>
                <div className="block text-sm font-medium text-gray-300 mb-1">ZIP Code</div>
                <span className="text-white">{primaryServiceArea.zip || 'N/A'}</span>
              </div>
            </div>
            
            <div className="flex justify-end">
              <Button
                onClick={() => { onEditModeChange(true); }}
                variant="secondary"
                size="sm"
                className="px-4 py-2 bg-stone-700 hover:bg-stone-600 text-sm font-medium rounded-lg"
              >
                Edit Location
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PrimaryServiceArea;


============================
FILE: frontend\src\features\tenantDashboard\tabs\locations\components\ServiceAreasList.tsx
============================
import React, { useState } from 'react';
import { ChevronDown, ChevronRight, MapPin, Plus, Trash2 } from 'lucide-react';

import { isValidStateCode } from '@/shared';
import { Button } from '@/shared/ui';

import type { ServiceArea } from '../types';

interface ServiceAreasListProps {
  locationsByState: Record<string, ServiceArea[]>;
  stateNames: string[];
  expandedStates: Set<string>;
  isEditMode: boolean;
  editingLocationId: string | null;
  apiLoaded: boolean;
  onToggleStateExpansion: (state: string) => void;
  onEditModeChange: (editMode: boolean) => void;
  onStartEditingLocation: (locationId: string) => void;
  onStopEditingLocation: () => void;
  onLocationUpdate: (locationId: string, field: keyof ServiceArea, value: string | number) => void;
  onDeleteLocation: (location: ServiceArea) => void;
  onLocationSelect: (place: { city: string; state: string; zipCode: string }) => void;
}

const ServiceAreasList: React.FC<ServiceAreasListProps> = ({
  locationsByState,
  stateNames,
  expandedStates,
  isEditMode,
  editingLocationId,
  apiLoaded: _apiLoaded,
  onToggleStateExpansion,
  onEditModeChange,
  onStartEditingLocation,
  onStopEditingLocation,
  onLocationUpdate,
  onDeleteLocation,
  onLocationSelect,
}) => {
  const [errors, setErrors] = useState<Record<string, { state?: string }>>({});
  
  // Form state for adding new location
  const [newLocationForm, setNewLocationForm] = useState({
    city: '',
    state: '',
    zip: ''
  });

  const handleStateChange = (locationId: string, value: string) => {
    const upperValue = value.toUpperCase();
    onLocationUpdate(locationId, 'state', upperValue);
    
    // Clear error when user starts typing
    if (errors[locationId]?.state) {
      setErrors(prev => ({
        ...prev,
        [locationId]: { ...prev[locationId], state: undefined }
      }));
    }
  };

  const handleNewLocationInputChange = (field: 'city' | 'state' | 'zip', value: string) => {
    const processedValue = field === 'state' ? value.toUpperCase() : value;
    setNewLocationForm(prev => ({ ...prev, [field]: processedValue }));
  };

  const handleSave = (locationId: string, location: ServiceArea) => {
    // Validate state
    if (!isValidStateCode(location.state)) {
      setErrors(prev => ({
        ...prev,
        [locationId]: { state: 'Please enter a valid 2-letter state code (e.g., CA, NY, TX)' }
      }));
      return;
    }
    
    // Clear errors and stop editing
    setErrors(prev => {
      const { [locationId]: _removed, ...newErrors } = prev;
      return newErrors;
    });
    onStopEditingLocation();
  };
  const _handleLocationSelect = (place: { city: string; state: string; zipCode: string }) => {
    onLocationSelect(place);
    onEditModeChange(false);
  };

  const handleCancel = () => {
    // Reset form when canceling
    setNewLocationForm({ city: '', state: '', zip: '' });
    onEditModeChange(false);
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <h3 className="text-lg font-semibold text-orange-500">Service Areas</h3>
          {stateNames.length > 0 && (
            <div className="flex items-center space-x-2">
              <Button
                onClick={() => { onToggleStateExpansion('expand-all'); }}
                variant="ghost"
                size="sm"
                className="text-xs text-gray-500 hover:text-orange-500"
              >
                Expand All
              </Button>
              <span className="text-gray-300">|</span>
              <Button
                onClick={() => { onToggleStateExpansion('collapse-all'); }}
                variant="ghost"
                size="sm"
                className="text-xs text-gray-500 hover:text-orange-500"
              >
                Collapse All
              </Button>
            </div>
          )}
        </div>
        {!isEditMode && (
          <Button
            onClick={() => { onEditModeChange(true); }}
            variant="primary"
            size="md"
            className="px-4 py-2 bg-orange-500 hover:bg-orange-600 text-sm font-medium rounded-lg"
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Add Location
          </Button>
        )}
      </div>
      
      {isEditMode && (
        <div className="bg-stone-800 border border-stone-700 rounded-lg p-6">
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label htmlFor="new-location-city" className="block text-sm font-medium text-gray-300 mb-1">City *</label>
                <input
                  id="new-location-city"
                  type="text"
                  value={newLocationForm.city}
                  onChange={(e) => { handleNewLocationInputChange('city', e.target.value); }}
                  className="w-full px-3 py-2 border border-stone-700 bg-stone-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                  placeholder="Enter city name"
                />
              </div>
              <div>
                <label htmlFor="new-location-state" className="block text-sm font-medium text-gray-300 mb-1">State *</label>
                <input
                  id="new-location-state"
                  type="text"
                  value={newLocationForm.state}
                  onChange={(e) => { handleNewLocationInputChange('state', e.target.value); }}
                  className="w-full px-3 py-2 border border-stone-700 bg-stone-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                  placeholder="CA, NY, TX"
                  maxLength={2}
                />
              </div>
              <div>
                <label htmlFor="new-location-zip" className="block text-sm font-medium text-gray-300 mb-1">ZIP Code</label>
                <input
                  id="new-location-zip"
                  type="text"
                  value={newLocationForm.zip}
                  onChange={(e) => { handleNewLocationInputChange('zip', e.target.value); }}
                  className="w-full px-3 py-2 border border-stone-700 bg-stone-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                  placeholder="12345 or 12345-6789"
                />
              </div>
            </div>
            <div className="flex justify-end space-x-3">
              <Button
                onClick={handleCancel}
                variant="secondary"
                size="sm"
                className="px-4 py-2"
              >
                Cancel
              </Button>
              <Button
                onClick={() => {
                  // Validate form
                  if (!newLocationForm.city.trim()) {
                    alert('Please enter a city');
                    return;
                  }
                  if (!newLocationForm.state.trim()) {
                    alert('Please enter a state');
                    return;
                  }
                  if (!isValidStateCode(newLocationForm.state)) {
                    alert('Please enter a valid 2-letter state code (e.g., CA, NY, TX)');
                    return;
                  }
                  
                  // Call onLocationSelect with actual form data
                  const formData = {
                    city: newLocationForm.city.trim(),
                    state: newLocationForm.state.trim(),
                    zipCode: newLocationForm.zip.trim()
                  };
                  onLocationSelect(formData);
                  
                  // Reset form
                  setNewLocationForm({ city: '', state: '', zip: '' });
                }}
                variant="primary"
                size="sm"
                className="px-4 py-2"
              >
                Save
              </Button>
            </div>
          </div>
        </div>
      )}
      
      {/* State-organized Service Areas */}
      {stateNames.length > 0 ? (
        <div className="space-y-3">
          {stateNames.map((state) => {
            const stateLocations = locationsByState[state];
            const isExpanded = expandedStates.has(state);
            const locationCount = stateLocations?.length || 0;
            
            return (
              <div key={state} className="bg-stone-800 border border-stone-700 rounded-lg overflow-hidden">
                {/* State Header */}
                <button
                  onClick={() => { onToggleStateExpansion(state); }}
                  className="w-full px-6 py-4 flex items-center justify-between hover:bg-stone-700 transition-colors"
                >
                  <div className="flex items-center space-x-3">
                    {isExpanded ? (
                      <ChevronDown className="h-5 w-5 text-orange-500" />
                    ) : (
                      <ChevronRight className="h-5 w-5 text-orange-500" />
                    )}
                    <h4 className="text-lg font-semibold text-white">{state}</h4>
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                      {locationCount} {locationCount === 1 ? 'location' : 'locations'}
                    </span>
                  </div>
                </button>
                
                {/* State Locations */}
                {isExpanded && stateLocations && (
                  <div className="border-t border-stone-700">
                    <div className="p-6 space-y-4">
                      {stateLocations.map((location, index) => {
                        const locationId = `${location.city}-${location.state}`;
                        const isEditingThisLocation = editingLocationId === locationId;
                        
                        return (
                          <div key={`${location.city}-${location.state}-${(index + 1).toString()}`} className="bg-stone-700 border border-stone-600 rounded-lg p-4">
                            {isEditingThisLocation ? (
                              <div className="space-y-4">
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                  <div>
                                    <label htmlFor={`edit-city-${locationId}`} className="block text-sm font-medium text-gray-300 mb-1">City *</label>
                                    <input
                                      id={`edit-city-${locationId}`}
                                      type="text"
                                      value={location.city}
                                      onChange={(e) => { onLocationUpdate(locationId, 'city', e.target.value); }}
                                      className="w-full px-3 py-2 border border-stone-700 bg-stone-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                                      placeholder="Enter city name"
                                    />
                                  </div>
                                  <div>
                                    <label htmlFor={`edit-state-${locationId}`} className="block text-sm font-medium text-gray-300 mb-1">State *</label>
                                    <input
                                      id={`edit-state-${locationId}`}
                                      type="text"
                                      value={location.state}
                                      onChange={(e) => { handleStateChange(locationId, e.target.value); }}
                                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 ${
                                        errors[locationId]?.state ? 'border-red-500 bg-red-900/20' : 'border-stone-700 bg-stone-700'
                                      } text-white`}
                                      placeholder="CA, NY, TX"
                                      maxLength={2}
                                    />
                                    {errors[locationId]?.state && (
                                      <p className="mt-1 text-sm text-red-400">{errors[locationId].state}</p>
                                    )}
                                  </div>
                                  <div>
                                    <label htmlFor={`edit-zip-${locationId}`} className="block text-sm font-medium text-gray-300 mb-1">ZIP Code</label>
                                    <input
                                      id={`edit-zip-${locationId}`}
                                      type="text"
                                      value={location.zip || ''}
                                      onChange={(e) => { onLocationUpdate(locationId, 'zip', e.target.value); }}
                                      className="w-full px-3 py-2 border border-stone-700 bg-stone-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                                      placeholder="12345 or 12345-6789"
                                    />
                                  </div>
                                </div>
                                <div className="flex justify-end space-x-3">
                                  <Button
                                    onClick={onStopEditingLocation}
                                    variant="secondary"
                                    size="sm"
                                    className="px-4 py-2"
                                  >
                                    Cancel
                                  </Button>
                                  <Button
                                    onClick={() => { handleSave(locationId, location); }}
                                    variant="primary"
                                    size="sm"
                                    className="px-4 py-2"
                                  >
                                    Save
                                  </Button>
                                </div>
                              </div>
                            ) : (
                              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                                <div>
                                  <label htmlFor={`readonly-city-${locationId}`} className="block text-sm font-medium text-gray-300 mb-1">City</label>
                                  <input
                                    id={`readonly-city-${locationId}`}
                                    type="text"
                                    value={location.city}
                                    readOnly
                                    onClick={() => { onStartEditingLocation(locationId); }}
                                    className="w-full px-3 py-2 border border-stone-600 rounded-md bg-stone-600 text-white cursor-pointer hover:bg-stone-500 transition-colors"
                                    title="Click to edit location"
                                  />
                                </div>
                                <div>
                                  <label htmlFor={`readonly-state-${locationId}`} className="block text-sm font-medium text-gray-300 mb-1">State</label>
                                  <input
                                    id={`readonly-state-${locationId}`}
                                    type="text"
                                    value={location.state}
                                    readOnly
                                    onClick={() => { onStartEditingLocation(locationId); }}
                                    className="w-full px-3 py-2 border border-stone-600 rounded-md bg-stone-600 text-white cursor-pointer hover:bg-stone-500 transition-colors"
                                    title="Click to edit location"
                                  />
                                </div>
                                <div>
                                  <label htmlFor={`readonly-zip-${locationId}`} className="block text-sm font-medium text-gray-300 mb-1">ZIP Code</label>
                                  <input
                                    id={`readonly-zip-${locationId}`}
                                    type="text"
                                    value={location.zip || 'N/A'}
                                    readOnly
                                    onClick={() => { onStartEditingLocation(locationId); }}
                                    className="w-full px-3 py-2 border border-stone-600 rounded-md bg-stone-600 text-white cursor-pointer hover:bg-stone-500 transition-colors"
                                    title="Click to edit location"
                                  />
                                </div>
                                <div className="lg:col-span-2 flex items-end">
                                  <Button
                                    onClick={() => { onDeleteLocation(location); }}
                                    variant="ghost"
                                    size="sm"
                                    className="text-red-400 hover:text-red-300 hover:bg-red-900/20 p-2"
                                    title="Delete location"
                                  >
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                </div>
                              </div>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                )}
              </div>
            );
          })}
        </div>
      ) : (
        <div className="bg-stone-800 border border-stone-700 rounded-lg p-6 text-center">
          <MapPin className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-300 mb-2">No Service Areas</h3>
          <p className="text-gray-500">Add locations where you provide services to get started.</p>
        </div>
      )}
    </div>
  );
};

export default ServiceAreasList;


============================
FILE: frontend\src\features\tenantDashboard\tabs\locations\hooks\index.ts
============================
export { useGoogleMaps } from './useGoogleMaps';
export { useLocationsData } from './useLocationsData';
export { useLocationSearch } from './useLocationSearch';
export { useLocationState } from './useLocationState';


============================
FILE: frontend\src\features\tenantDashboard\tabs\locations\hooks\useGoogleMaps.ts
============================
import { useCallback, useEffect, useState } from 'react';

import { getGoogle, hasImportLibrary } from '@/shared';
import { config } from '@/shared/env';

export const useGoogleMaps = () => {
  const [apiLoaded, setApiLoaded] = useState(false);

  const checkAPIReady = useCallback(async (): Promise<void> => {
    try {
      if (!hasImportLibrary()) {
        setTimeout(() => { void checkAPIReady(); }, 250);
        return;
      }
      
      const g = getGoogle();
      if (!g?.maps.importLibrary) {
        setTimeout(() => { void checkAPIReady(); }, 250);
        return;
      }
      
      await g.maps.importLibrary('places');
      
      setApiLoaded(true);
    } catch (error: unknown) {
      const msg = error instanceof Error ? error.message : String(error);
      console.error('Google Maps API initialization error:', msg);
      setApiLoaded(false);
    }
  }, []);

  const loadGooglePlacesAPI = useCallback((): void => {
    const g = getGoogle();
    if (g?.maps) {
      setTimeout(() => { void checkAPIReady(); }, 300);
      return;
    }
    
    if (document.querySelector('script[src*="maps.googleapis.com"]')) {
      setTimeout(() => { void checkAPIReady(); }, 500);
      return;
    }
    
    const script = document.createElement('script');
    const apiKey = config.googleMapsApiKey;
    
    if (!apiKey) {
      console.error('Google Maps API key not found. Please set VITE_GOOGLE_MAPS_API_KEY in your .env file');
      setApiLoaded(false);
      return;
    }
    
    script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=beta&loading=async`;
    script.async = true;
    script.defer = true;
    script.onload = () => { void setTimeout(() => { void checkAPIReady(); }, 500); };
    script.onerror = (err: unknown) => {
      const msg = err instanceof Error ? err.message : String(err);
      console.error('Failed to load Google Maps JS API', msg);
      setApiLoaded(false);
    };
    document.head.appendChild(script);
  }, [checkAPIReady]);

  useEffect(() => {
    loadGooglePlacesAPI();
  }, [loadGooglePlacesAPI]);

  return { apiLoaded };
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\locations\hooks\useLocationSearch.ts
============================
import { type CSSProperties, useCallback, useRef, useState } from 'react';

import { type AutocompleteSessionToken, getGoogle } from '@/shared';

interface UseLocationSearchProps {
  apiLoaded: boolean;
}

interface LocationSearchState {
  input: string;
  originalInput: string;
  predictions: google.maps.places.AutocompleteSuggestion[];
  showPredictions: boolean;
  isLoading: boolean;
  dropdownStyle: CSSProperties;
}

export const useLocationSearch = ({ apiLoaded }: UseLocationSearchProps) => {
  const [state, setState] = useState<LocationSearchState>({
    input: '',
    originalInput: '',
    predictions: [],
    showPredictions: false,
    isLoading: false,
    dropdownStyle: {},
  });

  const inputRef = useRef<HTMLInputElement>(null);
  const predictionsRef = useRef<HTMLDivElement>(null);
  const sessionTokenRef = useRef<AutocompleteSessionToken | null>(null);

  const handleInputChange = useCallback(async (value: string) => {
    setState(prev => ({
      ...prev,
      input: value,
      originalInput: value,
    }));

    if (!value.trim()) {
      setState(prev => ({
        ...prev,
        predictions: [],
        showPredictions: false,
      }));
      sessionTokenRef.current = null;
      return;
    }

    if (!apiLoaded) {
      setState(prev => ({
        ...prev,
        predictions: [],
        showPredictions: false,
      }));
      return;
    }

    setState(prev => ({ ...prev, isLoading: true }));

    try {
      const g = getGoogle();
      if (!g?.maps.importLibrary) {
        throw new Error('Google Maps API not loaded');
      }
      const placesLib = (await g.maps.importLibrary('places')) as google.maps.PlacesLibrary;
      const { AutocompleteSuggestion, AutocompleteSessionToken } = placesLib;

      sessionTokenRef.current ??= new AutocompleteSessionToken();

      const request = {
        input: value,
        region: 'us',
        includedPrimaryTypes: ['locality', 'postal_code'],
        sessionToken: sessionTokenRef.current,
      };

      const { suggestions } = await AutocompleteSuggestion.fetchAutocompleteSuggestions(request);
      setState(prev => ({
        ...prev,
        predictions: suggestions,
        showPredictions: suggestions.length > 0,
      }));
    } catch (err: unknown) {
      const msg = err instanceof Error ? err.message : String(err);
      console.error('Error getting suggestions', msg);
      setState(prev => ({
        ...prev,
        predictions: [],
        showPredictions: false,
      }));
    } finally {
      setState(prev => ({ ...prev, isLoading: false }));
    }
  }, [apiLoaded]);

  const reset = useCallback(() => {
    setState({
      input: '',
      originalInput: '',
      predictions: [],
      showPredictions: false,
      isLoading: false,
      dropdownStyle: {},
    });
    sessionTokenRef.current = null;
  }, []);

  const setDropdownStyle = useCallback((style: CSSProperties) => {
    setState(prev => ({ ...prev, dropdownStyle: style }));
  }, []);

  return {
    ...state,
    inputRef,
    predictionsRef,
    sessionTokenRef,
    handleInputChange,
    reset,
    setDropdownStyle,
  };
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\locations\hooks\useLocationState.ts
============================
import { useCallback, useState } from 'react';

import type { ServiceArea } from '../types';

export const useLocationState = () => {
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [locationToDelete, setLocationToDelete] = useState<ServiceArea | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const [expandedStates, setExpandedStates] = useState<Set<string>>(new Set());
  const [editingLocationId, setEditingLocationId] = useState<string | null>(null);

  const toggleStateExpansion = useCallback((state: string) => {
    setExpandedStates(prev => {
      const newSet = new Set(prev);
      if (newSet.has(state)) {
        newSet.delete(state);
      } else {
        newSet.add(state);
      }
      return newSet;
    });
  }, []);

  const expandAllStates = useCallback((stateNames: string[]) => {
    setExpandedStates(new Set(stateNames));
  }, []);

  const collapseAllStates = useCallback(() => {
    setExpandedStates(new Set());
  }, []);

  const openDeleteModal = useCallback((location: ServiceArea) => {
    setLocationToDelete(location);
    setIsDeleteModalOpen(true);
  }, []);

  const closeDeleteModal = useCallback(() => {
    setIsDeleteModalOpen(false);
    setLocationToDelete(null);
  }, []);

  const startEditingLocation = useCallback((locationId: string) => {
    setEditingLocationId(locationId);
  }, []);

  const stopEditingLocation = useCallback(() => {
    setEditingLocationId(null);
  }, []);

  return {
    // Modal state
    isAddModalOpen,
    setIsAddModalOpen,
    isDeleteModalOpen,
    locationToDelete,
    isDeleting,
    setIsDeleting,
    openDeleteModal,
    closeDeleteModal,
    
    // State expansion
    expandedStates,
    toggleStateExpansion,
    expandAllStates,
    collapseAllStates,
    
    // Location editing
    editingLocationId,
    startEditingLocation,
    stopEditingLocation,
  };
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\locations\index.ts
============================
export * from './components/AddLocationModal';
export * from './components/DeleteLocationModal';
export * from './components/LocationCard';
export * from './hooks/useLocationsData';
export { default as LocationsTab } from './LocationsTab';
export * from './types';


============================
FILE: frontend\src\features\tenantDashboard\tabs\locations\LocationsTab.tsx
============================
import React, { useMemo, useState } from 'react';
import { AlertCircle } from 'lucide-react';

import type { DetailerData } from '@/features/tenantDashboard/types';

import { addServiceArea, deleteServiceArea,saveServiceAreas } from '../../api/locationsApi';
import { useTenantBusinessData } from '../../hooks/useTenantBusinessData';
import { AddLocationModal } from './components/AddLocationModal';
import { DeleteLocationModal } from './components/DeleteLocationModal';
import PrimaryServiceArea from './components/PrimaryServiceArea';
import ServiceAreasList from './components/ServiceAreasList';
import { useGoogleMaps } from './hooks/useGoogleMaps';
import { useLocationState } from './hooks/useLocationState';
import type { ServiceArea } from './types';

interface LocationsTabProps {
  detailerData?: DetailerData;
}

const LocationsTab: React.FC<LocationsTabProps> = () => {
  const { apiLoaded } = useGoogleMaps();
  
  const {
    primaryServiceArea,
    otherServiceAreas,
    loading,
    error,
    refetch
  } = useTenantBusinessData();

  const {
    isAddModalOpen,
    setIsAddModalOpen,
    isDeleteModalOpen,
    locationToDelete,
    isDeleting,
    setIsDeleting,
    openDeleteModal,
    closeDeleteModal,
    expandedStates,
    toggleStateExpansion,
    expandAllStates,
    collapseAllStates,
    editingLocationId,
    startEditingLocation,
    stopEditingLocation,
  } = useLocationState();

  // Primary service area edit state
  const [isPrimaryEditMode, setIsPrimaryEditMode] = useState(false);
  
  // Service area edit state
  const [isServiceAreaEditMode, setIsServiceAreaEditMode] = useState(false);
  

  // Group other service areas by state
  const locationsByState = useMemo(() => {
    const grouped: Record<string, ServiceArea[]> = {};
    
    otherServiceAreas.forEach(location => {
      const state = location.state.toUpperCase();
      if (state && !grouped[state]) {
        grouped[state] = [];
      }
      if (state && grouped[state]) {
        grouped[state].push(location);
      }
    });
    
    // Sort locations within each state by city
    Object.keys(grouped).forEach(state => {
      if (grouped[state]) {
        grouped[state].sort((a, b) => a.city.localeCompare(b.city));
      }
    });
    
    return grouped;
  }, [otherServiceAreas]);

  // Get sorted state names
  const stateNames = useMemo(() => {
    return Object.keys(locationsByState).sort();
  }, [locationsByState]);

  // Handle state expansion actions
  const handleToggleStateExpansion = (state: string) => {
    if (state === 'expand-all') {
      expandAllStates(stateNames);
    } else if (state === 'collapse-all') {
      collapseAllStates();
    } else {
      toggleStateExpansion(state);
    }
  };

  // Get current tenant slug (you'll need to get this from context/URL)
  const currentTenantSlug = 'jps'; // TODO: Get from tenant context

  // Helper function to update primary service area
  const updatePrimaryServiceAreaField = async (field: keyof ServiceArea, value: string | number) => {
    if (!primaryServiceArea) return;
    
    try {
      const updatedArea = { ...primaryServiceArea, [field]: value };
      const allServiceAreas = [updatedArea, ...otherServiceAreas];
      await saveServiceAreas(currentTenantSlug, allServiceAreas);
      
      // Refresh the data to show updated values
      refetch();
    } catch (error) {
      console.error('Error updating primary service area:', error);
      throw error;
    }
  };

  // Handle adding new location
  const handleAddLocation = async (locationData: { city: string; state: string; zip?: string; minimum: number; multiplier: number }) => {
    try {
      await addServiceArea(currentTenantSlug, locationData);
      setIsAddModalOpen(false);
      
      // Refresh the data to show new location
      refetch();
      return { success: true };
    } catch (error) {
      console.error('Error adding location:', error);
      throw error;
    }
  };

  // Handle deleting location
  const handleDeleteLocation = async () => {
    if (!locationToDelete) return;
    
    setIsDeleting(true);
    try {
      await deleteServiceArea(currentTenantSlug, locationToDelete.id);
      closeDeleteModal();
      
      // Refresh the data to show updated list
      refetch();
    } catch (error) {
      console.error('Error deleting location:', error);
      throw error;
    } finally {
      setIsDeleting(false);
    }
  };

  // Handle location update
  const handleLocationUpdate = async (locationId: string, field: keyof ServiceArea, value: string | number) => {
    try {
      const allServiceAreas = [...(primaryServiceArea ? [primaryServiceArea] : []), ...otherServiceAreas];
      const updatedAreas = allServiceAreas.map(area => 
        area.id === locationId ? { ...area, [field]: value } : area
      );
      await saveServiceAreas(currentTenantSlug, updatedAreas);
      
      // Refresh the data to show updated values
      refetch();
    } catch (error) {
      console.error('Error updating location:', error);
      throw error;
    }
  };

  // Handle location select for service areas
  const handleServiceAreaLocationSelect = async (place: { city: string; state: string; zipCode: string }) => {
    await handleAddLocation({
      city: place.city,
      state: place.state,
      zip: place.zipCode,
      minimum: 0,
      multiplier: 1,
    });
  };

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold text-white">Service Locations</h2>
            <p className="text-gray-400 mt-1">Manage the areas where you provide services</p>
          </div>
        </div>
        
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500"></div>
          <span className="ml-3 text-gray-400">Loading locations...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold text-white">Service Locations</h2>
            <p className="text-gray-400 mt-1">Manage the areas where you provide services</p>
          </div>
        </div>
        
        <div className="bg-red-900/20 border border-red-500/20 rounded-lg p-6">
          <div className="flex items-center space-x-3">
            <AlertCircle className="h-5 w-5 text-red-400 flex-shrink-0" />
            <div>
              <h3 className="text-sm font-medium text-red-300">Error Loading Locations</h3>
              <p className="text-sm text-red-400 mt-1">{error}</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Primary Service Area */}
      {primaryServiceArea && (
        <PrimaryServiceArea
          primaryServiceArea={primaryServiceArea}
          isEditMode={isPrimaryEditMode}
          onEditModeChange={setIsPrimaryEditMode}
          onLocationUpdate={(field, value) => { void updatePrimaryServiceAreaField(field, value); }}
          apiLoaded={apiLoaded}
        />
      )}

      {/* Service Areas */}
      <ServiceAreasList
        locationsByState={locationsByState}
        stateNames={stateNames}
        expandedStates={expandedStates}
        isEditMode={isServiceAreaEditMode}
        editingLocationId={editingLocationId}
        apiLoaded={apiLoaded}
        onToggleStateExpansion={handleToggleStateExpansion}
        onEditModeChange={setIsServiceAreaEditMode}
        onStartEditingLocation={startEditingLocation}
        onStopEditingLocation={stopEditingLocation}
        onLocationUpdate={(id, field, value) => { void handleLocationUpdate(id, field, value); }}
        onDeleteLocation={openDeleteModal}
        onLocationSelect={(place) => { void handleServiceAreaLocationSelect(place); }}
      />

      {/* Modals */}
      <AddLocationModal
        isOpen={isAddModalOpen}
        onClose={() => { setIsAddModalOpen(false); }}
        onAdd={handleAddLocation}
      />

      <DeleteLocationModal
        isOpen={isDeleteModalOpen}
        onClose={closeDeleteModal}
        onConfirm={handleDeleteLocation}
        location={locationToDelete}
        isDeleting={isDeleting}
      />
    </div>
  );
};

export default LocationsTab;


============================
FILE: frontend\src\features\tenantDashboard\tabs\locations\types\index.ts
============================
export interface ServiceArea {
  id?: string;
  city: string;
  state: string;
  zip: number | null;
  primary: boolean;
  minimum: number;
  multiplier: number;
}

export interface LocationData {
  service_areas: ServiceArea[];
  base_location?: {
    city: string;
    state: string;
    zip?: string;
  };
}

export interface LocationFormData {
  city: string;
  state: string;
  zip?: string;
  minimum: number;
  multiplier: number;
}

export interface LocationValidationErrors {
  city?: string;
  state?: string;
  zip?: string;
  minimum?: string;
  multiplier?: string;
  general?: string;
}


============================
FILE: frontend\src\features\tenantDashboard\tabs\overview\components\MetricsCards.tsx
============================
import React from 'react';
import { Calendar, DollarSign, Star,TrendingUp, Users } from 'lucide-react';

export const MetricsCards: React.FC = () => {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      <div className="bg-stone-800 p-6 rounded-xl border border-stone-700">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-gray-400 text-sm">Daily Revenue</p>
            <p className="text-2xl font-bold text-white">$485</p>
            <p className="text-green-400 text-sm flex items-center mt-1">
              <TrendingUp className="h-3 w-3 mr-1" />
              +12% from yesterday
            </p>
          </div>
          <DollarSign className="h-8 w-8 text-orange-500" />
        </div>
      </div>

      <div className="bg-stone-800 p-6 rounded-xl border border-stone-700">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-gray-400 text-sm">Today&rsquo;s Bookings</p>
            <p className="text-2xl font-bold text-white">8</p>
            <p className="text-blue-400 text-sm flex items-center mt-1">
              <Calendar className="h-3 w-3 mr-1" />
              3 confirmed, 5 pending
            </p>
          </div>
          <Calendar className="h-8 w-8 text-orange-500" />
        </div>
      </div>

      <div className="bg-stone-800 p-6 rounded-xl border border-stone-700">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-gray-400 text-sm">New Customers</p>
            <p className="text-2xl font-bold text-white">12</p>
            <p className="text-green-400 text-sm flex items-center mt-1">
              <Users className="h-3 w-3 mr-1" />
              This month
            </p>
          </div>
          <Users className="h-8 w-8 text-orange-500" />
        </div>
      </div>

      <div className="bg-stone-800 p-6 rounded-xl border border-stone-700">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-gray-400 text-sm">Average Rating</p>
            <p className="text-2xl font-bold text-white">4.9</p>
            <p className="text-yellow-400 text-sm flex items-center mt-1">
              <Star className="h-3 w-3 mr-1" />
              Based on 89 reviews
            </p>
          </div>
          <Star className="h-8 w-8 text-orange-500" />
        </div>
      </div>
    </div>
  );
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\overview\components\NotificationPanel.tsx
============================
import React from 'react';
import { AlertCircle } from 'lucide-react';

import { useNotifications } from '../hooks/useNotifications';

export const NotificationPanel: React.FC = () => {
  const { notifications } = useNotifications();

  return (
    <div className="bg-stone-800 rounded-xl border border-stone-700 p-6">
      <div className="flex items-center mb-4">
        <AlertCircle className="h-5 w-5 text-orange-500 mr-2" />
        <h3 className="text-lg font-semibold text-white">Notifications</h3>
      </div>
      <div className="space-y-3">
        {notifications.map((notification) => (
          <div key={notification.id} className={`flex items-center p-3 rounded-lg border ${
            notification.type === 'info' ? 'bg-blue-900/30 border-blue-800' :
            notification.type === 'success' ? 'bg-green-900/30 border-green-800' :
            'bg-yellow-900/30 border-yellow-800'
          }`}>
            <div className={`h-2 w-2 rounded-full mr-3 ${
              notification.type === 'info' ? 'bg-blue-400' :
              notification.type === 'success' ? 'bg-green-400' :
              'bg-yellow-400'
            }`}></div>
            <p className="text-gray-300 text-sm">{notification.message}</p>
            <span className="ml-auto text-gray-400 text-xs">{notification.time}</span>
          </div>
        ))}
      </div>
    </div>
  );
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\overview\components\QuickActions.tsx
============================
import React from 'react';

export const QuickActions: React.FC = () => {
  // No quick actions for now - users can add their own shortcuts
  return null;
};

export default QuickActions;


============================
FILE: frontend\src\features\tenantDashboard\tabs\overview\components\RecentAppointments.tsx
============================
import React from 'react';

import { Button } from '@/shared/ui';

import { useRecentAppointments } from '../hooks/useRecentAppointments';
import { getStatusColor } from '../utils/getStatusColor';

export const RecentAppointments: React.FC = () => {
  const { appointments } = useRecentAppointments();

  return (
    <div className="lg:col-span-2 bg-stone-800 rounded-xl border border-stone-700 p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-xl font-semibold text-white">Upcoming Appointments</h3>
        <Button 
          variant="primary"
          size="sm"
          className="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-lg font-medium"
        >
          View All
        </Button>
      </div>
      <div className="space-y-4">
        {appointments.map((appointment) => (
          <div key={appointment.id} className="flex items-center justify-between p-4 bg-stone-700 rounded-lg border border-stone-600">
            <div className="flex items-center space-x-4">
              <div className="h-10 w-10 bg-orange-500 rounded-full flex items-center justify-center">
                <span className="text-white font-medium text-sm">
                  {appointment.customer.split(' ').map(n => n[0]).join('')}
                </span>
              </div>
              <div>
                <p className="font-medium text-white">{appointment.customer}</p>
                <p className="text-gray-300 text-sm">{appointment.service}</p>
              </div>
            </div>
            <div className="text-right">
              <p className="text-gray-300 text-sm">{appointment.date}</p>
              <p className="text-white font-medium">{appointment.time}</p>
              <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(appointment.status)}`}>
                {appointment.status}
              </span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\overview\components\RecentReviews.tsx
============================
import React from 'react';
import { Star } from 'lucide-react';

import { useRecentReviews } from '../hooks/useRecentReviews';

export const RecentReviews: React.FC = () => {
  const { reviews } = useRecentReviews();

  return (
    <div className="bg-stone-800 rounded-xl border border-stone-700 p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-xl font-semibold text-white">Recent Reviews</h3>
        <Star className="h-5 w-5 text-yellow-400" />
      </div>
      <div className="space-y-4">
        {reviews.map((review) => (
          <div key={review.id} className="p-4 bg-stone-700 rounded-lg border border-stone-600">
            <div className="flex items-center justify-between mb-2">
              <p className="font-medium text-white text-sm">{review.customer}</p>
              <div className="flex items-center">
                {Array.from({ length: review.rating }).map((_, i) => (
                  <Star key={i} className="h-3 w-3 text-yellow-400 fill-current" />
                ))}
              </div>
            </div>
            <p className="text-gray-300 text-xs mb-2">{review.comment}</p>
            <p className="text-gray-400 text-xs">{review.date}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\overview\hooks\useDashboardStats.ts
============================


============================
FILE: frontend\src\features\tenantDashboard\tabs\overview\hooks\useNotifications.ts
============================
import { useEffect,useState } from 'react';

interface Notification {
  id: number;
  type: 'info' | 'success' | 'warning';
  message: string;
  time: string;
}

export const useNotifications = () => {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Simulate API call
    const fetchNotifications = (): void => {
      setLoading(true);
      // Mock data - replace with actual API call
      const mockNotifications: Notification[] = [
        { id: 1, type: 'info', message: "New appointment request from Emma Wilson", time: "5 min ago" },
        { id: 2, type: 'success', message: "Payment received: $150 from John Smith", time: "1 hour ago" },
        { id: 3, type: 'warning', message: "Reminder: Restock ceramic coating supplies", time: "2 hours ago" },
      ];
      
      setTimeout(() => {
        setNotifications(mockNotifications);
        setLoading(false);
      }, 500);
    };

    fetchNotifications();
  }, []);

  return { notifications, loading };
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\overview\hooks\useRecentAppointments.ts
============================
import { useEffect,useState } from 'react';

interface Appointment {
  id: number;
  customer: string;
  service: string;
  time: string;
  date: string;
  status: 'confirmed' | 'pending';
}

export const useRecentAppointments = () => {
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Simulate API call
    const fetchAppointments = (): void => {
      setLoading(true);
      // Mock data - replace with actual API call
      const mockAppointments: Appointment[] = [
        { id: 1, customer: "John Smith", service: "Premium Wash", time: "2:00 PM", date: "Today", status: "confirmed" },
        { id: 2, customer: "Sarah Johnson", service: "Ceramic Coating", time: "4:30 PM", date: "Today", status: "confirmed" },
        { id: 3, customer: "Mike Davis", service: "Paint Correction", time: "10:00 AM", date: "Tomorrow", status: "pending" },
        { id: 4, customer: "Lisa Chen", service: "Interior Detail", time: "1:00 PM", date: "Tomorrow", status: "confirmed" },
      ];
      
      setTimeout(() => {
        setAppointments(mockAppointments);
        setLoading(false);
      }, 500);
    };

    fetchAppointments();
  }, []);

  return { appointments, loading };
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\overview\hooks\useRecentReviews.ts
============================
import { useEffect,useState } from 'react';

interface Review {
  id: number;
  customer: string;
  rating: number;
  comment: string;
  date: string;
}

export const useRecentReviews = () => {
  const [reviews, setReviews] = useState<Review[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Simulate API call
    const fetchReviews = () => {
      setLoading(true);
      // Mock data - replace with actual API call
      const mockReviews: Review[] = [
        { id: 1, customer: "Robert Wilson", rating: 5, comment: "Amazing work! My car looks brand new.", date: "2 days ago" },
        { id: 2, customer: "Jennifer Taylor", rating: 5, comment: "Professional service and attention to detail.", date: "3 days ago" },
        { id: 3, customer: "David Brown", rating: 4, comment: "Great job, very satisfied with the results.", date: "1 week ago" },
      ];
      
      setTimeout(() => {
        setReviews(mockReviews);
        setLoading(false);
      }, 500);
    };

    fetchReviews();
  }, []);

  return { reviews, loading };
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\overview\index.ts
============================
export * from './components/MetricsCards';
export * from './components/NotificationPanel';
export * from './components/RecentAppointments';
export * from './components/RecentReviews';
export * from './hooks/useNotifications';
export * from './hooks/useRecentAppointments';
export * from './hooks/useRecentReviews';
export { default as OverviewTab } from './OverviewTab';

============================
FILE: frontend\src\features\tenantDashboard\tabs\overview\OverviewTab.tsx
============================
import React from 'react';

import { QuickActions } from './components/QuickActions';

export const OverviewTab: React.FC = () => {
  return (
    <div className="space-y-6">
      <QuickActions />
    </div>
  );
};

export default OverviewTab;

============================
FILE: frontend\src\features\tenantDashboard\tabs\overview\utils\getStatusColor.ts
============================
export const getStatusColor = (status: string) => {
  switch (status) {
    case 'confirmed': return 'bg-green-900 text-green-300';
    case 'pending': return 'bg-yellow-900 text-yellow-300';
    case 'cancelled': return 'bg-red-900 text-red-300';
    default: return 'bg-gray-700 text-gray-300';
  }
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\performance\index.ts
============================
export { default as PerformanceTab } from "./PerformanceTab";


============================
FILE: frontend\src\features\tenantDashboard\tabs\performance\PerformanceTab.tsx
============================
import React from "react";
const PerformanceTab: React.FC = () => <div>Performance Tab (placeholder)</div>;
export default PerformanceTab;


============================
FILE: frontend\src\features\tenantDashboard\tabs\profile\components\AutoSaveField.tsx
============================
import React from 'react';

import { AutoSaveInput } from '@/shared/ui';
import { formatPhoneNumber } from '@/shared/utils';

import { useAutoSaveField } from '../hooks/useAutoSaveField';
import type { BusinessData } from '../types';

interface AutoSaveFieldProps {
  field: keyof BusinessData;
  label: string;
  type?: 'text' | 'email' | 'tel' | 'url' | 'date';
  placeholder?: string;
  className?: string;
  debounce?: number;
  disabled?: boolean;
}

/**
 * Auto-save field component for tenant dashboard forms
 * Uses shared AutoSaveInput component with feature-specific auto-save logic
 */
export const AutoSaveField: React.FC<AutoSaveFieldProps> = ({
  field,
  label,
  type = 'text',
  placeholder,
  className = '',
  debounce = 1000,
}) => {
  const { value, setValue, isSaving, error } = useAutoSaveField({ 
    field, 
    debounce 
  });

  const handleChange = (newValue: string) => {
    // Apply phone formatting for phone fields
    if (type === 'tel' && (field === 'personal_phone' || field === 'business_phone')) {
      const formatted = formatPhoneNumber(newValue);
      setValue(formatted);
    } else if (type === 'tel' && field === 'twilio_phone') {
      // For Twilio phone, we need to import the formatTwilioPhone function
      // For now, just set the value as-is and let the hook handle formatting
      setValue(newValue);
    } else {
      setValue(newValue);
    }
  };

  return (
    <AutoSaveInput
      label={label}
      type={type}
      value={value}
      onChange={handleChange}
      isSaving={isSaving}
      error={error}
      placeholder={placeholder}
      className={className}
    />
  );
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\profile\components\ProfileForm.tsx
============================
import React, { useState, useEffect } from 'react';
import { Building2, Link, User } from 'lucide-react';

import { AutoSaveField } from './AutoSaveField';
import { useProfileData } from '../hooks/useProfileData';

const ProfileForm: React.FC = () => {
  const { businessData, updateBusiness, isUpdating } = useProfileData();
  
  const handleSocialMediaToggle = async (platform: string, enabled: boolean) => {
    const fieldName = `${platform}_enabled` as keyof BusinessData;
    await updateBusiness({ [fieldName]: enabled });
  };

  return (
    <div className="space-y-8">
      {/* Business Information Section */}
      <div className="bg-stone-800 border border-stone-700 rounded-lg p-6">
        <div className="flex items-center space-x-3 mb-6">
          <Building2 className="h-6 w-6 text-orange-500" />
          <h3 className="text-lg font-semibold text-white">Business Information</h3>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <AutoSaveField
            field="business_name"
            label="Business Name"
            placeholder="Enter your business name"
          />
          <AutoSaveField
            field="business_email"
            label="Business Email"
            type="email"
            placeholder="Enter your business email"
          />
          <AutoSaveField
            field="business_phone"
            label="Business Phone"
            type="tel"
            placeholder="(###) ###-####"
          />
          <AutoSaveField
            field="twilio_phone"
            label="Twilio Phone (SMS)"
            type="tel"
            placeholder="+1 (###) ###-####"
          />
          <div className="md:col-span-2">
            <AutoSaveField
              field="business_start_date"
              label="Business Start Date"
              type="date"
            />
          </div>
        </div>
      </div>

      {/* Personal Information Section */}
      <div className="bg-stone-800 border border-stone-700 rounded-lg p-6">
        <div className="flex items-center space-x-3 mb-6">
          <User className="h-6 w-6 text-orange-500" />
          <h3 className="text-lg font-semibold text-white">Personal Information</h3>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <AutoSaveField
            field="first_name"
            label="First Name"
            placeholder="Enter your first name"
          />
          <AutoSaveField
            field="last_name"
            label="Last Name"
            placeholder="Enter your last name"
          />
          <AutoSaveField
            field="personal_phone"
            label="Personal Phone"
            type="tel"
            placeholder="(###) ###-####"
          />
          <AutoSaveField
            field="personal_email"
            label="Personal Email"
            type="email"
            placeholder="Enter your personal email"
          />
        </div>
      </div>

      {/* URLs Section */}
      <div className="bg-stone-800 border border-stone-700 rounded-lg p-6">
        <div className="flex items-center space-x-3 mb-6">
          <Link className="h-6 w-6 text-orange-500" />
          <h3 className="text-lg font-semibold text-white">URLs & Social Media</h3>
        </div>
        
        <div className="space-y-6">
          {/* Website URL is auto-generated and read-only */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Website URL (Auto-generated)
            </label>
            <div className="px-3 py-2 bg-stone-700 border border-stone-600 rounded-md text-gray-400 cursor-not-allowed">
              http://{businessData?.slug || 'your-slug'}.thatsmartsite.com
            </div>
            <p className="text-xs text-gray-500">
              This URL is automatically generated based on your business slug and cannot be changed.
            </p>
          </div>
          
          <AutoSaveField
            field="gbp_url"
            label="Google Business Profile URL"
            type="url"
            placeholder="https://business.google.com/your-business"
          />
          <div className="space-y-6">
            <div className="flex items-end space-x-4">
              <div className="flex-1">
                <AutoSaveField
                  field="facebook_url"
                  label="Facebook URL"
                  type="url"
                  placeholder="https://facebook.com/yourpage"
                    disabled={!businessData?.facebook_enabled}
                />
              </div>
              <div className="flex items-center space-x-2 pb-2">
                <input
                  type="checkbox"
                  id="facebook_enabled"
                    checked={businessData?.facebook_enabled ?? true}
                  onChange={(e) => handleSocialMediaToggle('facebook', e.target.checked)}
                  disabled={isUpdating}
                  className="h-4 w-4 text-orange-500 focus:ring-orange-500 border-gray-300 rounded disabled:opacity-50"
                />
                <label htmlFor="facebook_enabled" className="text-sm font-medium text-gray-300">
                  Enable
                </label>
              </div>
            </div>
            
            <div className="flex items-end space-x-4">
              <div className="flex-1">
                <AutoSaveField
                  field="youtube_url"
                  label="YouTube URL"
                  type="url"
                  placeholder="https://youtube.com/@yourchannel"
                    disabled={!businessData?.youtube_enabled}
                />
              </div>
              <div className="flex items-center space-x-2 pb-2">
                <input
                  type="checkbox"
                  id="youtube_enabled"
                    checked={businessData?.youtube_enabled ?? true}
                  onChange={(e) => handleSocialMediaToggle('youtube', e.target.checked)}
                  disabled={isUpdating}
                  className="h-4 w-4 text-orange-500 focus:ring-orange-500 border-gray-300 rounded disabled:opacity-50"
                />
                <label htmlFor="youtube_enabled" className="text-sm font-medium text-gray-300">
                  Enable
                </label>
              </div>
            </div>
            
            <div className="flex items-end space-x-4">
              <div className="flex-1">
                <AutoSaveField
                  field="tiktok_url"
                  label="TikTok URL"
                  type="url"
                  placeholder="https://tiktok.com/@yourusername"
                    disabled={!businessData?.tiktok_enabled}
                />
              </div>
              <div className="flex items-center space-x-2 pb-2">
                <input
                  type="checkbox"
                  id="tiktok_enabled"
                    checked={businessData?.tiktok_enabled ?? true}
                  onChange={(e) => handleSocialMediaToggle('tiktok', e.target.checked)}
                  disabled={isUpdating}
                  className="h-4 w-4 text-orange-500 focus:ring-orange-500 border-gray-300 rounded disabled:opacity-50"
                />
                <label htmlFor="tiktok_enabled" className="text-sm font-medium text-gray-300">
                  Enable
                </label>
              </div>
            </div>
            
            <div className="flex items-end space-x-4">
              <div className="flex-1">
                <AutoSaveField
                  field="instagram_url"
                  label="Instagram URL"
                  type="url"
                  placeholder="https://instagram.com/yourusername"
                    disabled={!businessData?.instagram_enabled}
                />
              </div>
              <div className="flex items-center space-x-2 pb-2">
                <input
                  type="checkbox"
                  id="instagram_enabled"
                    checked={businessData?.instagram_enabled ?? true}
                  onChange={(e) => handleSocialMediaToggle('instagram', e.target.checked)}
                  disabled={isUpdating}
                  className="h-4 w-4 text-orange-500 focus:ring-orange-500 border-gray-300 rounded disabled:opacity-50"
                />
                <label htmlFor="instagram_enabled" className="text-sm font-medium text-gray-300">
                  Enable
                </label>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export { ProfileForm };

============================
FILE: frontend\src\features\tenantDashboard\tabs\profile\components\SocialMediaUrlField.tsx
============================
import React from 'react';

import { AutoSaveInput } from '@/shared/ui';

import { useSocialMediaUrl } from '../hooks/useSocialMediaUrl';

interface SocialMediaUrlFieldProps {
  platform: 'facebook' | 'instagram' | 'tiktok' | 'youtube';
  label: string;
  placeholder?: string;
  disabled?: boolean;
  debounce?: number;
}

/**
 * Auto-save field component for social media URLs
 * Uses the same pattern as AutoSaveField but updates the social_media JSONB field
 */
export const SocialMediaUrlField: React.FC<SocialMediaUrlFieldProps> = ({
  platform,
  label,
  placeholder,
  disabled = false,
  debounce = 1000,
}) => {
  const { value, setValue, isSaving, error } = useSocialMediaUrl({ 
    platform, 
    debounce 
  });

  const handleChange = (newValue: string) => {
    setValue(newValue);
  };

  return (
    <div className="space-y-2">
      <label className="block text-sm font-medium text-gray-300">
        {label}
      </label>
      <AutoSaveInput
        type="url"
        value={value}
        onChange={handleChange}
        isSaving={isSaving}
        error={error}
        placeholder={placeholder}
        disabled={disabled}
        className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent disabled:opacity-50 disabled:cursor-not-allowed"
      />
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\profile\hooks\useAutoSaveField.ts
============================
import { useEffect, useState } from 'react';
import { formatPhoneNumber, getPhoneDigits } from '@/shared/utils';
import { useAutoSave } from '@/shared/hooks/useAutoSave';

import type { BusinessData } from '../types';
import { useProfileData } from './useProfileData';

// Format Twilio phone number (keeps +1 prefix)
const formatTwilioPhone = (input: string): string => {
  if (!input) return '';
  
  // Remove all non-digit characters except +
  const cleaned = input.replace(/[^\d+]/g, '');
  
  // If it starts with +1, keep it
  if (cleaned.startsWith('+1') && cleaned.length === 12) {
    const digits = cleaned.slice(2); // Remove +1
    return `+1 (${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;
  }
  
  // If it's 10 digits, add +1
  if (cleaned.length === 10) {
    return `+1 (${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;
  }
  
  // If it's 11 digits starting with 1, add +
  if (cleaned.length === 11 && cleaned.startsWith('1')) {
    const digits = cleaned.slice(1);
    return `+1 (${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;
  }
  
  return cleaned; // Return as-is if doesn't match expected patterns
};

// Get Twilio phone digits (keeps +1 prefix)
const getTwilioPhoneDigits = (input: string): string => {
  if (!input) return '';
  
  // Remove all non-digit characters except +
  const cleaned = input.replace(/[^\d+]/g, '');
  
  // If it starts with +1, keep it
  if (cleaned.startsWith('+1') && cleaned.length === 12) {
    return cleaned;
  }
  
  // If it's 10 digits, add +1
  if (cleaned.length === 10) {
    return `+1${cleaned}`;
  }
  
  // If it's 11 digits starting with 1, add +
  if (cleaned.length === 11 && cleaned.startsWith('1')) {
    return `+${cleaned}`;
  }
  
  return cleaned;
};

interface UseAutoSaveFieldOptions {
  debounce?: number;
  field: keyof BusinessData;
}

export function useAutoSaveField(options: UseAutoSaveFieldOptions) {
  const { debounce = 1000, field } = options;
  const { updateBusiness, businessData } = useProfileData();
  
  // Get the current value for this field (reactive to businessData changes)
  const getCurrentValue = (): string => {
    if (!businessData) return '';
    
    switch (field) {
      case 'personal_phone':
      case 'business_phone':
        return businessData[field] ? formatPhoneNumber(businessData[field]) : '';
      case 'twilio_phone':
        return businessData[field] ? formatTwilioPhone(businessData[field]) : '';
      case 'business_start_date':
        return businessData[field] ? 
          new Date(businessData[field]).toISOString().split('T')[0] : '';
      default: {
        const value = businessData[field] as string | number | unknown[] | null | undefined;
        if (value === null || value === undefined || value === 'null' || value === '') {
          return '';
        }
        return typeof value === 'string' ? value : String(value);
      }
    }
  };

  // Create a reactive value that updates when businessData changes
  const [currentValue, setCurrentValue] = useState(() => getCurrentValue());
  
  useEffect(() => {
    setCurrentValue(getCurrentValue());
  }, [businessData, field]);

  const saveField = async (value: string) => {
    if (!businessData) return;
    
    // For phone fields, strip formatting before saving to database
    let saveValue = value;
    if (field === 'personal_phone' || field === 'business_phone') {
      saveValue = getPhoneDigits(value);
    } else if (field === 'twilio_phone') {
      saveValue = getTwilioPhoneDigits(value);
    }
    
    // Create a partial update object with just this field
    const updateData = { [field]: saveValue };
    
    const success = await updateBusiness(updateData);
    if (!success) {
      throw new Error(`Failed to save ${field}`);
    }
  };

  return useAutoSave(currentValue, saveField, { debounce });
}


============================
FILE: frontend\src\features\tenantDashboard\tabs\profile\hooks\useProfileData.ts
============================
import { useEffect, useState } from 'react';

import { config } from '@/../config/env';
import { useTenantSlug } from '@/shared/hooks/useTenantSlug';

interface BusinessData {
  id: string;
  slug: string;
  business_name: string;
  owner: string;
  business_email: string;
  business_phone: string;
  personal_email?: string;
  personal_phone?: string;
  first_name?: string;
  last_name?: string;
  twilio_phone?: string;
  business_start_date?: string;
  website?: string;
  gbp_url?: string;
  facebook_url?: string;
  youtube_url?: string;
  tiktok_url?: string;
  instagram_url?: string;
  created_at: string;
  updated_at: string;
}

interface UseProfileDataReturn {
  businessData: BusinessData | null;
  loading: boolean;
  error: string | null;
  updateBusiness: (data: Partial<BusinessData>) => Promise<boolean>;
  isUpdating: boolean;
}

export const useProfileData = (): UseProfileDataReturn => {
  const [businessData, setBusinessData] = useState<BusinessData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isUpdating, setIsUpdating] = useState(false);
  
  const slug = useTenantSlug();

  // Fetch business data
  useEffect(() => {
    const fetchBusinessData = async () => {
      if (!slug) {
        setError('Business slug is required');
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        setError(null);

        const response = await fetch(`${config.apiUrl}/api/tenants/${slug}`);
        
        if (!response.ok) {
          if (response.status === 404) {
            throw new Error('Business not found');
          }
          throw new Error(`Failed to fetch business data: ${response.statusText}`);
        }

        const result = await response.json() as { data?: BusinessData };
        const data = result.data;
        
        if (!data) {
          throw new Error('No business data received');
        }
        
        setBusinessData(data);
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : 'Failed to fetch business data';
        setError(errorMessage);
        console.error('Error fetching business data:', err);
      } finally {
        setLoading(false);
      }
    };

    void fetchBusinessData();
  }, [slug]);

  // Update business data
  const updateBusiness = async (data: Partial<BusinessData>): Promise<boolean> => {
    if (!slug) {
      setError('Business slug is required');
      return false;
    }

    try {
      setIsUpdating(true);
      setError(null);

      // Only send the fields that have values (not empty strings or undefined)
      const updateData: Partial<BusinessData> = {};
      
      if (data.first_name !== undefined) updateData.first_name = data.first_name;
      if (data.last_name !== undefined) updateData.last_name = data.last_name;
      if (data.personal_phone !== undefined) updateData.personal_phone = data.personal_phone;
      if (data.personal_email !== undefined) updateData.personal_email = data.personal_email;
      if (data.business_name !== undefined) updateData.business_name = data.business_name;
      if (data.business_email !== undefined) updateData.business_email = data.business_email;
      if (data.business_phone !== undefined) updateData.business_phone = data.business_phone;
      if (data.twilio_phone !== undefined) updateData.twilio_phone = data.twilio_phone;
      if (data.business_start_date !== undefined) updateData.business_start_date = data.business_start_date;
      if (data.website !== undefined) updateData.website = data.website;
      if (data.gbp_url !== undefined) updateData.gbp_url = data.gbp_url;
      if (data.facebook_url !== undefined) updateData.facebook_url = data.facebook_url;
      if (data.facebook_enabled !== undefined) updateData.facebook_enabled = data.facebook_enabled;
      if (data.youtube_url !== undefined) updateData.youtube_url = data.youtube_url;
      if (data.youtube_enabled !== undefined) updateData.youtube_enabled = data.youtube_enabled;
      if (data.tiktok_url !== undefined) updateData.tiktok_url = data.tiktok_url;
      if (data.tiktok_enabled !== undefined) updateData.tiktok_enabled = data.tiktok_enabled;
      if (data.instagram_url !== undefined) updateData.instagram_url = data.instagram_url;
      if (data.instagram_enabled !== undefined) updateData.instagram_enabled = data.instagram_enabled;


      const response = await fetch(`${config.apiUrl}/api/tenants/${slug}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updateData),
      });

      if (!response.ok) {
        throw new Error(`Failed to update business data: ${response.statusText}`);
      }

      const result = await response.json() as { data?: BusinessData };
      const updatedData = result.data;
      
      // Always update local state with the specific field that was changed
      setBusinessData(prev => ({ ...prev, ...updateData }));
      
      return true;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to update business data';
      setError(errorMessage);
      console.error('Error updating business data:', err);
      return false;
    } finally {
      setIsUpdating(false);
    }
  };

  return {
    businessData,
    loading,
    error,
    updateBusiness,
    isUpdating,
  };
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\profile\index.ts
============================
export { default as ProfileTab } from "./ProfileTab";

============================
FILE: frontend\src\features\tenantDashboard\tabs\profile\ProfileTab.tsx
============================
import React from 'react';
import { AlertCircle } from 'lucide-react';

import { ProfileForm } from './components/ProfileForm';
import { useProfileData } from './hooks/useProfileData';

const ProfileTab: React.FC = () => {
  const {
    businessData,
    loading,
    error,
    updateBusiness,
    isUpdating,
  } = useProfileData();

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500"></div>
        <span className="ml-3 text-gray-600">Loading business profile...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-6">
        <div className="flex items-center space-x-3">
          <AlertCircle className="h-5 w-5 text-red-500 flex-shrink-0" />
          <div>
            <h3 className="text-sm font-medium text-red-800">Unable to Load Business Profile</h3>
            <p className="text-sm text-red-600 mt-1">{error}</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <ProfileForm />
    </div>
  );
};

export default ProfileTab;

============================
FILE: frontend\src\features\tenantDashboard\tabs\profile\types\index.ts
============================
export interface BusinessData {
  id: number;
  slug: string;
  business_name: string;
  owner: string;
  first_name: string;
  last_name: string;
  user_id: number;
  application_status: string;
  business_start_date: string;
  business_phone: string;
  personal_phone: string;
  business_email: string;
  personal_email: string;
  twilio_phone: string;
  sms_phone: string;
  website: string; // Database column is 'website', not 'website_url'
  gbp_url: string;
  facebook_url: string;
  facebook_enabled: boolean;
  instagram_url: string;
  instagram_enabled: boolean;
  tiktok_url: string;
  tiktok_enabled: boolean;
  youtube_url: string;
  youtube_enabled: boolean;
  source: string;
  notes: string;
  service_areas: Array<{ city: string; state: string; zip?: string }>;
  application_date: string;
  approved_date: string;
  last_activity: string;
  created_at: string;
  updated_at: string;
}

export interface ProfileFormProps {
  businessData: BusinessData | null;
  onUpdate: (data: Partial<BusinessData>) => Promise<boolean>;
  isUpdating: boolean;
}

export interface UseProfileDataReturn {
  businessData: BusinessData | null;
  loading: boolean;
  error: string | null;
  updateBusiness: (data: Partial<BusinessData>) => Promise<boolean>;
  isUpdating: boolean;
}

============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\api\appointments.ts
============================
import { config } from '@/shared/env';

import type {
  Appointment,
  CreateAppointmentRequest,
  UpdateAppointmentRequest,
} from '../types';

const API_BASE = `${config.apiUrl || ''}/api/schedule`;

// Generic API request function
async function makeRequest<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
  const url = `${API_BASE}${endpoint}`;
  const token = localStorage.getItem('token');
  
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => { 
      controller.abort(); 
    }, 10000); // 10 second timeout
    
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...(token && { 'Authorization': `Bearer ${token}` }),
        ...options.headers,
      },
      signal: controller.signal,
    });
    
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: 'Request failed' })) as { error?: string };
      throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
    }
    
    return await response.json() as T;
  } catch (error) {
    if (error instanceof Error && error.name === 'AbortError') {
      throw new Error('Request timeout');
    }
    
    console.error('API request failed:', error);
    throw error;
  }
}

// Get appointments for a specific date range
export const getAppointments = async (
  startDate: string,
  endDate: string
): Promise<Appointment[]> => {
  const params = new URLSearchParams({ startDate, endDate });
  return makeRequest<Appointment[]>(`/appointments?${params}`);
};

// Get appointments for a specific date
export const getAppointmentsByDate = async (date: string): Promise<Appointment[]> => {
  return makeRequest<Appointment[]>(`/appointments/date/${date}`);
};

// Get a single appointment by ID
export const getAppointment = async (id: number): Promise<Appointment> => {
  return makeRequest<Appointment>(`/appointments/${id}`);
};

// Create a new appointment
export const createAppointment = async (
  data: CreateAppointmentRequest
): Promise<Appointment> => {
  return makeRequest<Appointment>('/appointments', {
    method: 'POST',
    body: JSON.stringify(data),
  });
};

// Update an existing appointment
export const updateAppointment = async (
  id: number,
  data: UpdateAppointmentRequest
): Promise<Appointment> => {
  return makeRequest<Appointment>(`/appointments/${id}`, {
    method: 'PUT',
    body: JSON.stringify(data),
  });
};

// Delete an appointment
export const deleteAppointment = async (id: number): Promise<void> => {
  await makeRequest<{ message?: string }>(`/appointments/${id}`, {
    method: 'DELETE',
  });
};

// Update appointment status
export const updateAppointmentStatus = async (
  id: number,
  status: string
): Promise<Appointment> => {
  return makeRequest<Appointment>(`/appointments/${id}/status`, {
    method: 'PATCH',
    body: JSON.stringify({ status }),
  });
};

// Get available time slots for a specific date
export const getAvailableTimeSlots = async (
  date: string,
  duration: number = 60
): Promise<string[]> => {
  const params = new URLSearchParams({ date, duration: duration.toString() });
  return makeRequest<string[]>(`/appointments/available-slots?${params}`);
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\api\blockedDays.ts
============================
const API_BASE = '/api/schedule';

// Helper function to make authenticated requests
const makeRequest = async <T = unknown>(endpoint: string, options: RequestInit = {}): Promise<T> => {
  const token = localStorage.getItem('token');
  
  const response = await fetch(`${API_BASE}${endpoint}`, {
    ...options,
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`,
      ...options.headers,
    },
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({})) as { error?: string };
    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
  }

  return response.json() as Promise<T>;
};

export interface BlockedDay {
  blocked_date: string;
  reason?: string;
  is_recurring?: boolean;
  recurrence_pattern?: string;
  recurrence_end_date?: string;
}

export interface ToggleBlockedDayResponse {
  action: 'added' | 'removed';
  date: string;
  reason?: string;
  message: string;
}

// Get blocked days for a date range
export const getBlockedDays = async (startDate: string, endDate: string): Promise<BlockedDay[]> => {
  const params = new URLSearchParams({
    startDate,
    endDate,
  });
  
  return makeRequest<BlockedDay[]>(`/blocked-days?${params}`);
};

// Toggle blocked day (add if not exists, remove if exists)
export const toggleBlockedDay = async (date: string, reason?: string): Promise<ToggleBlockedDayResponse> => {
  return makeRequest<ToggleBlockedDayResponse>('/blocked-days/toggle', {
    method: 'POST',
    body: JSON.stringify({ date, reason }),
  });
};

// Add blocked day
export const addBlockedDay = async (data: {
  date: string;
  reason?: string;
  is_recurring?: boolean;
  recurrence_pattern?: string;
  recurrence_end_date?: string;
}): Promise<BlockedDay> => {
  return makeRequest<BlockedDay>('/blocked-days', {
    method: 'POST',
    body: JSON.stringify(data),
  });
};

// Remove blocked day
export const removeBlockedDay = async (date: string): Promise<{ message: string; date: string }> => {
  return makeRequest<{ message: string; date: string }>(`/blocked-days/${date}`, {
    method: 'DELETE',
  });
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\api\index.ts
============================
// Export all schedule API functions
export * from './appointments';
export * from './blockedDays';
export * from './scheduleSettings';
export * from './timeBlocks';


============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\api\scheduleSettings.ts
============================
import { config } from '@/shared/env';

import type {
  ScheduleSettings,
  UpdateScheduleSettingsRequest,
} from '../types';

const API_BASE = `${config.apiUrl || ''}/api/schedule`;

// Generic API request function
async function makeRequest<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
  const url = `${API_BASE}${endpoint}`;
  const token = localStorage.getItem('token');
  
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => { 
      controller.abort(); 
    }, 10000); // 10 second timeout
    
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...(token && { 'Authorization': `Bearer ${token}` }),
        ...options.headers,
      },
      signal: controller.signal,
    });
    
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: 'Request failed' })) as { error?: string };
      throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
    }
    
    return await response.json() as T;
  } catch (error) {
    if (error instanceof Error && error.name === 'AbortError') {
      throw new Error('Request timeout');
    }
    
    console.error('API request failed:', error);
    throw error;
  }
}

// Get schedule settings for the current affiliate
export const getScheduleSettings = async (): Promise<ScheduleSettings> => {
  return makeRequest<ScheduleSettings>('/settings');
};

// Update schedule settings
export const updateScheduleSettings = async (
  data: UpdateScheduleSettingsRequest
): Promise<ScheduleSettings> => {
  return makeRequest<ScheduleSettings>('/settings', {
    method: 'PUT',
    body: JSON.stringify(data),
  });
};

// Reset schedule settings to defaults
export const resetScheduleSettings = async (): Promise<ScheduleSettings> => {
  return makeRequest<ScheduleSettings>('/settings/reset', {
    method: 'POST',
  });
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\api\timeBlocks.ts
============================
import { config } from '@/shared/env';

import type {
  CreateTimeBlockRequest,
  TimeBlock,
  UpdateTimeBlockRequest,
} from '../types';

const API_BASE = `${config.apiUrl || ''}/api/schedule`;

// Generic API request function
async function makeRequest<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
  const url = `${API_BASE}${endpoint}`;
  const token = localStorage.getItem('token');
  
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => { 
      controller.abort(); 
    }, 10000); // 10 second timeout
    
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...(token && { 'Authorization': `Bearer ${token}` }),
        ...options.headers,
      },
      signal: controller.signal,
    });
    
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: 'Request failed' })) as { error?: string };
      throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
    }
    
    return await response.json() as T;
  } catch (error) {
    if (error instanceof Error && error.name === 'AbortError') {
      throw new Error('Request timeout');
    }
    
    console.error('API request failed:', error);
    throw error;
  }
}

// Get time blocks for a specific date range
export const getTimeBlocks = async (
  startDate: string,
  endDate: string
): Promise<TimeBlock[]> => {
  const params = new URLSearchParams({ startDate, endDate });
  return makeRequest<TimeBlock[]>(`/time-blocks?${params}`);
};

// Get time blocks for a specific date
export const getTimeBlocksByDate = async (date: string): Promise<TimeBlock[]> => {
  return makeRequest<TimeBlock[]>(`/time-blocks/date/${date}`);
};

// Get a single time block by ID
export const getTimeBlock = async (id: number): Promise<TimeBlock> => {
  return makeRequest<TimeBlock>(`/time-blocks/${id}`);
};

// Create a new time block
export const createTimeBlock = async (
  data: CreateTimeBlockRequest
): Promise<TimeBlock> => {
  return makeRequest<TimeBlock>('/time-blocks', {
    method: 'POST',
    body: JSON.stringify(data),
  });
};

// Update an existing time block
export const updateTimeBlock = async (
  id: number,
  data: UpdateTimeBlockRequest
): Promise<TimeBlock> => {
  return makeRequest<TimeBlock>(`/time-blocks/${id}`, {
    method: 'PUT',
    body: JSON.stringify(data),
  });
};

// Delete a time block
export const deleteTimeBlock = async (id: number): Promise<void> => {
  await makeRequest<{ message?: string }>(`/time-blocks/${id}`, {
    method: 'DELETE',
  });
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\components\AppointmentCard.tsx
============================
import React from 'react';

import type { Appointment } from '../types';
import { getStatusStyles } from './scheduleUtils';

interface AppointmentCardProps {
  appointment: Appointment;
  onEdit: (appointment: Appointment) => void;
  compact?: boolean;
}

export const AppointmentCard: React.FC<AppointmentCardProps> = ({
  appointment,
  onEdit,
  compact = false
}) => {
  const { background, badge } = getStatusStyles(appointment.status);

  if (compact) {
    return (
      <button 
        type="button"
        className={`w-full text-left p-1 rounded text-xs cursor-pointer hover:opacity-80 transition-opacity ${background}`}
        onClick={(e) => {
          e.stopPropagation();
          onEdit(appointment);
        }}
      >
        <div className="truncate">{appointment.customer_name}</div>
        <div className="truncate text-xs opacity-75">{appointment.title}</div>
      </button>
    );
  }

  return (
    <button 
      type="button"
      className={`w-full text-left p-3 rounded-lg border-l-4 cursor-pointer hover:opacity-80 transition-opacity ${background}`}
      onClick={() => { onEdit(appointment); }}
    >
      <div className="space-y-2">
        <div>
          <p className="font-semibold text-white text-sm">{appointment.customer_name}</p>
          <p className="text-gray-300 text-xs">{appointment.title}</p>
        </div>
        
        <div className="space-y-1">
          <div className="text-xs text-gray-400">
            {new Date(appointment.start_time).toLocaleTimeString('en-US', { 
              hour: 'numeric', 
              minute: '2-digit',
              hour12: true 
            })} - {new Date(appointment.end_time).toLocaleTimeString('en-US', { 
              hour: 'numeric', 
              minute: '2-digit',
              hour12: true 
            })}
          </div>
          
          <div className="text-xs text-gray-400">
            {appointment.service_duration} minutes
          </div>
          
          <div className="text-xs text-gray-400">
            {appointment.customer_phone}
          </div>
        </div>
        
        <div className="pt-2">
          <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${badge}`}>
            {appointment.status.replace('_', ' ')}
          </span>
        </div>
      </div>
    </button>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\components\DayView.tsx
============================
import React from 'react';

import type { Appointment, TimeBlock } from '../types';
import { generateTimeSlots, getStatusStyles } from './scheduleUtils';

interface DayViewProps {
  selectedDate: string;
  appointments: Appointment[];
  timeBlocks: TimeBlock[];
  onEditAppointment: (appointment: Appointment) => void;
  onCreateAppointment: (time?: string, date?: string) => void;
}

export const DayView: React.FC<DayViewProps> = ({
  selectedDate,
  appointments,
  timeBlocks,
  onEditAppointment,
  onCreateAppointment
}) => {
  const timeSlots = generateTimeSlots();

  // Get appointments for a specific date and time
  const getAppointmentForDateTime = (date: string, time: string) => {
    return appointments.find(apt => {
      const startTime = new Date(apt.start_time);
      const appointmentDate = startTime.toISOString().split('T')[0];
      const timeString = startTime.toTimeString().slice(0, 5);
      return appointmentDate === date && timeString === time;
    });
  };

  // Get time block for a specific date and time
  const getTimeBlockForDateTime = (date: string, time: string) => {
    return timeBlocks.find(block => {
      const startTime = new Date(block.start_time);
      const endTime = new Date(block.end_time);
      const blockDate = startTime.toISOString().split('T')[0];
      const slotTime = new Date(`${date}T${time}:00`);
      return blockDate === date && slotTime >= startTime && slotTime < endTime;
    });
  };

  return (
    <div className="space-y-2">
      {timeSlots.map((time) => {
        const appointment = getAppointmentForDateTime(selectedDate, time);
        const timeBlock = getTimeBlockForDateTime(selectedDate, time);
        const { background, badge } = appointment ? getStatusStyles(appointment.status) : { background: '', badge: '' };

        return (
          <div key={time} className="flex items-center border-b border-stone-700 last:border-b-0">
            <div className="w-16 text-gray-400 text-sm font-medium py-3">
              {time}
            </div>
            <div className="flex-1 py-2">
              {appointment ? (
                <button 
                  type="button"
                  className={`w-full text-left p-3 rounded-lg border-l-4 cursor-pointer hover:opacity-80 transition-opacity ${background}`}
                  onClick={() => { onEditAppointment(appointment); }}
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium text-white">{appointment.customer_name}</p>
                      <p className="text-gray-300 text-sm">{appointment.title}</p>
                      <p className="text-gray-400 text-xs">{appointment.service_duration} minutes</p>
                    </div>
                    <div className="text-right">
                      <p className="text-gray-300 text-sm">{appointment.customer_phone}</p>
                      <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${badge}`}>
                        {appointment.status.replace('_', ' ')}
                      </span>
                    </div>
                  </div>
                </button>
              ) : timeBlock ? (
                <div className="p-3 rounded-lg border-l-4 bg-gray-900/30 border-gray-500">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium text-white">{timeBlock.title}</p>
                      <p className="text-gray-300 text-sm">{timeBlock.description}</p>
                      <p className="text-gray-400 text-xs">{timeBlock.block_type}</p>
                    </div>
                    <div className="text-right">
                      <span className="inline-block px-2 py-1 rounded-full text-xs font-medium bg-gray-900 text-gray-300">
                        {timeBlock.block_type}
                      </span>
                    </div>
                  </div>
                </div>
              ) : (
                <button 
                  type="button"
                  className="h-12 w-full text-left flex items-center text-gray-500 text-sm cursor-pointer hover:text-white hover:bg-stone-700/50 rounded-lg transition-colors"
                  onClick={() => { onCreateAppointment(time, selectedDate); }}
                >
                  Available - Click to add appointment
                </button>
              )}
            </div>
          </div>
        );
      })}
    </div>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\components\modals\AppointmentModal.tsx
============================
import React, { useEffect,useState } from 'react';
import { Calendar, Clock, DollarSign, FileText,Mail, Phone, User, X } from 'lucide-react';

import { Button } from '@/shared/ui';

import { createAppointment, updateAppointment } from '../../api';
import type { Appointment, CreateAppointmentRequest, UpdateAppointmentRequest } from '../../types';

interface AppointmentModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
  appointment?: Appointment | null;
  selectedDate: string;
  selectedTime?: string;
}

export const AppointmentModal: React.FC<AppointmentModalProps> = ({
  isOpen,
  onClose,
  onSuccess,
  appointment,
  selectedDate,
  selectedTime
}) => {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    service_type: '',
    service_duration: 60,
    start_time: '',
    end_time: '',
    customer_name: '',
    customer_phone: '',
    customer_email: '',
    price: 0,
    deposit: 0,
    notes: '',
    internal_notes: ''
  });

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const isEdit = !!appointment;

  useEffect(() => {
    if (isOpen) {
      if (appointment) {
        // Edit mode - populate form with existing data
        setFormData({
          title: appointment.title,
          description: appointment.description || '',
          service_type: appointment.service_type,
          service_duration: appointment.service_duration,
          start_time: appointment.start_time,
          end_time: appointment.end_time,
          customer_name: appointment.customer_name,
          customer_phone: appointment.customer_phone,
          customer_email: appointment.customer_email || '',
          price: appointment.price || 0,
          deposit: appointment.deposit || 0,
          notes: appointment.notes || '',
          internal_notes: appointment.internal_notes || ''
        });
      } else {
        // Create mode - set defaults
        const startTime = selectedTime ? `${selectedDate}T${selectedTime}:00` : `${selectedDate}T09:00:00`;
        const endTime = selectedTime ? 
          new Date(new Date(startTime).getTime() + 60 * 60 * 1000).toISOString() : 
          new Date(new Date(startTime).getTime() + 60 * 60 * 1000).toISOString();

        setFormData({
          title: '',
          description: '',
          service_type: '',
          service_duration: 60,
          start_time: startTime,
          end_time: endTime,
          customer_name: '',
          customer_phone: '',
          customer_email: '',
          price: 0,
          deposit: 0,
          notes: '',
          internal_notes: ''
        });
      }
      setError(null);
    }
  }, [isOpen, appointment, selectedDate, selectedTime]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'number' ? Number(value) : value
    }));
  };

  const handleDurationChange = (duration: number) => {
    const startTime = new Date(formData.start_time);
    const endTime = new Date(startTime.getTime() + duration * 60 * 1000);
    
    setFormData(prev => ({
      ...prev,
      service_duration: duration,
      end_time: endTime.toISOString()
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      if (isEdit) {
        const updateData: UpdateAppointmentRequest = {
          id: appointment.id,
          ...formData
        };
        await updateAppointment(appointment.id, updateData);
      } else {
        const createData: CreateAppointmentRequest = formData;
        await createAppointment(createData);
      }
      
      onSuccess();
      onClose();
    } catch (err) {
      console.error('Error saving appointment:', err);
      setError(err instanceof Error ? err.message : 'Failed to save appointment');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-stone-800 rounded-xl border border-stone-700 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-white">
              {isEdit ? 'Edit Appointment' : 'New Appointment'}
            </h2>
            <Button
              variant="ghost"
              size="sm"
              onClick={onClose}
              className="text-gray-400 hover:text-white"
            >
              <X className="h-5 w-5" />
            </Button>
          </div>

          {error && (
            <div className="mb-4 p-3 bg-red-900/30 border border-red-500 rounded-lg text-red-300">
              {error}
            </div>
          )}

          <form onSubmit={(e) => { e.preventDefault(); void handleSubmit(e); }} className="space-y-6">
            {/* Basic Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="appointment-title" className="block text-sm font-medium text-gray-300 mb-2">
                  <Calendar className="inline h-4 w-4 mr-2" />
                  Title *
                </label>
                <input
                  id="appointment-title"
                  type="text"
                  name="title"
                  value={formData.title}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>

              <div>
                <label htmlFor="appointment-service-type" className="block text-sm font-medium text-gray-300 mb-2">
                  <Clock className="inline h-4 w-4 mr-2" />
                  Service Type *
                </label>
                <input
                  id="appointment-service-type"
                  type="text"
                  name="service_type"
                  value={formData.service_type}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>
            </div>

            <div>
              <label htmlFor="appointment-description" className="block text-sm font-medium text-gray-300 mb-2">
                Description
              </label>
              <textarea
                id="appointment-description"
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                rows={3}
                className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>

            {/* Timing */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label htmlFor="appointment-start-time" className="block text-sm font-medium text-gray-300 mb-2">
                  Start Time *
                </label>
                <input
                  id="appointment-start-time"
                  type="datetime-local"
                  name="start_time"
                  value={formData.start_time.slice(0, 16)}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>

              <div>
                <label htmlFor="appointment-duration" className="block text-sm font-medium text-gray-300 mb-2">
                  Duration (minutes) *
                </label>
                <select
                  id="appointment-duration"
                  name="service_duration"
                  value={formData.service_duration}
                  onChange={(e) => { handleDurationChange(Number(e.target.value)); }}
                  required
                  className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                >
                  <option value={30}>30 minutes</option>
                  <option value={60}>1 hour</option>
                  <option value={90}>1.5 hours</option>
                  <option value={120}>2 hours</option>
                  <option value={180}>3 hours</option>
                  <option value={240}>4 hours</option>
                </select>
              </div>

              <div>
                <label htmlFor="appointment-end-time" className="block text-sm font-medium text-gray-300 mb-2">
                  End Time
                </label>
                <input
                  id="appointment-end-time"
                  type="datetime-local"
                  name="end_time"
                  value={formData.end_time.slice(0, 16)}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>
            </div>

            {/* Customer Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="appointment-customer-name" className="block text-sm font-medium text-gray-300 mb-2">
                  <User className="inline h-4 w-4 mr-2" />
                  Customer Name *
                </label>
                <input
                  id="appointment-customer-name"
                  type="text"
                  name="customer_name"
                  value={formData.customer_name}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>

              <div>
                <label htmlFor="appointment-customer-phone" className="block text-sm font-medium text-gray-300 mb-2">
                  <Phone className="inline h-4 w-4 mr-2" />
                  Phone *
                </label>
                <input
                  id="appointment-customer-phone"
                  type="tel"
                  name="customer_phone"
                  value={formData.customer_phone}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>
            </div>

            <div>
              <label htmlFor="appointment-customer-email" className="block text-sm font-medium text-gray-300 mb-2">
                <Mail className="inline h-4 w-4 mr-2" />
                Email
              </label>
              <input
                id="appointment-customer-email"
                type="email"
                name="customer_email"
                value={formData.customer_email}
                onChange={handleInputChange}
                className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />
            </div>

            {/* Pricing */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="appointment-price" className="block text-sm font-medium text-gray-300 mb-2">
                  <DollarSign className="inline h-4 w-4 mr-2" />
                  Price
                </label>
                <input
                  id="appointment-price"
                  type="number"
                  name="price"
                  value={formData.price}
                  onChange={handleInputChange}
                  min="0"
                  step="0.01"
                  className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>

              <div>
                <label htmlFor="appointment-deposit" className="block text-sm font-medium text-gray-300 mb-2">
                  <DollarSign className="inline h-4 w-4 mr-2" />
                  Deposit
                </label>
                <input
                  id="appointment-deposit"
                  type="number"
                  name="deposit"
                  value={formData.deposit}
                  onChange={handleInputChange}
                  min="0"
                  step="0.01"
                  className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>
            </div>

            {/* Notes */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="appointment-notes" className="block text-sm font-medium text-gray-300 mb-2">
                  <FileText className="inline h-4 w-4 mr-2" />
                  Customer Notes
                </label>
                <textarea
                  id="appointment-notes"
                  name="notes"
                  value={formData.notes}
                  onChange={handleInputChange}
                  rows={3}
                  className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>

              <div>
                <label htmlFor="appointment-internal-notes" className="block text-sm font-medium text-gray-300 mb-2">
                  <FileText className="inline h-4 w-4 mr-2" />
                  Internal Notes
                </label>
                <textarea
                  id="appointment-internal-notes"
                  name="internal_notes"
                  value={formData.internal_notes}
                  onChange={handleInputChange}
                  rows={3}
                  className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>
            </div>

            {/* Actions */}
            <div className="flex justify-end space-x-3 pt-4 border-t border-stone-700">
              <Button
                type="button"
                variant="secondary"
                onClick={onClose}
                disabled={loading}
              >
                Cancel
              </Button>
              <Button
                type="submit"
                variant="primary"
                disabled={loading}
                className="bg-orange-500 hover:bg-orange-600"
              >
                {loading ? 'Saving...' : (isEdit ? 'Update' : 'Create')}
              </Button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\components\MonthView.tsx
============================
import React from 'react';
import { X } from 'lucide-react';

import { formatDateToYYYYMMDD, getToday, parseLocalDate } from '@/shared/utils';

import type { Appointment } from '../types';
import { AppointmentCard } from './AppointmentCard';

interface MonthViewProps {
  selectedDate: string;
  appointments: Appointment[];
  blockedDays: Set<string>;
  onEditAppointment: (appointment: Appointment) => void;
  onToggleDayBlock: (date: string) => Promise<void>;
}

export const MonthView: React.FC<MonthViewProps> = ({
  selectedDate,
  appointments,
  blockedDays,
  onEditAppointment,
  onToggleDayBlock
}) => {
  const selectedDateObj = parseLocalDate(selectedDate);
  const yearNum = selectedDateObj.getFullYear();
  const monthNum = selectedDateObj.getMonth();
  
  // Get first day of month and calculate starting date (Monday of first week)
  const firstDay = new Date(yearNum, monthNum, 1);
  const firstDayOfWeek = firstDay.getDay();
  const mondayOffset = firstDayOfWeek === 0 ? -6 : 1 - firstDayOfWeek;
  const startDate = new Date(firstDay);
  startDate.setDate(firstDay.getDate() + mondayOffset);
  
  // Generate calendar days (6 weeks = 42 days)
  const calendarDays = [];
  for (let i = 0; i < 42; i++) {
    const date = new Date(startDate);
    date.setDate(startDate.getDate() + i);
    calendarDays.push(date);
  }
  
  // Get appointments for the month
  const monthAppointments = appointments.filter(apt => {
    const aptDate = new Date(apt.start_time);
    return aptDate.getFullYear() === yearNum && aptDate.getMonth() === monthNum;
  });
  
  const today = getToday();
  
  return (
    <div className="overflow-x-auto">
      <div className="min-w-full">
        {/* Month header */}
        <div className="grid grid-cols-7 gap-1 mb-2">
          {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (
            <div key={day} className="text-center py-2 text-gray-400 text-sm font-medium">
              {day}
            </div>
          ))}
        </div>
        
        {/* Calendar grid */}
        <div className="grid grid-cols-7 gap-1">
          {calendarDays.map((date, index) => {
            const isCurrentMonth = date.getMonth() === monthNum;
            const dateString = formatDateToYYYYMMDD(date);
            const isToday = dateString === today;
            const isBlocked = blockedDays.has(dateString);
            const dayAppointments = monthAppointments.filter(apt => {
              const aptDate = new Date(apt.start_time).toISOString().split('T')[0];
              return aptDate === dateString;
            });
            
            return (
              <button 
                type="button"
                key={index}
                className={`w-full text-left min-h-[6rem] p-2 border border-stone-700 rounded-lg relative cursor-pointer transition-all duration-200 ${
                  isCurrentMonth ? 'bg-stone-800' : 'bg-stone-900/50'
                } ${isToday ? 'ring-2 ring-orange-500' : ''} ${isBlocked ? 'bg-red-900/20 border-red-500' : ''}`}
                onClick={() => { void onToggleDayBlock(dateString).catch((err: unknown) => { console.error(err); }); }}
              >
                <div className={`text-sm font-medium mb-1 ${
                  isCurrentMonth ? 'text-white' : 'text-gray-500'
                } ${isToday ? 'text-orange-300' : ''}`}>
                  {date.getDate()}
                </div>
                
                <div className="space-y-1">
                  {!isBlocked && dayAppointments.slice(0, 3).map((appointment) => (
                    <AppointmentCard 
                      key={appointment.id}
                      appointment={appointment}
                      onEdit={onEditAppointment}
                      compact
                    />
                  ))}
                  {!isBlocked && dayAppointments.length > 3 && (
                    <div className="text-xs text-gray-400">
                      +{dayAppointments.length - 3} more
                    </div>
                  )}
                </div>
                
                {/* Red X overlay for blocked days */}
                {isBlocked && (
                  <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                    <X className="w-8 h-8 text-red-500 opacity-80" strokeWidth={3} />
                  </div>
                )}
              </button>
            );
          })}
        </div>
      </div>
    </div>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\components\ScheduleGrid.tsx
============================
import React from 'react';

import type { Appointment, TimeBlock } from '../types';
import { DayView } from './DayView';
import { MonthView } from './MonthView';
import { ScheduleLoadingState } from './ScheduleLoadingState';
import { ScheduleNavigationHeader } from './ScheduleNavigationHeader';
import { WeekView } from './WeekView';

interface ScheduleGridProps {
  selectedDate: string;
  appointments: Appointment[];
  timeBlocks: TimeBlock[];
  loading: boolean;
  viewMode: 'day' | 'week' | 'month';
  onEditAppointment: (appointment: Appointment) => void;
  onCreateAppointment: (time?: string, date?: string) => void;
  blockedDays: Set<string>;
  onToggleDayBlock: (date: string) => Promise<void>;
  onNavigateMonth: (direction: 'prev' | 'next') => void;
  onNavigateWeek: (direction: 'prev' | 'next') => void;
}

export const ScheduleGrid: React.FC<ScheduleGridProps> = ({
  selectedDate,
  appointments,
  timeBlocks,
  loading,
  viewMode,
  onEditAppointment,
  onCreateAppointment,
  blockedDays,
  onToggleDayBlock,
  onNavigateMonth,
  onNavigateWeek
}) => {
  if (loading) {
    return <ScheduleLoadingState viewMode={viewMode} />;
  }

  return (
    <div className="bg-stone-800 rounded-xl border border-stone-700 p-6">
      <ScheduleNavigationHeader
        selectedDate={selectedDate}
        viewMode={viewMode}
        onNavigateMonth={onNavigateMonth}
        onNavigateWeek={onNavigateWeek}
      />
      
      {viewMode === 'day' && (
        <DayView
          selectedDate={selectedDate}
          appointments={appointments}
          timeBlocks={timeBlocks}
          onEditAppointment={onEditAppointment}
          onCreateAppointment={onCreateAppointment}
        />
      )}
      
      {viewMode === 'week' && (
        <WeekView
          selectedDate={selectedDate}
          appointments={appointments}
          timeBlocks={timeBlocks}
          blockedDays={blockedDays}
          onEditAppointment={onEditAppointment}
          onCreateAppointment={onCreateAppointment}
          onToggleDayBlock={onToggleDayBlock}
        />
      )}
      
      {viewMode === 'month' && (
        <MonthView
          selectedDate={selectedDate}
          appointments={appointments}
          blockedDays={blockedDays}
          onEditAppointment={onEditAppointment}
          onToggleDayBlock={onToggleDayBlock}
        />
      )}
    </div>
  );
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\components\ScheduleHeader.tsx
============================
import React from 'react';
import { Calendar, Plus } from 'lucide-react';

import { Button } from '@/shared/ui';

interface ScheduleHeaderProps {
  selectedDate: string;
  setSelectedDate: (date: string) => void;
  viewMode: 'day' | 'week' | 'month';
  setViewMode: (mode: 'day' | 'week' | 'month') => void;
  onCreateAppointment: () => void;
  onGoToToday: () => void;
}

export const ScheduleHeader: React.FC<ScheduleHeaderProps> = ({
  selectedDate,
  setSelectedDate,
  viewMode,
  setViewMode,
  onCreateAppointment,
  onGoToToday
}) => {
  return (
    <div className="bg-stone-800 rounded-xl border border-stone-700 p-6">
      <div className="flex flex-col lg:flex-row items-start lg:items-center justify-between space-y-4 lg:space-y-0">
        <div className="flex items-center space-x-4">
          <Calendar className="h-6 w-6 text-orange-500" />
          <h2 className="text-2xl font-bold text-white">Schedule</h2>
        </div>
        
        <div className="flex items-center space-x-4">
          {/* View Mode Toggle */}
          <div className="flex bg-stone-700 rounded-lg p-1">
            {(['day', 'week', 'month'] as const).map((mode) => (
              <Button
                key={mode}
                onClick={() => { setViewMode(mode); }}
                variant={viewMode === mode ? 'primary' : 'ghost'}
                size="sm"
                className={`px-3 py-1 rounded-md text-sm font-medium capitalize ${
                  viewMode === mode
                    ? 'bg-orange-500 text-white'
                    : 'text-gray-300 hover:text-white'
                }`}
              >
                {mode}
              </Button>
            ))}
          </div>
          
          {/* Date Picker */}
          <input
            type="date"
            id="schedule-date"
            name="selectedDate"
            value={selectedDate}
            onChange={(e) => { setSelectedDate(e.target.value); }}
            className="bg-stone-700 border border-stone-600 text-white rounded-lg px-3 py-2 text-sm"
          />
          
          {/* Today Button */}
          <Button 
            variant="secondary"
            size="sm"
            className="bg-stone-700 hover:bg-stone-600 text-white px-3 py-2 rounded-lg text-sm"
            onClick={onGoToToday}
          >
            Today
          </Button>
          
          {/* Add Appointment Button */}
          <Button 
            variant="primary"
            size="md"
            className="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-lg font-medium flex items-center"
            leftIcon={<Plus className="h-4 w-4" />}
            onClick={onCreateAppointment}
          >
            New Appointment
          </Button>
        </div>
      </div>
    </div>
  );
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\components\ScheduleLoadingState.tsx
============================
import React from 'react';

import { generateTimeSlots } from './scheduleUtils';

interface ScheduleLoadingStateProps {
  viewMode: 'day' | 'week' | 'month';
}

export const ScheduleLoadingState: React.FC<ScheduleLoadingStateProps> = ({ viewMode }) => {
  const timeSlots = generateTimeSlots();

  return (
    <div className="bg-stone-800 rounded-xl border border-stone-700 p-6">
      <div className="animate-pulse space-y-4">
        {viewMode === 'day' ? (
          timeSlots.map((time) => (
            <div key={time} className="h-12 bg-stone-700 rounded"></div>
          ))
        ) : viewMode === 'week' ? (
          <div className="grid grid-cols-7 gap-4">
            {Array.from({ length: 7 }).map((_, i) => (
              <div key={i} className="min-h-[200px] bg-stone-700 rounded-xl animate-pulse"></div>
            ))}
          </div>
        ) : (
          <div className="grid grid-cols-7 gap-1">
            {Array.from({ length: 42 }).map((_, i) => (
              <div key={i} className="h-24 bg-stone-700 rounded"></div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\components\ScheduleNavigationHeader.tsx
============================
import React from 'react';
import { ChevronLeft, ChevronRight, Filter, Search } from 'lucide-react';

import { formatMonthYear, formatWeekRange, parseLocalDate } from '@/shared/utils';

interface ScheduleNavigationHeaderProps {
  selectedDate: string;
  viewMode: 'day' | 'week' | 'month';
  onNavigateMonth: (direction: 'prev' | 'next') => void;
  onNavigateWeek: (direction: 'prev' | 'next') => void;
}

export const ScheduleNavigationHeader: React.FC<ScheduleNavigationHeaderProps> = ({
  selectedDate,
  viewMode,
  onNavigateMonth,
  onNavigateWeek
}) => {
  // Get title based on view mode
  const getTitle = () => {
    const date = parseLocalDate(selectedDate);
    switch (viewMode) {
      case 'day':
        return date.toLocaleDateString('en-US', { 
          weekday: 'long', 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric' 
        });
      case 'week':
      case 'month':
        return ''; // No title for week/month view since it's shown in center navigation
      default:
        return '';
    }
  };

  return (
    <div className="mb-4 flex items-center justify-between relative">
      {getTitle() && (
        <h3 className="text-lg font-semibold text-white">
          {getTitle()}
        </h3>
      )}
      
      {/* Week Navigation - centered, only show in week view */}
      {viewMode === 'week' && (
        <div className="absolute left-1/2 transform -translate-x-1/2 flex items-center space-x-3">
          <button
            onClick={() => { onNavigateWeek('prev'); }}
            className="text-gray-300 hover:text-white hover:bg-stone-700 p-2 rounded transition-colors"
          >
            <ChevronLeft className="h-6 w-6" />
          </button>
          
          <span className="text-lg font-semibold text-white">
            {formatWeekRange(selectedDate)}
          </span>
          
          <button
            onClick={() => { onNavigateWeek('next'); }}
            className="text-gray-300 hover:text-white hover:bg-stone-700 p-2 rounded transition-colors"
          >
            <ChevronRight className="h-6 w-6" />
          </button>
        </div>
      )}

      {/* Month Navigation - centered, only show in month view */}
      {viewMode === 'month' && (
        <div className="absolute left-1/2 transform -translate-x-1/2 flex items-center space-x-3">
          <button
            onClick={() => { onNavigateMonth('prev'); }}
            className="text-gray-300 hover:text-white hover:bg-stone-700 p-2 rounded transition-colors"
          >
            <ChevronLeft className="h-6 w-6" />
          </button>
          
          <span className="text-lg font-semibold text-white">
            {formatMonthYear(selectedDate)}
          </span>
          
          <button
            onClick={() => { onNavigateMonth('next'); }}
            className="text-gray-300 hover:text-white hover:bg-stone-700 p-2 rounded transition-colors"
          >
            <ChevronRight className="h-6 w-6" />
          </button>
        </div>
      )}
      
      <div className="flex items-center space-x-2">
        <Filter className="h-4 w-4 text-gray-400" />
        <Search className="h-4 w-4 text-gray-400" />
      </div>
    </div>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\components\ScheduleSidebar.tsx
============================
import React from 'react';

interface ScheduleSidebarProps {
  viewMode: 'day' | 'week' | 'month';
}

export const ScheduleSidebar: React.FC<ScheduleSidebarProps> = ({ viewMode }) => {
  const renderSummary = () => {
    if (viewMode === 'month') {
      return (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Monthly Summary */}
          <div className="bg-stone-800 rounded-xl border border-stone-700 p-6">
            <h3 className="text-lg font-semibold text-white mb-4">Monthly Summary</h3>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-gray-300">Total Appointments</span>
                <span className="text-white font-semibold">32</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-300">Confirmed</span>
                <span className="text-green-400 font-semibold">28</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-300">Pending</span>
                <span className="text-yellow-400 font-semibold">4</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-300">Blocked Days</span>
                <span className="text-red-400 font-semibold">3</span>
              </div>
            </div>
          </div>

          {/* Monthly Revenue Summary */}
          <div className="bg-stone-800 rounded-xl border border-stone-700 p-6">
            <h3 className="text-lg font-semibold text-white mb-4">Monthly Revenue Summary</h3>
            <div className="space-y-4">
            <div className="flex justify-between items-center">
              <span className="text-gray-300">Total Booked</span>
              <span className="text-blue-400 font-semibold">$12,800</span>
            </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-300">Collected</span>
                <span className="text-green-400 font-semibold">$9,600</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-300">Remaining</span>
                <span className="text-orange-400 font-semibold">$3,200</span>
              </div>
            </div>
          </div>
        </div>
      );
    }

    // Default to weekly summary for day and week views
    return (
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Weekly Summary */}
        <div className="bg-stone-800 rounded-xl border border-stone-700 p-6">
          <h3 className="text-lg font-semibold text-white mb-4">Weekly Summary</h3>
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <span className="text-gray-300">Total Appointments</span>
              <span className="text-white font-semibold">8</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-300">Confirmed</span>
              <span className="text-green-400 font-semibold">6</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-300">Pending</span>
              <span className="text-yellow-400 font-semibold">2</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-300">Blocked Days</span>
              <span className="text-red-400 font-semibold">1</span>
            </div>
          </div>
        </div>

        {/* Weekly Revenue Summary */}
        <div className="bg-stone-800 rounded-xl border border-stone-700 p-6">
          <h3 className="text-lg font-semibold text-white mb-4">Weekly Revenue Summary</h3>
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <span className="text-gray-300">Total Booked</span>
              <span className="text-blue-400 font-semibold">$3,200</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-300">Collected</span>
              <span className="text-green-400 font-semibold">$2,400</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-300">Remaining</span>
              <span className="text-orange-400 font-semibold">$800</span>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      {renderSummary()}
    </div>
  );
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\components\scheduleUtils.ts
============================
/**
 * Shared utilities for schedule components
 */

type AppointmentStatus = 'confirmed' | 'scheduled' | 'in_progress' | 'completed' | 'cancelled' | 'pending';

interface StatusStyles {
  background: string;
  badge: string;
}

/**
 * Get status-based styling for appointments
 */
export function getStatusStyles(status: AppointmentStatus): StatusStyles {
  switch (status) {
    case 'confirmed':
      return {
        background: 'bg-green-900/30 border-green-500',
        badge: 'bg-green-900 text-green-300'
      };
    case 'scheduled':
      return {
        background: 'bg-blue-900/30 border-blue-500',
        badge: 'bg-blue-900 text-blue-300'
      };
    case 'in_progress':
      return {
        background: 'bg-orange-900/30 border-orange-500',
        badge: 'bg-orange-900 text-orange-300'
      };
    case 'completed':
      return {
        background: 'bg-gray-900/30 border-gray-500',
        badge: 'bg-gray-900 text-gray-300'
      };
    case 'cancelled':
      return {
        background: 'bg-red-900/30 border-red-500',
        badge: 'bg-red-900 text-red-300'
      };
    default:
      return {
        background: 'bg-yellow-900/30 border-yellow-500',
        badge: 'bg-yellow-900 text-yellow-300'
      };
  }
}

/**
 * Generate time slots for day view (8 AM to 7 PM)
 */
export function generateTimeSlots(): string[] {
  return Array.from({ length: 12 }, (_, i) => {
    const hour = i + 8;
    return `${hour.toString().padStart(2, '0')}:00`;
  });
}



============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\components\WeekView.tsx
============================
import React from 'react';
import { X } from 'lucide-react';

import { getToday, getWeekDates, parseLocalDate } from '@/shared/utils';

import type { Appointment, TimeBlock } from '../types';
import { AppointmentCard } from './AppointmentCard';

interface WeekViewProps {
  selectedDate: string;
  appointments: Appointment[];
  timeBlocks: TimeBlock[];
  blockedDays: Set<string>;
  onEditAppointment: (appointment: Appointment) => void;
  onCreateAppointment: (time?: string, date?: string) => void;
  onToggleDayBlock: (date: string) => Promise<void>;
}

export const WeekView: React.FC<WeekViewProps> = ({
  selectedDate,
  appointments,
  timeBlocks,
  blockedDays,
  onEditAppointment,
  onCreateAppointment,
  onToggleDayBlock
}) => {
  const weekDates = getWeekDates(selectedDate);
  const today = getToday();

  return (
    <div className="grid grid-cols-7 gap-4">
      {weekDates.map((date) => {
        const dateObj = parseLocalDate(date);
        const isToday = date === today;
        const isCurrentMonth = dateObj.getMonth() === parseLocalDate(selectedDate).getMonth();
        const isBlocked = blockedDays.has(date);
        
        // Get appointment for this date (since only one per day)
        const dayAppointment = appointments.find(apt => {
          const aptDate = new Date(apt.start_time).toISOString().split('T')[0];
          return aptDate === date;
        });
        
        // Get time block for this date
        const dayTimeBlock = timeBlocks.find(block => {
          const blockDate = new Date(block.start_time).toISOString().split('T')[0];
          return blockDate === date;
        });
        
        return (
          <button 
            type="button"
            key={date}
            className={`min-h-[200px] p-4 rounded-xl border-2 transition-all duration-200 relative cursor-pointer text-left w-full ${
              isToday 
                ? 'border-orange-500 bg-orange-500/10' 
                : isCurrentMonth 
                  ? 'border-stone-600 bg-stone-800/50' 
                  : 'border-stone-700 bg-stone-900/30'
            } ${isBlocked ? 'bg-red-900/20 border-red-500' : ''}`}
            onClick={() => {
              alert('CLICKED: ' + date);
              void onToggleDayBlock(date).catch((err: unknown) => { console.error(err); });
            }}
          >
            {/* Day header */}
            <div className="mb-3">
              <div className={`flex items-center justify-between text-sm font-medium ${
                isToday ? 'text-orange-300' : isCurrentMonth ? 'text-white' : 'text-gray-500'
              }`}>
                <div>
                  {dateObj.toLocaleDateString('en-US', { weekday: 'short' })}
                </div>
                {!dayAppointment && !dayTimeBlock && !isBlocked && (
                  <button 
                    type="button"
                    className="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-white hover:bg-orange-500/20 rounded-full transition-all duration-200 cursor-pointer"
                    onClick={(e) => {
                      e.stopPropagation();
                      onCreateAppointment(undefined, date);
                    }}
                    aria-label="Add appointment"
                  >
                    <span className="text-lg font-light">+</span>
                  </button>
                )}
              </div>
              <div className={`text-lg font-bold ${
                isToday ? 'text-orange-300' : isCurrentMonth ? 'text-white' : 'text-gray-500'
              }`}>
                {dateObj.getDate()}
              </div>
            </div>
            
            {/* Day content */}
            <div className="flex-1">
              {dayAppointment ? (
                <AppointmentCard 
                  appointment={dayAppointment}
                  onEdit={onEditAppointment}
                />
              ) : dayTimeBlock ? (
                <div className="p-3 rounded-lg border-l-4 bg-gray-900/30 border-gray-500">
                  <div className="space-y-2">
                    <div>
                      <p className="font-semibold text-white text-sm">{dayTimeBlock.title}</p>
                      <p className="text-gray-300 text-xs">{dayTimeBlock.description}</p>
                    </div>
                    
                    <div className="text-xs text-gray-400">
                      {dayTimeBlock.block_type}
                    </div>
                    
                    <div className="pt-2">
                      <span className="inline-block px-2 py-1 rounded-full text-xs font-medium bg-gray-900 text-gray-300">
                        {dayTimeBlock.block_type}
                      </span>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="h-full">
                  {/* Empty day - no content needed since + button is in header */}
                </div>
              )}
            </div>
            
            {/* Red X overlay for blocked days */}
            {isBlocked && (
              <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                <X className="w-16 h-16 text-red-500 opacity-80" strokeWidth={3} />
              </div>
            )}
          </button>
        );
      })}
    </div>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\hooks\useScheduleData.ts
============================
import { useCallback,useEffect, useState } from 'react';

import { getAppointments, getBlockedDays,getTimeBlocks } from '../api';
import type { Appointment, BlockedDay,TimeBlock } from '../types';

export const useScheduleData = (selectedDate: string, viewMode: 'day' | 'week' | 'month' = 'day') => {
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [timeBlocks, setTimeBlocks] = useState<TimeBlock[]>([]);
  const [blockedDays, setBlockedDays] = useState<BlockedDay[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Calculate date range based on view mode
  const getDateRange = (date: string, mode: 'day' | 'week' | 'month') => {
    const selectedDateObj = new Date(date);
    
    switch (mode) {
      case 'day':
        return { startDate: date, endDate: date };
      
      case 'week': {
        // Get Monday to Sunday of the week containing the selected date
        const dayOfWeek = selectedDateObj.getDay();
        const mondayOffset = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;
        const monday = new Date(selectedDateObj);
        monday.setDate(selectedDateObj.getDate() + mondayOffset);
        const sunday = new Date(monday);
        sunday.setDate(monday.getDate() + 6);
        
        return {
          startDate: monday.toISOString().split('T')[0],
          endDate: sunday.toISOString().split('T')[0]
        };
      }
      
      case 'month': {
        // Get first and last day of the month
        const firstDay = new Date(selectedDateObj.getFullYear(), selectedDateObj.getMonth(), 1);
        const lastDay = new Date(selectedDateObj.getFullYear(), selectedDateObj.getMonth() + 1, 0);
        
        return {
          startDate: firstDay.toISOString().split('T')[0],
          endDate: lastDay.toISOString().split('T')[0]
        };
      }
      
      default:
        return { startDate: date, endDate: date };
    }
  };

  const fetchScheduleData = useCallback(async () => {
    if (!selectedDate) return;
    
    setLoading(true);
    setError(null);
    
    try {
      const { startDate, endDate } = getDateRange(selectedDate, viewMode);
      
      const [appointmentsData, timeBlocksData, blockedDaysData] = await Promise.all([
        getAppointments(startDate, endDate),
        getTimeBlocks(startDate, endDate),
        getBlockedDays(startDate, endDate)
      ]);
      
      setAppointments(appointmentsData);
      setTimeBlocks(timeBlocksData);
      setBlockedDays(blockedDaysData);
    } catch (err) {
      console.error('Error fetching schedule data:', err);
      setError(err instanceof Error ? err.message : 'Failed to fetch schedule data');
    } finally {
      setLoading(false);
    }
  }, [selectedDate, viewMode]);

  useEffect(() => {
    void fetchScheduleData();
  }, [fetchScheduleData]);

  const refreshData = useCallback(() => {
    if (!selectedDate) return;
    
    setLoading(true);
    setError(null);
    
    const { startDate, endDate } = getDateRange(selectedDate, viewMode);
    
    Promise.all([
      getAppointments(startDate, endDate),
      getTimeBlocks(startDate, endDate),
      getBlockedDays(startDate, endDate)
    ]).then(([appointmentsData, timeBlocksData, blockedDaysData]) => {
      setAppointments(appointmentsData);
      setTimeBlocks(timeBlocksData);
      setBlockedDays(blockedDaysData);
    }).catch((err: unknown) => {
      console.error('Error fetching schedule data:', err);
      setError(err instanceof Error ? err.message : 'Failed to fetch schedule data');
    }).finally(() => {
      setLoading(false);
    });
  }, [selectedDate, viewMode]);

  return { 
    appointments, 
    timeBlocks, 
    blockedDays,
    loading, 
    error, 
    refreshData 
  };
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\index.ts
============================
export * from './components/modals/AppointmentModal';
export * from './components/ScheduleGrid';
export * from './components/ScheduleHeader';
export * from './components/ScheduleSidebar';
export * from './hooks/useScheduleData';
export { default as ScheduleTab } from './ScheduleTab';
export * from './types';

============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\ScheduleTab.tsx
============================
import React, { startTransition, useCallback, useEffect, useState } from 'react';

import { toggleBlockedDay } from './api';
import { AppointmentModal } from './components/modals/AppointmentModal';
import { ScheduleGrid } from './components/ScheduleGrid';
import { ScheduleHeader } from './components/ScheduleHeader';
import { ScheduleSidebar } from './components/ScheduleSidebar';
import { useScheduleData } from './hooks/useScheduleData';
import type { Appointment } from './types';

// Small safe date helpers (no timezone shifts)
const toYmd = (d: Date) =>
  `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`;

export const ScheduleTab: React.FC = () => {
  const [selectedDate, setSelectedDate] = useState(() => toYmd(new Date()));
  const [viewMode, setViewMode] = useState<'day' | 'week' | 'month'>('day');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingAppointment, setEditingAppointment] = useState<Appointment | null>(null);
  const [selectedTime, setSelectedTime] = useState<string | undefined>();

  // Make sure your hook exposes "isInitialLoading" and "isRefetching" separately if possible.
  const {
    appointments,
    timeBlocks,
    blockedDays: apiBlockedDays,
    isInitialLoading,   // <- only true on first load
    isRefetching,       // <- true on background refresh
    error: _error,
    refreshData
  } = useScheduleData(selectedDate, viewMode);

  // Local optimistic blocked days
  const [blockedDaysLocal, setBlockedDaysLocal] = useState<Set<string>>(new Set());
  const [isMutatingBlock, setIsMutatingBlock] = useState(false);

  // Sync local set with API when not in the middle of a mutation
  useEffect(() => {
    if (isMutatingBlock) return; // keep user’s optimistic view
    const next = new Set<string>(
      apiBlockedDays.map(d => toYmd(new Date(d.blocked_date)))
    );
    setBlockedDaysLocal(next);
  }, [apiBlockedDays, isMutatingBlock]);

  const toggleDayBlock = useCallback(async (date: string) => {
    // optimistic flip
    setIsMutatingBlock(true);
    setBlockedDaysLocal(prev => {
      const next = new Set(prev);
      if (next.has(date)) next.delete(date);
      else next.add(date);
      return next;
    });

    try {
      await toggleBlockedDay(date);
      // background refresh, but keep grid visible (no flash)
      refreshData();
    } catch (e) {
      // revert on failure
      setBlockedDaysLocal(prev => {
        const next = new Set(prev);
        if (next.has(date)) next.delete(date);
        else next.add(date);
        return next;
      });
      console.error('Error toggling blocked day:', e);
    } finally {
      setIsMutatingBlock(false);
    }
  }, [refreshData]);

  const handleCreateAppointment = useCallback((time?: string, date?: string) => {
    setSelectedTime(time);
    if (date) setSelectedDate(date);
    setEditingAppointment(null);
    setIsModalOpen(true);
  }, []);

  const handleEditAppointment = useCallback((appointment: Appointment) => {
    setEditingAppointment(appointment);
    setSelectedTime(undefined);
    setIsModalOpen(true);
  }, []);

  const handleModalClose = useCallback(() => {
    setIsModalOpen(false);
    setEditingAppointment(null);
    setSelectedTime(undefined);
  }, []);

  const handleModalSuccess = useCallback(() => {
    // keep grid up; do a gentle background refresh
    refreshData();
  }, [refreshData]);

  const goToToday = useCallback(() => {
    startTransition(() => { setSelectedDate(toYmd(new Date())); });
  }, []);

  const navigateWeek = useCallback((direction: 'prev' | 'next') => {
    startTransition(() => {
      const [y, m, d] = selectedDate.split('-').map(Number);
      const dt = new Date(y, m - 1, d);
      dt.setDate(dt.getDate() + (direction === 'prev' ? -7 : 7));
      setSelectedDate(toYmd(dt));
    });
  }, [selectedDate]);

  const navigateMonth = useCallback((direction: 'prev' | 'next') => {
    startTransition(() => {
      const [y, m, d] = selectedDate.split('-').map(Number);
      const dt = new Date(y, m - 1, d);
      dt.setMonth(dt.getMonth() + (direction === 'prev' ? -1 : 1));
      setSelectedDate(toYmd(dt));
    });
  }, [selectedDate]);

  // IMPORTANT: pass the optimistic set, not a freshly constructed Set every render.
  const blockedDaysSet = blockedDaysLocal;

  return (
    <div className="space-y-6">
      <ScheduleHeader
        selectedDate={selectedDate}
        setSelectedDate={(v) => { startTransition(() => { setSelectedDate(v); }); }}
        viewMode={viewMode}
        setViewMode={(v) => { startTransition(() => { setViewMode(v); }); }}
        onCreateAppointment={() => { handleCreateAppointment(); }}
        onGoToToday={goToToday}
      />

      <ScheduleGrid
        selectedDate={selectedDate}
        appointments={appointments}
        timeBlocks={timeBlocks}
        // Only show "loading" for initial mount, not refetches
        loading={!!isInitialLoading}
        viewMode={viewMode}
        onEditAppointment={handleEditAppointment}
        onCreateAppointment={handleCreateAppointment}
        blockedDays={blockedDaysSet}
        onToggleDayBlock={toggleDayBlock}
        onNavigateMonth={navigateMonth}
        onNavigateWeek={navigateWeek}
        // If you want, expose an "isRefreshing" to draw a subtle top progress bar
        isRefreshing={!!isRefetching || isMutatingBlock}
      />

      <ScheduleSidebar viewMode={viewMode} />

      <AppointmentModal
        isOpen={isModalOpen}
        onClose={handleModalClose}
        onSuccess={handleModalSuccess}
        appointment={editingAppointment}
        selectedDate={selectedDate}
        selectedTime={selectedTime}
      />
    </div>
  );
};

export default ScheduleTab;


============================
FILE: frontend\src\features\tenantDashboard\tabs\schedule\types\index.ts
============================
// Schedule system types

export interface Appointment {
  id: number;
  tenant_id: number;
  customer_id?: number;
  
  // Appointment details
  title: string;
  description?: string;
  service_type: string;
  service_duration: number; // in minutes
  
  // Scheduling
  start_time: string; // ISO string
  end_time: string; // ISO string
  
  // Customer information (denormalized for performance)
  customer_name: string;
  customer_phone: string;
  customer_email?: string;
  
  // Status and pricing
  status: AppointmentStatus;
  price?: number;
  deposit?: number;
  
  // Metadata
  notes?: string;
  internal_notes?: string;
  created_at: string;
  updated_at: string;
  created_by?: number;
  updated_by?: number;
}

export type AppointmentStatus = 
  | 'scheduled' 
  | 'confirmed' 
  | 'in_progress' 
  | 'completed' 
  | 'cancelled' 
  | 'no_show';

export interface TimeBlock {
  id: number;
  tenant_id: number;
  
  // Block details
  title: string;
  description?: string;
  block_type: TimeBlockType;
  
  // Time range
  start_time: string; // ISO string
  end_time: string; // ISO string
  
  // Recurrence (optional)
  is_recurring: boolean;
  recurrence_pattern?: RecurrencePattern;
  recurrence_end_date?: string; // ISO string
  
  // Metadata
  created_at: string;
  updated_at: string;
  created_by?: number;
}

export type TimeBlockType = 
  | 'unavailable' 
  | 'break' 
  | 'maintenance' 
  | 'personal' 
  | 'other';

export type RecurrencePattern = 'daily' | 'weekly' | 'monthly';

export interface BlockedDay {
  id: number;
  tenant_id: number;
  blocked_date: string; // YYYY-MM-DD format
  reason?: string;
  is_recurring: boolean;
  recurrence_pattern?: 'yearly' | 'monthly' | 'weekly';
  recurrence_end_date?: string; // YYYY-MM-DD format
  created_at: string;
  updated_at: string;
  created_by?: number;
}

export interface BusinessHours {
  [key: string]: {
    start: string; // HH:MM format
    end: string; // HH:MM format
    enabled: boolean;
  };
}

export interface ScheduleSettings {
  id: number;
  tenant_id: number;
  
  // Business hours
  business_hours: BusinessHours;
  
  // Scheduling constraints
  default_appointment_duration: number; // in minutes
  buffer_time: number; // buffer between appointments in minutes
  max_appointments_per_day: number;
  advance_booking_days: number;
  same_day_booking_allowed: boolean;
  
  // Time slot configuration
  time_slot_interval: number; // interval between available time slots
  earliest_appointment_time: string; // HH:MM format
  latest_appointment_time: string; // HH:MM format
  
  // Notifications
  send_reminders: boolean;
  reminder_hours_before: number;
  send_confirmation_emails: boolean;
  
  // Metadata
  created_at: string;
  updated_at: string;
  updated_by?: number;
}

// API request/response types
export interface CreateAppointmentRequest {
  title: string;
  description?: string;
  service_type: string;
  service_duration: number;
  start_time: string;
  end_time: string;
  customer_name: string;
  customer_phone: string;
  customer_email?: string;
  price?: number;
  deposit?: number;
  notes?: string;
  internal_notes?: string;
}

export interface UpdateAppointmentRequest extends Partial<CreateAppointmentRequest> {
  id: number;
  status?: AppointmentStatus;
}

export interface CreateTimeBlockRequest {
  title: string;
  description?: string;
  block_type: TimeBlockType;
  start_time: string;
  end_time: string;
  is_recurring?: boolean;
  recurrence_pattern?: RecurrencePattern;
  recurrence_end_date?: string;
}

export interface UpdateTimeBlockRequest extends Partial<CreateTimeBlockRequest> {
  id: number;
}

export interface UpdateScheduleSettingsRequest {
  business_hours?: BusinessHours;
  default_appointment_duration?: number;
  buffer_time?: number;
  max_appointments_per_day?: number;
  advance_booking_days?: number;
  same_day_booking_allowed?: boolean;
  time_slot_interval?: number;
  earliest_appointment_time?: string;
  latest_appointment_time?: string;
  send_reminders?: boolean;
  reminder_hours_before?: number;
  send_confirmation_emails?: boolean;
}

// View-specific types
export interface ScheduleViewMode {
  mode: 'day' | 'week' | 'month';
  selectedDate: string; // YYYY-MM-DD format
}

export interface TimeSlot {
  time: string; // HH:MM format
  available: boolean;
  appointment?: Appointment;
  timeBlock?: TimeBlock;
}

export interface ScheduleDay {
  date: string; // YYYY-MM-DD format
  timeSlots: TimeSlot[];
  appointments: Appointment[];
  timeBlocks: TimeBlock[];
}

// Form types
export interface AppointmentFormData {
  title: string;
  description: string;
  service_type: string;
  service_duration: number;
  start_time: string;
  end_time: string;
  customer_name: string;
  customer_phone: string;
  customer_email: string;
  price: number;
  deposit: number;
  notes: string;
  internal_notes: string;
}

export interface TimeBlockFormData {
  title: string;
  description: string;
  block_type: TimeBlockType;
  start_time: string;
  end_time: string;
  is_recurring: boolean;
  recurrence_pattern: RecurrencePattern;
  recurrence_end_date: string;
}


============================
FILE: frontend\src\features\tenantDashboard\tabs\services\components\.gitkeep
============================
# This file keeps the components folder in git
# Remove this file when you add your first component

============================
FILE: frontend\src\features\tenantDashboard\tabs\services\components\AddServiceModal.tsx
============================
import React, { useState } from 'react';
import { X } from 'lucide-react';

import { Button } from '@/shared/ui';

interface AddServiceModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (serviceTitle: string) => void;
  vehicleName: string;
  categoryName: string;
  loading?: boolean;
}

export const AddServiceModal: React.FC<AddServiceModalProps> = ({
  isOpen,
  onClose,
  onSubmit,
  vehicleName,
  categoryName,
  loading = false
}) => {
  const [serviceTitle, setServiceTitle] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (serviceTitle.trim()) {
      onSubmit(serviceTitle.trim());
      setServiceTitle('');
    }
  };

  const handleClose = () => {
    setServiceTitle('');
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-stone-800 rounded-lg border border-stone-700 p-6 w-full max-w-md mx-4">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold text-white">Add New Service</h2>
          <Button
            onClick={handleClose}
            variant="ghost"
            size="sm"
            className="text-gray-400 hover:text-white p-1"
            disabled={loading}
          >
            <X className="h-5 w-5" />
          </Button>
        </div>

        <div className="mb-4">
          <p className="text-gray-300 text-sm mb-2">
            Adding service to: <span className="text-white font-medium">{vehicleName} - {categoryName}</span>
          </p>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="serviceTitle" className="block text-sm font-medium text-gray-300 mb-2">
              Service Title
            </label>
            <input
              type="text"
              id="serviceTitle"
              value={serviceTitle}
              onChange={(e) => { setServiceTitle(e.target.value); }}
              className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              placeholder="Enter service title..."
              disabled={loading}
            />
          </div>

          <div className="flex space-x-3">
            <Button
              type="button"
              onClick={handleClose}
              variant="secondary"
              size="md"
              className="flex-1 px-4 py-2 bg-stone-600 hover:bg-stone-700"
              disabled={loading}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              variant="primary"
              size="md"
              className="flex-1 px-4 py-2 bg-orange-500 hover:bg-orange-600"
              loading={loading}
              disabled={loading || !serviceTitle.trim()}
            >
              Create Service
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\services\components\CategorySelector.tsx
============================
import React from 'react';

import type { Category } from '../types';

interface CategorySelectorProps {
  categories: Category[];
  selectedCategory: string;
  onCategoryChange: (categoryId: string) => void;
}

export const CategorySelector: React.FC<CategorySelectorProps> = ({
  categories,
  selectedCategory,
  onCategoryChange
}) => {

  return (
    <div className="p-4">
      {categories.map((category) => {
        const isSelected = selectedCategory === category.id;
        
        return (
          <button
            key={category.id}
            onClick={() => { onCategoryChange(category.id); }}
            className={`w-full flex items-center space-x-3 p-3 mb-2 rounded-lg text-left transition-colors ${
              isSelected 
                ? 'bg-blue-600 text-white' 
                : 'text-gray-300 hover:bg-stone-700 hover:text-white'
            }`}
          >
            <span>{category.name}</span>
          </button>
        );
      })}
    </div>
  );
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\services\components\DeleteServiceModal.tsx
============================
import React from 'react';
import { AlertTriangle, X } from 'lucide-react';

import { Button } from '@/shared/ui';

interface DeleteServiceModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  serviceName: string;
  loading: boolean;
}

export const DeleteServiceModal: React.FC<DeleteServiceModalProps> = ({
  isOpen,
  onClose,
  onConfirm,
  serviceName,
  loading
}) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-stone-800 rounded-lg p-6 max-w-md w-full mx-4 border border-stone-700">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            <AlertTriangle className="h-6 w-6 text-red-500" />
            <h3 className="text-lg font-semibold text-white">Delete Service</h3>
          </div>
          <Button
            onClick={onClose}
            variant="ghost"
            size="sm"
            className="text-gray-400 hover:text-white p-1"
            disabled={loading}
          >
            <X className="h-5 w-5" />
          </Button>
        </div>
        
        <p className="text-gray-300 mb-6">
          Are you sure you want to delete <span className="font-semibold text-white">&ldquo;{serviceName}&rdquo;</span>? 
          This action cannot be undone and will remove all associated service tiers.
        </p>
        
        <div className="flex space-x-3">
          <Button
            onClick={onClose}
            variant="outline"
            size="md"
            className="flex-1 px-4 py-2 text-gray-300 border-gray-600 hover:bg-gray-700"
            disabled={loading}
          >
            Cancel
          </Button>
          <Button
            onClick={onConfirm}
            variant="destructive"
            size="md"
            className="flex-1 px-4 py-2 bg-red-600 hover:bg-red-700"
            loading={loading}
            disabled={loading}
          >
            Delete Service
          </Button>
        </div>
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\services\components\FeatureDropdown.tsx
============================
import React, { useEffect, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { ChevronDown } from 'lucide-react';

// Disabled affiliate services imports
// import { CAR_SERVICE_OPTIONS, type ServiceOption } from '@/data/affiliate-services/cars/service/features';
// import { 
//   CAR_ADDON_SERVICE_OPTIONS,
//   CAR_INTERIOR_TRIM_SERVICE_OPTIONS,
//   CAR_WINDOWS_SERVICE_OPTIONS,
//   CAR_WHEELS_SERVICE_OPTIONS,
//   type AddonServiceOption 
// } from '@/data/affiliate-services/cars/addons/features';

// Fallback types and data
interface ServiceOption {
  id: string;
  name: string;
  description: string;
  explanation: string;
  image: string;
  duration: number;
  features: string[];
}

interface AddonServiceOption {
  id: string;
  name: string;
  description: string;
  explanation: string;
  image: string;
  duration: number;
  features: string[];
}

// Empty fallback data
const CAR_SERVICE_OPTIONS: ServiceOption[] = [];
const CAR_ADDON_SERVICE_OPTIONS: AddonServiceOption[] = [];
const CAR_INTERIOR_TRIM_SERVICE_OPTIONS: AddonServiceOption[] = [];
const CAR_WINDOWS_SERVICE_OPTIONS: AddonServiceOption[] = [];
const CAR_WHEELS_SERVICE_OPTIONS: AddonServiceOption[] = [];

// TODO: Add other vehicle types as they are implemented
const VEHICLE_SERVICES = {
  cars: CAR_SERVICE_OPTIONS,
  // trucks: TRUCK_SERVICE_OPTIONS,
  // rvs: RV_SERVICE_OPTIONS,
  // boats: BOAT_SERVICE_OPTIONS,
  // motorcycles: MOTORCYCLE_SERVICE_OPTIONS,
  // offroad: OFFROAD_SERVICE_OPTIONS,
  // other: OTHER_SERVICE_OPTIONS,
};

// Addon services for different vehicle types (flattened)
const VEHICLE_ADDON_SERVICES = {
  cars: CAR_ADDON_SERVICE_OPTIONS,
  // trucks: TRUCK_ADDON_SERVICE_OPTIONS,
  // rvs: RV_ADDON_SERVICE_OPTIONS,
  // boats: BOAT_ADDON_SERVICE_OPTIONS,
  // motorcycles: MOTORCYCLE_ADDON_SERVICE_OPTIONS,
  // offroad: OFFROAD_ADDON_SERVICE_OPTIONS,
  // other: OTHER_ADDON_SERVICE_OPTIONS,
};

// Map service names to specific addon categories
const getAddonServicesForService = (serviceName: string): AddonServiceOption[] => {
  const serviceNameLower = serviceName.toLowerCase();
  
  // Map service names to addon categories
  if (serviceNameLower.includes('trim') || 
      serviceNameLower.includes('interior-trim') ||
      serviceNameLower.includes('interior trim') ||
      serviceNameLower.includes('dash') ||
      serviceNameLower.includes('console') ||
      serviceNameLower.includes('panel')) {
    return CAR_INTERIOR_TRIM_SERVICE_OPTIONS;
  } else if (serviceNameLower.includes('window') || 
             serviceNameLower.includes('glass') ||
             serviceNameLower.includes('windshield') ||
             serviceNameLower.includes('tinted') ||
             serviceNameLower.includes('tint')) {
    return CAR_WINDOWS_SERVICE_OPTIONS;
  } else if (serviceNameLower.includes('wheel') || 
             serviceNameLower.includes('rim') ||
             serviceNameLower.includes('tire') ||
             serviceNameLower.includes('brake') ||
             serviceNameLower.includes('caliper')) {
    return CAR_WHEELS_SERVICE_OPTIONS;
  }
  
  // Default to all addon services if no specific match
  return CAR_ADDON_SERVICE_OPTIONS;
};

interface FeatureDropdownProps {
  selectedFeatures: string[];
  onFeaturesChange: (features: string[]) => void;
  vehicleType?: string;
  categoryType?: 'service-packages' | 'addons';
  serviceName?: string;
  disabled?: boolean;
}

export const FeatureDropdown: React.FC<FeatureDropdownProps> = ({
  selectedFeatures,
  onFeaturesChange,
  vehicleType = 'cars',
  categoryType = 'service-packages',
  serviceName,
  disabled = false
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [dropdownPosition, setDropdownPosition] = useState({ top: 0, left: 0 });
  const dropdownRef = useRef<HTMLDivElement>(null);

  // Get services for the current vehicle type and category
  const availableServices = categoryType === 'addons' 
    ? (serviceName ? getAddonServicesForService(serviceName) : VEHICLE_ADDON_SERVICES[vehicleType as keyof typeof VEHICLE_ADDON_SERVICES])
    : VEHICLE_SERVICES[vehicleType as keyof typeof VEHICLE_SERVICES];

  // Use all available services since we removed search
  const filteredServices = availableServices;

  // Get selected service objects (only service IDs)
  const selectedServiceObjects = selectedFeatures
    .map(id => availableServices.find(s => s.id === id))
    .filter(Boolean) as (ServiceOption | AddonServiceOption)[];

  // Handle service selection
  const handleServiceToggle = (serviceId: string) => {
    if (selectedFeatures.includes(serviceId)) {
      // Remove service
      onFeaturesChange(selectedFeatures.filter(id => id !== serviceId));
    } else {
      // Add service
      onFeaturesChange([...selectedFeatures, serviceId]);
    }
  };


  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      // Check if the click is outside both the button and the dropdown
      const target = event.target as Node;
      const isInsideButton = dropdownRef.current?.contains(target);
      const isInsideDropdown = document.querySelector('[data-dropdown-portal]')?.contains(target);
      
      if (!isInsideButton && !isInsideDropdown) {
        setIsOpen(false);
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  return (
    <div className="space-y-3">
      <label className="block text-sm font-medium text-gray-300">
        {categoryType === 'addons' ? 'Addon Services' : 'Service Options'}
      </label>
      
      {/* Selected Services Display */}
      {selectedServiceObjects.length > 0 && (
        <div className="space-y-2">
          <div className="text-xs text-gray-400">
            {selectedServiceObjects.length} service{selectedServiceObjects.length !== 1 ? 's' : ''} selected:
          </div>
          <div className="flex flex-wrap gap-2">
            {selectedServiceObjects.map((service) => (
              <div
                key={service.id}
                className="inline-flex items-center gap-2 bg-blue-900 text-blue-200 px-3 py-1 rounded-full text-sm"
              >
                <span>{service.name}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Dropdown */}
      <div className="relative" ref={dropdownRef}>
        <button
          type="button"
          onClick={() => {
            if (!isOpen && dropdownRef.current) {
              const rect = dropdownRef.current.getBoundingClientRect();
              setDropdownPosition({
                top: rect.bottom + window.scrollY + 4,
                left: rect.left + window.scrollX
              });
            }
            setIsOpen(!isOpen);
          }}
          disabled={disabled}
          className="w-full bg-gray-600 border border-gray-500 rounded px-3 py-2 text-left text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-between"
        >
          <span className="text-gray-300">
            {selectedServiceObjects.length > 0 
              ? `Add more ${categoryType === 'addons' ? 'addons' : 'services'} (${selectedServiceObjects.length} selected)`
              : `Select ${categoryType === 'addons' ? 'addons' : 'services'}...`
            }
          </span>
          <ChevronDown className={`h-4 w-4 text-gray-400 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
        </button>

        {isOpen && createPortal(
          <div 
            data-dropdown-portal
            className="fixed z-[60] w-96 bg-gray-700 border border-gray-600 rounded-lg shadow-lg" 
            style={{ 
              top: dropdownPosition.top,
              left: dropdownPosition.left
            }}
          >
            {/* Services List */}
            <div>
              {filteredServices.length > 0 ? (
                <div className="py-1">
                  <div className="grid grid-cols-2 gap-0">
                    {filteredServices.map((service) => {
                      const isSelected = selectedFeatures.includes(service.id);
                      return (
                        <button
                          key={service.id}
                          type="button"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleServiceToggle(service.id);
                          }}
                          className={`w-full text-left px-3 py-2 hover:bg-gray-600 transition-colors flex items-center gap-2 ${
                            isSelected ? 'bg-blue-900 text-blue-200' : 'text-gray-300'
                          }`}
                        >
                          <div className={`w-4 h-4 rounded border-2 flex items-center justify-center ${
                            isSelected 
                              ? 'bg-blue-500 border-blue-500' 
                              : 'border-gray-400'
                          }`}>
                            {isSelected && (
                              <div className="w-2 h-2 bg-white rounded-sm" />
                            )}
                          </div>
                          <span className="text-sm">{service.name}</span>
                        </button>
                      );
                    })}
                  </div>
                </div>
              ) : (
                <div className="px-3 py-4 text-center text-gray-400 text-sm">
                  No services available
                </div>
              )}
            </div>

            {/* Footer */}
            <div className="p-3 border-t border-gray-600 bg-gray-800">
              <div className="text-xs text-gray-400 text-center">
                Select {categoryType === 'addons' ? 'addons' : 'services'} to add to this service tier
              </div>
            </div>
          </div>,
          document.body
        )}
      </div>

      {/* Help Text */}
      <div className="text-xs text-gray-400">
        Choose from our standardized {categoryType === 'addons' ? 'addon' : 'service'} list to ensure consistent service descriptions for customers.
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\services\components\FeatureList.tsx
============================
import React, { useState } from 'react';
import { ChevronDown, ChevronRight, X } from 'lucide-react';

import type { ServiceFeature } from '../types/ServiceFeature';

interface FeatureListProps {
  features: ServiceFeature[];
  tierNames?: string[];
  onRemoveFeature?: (serviceId: string, tierId: string, groupTierName: string) => void;
  showRemoveButtons?: boolean;
  currentTierId?: string;
  allTiers?: Array<{ id: string; name: string; features: string[] }>;
}

export const FeatureList: React.FC<FeatureListProps> = ({ 
  features, 
  tierNames: _tierNames, 
  onRemoveFeature, 
  showRemoveButtons = false,
  currentTierId,
  allTiers: _allTiers = []
}) => {
  const [expandedTiers, setExpandedTiers] = useState<Set<string>>(new Set());

  const toggleTier = (tierId: string) => {
    setExpandedTiers(prev => {
      const newSet = new Set(prev);
      if (newSet.has(tierId)) {
        newSet.delete(tierId);
      } else {
        newSet.add(tierId);
      }
      return newSet;
    });
  };

  const renderFeature = (feature: ServiceFeature, depth = 0, groupTierName?: string) => {
    const isExpanded = expandedTiers.has(feature.id);
    const isTier = feature.type === 'tier';
    const hasChildren = feature.children && feature.children.length > 0;

    return (
      <div key={feature.id} className="ml-2">
        <div className="flex items-center gap-2 py-1 group">
          {isTier && hasChildren && (
            <button
              onClick={() => { toggleTier(feature.id); }}
              className="text-gray-400 hover:text-gray-200 transition-colors"
            >
              {isExpanded ? (
                <ChevronDown className="h-3 w-3" />
              ) : (
                <ChevronRight className="h-3 w-3" />
              )}
            </button>
          )}
          {!isTier && <div className="w-3" />} {/* Spacer for alignment */}
          
          <span className={`text-sm flex-1 ${isTier ? 'font-medium text-blue-300' : 'text-gray-300'}`}>
            {isTier ? '📦 ' : '• '}{feature.name}
          </span>
          
          {showRemoveButtons && !isTier && onRemoveFeature && currentTierId && (
            <button
              onClick={() => { onRemoveFeature(feature.id, currentTierId, groupTierName || ''); }}
              className="opacity-0 group-hover:opacity-100 text-red-400 hover:text-red-300 transition-all duration-200 p-1"
              title="Remove feature"
            >
              <X className="h-3 w-3" />
            </button>
          )}
        </div>
        
        {isTier && hasChildren && isExpanded && (
          <div className="ml-4">
            {feature.children?.map(child => renderFeature(child, depth + 1, feature.name))}
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="space-y-1">
      {features.map(feature => renderFeature(feature))}
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\services\components\MultiTierPricingModal.tsx
============================
import React, { useEffect,useRef, useState } from 'react';
import { Edit2, Plus, Save, Trash2, X } from 'lucide-react';

import { Button } from '@/shared/ui';

import { FeatureDropdown } from './FeatureDropdown';
// Disabled affiliate services import
// import { CAR_SERVICE_OPTIONS } from '@/data/affiliate-services/cars/service/features';

// Fallback empty data
const CAR_SERVICE_OPTIONS: Array<{ id: string; name: string }> = [];
import { Service, Tier } from '../types/ServiceClasses';

// Using Service and Tier classes from ServiceClasses.ts

// Plain tier object structure (for deserialization)
interface TierData {
  id: string;
  name: string;
  price: number;
  duration: number;
  features?: string[];
  serviceOptions?: string[];
  tierCopies?: Record<string, string>;
  enabled: boolean;
  popular: boolean;
}

interface MultiTierPricingModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (serviceName: string, tiers: Tier[]) => void;
  initialTiers?: TierData[];
  initialServiceName?: string;
  loading?: boolean;
  error?: string | null;
  vehicleType?: string;
  categoryType?: 'service-packages' | 'addons';
}

export const MultiTierPricingModal: React.FC<MultiTierPricingModalProps> = ({
  isOpen,
  onClose,
  onSubmit,
  initialTiers = [],
  initialServiceName = '',
  loading = false,
  error = null,
  vehicleType = 'cars',
  categoryType = 'service-packages'
}) => {
  const [serviceName, setServiceName] = useState<string>(initialServiceName);
  const [service, setService] = useState<Service>(() => {
    if (initialTiers.length > 0) {
      const service = new Service('temp-id', initialServiceName);
        initialTiers.forEach(tierData => {
          const tier = new Tier(tierData.id, tierData.name, tierData.price, tierData.duration);
          tier.serviceOptions = tierData.serviceOptions || [];
          tier.enabled = tierData.enabled;
          tier.popular = tierData.popular;
          service.addTier(tier);
        });
      return service;
    } else {
      const service = new Service('temp-id', initialServiceName);
      service.addTier(createDefaultTier());
      return service;
    }
  });
  const [editingTierId, setEditingTierId] = useState<string | null>(null);
  const [editingTier, setEditingTier] = useState<Tier | null>(null);
  const scrollContainerRef = useRef<HTMLDivElement>(null);
  const prevInitialTiersRef = useRef<TierData[] | undefined>(initialTiers);
  const prevInitialServiceNameRef = useRef<string | undefined>(initialServiceName);

  // Update tiers and service name when initial values change (for editing existing services)
  useEffect(() => {
    // Force update when initialTiers has data, regardless of comparison
    const hasInitialTiers = initialTiers.length > 0;
    const tiersChanged = JSON.stringify(prevInitialTiersRef.current) !== JSON.stringify(initialTiers);
    const serviceNameChanged = prevInitialServiceNameRef.current !== initialServiceName;
    
    if (tiersChanged || hasInitialTiers) {
      if (initialTiers.length > 0) {
        // Convert old format to new Service class format
        const service = new Service('temp-id', initialServiceName);
        initialTiers.forEach(tierData => {
          const tier = new Tier(tierData.id, tierData.name, tierData.price, tierData.duration);
          // Convert features to serviceOptions for the new structure
          tier.serviceOptions = tierData.serviceOptions || [];
          tier.enabled = tierData.enabled;
          tier.popular = tierData.popular;
          service.addTier(tier);
        });
        setService(service);
      } else {
        const service = new Service('temp-id', initialServiceName);
        service.addTier(createDefaultTier());
        setService(service);
      }
      // Reset editing state when switching between create/edit modes
      setEditingTierId(null);
      setEditingTier(null);
      prevInitialTiersRef.current = initialTiers;
    }
    
    if (serviceNameChanged) {
      setServiceName(initialServiceName);
      prevInitialServiceNameRef.current = initialServiceName;
    }
  }, [initialTiers, initialServiceName]);

  function createDefaultTier(): Tier {
    return new Tier(
      `tier-${Date.now().toString()}-${Math.random().toString(36).substring(2, 11)}`,
      '',
      0,
      60
    );
  }

  // Helper function to ensure tier is a Tier class instance
  const ensureTierInstance = (tier: Tier | TierData): Tier => {
    if (tier instanceof Tier) {
      return tier;
    } else {
      // Convert plain object back to Tier instance
      const tierInstance = new Tier(tier.id, tier.name, tier.price, tier.duration);
      tierInstance.serviceOptions = tier.serviceOptions || [];
      tierInstance.tierCopies = tier.tierCopies || {};
      tierInstance.enabled = tier.enabled;
      tierInstance.popular = tier.popular;
      return tierInstance;
    }
  }

  const addTier = () => {
    setService(prev => {
      const newService = new Service(prev.id, prev.name);
      prev.tiers.forEach(tier => {
        newService.addTier(ensureTierInstance(tier));
      });
      newService.addTier(createDefaultTier());
      return newService;
    });
    // Scroll to the right to show the new tier
    setTimeout(() => {
      if (scrollContainerRef.current) {
        scrollContainerRef.current.scrollLeft = scrollContainerRef.current.scrollWidth;
      }
    }, 100);
  };

  const removeTier = (tierId: string) => {
    if (service.tiers.length > 1) {
    setService(prev => {
      const newService = new Service(prev.id, prev.name);
      prev.tiers.forEach(tier => {
        if (tier.id !== tierId) {
          newService.addTier(ensureTierInstance(tier));
        }
      });
      return newService;
    });
      if (editingTierId === tierId) {
        setEditingTierId(null);
        setEditingTier(null);
      }
    }
  };

  const startEditing = (tier: Tier) => {
    setEditingTierId(tier.id);
    setEditingTier({ ...tier });
  };

  const saveTier = () => {
    if (editingTier) {
    setService(prev => {
      const newService = new Service(prev.id, prev.name);
      prev.tiers.forEach(tier => {
        if (tier.id === editingTier.id) {
          newService.addTier(editingTier);
        } else {
          newService.addTier(ensureTierInstance(tier));
        }
      });
      return newService;
    });
      setEditingTierId(null);
      setEditingTier(null);
    }
  };

  const cancelEditing = () => {
    setEditingTierId(null);
    setEditingTier(null);
  };

  const updateEditingTier = (field: keyof Tier, value: string | number | boolean | string[]) => {
    if (editingTier) {
      setEditingTier({ ...editingTier, [field]: value });
    }
  };


  const handleSubmit = () => {
    // Validate service name
    if (!serviceName.trim()) {
      return;
    }
    
    // Filter out tiers with empty names and convert to backend format
    const validTiers = service.tiers
      .filter(tier => tier.name.trim() !== '')
      .map(tier => ({
        id: tier.id,
        name: tier.name,
        price: tier.price,
        duration: tier.duration,
        features: tier.serviceOptions, // Convert serviceOptions to features for backend
        enabled: tier.enabled,
        popular: tier.popular
      }));
    
    if (validTiers.length > 0) {
      onSubmit(serviceName.trim(), validTiers);
    }
  };

  const handleClose = () => {
    // Reset to initial state when closing
    if (initialTiers.length > 0) {
      const service = new Service('temp-id', initialServiceName);
      initialTiers.forEach(tierData => {
        const tier = new Tier(tierData.id, tierData.name, tierData.price, tierData.duration);
        tier.serviceOptions = tierData.serviceOptions || [];
        tier.enabled = tierData.enabled;
        tier.popular = tierData.popular;
        service.addTier(tier);
      });
      setService(service);
    } else {
      const service = new Service('temp-id', initialServiceName);
      service.addTier(createDefaultTier());
      setService(service);
    }
    setServiceName(initialServiceName);
    setEditingTierId(null);
    setEditingTier(null);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-gray-800 rounded-lg w-full max-w-6xl max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-700">
          <h2 className="text-xl font-semibold text-white">Multi-Tier Pricing</h2>
          <Button
            onClick={handleClose}
            variant="ghost"
            size="sm"
            className="text-gray-400 hover:text-white p-2"
          >
            <X className="h-6 w-6" />
          </Button>
        </div>

        {/* Content */}
        <div className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
          {/* Error Display */}
          {error && (
            <div className="mb-4 p-3 bg-red-900 border border-red-700 rounded-lg">
              <div className="text-red-200 text-sm">
                <strong>Error:</strong> {error}
              </div>
            </div>
          )}
          
          {/* Service Name */}
          <div className="mb-6">
            <label htmlFor="service-name" className="block text-sm font-medium text-gray-300 mb-2">
              Service Name
            </label>
            <input
              id="service-name"
              type="text"
              value={serviceName}
              onChange={(e) => { setServiceName(e.target.value); }}
              className="w-full bg-gray-600 border border-gray-500 rounded px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="e.g., Premium Auto Detail, Basic Wash, etc."
            />
          </div>
          
          {/* Tiers Container */}
          <div className="mb-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-white">Service Tiers</h3>
              <Button
                onClick={addTier}
                variant="primary"
                size="md"
                className="px-4 py-2"
                leftIcon={<Plus className="h-4 w-4" />}
              >
                Add Tier
              </Button>
            </div>

            {/* Scrollable Tiers */}
            <div 
              ref={scrollContainerRef}
              className="flex gap-4 overflow-x-auto pb-4"
              style={{ 
                scrollbarWidth: 'thin',
                scrollbarColor: '#6B7280 #374151'
              }}
            >
              {service.tiers.map((tier, index) => {
                // Ensure tier is a Tier class instance
                const tierInstance = ensureTierInstance(tier);
                return (
                <div
                  key={tierInstance.id}
                  className={`min-w-[300px] bg-gray-700 rounded-lg p-4 border-2 ${
                    editingTierId === tierInstance.id ? 'border-blue-500' : 'border-gray-600'
                  }`}
                >
                  {/* Tier Header */}
                  <div className="flex items-center justify-between mb-3">
                    <span className="text-sm text-gray-400">Tier {index + 1}</span>
                    <div className="flex gap-2">
                      {editingTierId === tier.id ? (
                        <>
                          <Button
                            onClick={saveTier}
                            variant="ghost"
                            size="sm"
                            className="text-green-400 hover:text-green-300 p-1"
                            title="Save"
                          >
                            <Save className="h-4 w-4" />
                          </Button>
                          <Button
                            onClick={cancelEditing}
                            variant="ghost"
                            size="sm"
                            className="text-gray-400 hover:text-gray-300 p-1"
                            title="Cancel"
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </>
                      ) : (
                        <Button
                          onClick={() => { startEditing(tier); }}
                          variant="ghost"
                          size="sm"
                          className="text-blue-400 hover:text-blue-300 p-1"
                          title="Edit"
                        >
                          <Edit2 className="h-4 w-4" />
                        </Button>
                      )}
                      {service.tiers.length > 1 && (
                        <Button
                          onClick={() => { removeTier(tier.id); }}
                          variant="ghost"
                          size="sm"
                          className="text-red-400 hover:text-red-300 p-1"
                          title="Remove Tier"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                  </div>

                  {/* Tier Content */}
                  {editingTierId === tier.id && editingTier ? (
                    <div className="space-y-3">
                      {/* Tier Name */}
                      <div>
                        <label htmlFor={`tier-name-${tier.id}`} className="block text-sm font-medium text-gray-300 mb-1">
                          Tier Name
                        </label>
                        <input
                          id={`tier-name-${tier.id}`}
                          type="text"
                          value={editingTier.name}
                          onChange={(e) => { updateEditingTier('name', e.target.value); }}
                          className="w-full bg-gray-600 border border-gray-500 rounded px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="e.g., Basic, Premium, Ultimate"
                        />
                      </div>

                      {/* Price */}
                      <div>
                        <label htmlFor={`tier-price-${tier.id}`} className="block text-sm font-medium text-gray-300 mb-1">
                          Price ($)
                        </label>
                        <input
                          id={`tier-price-${tier.id}`}
                          type="text"
                          value={editingTier.price}
                          onChange={(e) => {
                            const value = e.target.value;
                            // Allow numbers, decimal point, and empty string
                            if (value === '' || /^\d*\.?\d*$/.test(value)) {
                              const numValue = value === '' ? 0 : parseFloat(value) || 0;
                              updateEditingTier('price', numValue);
                            }
                          }}
                          className="w-full bg-gray-600 border border-gray-500 rounded px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="0.00"
                        />
                      </div>

                      {/* Duration */}
                      <div>
                        <label htmlFor={`tier-duration-${tier.id}`} className="block text-sm font-medium text-gray-300 mb-1">
                          Duration (minutes)
                        </label>
                        <input
                          id={`tier-duration-${tier.id}`}
                          type="text"
                          value={editingTier.duration}
                          onChange={(e) => {
                            const value = e.target.value;
                            // Only allow numbers and empty string
                            if (value === '' || /^\d+$/.test(value)) {
                              const numValue = value === '' ? 0 : parseInt(value, 10);
                              updateEditingTier('duration', numValue);
                            }
                          }}
                          className="w-full bg-gray-600 border border-gray-500 rounded px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="60"
                        />
                      </div>

                      {/* Features */}
                      <FeatureDropdown
                        selectedFeatures={editingTier.serviceOptions}
                        onFeaturesChange={(features) => { updateEditingTier('serviceOptions', features); }}
                        vehicleType={vehicleType}
                        categoryType={categoryType}
                        serviceName={serviceName}
                        disabled={false}
                      />

                      {/* Toggles */}
                      <div className="flex gap-4">
                        <label className="flex items-center gap-2">
                          <input
                            type="checkbox"
                            checked={editingTier.enabled}
                            onChange={(e) => { updateEditingTier('enabled', e.target.checked); }}
                            className="rounded border-gray-500 text-blue-500 focus:ring-blue-500"
                          />
                          <span className="text-sm text-gray-300">Enabled</span>
                        </label>
                        <label className="flex items-center gap-2">
                          <input
                            type="checkbox"
                            checked={editingTier.popular}
                            onChange={(e) => { updateEditingTier('popular', e.target.checked); }}
                            className="rounded border-gray-500 text-blue-500 focus:ring-blue-500"
                          />
                          <span className="text-sm text-gray-300">Popular</span>
                        </label>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      {/* Display Mode */}
                      <div>
                        <h4 className="font-medium text-white mb-2">
                          {tierInstance.name || `Tier ${(index + 1).toString()}`}
                        </h4>
                        <div className="text-2xl font-bold text-green-400">
                          ${tierInstance.price.toFixed(2)}
                        </div>
                        <div className="text-sm text-gray-400">
                          {tierInstance.duration} minutes
                        </div>
                      </div>

                      {/* Features */}
                      {tierInstance.serviceOptions.length > 0 && (
                        <div>
                          <h5 className="text-sm font-medium text-gray-300 mb-2">Features:</h5>
                          <ul className="space-y-1">
                            {tierInstance.serviceOptions.map(option => {
                              const serviceOption = CAR_SERVICE_OPTIONS.find(s => s.id === option);
                              
                              return (
                                <li key={option} className="text-sm text-gray-300 flex items-center">
                                  <span className="w-2 h-2 bg-gray-400 rounded-full mr-2"></span>
                                  {serviceOption?.name || option}
                                </li>
                              );
                            })}
                          </ul>
                        </div>
                      )}

                      {/* Status */}
                      <div className="flex gap-2">
                        {!tier.enabled && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-900 text-red-200">
                            Disabled
                          </span>
                        )}
                        {tier.popular && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-900 text-yellow-200">
                            Popular
                          </span>
                        )}
                      </div>
                    </div>
                  )}
                </div>
                );
              })}
            </div>
          </div>

          
        </div>

        {/* Footer */}
        <div className="flex items-center justify-end gap-3 p-6 border-t border-gray-700">
          <Button
            onClick={handleClose}
            variant="ghost"
            size="md"
            className="px-4 py-2 text-gray-300 hover:text-white"
          >
            Cancel
          </Button>
          <Button
            onClick={handleSubmit}
            variant="primary"
            size="md"
            loading={loading}
            disabled={!serviceName.trim() || service.tiers.filter(t => t.name.trim()).length === 0}
            className="px-6 py-2"
          >
            {loading ? 'Saving...' : 'Save Service'}
          </Button>
        </div>
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\services\components\SelectedServiceDetailsDisplay.tsx
============================
import React from 'react';

import type { Service } from '../types';

interface SelectedServiceDetailsDisplayProps {
  currentServiceData: Service | null;
}

export const SelectedServiceDetailsDisplay: React.FC<SelectedServiceDetailsDisplayProps> = ({
  currentServiceData,
}) => {
  if (!currentServiceData) {
    return null;
  }

  return (
    <div className="bg-stone-800 rounded-lg border border-stone-700 p-6">
      <h3 className="text-lg font-semibold text-white mb-4">
        Selected Service: {currentServiceData.name}
      </h3>
      
      {currentServiceData.tiers.length > 0 ? (
        <div className="space-y-4">
          <div className="text-sm text-gray-400 mb-2">
            {currentServiceData.tiers.length} tier{currentServiceData.tiers.length !== 1 ? 's' : ''} configured:
          </div>
          <div className="space-y-4">
            {currentServiceData.tiers.map((tier, index) => (
              <div key={tier.id} className="bg-stone-700 rounded-lg p-4 border border-stone-600">
                <div className="flex items-center justify-between mb-2">
                  <h4 className="font-medium text-white">{tier.name}</h4>
                  <span className="text-xs text-gray-400">Tier {index + 1}</span>
                </div>
                <div className="space-y-2">
                  <div className="text-2xl font-bold text-green-400">
                    ${Number(tier.price).toFixed(2)}
                  </div>
                  <div className="text-sm text-gray-400">
                    {tier.duration} minutes
                  </div>
                  {tier.features.length > 0 && (
                    <div className="text-sm text-gray-300">
                      <div className="font-medium mb-2">Features:</div>
                      <ul className="list-disc list-inside space-y-1">
                        {tier.features.map((feature, idx) => (
                          <li key={idx} className="text-gray-400">{feature}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                  <div className="flex gap-2 mt-3">
                    {tier.enabled && (
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-900 text-green-200">
                        Enabled
                      </span>
                    )}
                    {tier.popular && (
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-900 text-yellow-200">
                        Popular
                      </span>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ) : (
        <div className="text-gray-400">No tiers configured for this service.</div>
      )}
    </div>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\services\components\SelectedServiceDisplay.tsx
============================
/**
 * Display component for showing selected service details and tiers
 */

import React from 'react';

import type { Service } from '../types';
import { buildTierDisplayStructure, resolveServiceNames } from '../types/ServiceFeature';
import { FeatureList } from './FeatureList';

interface SelectedServiceDisplayProps {
  service: Service;
  availableFeatures: Array<{ id: string; name: string }>;
  onRemoveFeature: (serviceId: string, currentTierId: string, groupTierName: string) => void;
}

export const SelectedServiceDisplay: React.FC<SelectedServiceDisplayProps> = ({
  service,
  availableFeatures,
  onRemoveFeature
}) => {
  return (
    <div className="bg-stone-800 rounded-lg border border-stone-700 p-6">
      <h3 className="text-lg font-semibold text-white mb-4">Selected Service: {service.name}</h3>
      
      {service.tiers.length > 0 ? (
        <div className="space-y-4">
          <div className="text-sm text-gray-400 mb-2">
            {service.tiers.length} tier{service.tiers.length !== 1 ? 's' : ''} configured:
          </div>
          <div className="space-y-4">
            {service.tiers.map((tier, index) => (
              <div key={tier.id} className="bg-stone-700 rounded-lg p-4 border border-stone-600">
                <div className="flex items-center justify-between mb-2">
                  <h4 className="font-medium text-white">{tier.name}</h4>
                  <span className="text-xs text-gray-400">Tier {index + 1}</span>
                </div>
                <div className="space-y-2">
                  <div className="text-2xl font-bold text-green-400">
                    ${(tier.priceCents / 100).toFixed(2)}
                  </div>
                  <div className="text-sm text-gray-400">
                    {tier.durationMinutes} minutes
                  </div>
                  {tier.features.length > 0 && (
                    <div className="text-sm text-gray-300">
                      <div className="font-medium mb-2">Features:</div>
                      <FeatureList 
                        features={resolveServiceNames(
                          buildTierDisplayStructure(tier, service.tiers || [], availableFeatures),
                          availableFeatures
                        )}
                        tierNames={service.tiers?.map(t => t.name) || []}
                        onRemoveFeature={onRemoveFeature}
                        showRemoveButtons={true}
                        currentTierId={`tier-${tier.id}`}
                        allTiers={service.tiers || []}
                      />
                    </div>
                  )}
                  <div className="flex gap-2 mt-3">
                    {tier.enabled && (
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-900 text-green-200">
                        Enabled
                      </span>
                    )}
                    {tier.popular && (
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-900 text-yellow-200">
                        Popular
                      </span>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ) : (
        <div className="text-gray-400">No tiers configured for this service.</div>
      )}
    </div>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\services\components\ServiceActionsHeader.tsx
============================
/**
 * Action buttons header for service management
 */

import React from 'react';
import { Plus, Settings, Trash2 } from 'lucide-react';

import { Button } from '@/shared/ui';

interface ServiceActionsHeaderProps {
  onEditService: () => void;
  onAddService: () => void;
  onDeleteService: () => void;
  hasSelectedService: boolean;
}

export const ServiceActionsHeader: React.FC<ServiceActionsHeaderProps> = ({
  onEditService,
  onAddService,
  onDeleteService,
  hasSelectedService
}) => {
  return (
    <div className="p-4 border-b border-stone-700">
      <div className="grid grid-cols-[200px_200px_200px_auto] gap-0">
        <h3 className="text-lg font-semibold text-white px-4">Vehicle</h3>
        <h3 className="text-lg font-semibold text-white px-4">Category</h3>
        <h3 className="text-lg font-semibold text-white px-4">Service</h3>
        <div className="flex items-center justify-end space-x-2">
          <Button 
            variant="ghost"
            size="icon"
            className="p-2 text-gray-400 hover:text-white"
            title="Edit Service"
            onClick={onEditService}
            disabled={!hasSelectedService}
          >
            <Settings className="h-5 w-5" />
          </Button>
          <Button 
            variant="primary"
            size="icon"
            className="p-2 bg-green-500 hover:bg-green-600"
            title="Add Service"
            onClick={onAddService}
            leftIcon={<Plus className="h-5 w-5" />}
          />
          <Button 
            variant="destructive"
            size="icon"
            className="p-2 bg-red-500 hover:bg-red-600"
            title="Delete Service"
            onClick={onDeleteService}
            disabled={!hasSelectedService}
            leftIcon={<Trash2 className="h-5 w-5" />}
          />
        </div>
      </div>
    </div>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\services\components\ServiceSelector.tsx
============================
import React from 'react';

import type { Service } from '../types';

interface ServiceSelectorProps {
  services: Service[];
  selectedService: string;
  onServiceChange: (serviceId: string) => void;
}

export const ServiceSelector: React.FC<ServiceSelectorProps> = ({
  services,
  selectedService,
  onServiceChange
}) => {
  return (
    <div className="p-4">
      {services.map((service) => {
        const isSelected = selectedService === service.id;
        
        return (
          <button
            key={service.id}
            onClick={() => { onServiceChange(service.id); }}
              className={`w-full flex items-center space-x-3 p-3 mb-2 rounded-lg text-left transition-colors ${
              isSelected 
                ? 'bg-purple-600 text-white' 
                : 'text-gray-300 hover:bg-stone-700 hover:text-white'
            }`}
          >
            <span>{service.name}</span>
          </button>
        );
      })}
    </div>
  );
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\services\components\ServiceTierCards.tsx
============================
import React, { useState } from 'react';
import { Star } from 'lucide-react';
import { Check, Edit3, Plus,X } from 'lucide-react';

import type { Service } from '../types';

interface ServiceTierCardsProps {
  service: Service;
  onToggleTier: (tierId: string) => void;
  onUpdateTier?: (tierId: string, updates: Partial<ServiceTier>) => void;
}

interface ServiceTier {
  id: string;
  name: string;
  price: number;
  duration: number;
  features: string[];
  enabled: boolean;
  popular?: boolean;
}

export const ServiceTierCards: React.FC<ServiceTierCardsProps> = ({
  service,
  onToggleTier,
  onUpdateTier
}) => {
  const [editingTier, setEditingTier] = useState<string | null>(null);
  const [editData, setEditData] = useState<Partial<ServiceTier>>({});

  const getTierIcon = () => {
    // Use a more generic approach - could be enhanced with tier metadata later
    return Star;
  };

  const startEditing = (tier: ServiceTier) => {
    setEditingTier(tier.id);
    setEditData({
      name: tier.name,
      price: tier.price,
      duration: tier.duration,
      features: [...tier.features]
    });
  };

  const saveChanges = () => {
    if (editingTier && onUpdateTier) {
      onUpdateTier(editingTier, editData);
    }
    setEditingTier(null);
    setEditData({});
  };

  const cancelEditing = () => {
    setEditingTier(null);
    setEditData({});
  };

  const isEditing = (tierId: string) => editingTier === tierId;

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      {service.tiers.map((tier) => {
        const TierIcon = getTierIcon();

        return (
          <div
            key={tier.id}
            className={`bg-stone-800 rounded-lg border p-6 relative transition-all cursor-pointer hover:border-stone-600 text-left w-full ${
              isEditing(tier.id) 
                ? 'border-orange-500 shadow-lg' 
                : 'border-stone-700'
            }`}
            onClick={() => {
              if (!isEditing(tier.id)) {
                startEditing(tier);
              }
            }}
            onKeyDown={(e) => {
              if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                if (!isEditing(tier.id)) {
                  startEditing(tier);
                }
              }
            }}
            role="button"
            tabIndex={0}
            aria-label={`Edit ${tier.name} tier`}
          >
            {tier.popular && (
              <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
                <span className="bg-blue-500 text-white px-3 py-1 rounded-full text-sm font-medium">
                  Most Popular
                </span>
              </div>
            )}

            {/* Edit Controls */}
            {isEditing(tier.id) && (
              <div className="absolute top-4 right-4 flex space-x-2">
                <button onClick={(e) => { e.stopPropagation(); saveChanges(); }} className="bg-green-500 hover:bg-green-600 text-white p-1 rounded">
                  <Check className="h-4 w-4" />
                </button>
                <button onClick={(e) => { e.stopPropagation(); cancelEditing(); }} className="bg-red-500 hover:bg-red-600 text-white p-1 rounded">
                  <X className="h-4 w-4" />
                </button>
              </div>
            )}

            <div className="text-center mb-6">
              <div className="bg-blue-500 w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-4">
                <TierIcon className="h-6 w-6 text-white" />
              </div>
              
              {/* Tier Name */}
              {isEditing(tier.id) ? (
                <input
                  type="text"
                  id={`tier-name-${tier.id}`}
                  name="tierName"
                  value={editData.name || ''}
                  onChange={(e) => { setEditData(prev => ({ ...prev, name: e.target.value })); }}
                  onClick={(e) => { e.stopPropagation(); }}
                  className="text-xl font-bold text-white mb-2 bg-stone-700 border border-stone-600 rounded px-2 py-1 text-center w-full focus:outline-none focus:ring-2 focus:ring-orange-500"
                />
              ) : (
                <h3 className="text-xl font-bold text-white mb-2">{tier.name}</h3>
              )}
              
              {/* Price */}
              <div className="flex items-center justify-center mb-1">
                <span className="text-3xl font-bold text-white">$</span>
                {isEditing(tier.id) ? (
                  <input
                    type="number"
                    id={`tier-price-${tier.id}`}
                    name="tierPrice"
                    step="0.01"
                    value={editData.price || ''}
                    onChange={(e) => { setEditData(prev => ({ ...prev, price: parseFloat(e.target.value) || 0 })); }}
                    onClick={(e) => { e.stopPropagation(); }}
                    className="text-3xl font-bold text-white bg-stone-700 border border-stone-600 rounded px-2 py-1 text-center w-24 focus:outline-none focus:ring-2 focus:ring-orange-500"
                  />
                ) : (
                  <span className="text-3xl font-bold text-white">{Number(tier.price).toFixed(2)}</span>
                )}
              </div>
              
              {/* Duration */}
              <div className="flex items-center justify-center text-gray-400 text-sm">
                <span className="w-2 h-2 bg-gray-400 rounded-full mr-2"></span>
                {isEditing(tier.id) ? (
                  <div className="flex items-center">
                    <input
                      type="number"
                      id={`tier-duration-${tier.id}`}
                      name="tierDuration"
                      min="0.5"
                      step="0.5"
                      value={editData.duration || ''}
                      onChange={(e) => { setEditData(prev => ({ ...prev, duration: parseFloat(e.target.value) || 0 })); }}
                      onClick={(e) => { e.stopPropagation(); }}
                      className="bg-stone-700 border border-stone-600 rounded px-2 py-1 text-center w-16 text-gray-300 focus:outline-none focus:ring-2 focus:ring-orange-500"
                    />
                    <span className="ml-1">hour{(editData.duration || 0) > 1 ? 's' : ''}</span>
                  </div>
                ) : (
                  <span>{tier.duration} hour{tier.duration > 1 ? 's' : ''}</span>
                )}
              </div>
            </div>

            <div className="space-y-3 mb-6">
              {(isEditing(tier.id) ? editData.features || [] : tier.features).map((feature, index) => (
                <div key={index} className="flex items-center text-gray-300">
                  <span className="w-2 h-2 bg-blue-400 rounded-full mr-3 flex-shrink-0"></span>
                  {isEditing(tier.id) ? (
                    <div className="flex items-center flex-1">
                      <input
                        type="text"
                        id={`tier-feature-${tier.id}-${String(index)}`}
                        name="tierFeature"
                        value={feature}
                        onChange={(e) => {
                          const newFeatures = [...(editData.features || [])];
                          newFeatures[index] = e.target.value;
                          setEditData(prev => ({ ...prev, features: newFeatures }));
                        }}
                        onClick={(e) => { e.stopPropagation(); }}
                        className="flex-1 bg-stone-700 border border-stone-600 rounded px-2 py-1 text-gray-300 focus:outline-none focus:ring-2 focus:ring-orange-500"
                      />
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          const newFeatures = [...(editData.features || [])];
                          newFeatures.splice(index, 1);
                          setEditData(prev => ({ ...prev, features: newFeatures }));
                        }}
                        className="ml-2 text-red-400 hover:text-red-300 transition-colors"
                        title="Remove feature"
                      >
                        <X className="h-4 w-4" />
                      </button>
                    </div>
                  ) : (
                    <span>{feature}</span>
                  )}
                </div>
              ))}
              
              {/* Add Feature Button - only show when editing */}
              {isEditing(tier.id) && (
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    const newFeatures = [...(editData.features || []), 'New feature'];
                    setEditData(prev => ({ ...prev, features: newFeatures }));
                  }}
                  className="flex items-center text-gray-400 hover:text-white transition-colors mt-2"
                >
                  <span className="w-2 h-2 bg-gray-400 rounded-full mr-3 flex-shrink-0"></span>
                  <Plus className="h-4 w-4 mr-2" />
                  <span className="text-sm">Add feature</span>
                </button>
              )}
            </div>

            <div className="flex items-center justify-between">
              <span className="text-gray-300">
                {tier.enabled ? 'Enabled' : 'Disabled'}
              </span>
              <button
                onClick={(e) => { e.stopPropagation(); onToggleTier(tier.id); }}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                  tier.enabled ? 'bg-green-500' : 'bg-gray-600'
                }`}
              >
                <span
                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                    tier.enabled ? 'translate-x-6' : 'translate-x-1'
                  }`}
                />
              </button>
            </div>

            {/* Edit Hint */}
            {!isEditing(tier.id) && (
              <div className="absolute bottom-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                <Edit3 className="h-4 w-4 text-gray-500" />
              </div>
            )}
          </div>
        );
      })}
    </div>
  );
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\services\components\VehicleSelector.tsx
============================
import React from 'react';

import type { Vehicle } from '../types';

interface VehicleSelectorProps {
  vehicles: Vehicle[];
  selectedVehicle: string;
  onVehicleChange: (vehicleId: string) => void;
}

export const VehicleSelector: React.FC<VehicleSelectorProps> = ({
  vehicles,
  selectedVehicle,
  onVehicleChange
}) => {
  return (
    <div className="p-4">
      {vehicles.map((vehicle) => {
        const VehicleIcon = vehicle.icon as React.ComponentType<{ className?: string }>;
        const isSelected = selectedVehicle === vehicle.id;
        
        return (
          <button
            key={vehicle.id}
            onClick={() => { onVehicleChange(vehicle.id); }}
              className={`w-full flex items-center space-x-3 p-3 mb-2 rounded-lg text-left transition-colors ${
              isSelected 
                ? 'bg-green-600 text-white' 
                : 'text-gray-300 hover:bg-stone-700 hover:text-white'
            }`}
          >
            <VehicleIcon className="h-5 w-5" />
            <span>{vehicle.name}</span>
          </button>
        );
      })}
    </div>
  );
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\services\FixedServicesTab.tsx
============================
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { Plus, Settings, Trash2 } from 'lucide-react';

import { useAuth } from '@/shared/hooks';
import { Button } from '@/shared/ui';

import { CategorySelector } from './components/CategorySelector';
import { DeleteServiceModal } from './components/DeleteServiceModal';
import { MultiTierPricingModal } from './components/MultiTierPricingModal';
import { SelectedServiceDetailsDisplay } from './components/SelectedServiceDetailsDisplay';
import { ServiceSelector } from './components/ServiceSelector';
import { VehicleSelector } from './components/VehicleSelector';
import { useFixedServicesHandlers } from './hooks/useFixedServicesHandlers';
import { useServicesAPI, useServicesData } from './hooks/useServicesData';
import { useTenantId } from './hooks/useTenantId';
import type { Service } from './types';

const FixedServicesTab: React.FC = () => {
  const [selectedVehicle, setSelectedVehicle] = useState<string>('cars');
  const [selectedCategory, setSelectedCategory] = useState<string>('service-packages');
  const [selectedService, setSelectedService] = useState<string>('');
  const [currentServiceData, setCurrentServiceData] = useState<Service | null>(null);
  const [availableServices, setAvailableServices] = useState<Service[]>([]);
  
  const lastFetchRef = React.useRef<string>('');
  
  const authContext = useAuth();
  const user = authContext.user;
  const { businessSlug } = useParams<{ businessSlug: string }>();
  
  const tenantId = useTenantId();
  const { vehicles } = useServicesData();
  const { fetchServices, createService, updateService, deleteService, loading, error } = useServicesAPI(tenantId);
  
  const handlers = useFixedServicesHandlers({
    availableServices,
    selectedService,
    currentServiceData,
    setSelectedService,
    setCurrentServiceData,
    setAvailableServices,
    updateService,
    deleteService,
    createService,
    fetchServices,
    selectedVehicle,
    selectedCategory,
  });
  
  // Effect to fetch services when vehicle or category changes
  useEffect(() => {
    if (selectedVehicle && selectedCategory && tenantId) {
      const fetchKey = `${selectedVehicle}-${selectedCategory}-${tenantId}`;
      
      if (lastFetchRef.current === fetchKey) {
        return;
      }
      
      lastFetchRef.current = fetchKey;
      
      void fetchServices(selectedVehicle, selectedCategory).then((data: unknown) => {
        if (data && Array.isArray(data) && data.length > 0) {
          // Convert API data to frontend Service format
          const services = data.map((serviceData: unknown) => {
            const service = serviceData as {
              id: number;
              name: string;
              tiers?: Array<{
                id: number;
                name: string;
                price: number;
                duration: number;
                features?: string[];
                enabled: boolean;
                popular?: boolean;
              }>;
            };
            return {
              id: service.id.toString(),
              name: service.name,
              tiers: service.tiers && service.tiers.length > 0 ? service.tiers.map((tier) => ({
                id: tier.id.toString(),
                name: tier.name,
                price: tier.price,
                duration: tier.duration,
                features: tier.features || [],
                enabled: tier.enabled,
                popular: tier.popular || false
              })) : []
            };
          });
          
          setAvailableServices(services);
          
          if (!selectedService && services.length > 0) {
            const firstService = services[0];
            if (firstService) {
              setSelectedService(firstService.id);
              setCurrentServiceData(firstService);
            }
          } else if (selectedService) {
            const currentService = services.find(s => s.id === selectedService);
            if (currentService) {
              setCurrentServiceData(currentService);
            } else if (services.length > 0) {
              const firstService = services[0];
              if (firstService) {
                setSelectedService(firstService.id);
                setCurrentServiceData(firstService);
              }
            }
          }
        } else {
          setCurrentServiceData(null);
          setAvailableServices([]);
          setSelectedService('');
        }
      }).catch((err: unknown) => {
        console.error('Error fetching services:', err);
        setCurrentServiceData(null);
        setAvailableServices([]);
        setSelectedService('');
      });
    }
  }, [selectedVehicle, selectedCategory, tenantId, fetchServices, selectedService]);

  // Effect to handle service selection changes
  useEffect(() => {
    if (selectedService && availableServices.length > 0) {
      const selectedServiceData = availableServices.find(service => service.id === selectedService);
      if (selectedServiceData) {
        setCurrentServiceData(selectedServiceData);
      }
    }
  }, [selectedService, availableServices]);

  const selectedVehicleData = vehicles.find(v => v.id === selectedVehicle);

  if (user?.role === 'admin' && businessSlug && !tenantId) {
    return (
      <div className="text-center py-12">
        <div className="text-gray-400 mb-4">Loading affiliate data...</div>
      </div>
    );
  }

  if (!tenantId) {
    return (
      <div className="text-center py-12">
        <div className="text-red-400 mb-4">Configuration Error</div>
        <h3 className="text-lg font-medium text-white mb-2">Affiliate ID not found</h3>
        <p className="text-gray-400 mb-4">
          {user?.role === 'admin' 
            ? 'Unable to load affiliate data. Please check the URL and try again.'
            : 'Please log in again or contact support'
          }
        </p>
      </div>
    );
  }

  const handleVehicleChange = (vehicleId: string) => {
    setSelectedVehicle(vehicleId);
    const vehicle = vehicles.find(v => v.id === vehicleId);
    if (vehicle && vehicle.categories.length > 0) {
      setSelectedCategory(vehicle.categories[0]?.id || 'service-packages');
      setSelectedService('');
    }
  };

  const handleCategoryChange = (categoryId: string) => {
    setSelectedCategory(categoryId);
    setSelectedService('');
  };

  return (
    <div className="space-y-6">
      {/* Unified Three Column Container with Action Buttons */}
      <div className="bg-stone-800 rounded-lg border border-stone-700 overflow-hidden">
        {/* Header Row with Column Titles and Action Buttons */}
        <div className="p-4 border-b border-stone-700">
          <div className="grid grid-cols-[200px_200px_200px_auto] gap-0">
            <h3 className="text-lg font-semibold text-white px-4">Vehicle</h3>
            <h3 className="text-lg font-semibold text-white px-4">Category</h3>
            <h3 className="text-lg font-semibold text-white px-4">Service</h3>
            <div className="flex items-center justify-end space-x-2">
              <Button 
                variant="ghost"
                size="sm"
                className="p-2 text-gray-400 hover:text-white"
                title="Edit Service"
                onClick={handlers.handleEditService}
                disabled={!selectedService || !currentServiceData}
              >
                <Settings className="h-5 w-5" />
              </Button>
              <Button 
                variant="primary"
                size="sm"
                className="p-2 bg-green-500 hover:bg-green-600"
                title="Add Service"
                onClick={() => {
                  handlers.setIsMultiTierModalOpen(true);
                }}
                leftIcon={<Plus className="h-5 w-5" />}
              />
              <Button 
                variant="destructive"
                size="sm"
                className="p-2 bg-red-500 hover:bg-red-600"
                title="Delete Service"
                onClick={() => { handlers.setIsDeleteServiceModalOpen(true); }}
                disabled={!selectedService || !currentServiceData}
              >
                <Trash2 className="h-5 w-5" />
              </Button>
            </div>
          </div>
        </div>
        <div className="grid grid-cols-[200px_200px_200px_auto] gap-0 min-h-[400px]">
          <div>
            <VehicleSelector
              vehicles={vehicles}
              selectedVehicle={selectedVehicle}
              onVehicleChange={handleVehicleChange}
            />
          </div>
          
          <div>
            <CategorySelector
              categories={selectedVehicleData?.categories || []}
              selectedCategory={selectedCategory}
              onCategoryChange={handleCategoryChange}
            />
          </div>
          
          <div>
            <ServiceSelector
              services={availableServices}
              selectedService={selectedService}
              onServiceChange={handlers.handleServiceChange}
            />
          </div>
          <div></div>
        </div>
      </div>

      <SelectedServiceDetailsDisplay currentServiceData={currentServiceData} />

      {!tenantId && (
        <div className="text-center py-12">
          <div className="text-gray-400 mb-4">Initializing...</div>
        </div>
      )}
      
      {loading && tenantId && (
        <div className="text-center py-12">
          <div className="text-gray-400 mb-4">Loading services...</div>
        </div>
      )}
      
      {error && tenantId && (
        <div className="text-center py-12">
          <div className="text-red-400 mb-4">Error loading services</div>
          <p className="text-gray-400">{error}</p>
        </div>
      )}

      {/* Multi-Tier Pricing Modal */}
      <MultiTierPricingModal
        isOpen={handlers.isMultiTierModalOpen}
        onClose={() => {
          handlers.setIsMultiTierModalOpen(false);
        }}
        onSave={handlers.handleSaveService}
        vehicleType={selectedVehicle}
        categoryType={selectedCategory as 'service-packages' | 'addons'}
        editingService={handlers.isEditingService ? currentServiceData : null}
        loading={loading || false}
        error={error}
      />

      {/* Delete Service Modal */}
      <DeleteServiceModal
        isOpen={handlers.isDeleteServiceModalOpen}
        onClose={() => { handlers.setIsDeleteServiceModalOpen(false); }}
        onConfirm={() => { void handlers.handleDeleteService(); }}
        serviceName={currentServiceData?.name || ''}
        loading={loading || false}
      />
    </div>
  );
};

export default FixedServicesTab;


============================
FILE: frontend\src\features\tenantDashboard\tabs\services\hooks\.gitkeep
============================
# This file keeps the hooks folder in git
# Remove this file when you add your first hook

============================
FILE: frontend\src\features\tenantDashboard\tabs\services\hooks\useFixedServicesHandlers.ts
============================
import { useCallback, useState } from 'react';

import type { Service } from '../types';

interface UseFixedServicesHandlersProps {
  availableServices: Service[];
  selectedService: string;
  currentServiceData: Service | null;
  setSelectedService: (id: string) => void;
  setCurrentServiceData: (service: Service | null) => void;
  setAvailableServices: (services: Service[]) => void;
  updateService: (id: string, data: unknown) => Promise<boolean>;
  deleteService: (id: string) => Promise<boolean>;
  createService: (data: unknown) => Promise<unknown>;
  fetchServices: (vehicle: string, category: string) => Promise<unknown>;
  selectedVehicle: string;
  selectedCategory: string;
}

export const useFixedServicesHandlers = ({
  availableServices,
  selectedService,
  currentServiceData,
  setSelectedService,
  setCurrentServiceData,
  setAvailableServices,
  updateService,
  deleteService,
  createService,
  fetchServices,
  selectedVehicle,
  selectedCategory,
}: UseFixedServicesHandlersProps) => {
  const [isMultiTierModalOpen, setIsMultiTierModalOpen] = useState(false);
  const [isDeleteServiceModalOpen, setIsDeleteServiceModalOpen] = useState(false);
  const [isEditingService, setIsEditingService] = useState(false);

  const handleEditService = useCallback(() => {
    if (selectedService && currentServiceData) {
      setIsEditingService(true);
      setIsMultiTierModalOpen(true);
    }
  }, [selectedService, currentServiceData]);

  const handleServiceChange = useCallback((serviceId: string) => {
    setSelectedService(serviceId);
    const serviceData = availableServices.find(service => service.id === serviceId);
    if (serviceData) {
      setCurrentServiceData(serviceData);
    }
  }, [availableServices, setSelectedService, setCurrentServiceData]);

  const handleSaveService = useCallback(async (serviceData: unknown) => {
    if (isEditingService && selectedService) {
      // Update existing service
      const success = await updateService(selectedService, serviceData);
      if (success) {
        setIsMultiTierModalOpen(false);
        setIsEditingService(false);
        
        // Refresh services after a short delay to ensure DB has updated
        setTimeout(() => {
          void fetchServices(selectedVehicle, selectedCategory).then((data: unknown) => {
            if (data && Array.isArray(data)) {
              const services = data.map((service: unknown) => service as Service);
              setAvailableServices(services);
              const updatedService = services.find(s => s.id === selectedService);
              if (updatedService) {
                setCurrentServiceData(updatedService);
              }
            }
          });
        }, 500);
      }
    } else {
      // Create new service
      try {
        const newService = await createService(serviceData);
        if (newService) {
          setIsMultiTierModalOpen(false);
          setIsEditingService(false);
          
          // Refresh services after a short delay
          setTimeout(() => {
            void fetchServices(selectedVehicle, selectedCategory).then((data: unknown) => {
              if (data && Array.isArray(data)) {
                const services = data.map((service: unknown) => service as Service);
                setAvailableServices(services);
                
                if (services.length > 0) {
                  const newServiceData = services[0];
                  if (newServiceData) {
                    setCurrentServiceData(newServiceData);
                    setSelectedService(newServiceData.id);
                  }
                }
              }
            }).catch((err: unknown) => {
              console.error('Error refreshing services:', err);
            });
          }, 500);
        }
      } catch (err: unknown) {
        console.error('Error creating service:', err);
        setIsMultiTierModalOpen(false);
      }
    }
  }, [isEditingService, selectedService, updateService, createService, fetchServices, selectedVehicle, selectedCategory, setAvailableServices, setCurrentServiceData, setSelectedService]);

  const handleDeleteService = useCallback(async () => {
    if (!selectedService || !currentServiceData) return;
    
    try {
      const success = await deleteService(selectedService);
      if (success) {
        setIsDeleteServiceModalOpen(false);
        
        const updatedServices = availableServices.filter(service => service.id !== selectedService);
        setAvailableServices(updatedServices);
        setCurrentServiceData(null);
        setSelectedService('');
        
        if (updatedServices.length > 0) {
          const firstService = updatedServices[0];
          if (firstService) {
            setSelectedService(firstService.id);
            setCurrentServiceData(firstService);
          }
        }
      }
    } catch (err: unknown) {
      console.error('Error deleting service:', err);
    }
  }, [selectedService, currentServiceData, deleteService, availableServices, setAvailableServices, setCurrentServiceData, setSelectedService]);

  return {
    isMultiTierModalOpen,
    isDeleteServiceModalOpen,
    isEditingService,
    setIsMultiTierModalOpen,
    setIsDeleteServiceModalOpen,
    handleEditService,
    handleServiceChange,
    handleSaveService,
    handleDeleteService,
  };
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\services\hooks\useServiceOperations.ts
============================
/**
 * Hook for managing service CRUD operations
 * Handles creating, updating, deleting services and refreshing the list
 */

import { useCallback } from 'react';

import type { Service } from '../types';
import type { useServicesAPI } from './useServicesData';

interface ServiceData {
  id: number;
  name: string;
  tiers?: Array<{
    id: number;
    name: string;
    price: number;
    duration: number;
    features?: string[];
    enabled: boolean;
    popular?: boolean;
  }>;
}

interface TierData {
  id: string;
  name: string;
  price: number;
  duration: number;
  features: string[];
  enabled: boolean;
  popular?: boolean;
}

/**
 * Transform API service data to frontend Service format
 */
export function transformServiceData(servicesData: unknown[]): Service[] {
  return servicesData.map((serviceData: unknown) => {
    const service = serviceData as ServiceData;
    return {
      id: service.id.toString(),
      name: service.name,
      tiers: service.tiers && service.tiers.length > 0 ? service.tiers.map((tier) => ({
        id: tier.id.toString(),
        name: tier.name,
        price: tier.price,
        duration: tier.duration,
        features: tier.features || [],
        enabled: tier.enabled,
        popular: tier.popular || false
      })) : []
    };
  });
}

export function useServiceOperations(
  api: ReturnType<typeof useServicesAPI>,
  tenantId: string | undefined,
  selectedVehicle: string,
  selectedCategory: string
) {
  const { fetchServices, createService, updateService, deleteService } = api;

  /**
   * Refresh the services list for the current vehicle/category
   */
  const refreshServices = useCallback(async (): Promise<Service[]> => {
    const servicesData = await fetchServices(selectedVehicle, selectedCategory);
    if (servicesData && Array.isArray(servicesData)) {
      return transformServiceData(servicesData);
    }
    return [];
  }, [fetchServices, selectedVehicle, selectedCategory]);

  /**
   * Create a new service with tiers
   */
  const handleCreateService = useCallback(async (
    serviceName: string,
    tiers: TierData[]
  ): Promise<Service[] | null> => {
    const result = await createService(selectedVehicle, selectedCategory, serviceName, tiers);
    
    if (result) {
      // Add a small delay to ensure the database transaction is complete
      await new Promise(resolve => setTimeout(resolve, 500));
      return await refreshServices();
    }
    return null;
  }, [createService, selectedVehicle, selectedCategory, refreshServices]);

  /**
   * Update an existing service
   */
  const handleUpdateService = useCallback(async (
    serviceId: string,
    serviceName: string,
    tiers: TierData[]
  ): Promise<Service[] | null> => {
    // Map vehicle ID to backend format using shared utility
    const { getBackendEndpoint } = await import('@/shared/utils/vehicleMapping');
    
    // Map category ID to backend format
    const categoryMap: { [key: string]: number } = {
      'interior': 1,
      'exterior': 2,
      'service-packages': 3,
      'ceramic-coating': 4,
      'paint-correction': 5,
      'paint-protection-film': 6,
      'addons': 7
    };
    
    const serviceData = {
      tenant_id: tenantId,
      vehicle_id: getBackendEndpoint(selectedVehicle),
      service_category_id: categoryMap[selectedCategory] || 3,
      name: serviceName,
      description: serviceName + ' service',
      base_price_cents: Math.round((tiers[0]?.price || 0) * 100),
      tiers: tiers
    };
    
    const result = await updateService(serviceId, serviceData);
    
    if (result) {
      await new Promise(resolve => setTimeout(resolve, 500));
      return await refreshServices();
    }
    return null;
  }, [updateService, tenantId, selectedVehicle, selectedCategory, refreshServices]);

  /**
   * Delete a service
   */
  const handleDeleteService = useCallback(async (
    serviceId: string
  ): Promise<boolean> => {
    return await deleteService(serviceId);
  }, [deleteService]);

  return {
    refreshServices,
    handleCreateService,
    handleUpdateService,
    handleDeleteService
  };
}



============================
FILE: frontend\src\features\tenantDashboard\tabs\services\hooks\useServicesData.ts
============================
import { useCallback, useState } from 'react';
import { Bike, Bot as Boat, Car, HelpCircle, Home, Mountain, Truck } from 'lucide-react';

import { servicesApi } from '@/shared/api/services.api';

import type { Vehicle } from '../types';

// interface ApiResponse<T = unknown> {
//   data: T;
//   message?: string;
// }

interface ServiceTier {
  id: string;
  name: string;
  price: number;
  duration: number;
  features: string[];
  enabled: boolean;
  popular: boolean;
  description?: string;
}

interface ServiceData {
  id: string;
  name: string;
  description: string;
  base_price_cents: number;
  tiers?: ServiceTier[];
  tenant_id: number;
  vehicle_id: number;
  service_category_id: number;
}

// Mapping from frontend IDs to database IDs
const VEHICLE_ID_MAP: Record<string, number> = {
  'cars': 1,
  'suv': 3, // SUV has its own database ID
  'trucks': 2,
  'rvs': 4,
  'boats': 5,
  'motorcycles': 6,
  'offroad': 7,
  'other': 8
};

const CATEGORY_ID_MAP: Record<string, number> = {
  'interior': 1,
  'exterior': 2, 
  'service-packages': 3,
  'addons': 7,
  'ceramic-coating': 4,
  'paint-correction': 5,
  'paint-protection-film': 6
};

// New hook for fetching services data from database
export const useServicesAPI = (tenantId?: string) => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isFetching, setIsFetching] = useState(false);

  const fetchServices = useCallback(async (vehicleId: string, categoryId: string) => {
    // Prevent multiple simultaneous calls
    if (isFetching) {
      return null;
    }
    
    // Validate tenant ID is provided
    if (!tenantId || tenantId === '') {
      // Don't set error for missing tenant ID - just return early
      return null;
    }
    
    setIsFetching(true);
    setLoading(true);
    setError(null);
    
    try {
      // Convert frontend IDs to database IDs
      const dbVehicleId = VEHICLE_ID_MAP[vehicleId];
      const dbCategoryId = CATEGORY_ID_MAP[categoryId];
      
      if (!dbVehicleId || !dbCategoryId) {
        throw new Error('Invalid vehicle or category ID');
      }
      
      const services = await servicesApi.getServices(tenantId, vehicleId, dbCategoryId.toString());
      return services as ServiceData[];
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch services');
      return null;
    } finally {
      setLoading(false);
      setIsFetching(false);
    }
  }, [tenantId, isFetching]);

  const createService = useCallback(async (vehicleId: string, categoryId: string, serviceTitle: string, tiers?: ServiceTier[]) => {
    // Validate tenant ID is provided
    if (!tenantId || tenantId === '') {
      // Don't set error for missing tenant ID - just return early
      return null;
    }
    
    setLoading(true);
    setError(null);
    
    try {
      // Convert frontend IDs to database IDs
      const dbVehicleId = VEHICLE_ID_MAP[vehicleId];
      const dbCategoryId = CATEGORY_ID_MAP[categoryId];
      
      if (!dbVehicleId || !dbCategoryId) {
        throw new Error('Invalid vehicle or category ID');
      }
      
      const requestBody: Partial<ServiceData> = {
        tenant_id: parseInt(tenantId),
        vehicle_id: dbVehicleId, // Send the database vehicle ID
        service_category_id: dbCategoryId,
        base_price_cents: 0, // Default base price, can be updated later
        name: serviceTitle,
        description: `${serviceTitle} service for ${vehicleId} ${categoryId}`
      };
      
      // Add tiers if provided
      if (tiers && tiers.length > 0) {
        requestBody.tiers = tiers;
      }
      
      const service = await servicesApi.createService(requestBody);
      return service as ServiceData;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create service');
      return null;
    } finally {
      setLoading(false);
    }
  }, [tenantId]);

  const fetchServiceById = useCallback(async (serviceId: string) => {
    // Validate tenant ID is provided
    if (!tenantId || tenantId === '') {
      // Don't set error for missing tenant ID - just return early
      return null;
    }
    
    setLoading(true);
    setError(null);
    
    try {
      const service = await servicesApi.getService(serviceId);
      return service as ServiceData;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch service');
      return null;
    } finally {
      setLoading(false);
    }
  }, [tenantId]);

  const updateService = useCallback(async (serviceId: string, serviceData: Partial<ServiceData>) => {
    // Validate tenant ID is provided
    if (!tenantId || tenantId === '') {
      return null;
    }
    
    setLoading(true);
    setError(null);
    
    try {
      const service = await servicesApi.updateService(serviceId, serviceData);
      return service as ServiceData;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update service');
      return null;
    } finally {
      setLoading(false);
    }
  }, [tenantId]);

  const deleteService = useCallback(async (serviceId: string) => {
    // Validate tenant ID is provided
    if (!tenantId || tenantId === '') {
      return false;
    }
    
    setLoading(true);
    setError(null);
    
    try {
      await servicesApi.deleteService(serviceId);
      return true;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete service');
      return false;
    } finally {
      setLoading(false);
    }
  }, [tenantId]);

  return {
    fetchServices,
    fetchServiceById,
    createService,
    updateService,
    deleteService,
    loading,
    error
  };
};

export const useServicesData = () => {
  const [vehicles] = useState<Vehicle[]>([
    {
      id: 'cars',
      name: 'Cars',
      icon: Car,
      categories: [
        {
          id: 'service-packages',
          name: 'Service Packages',
          color: 'bg-green-600',
          services: []
        },
        {
          id: 'addons',
          name: 'Addons',
          color: 'bg-indigo-600',
          services: []
        }
      ]
    },
    {
      id: 'suv',
      name: 'SUV',
      icon: Car,
      categories: [
        {
          id: 'service-packages',
          name: 'Service Packages',
          color: 'bg-green-600',
          services: []
        },
        {
          id: 'addons',
          name: 'Addons',
          color: 'bg-indigo-600',
          services: []
        }
      ]
    },
    {
      id: 'trucks',
      name: 'Trucks',
      icon: Truck,
      categories: [
        {
          id: 'service-packages',
          name: 'Service Packages',
          color: 'bg-green-600',
          services: []
        },
        {
          id: 'addons',
          name: 'Addons',
          color: 'bg-indigo-600',
          services: []
        }
      ]
    },
    {
      id: 'rvs',
      name: 'RVs',
      icon: Home,
      categories: [
        {
          id: 'service-packages',
          name: 'Service Packages',
          color: 'bg-green-600',
          services: []
        },
        {
          id: 'addons',
          name: 'Addons',
          color: 'bg-indigo-600',
          services: []
        }
      ]
    },
    {
      id: 'boats',
      name: 'Boats',
      icon: Boat,
      categories: [
        {
          id: 'service-packages',
          name: 'Service Packages',
          color: 'bg-green-600',
          services: []
        },
        {
          id: 'addons',
          name: 'Addons',
          color: 'bg-indigo-600',
          services: []
        }
      ]
    },
    {
      id: 'motorcycles',
      name: 'Motorcycles',
      icon: Bike,
      categories: [
        {
          id: 'service-packages',
          name: 'Service Packages',
          color: 'bg-green-600',
          services: []
        },
        {
          id: 'addons',
          name: 'Addons',
          color: 'bg-indigo-600',
          services: []
        }
      ]
    },
    {
      id: 'offroad',
      name: 'Off-Road',
      icon: Mountain,
      categories: [
        {
          id: 'service-packages',
          name: 'Service Packages',
          color: 'bg-green-600',
          services: []
        },
        {
          id: 'addons',
          name: 'Addons',
          color: 'bg-indigo-600',
          services: []
        }
      ]
    },
    {
      id: 'other',
      name: 'Other',
      icon: HelpCircle,
      categories: [
        {
          id: 'service-packages',
          name: 'Service Packages',
          color: 'bg-green-600',
          services: []
        },
        {
          id: 'addons',
          name: 'Addons',
          color: 'bg-indigo-600',
          services: []
        }
      ]
    }
  ]);

  const toggleTierEnabled = () => {
    // Implementation for toggling tier enabled/disabled state
  };

  return {
    vehicles,
    toggleTierEnabled
  };
};

============================
FILE: frontend\src\features\tenantDashboard\tabs\services\hooks\useServiceSelection.ts
============================
/**
 * Hook for managing service selection and automatic data fetching
 * Handles vehicle/category changes and keeps service list in sync
 */

import { useEffect, useRef, useState } from 'react';

import type { Service } from '../types';
import { transformServiceData } from './useServiceOperations';

interface UseServiceSelectionProps {
  selectedVehicle: string;
  selectedCategory: string;
  affiliateId: string | undefined;
  fetchServices: (vehicleType: string, category: string) => Promise<unknown>;
}

export function useServiceSelection({
  selectedVehicle,
  selectedCategory,
  affiliateId,
  fetchServices
}: UseServiceSelectionProps) {
  const [selectedService, setSelectedService] = useState<string>('');
  const [currentServiceData, setCurrentServiceData] = useState<Service | null>(null);
  const [availableServices, setAvailableServices] = useState<Service[]>([]);
  const lastFetchRef = useRef<string>('');

  // Effect to fetch services when vehicle or category changes
  useEffect(() => {
    if (selectedVehicle && selectedCategory && affiliateId) {
      const fetchKey = `${selectedVehicle}-${selectedCategory}`;
      
      // Prevent duplicate fetches for the same combination
      if (lastFetchRef.current === fetchKey) {
        return;
      }
      
      lastFetchRef.current = fetchKey;
      
      // Add a small delay to prevent rapid successive calls
      const timeoutId = setTimeout(() => {
        void fetchServices(selectedVehicle, selectedCategory)
          .then((data: unknown) => {
            if (data && Array.isArray(data) && data.length > 0) {
              const services = transformServiceData(data);
              setAvailableServices(services);
              
              // If no service is currently selected, select the first one
              if (!selectedService && services.length > 0) {
                const firstService = services[0];
                if (firstService) {
                  setSelectedService(firstService.id);
                  setCurrentServiceData(firstService);
                }
              } else if (selectedService) {
                // Find the currently selected service in the new list
                const currentService = services.find(s => s.id === selectedService);
                if (currentService) {
                  setCurrentServiceData(currentService);
                } else if (services.length > 0) {
                  // If the selected service is not in the new list, select the first one
                  const firstService = services[0];
                  if (firstService) {
                    setSelectedService(firstService.id);
                    setCurrentServiceData(firstService);
                  }
                }
              }
            } else {
              setCurrentServiceData(null);
              setAvailableServices([]);
              setSelectedService('');
            }
          })
          .catch((err: unknown) => {
            console.error('Error fetching services:', err);
            setCurrentServiceData(null);
            setAvailableServices([]);
            setSelectedService('');
          });
      }, 100);
      
      return () => { clearTimeout(timeoutId); };
    }
  }, [selectedVehicle, selectedCategory, affiliateId, fetchServices, selectedService]);

  // Effect to handle service selection changes
  useEffect(() => {
    if (selectedService && availableServices.length > 0) {
      const selectedServiceData = availableServices.find(service => service.id === selectedService);
      if (selectedServiceData) {
        setCurrentServiceData(selectedServiceData);
      }
    }
  }, [selectedService, availableServices]);

  return {
    selectedService,
    setSelectedService,
    currentServiceData,
    setCurrentServiceData,
    availableServices,
    setAvailableServices
  };
}



============================
FILE: frontend\src\features\tenantDashboard\tabs\services\hooks\useTenantId.ts
============================
/**
 * Hook for resolving tenant ID from auth context or URL params
 * Handles both tenant users and admin users viewing other businesses
 */

import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';

import { useAuth } from '@/shared/hooks';

/**
 * Resolves the tenant ID for the current user/context
 * For tenant users: gets ID from auth context
 * For admin users: fetches ID from business slug in URL
 */
export function useTenantId(): string | undefined {
  const authContext = useAuth();
  const user = authContext.user;
  const { businessSlug } = useParams<{ businessSlug: string }>();
  const [adminTenantId, setAdminTenantId] = useState<string | null>(null);
  
  // Fetch tenant ID for admin users
  useEffect(() => {
    if (user?.role === 'admin' && businessSlug && !adminTenantId) {
      const fetchTenantId = async () => {
        try {
          const response = await fetch(`/api/tenants/${businessSlug}`);
          
          if (response.ok) {
            const data = await response.json() as {
              success: boolean;
              tenant?: {
                id: number;
              };
            };
            
            if (data.success && data.tenant?.id) {
              setAdminTenantId(data.tenant.id.toString());
            }
          }
        } catch (err: unknown) {
          console.error('Error fetching tenant ID:', err);
        }
      };
      void fetchTenantId();
    }
  }, [user?.role, businessSlug, adminTenantId]);
  
  return user?.tenant_id?.toString() ?? adminTenantId ?? undefined;
}



============================
FILE: frontend\src\features\tenantDashboard\tabs\services\index.ts
============================
export * from './components/CategorySelector';
export * from './components/DeleteServiceModal';
export * from './components/MultiTierPricingModal';
export * from './components/ServiceSelector';
export * from './components/ServiceTierCards';
export * from './components/VehicleSelector';
export * from './hooks/useServicesData';
export { default as ServicesTab } from './ServicesTab';
export * from './types';

============================
FILE: frontend\src\features\tenantDashboard\tabs\services\ServicesTab.tsx
============================
/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call -- Complex service management with dynamic data structures */
import React, { useMemo, useState } from 'react';
import { useParams } from 'react-router-dom';

import { useAuth } from '@/shared/hooks';

import { CategorySelector } from './components/CategorySelector';
import { DeleteServiceModal } from './components/DeleteServiceModal';
import { MultiTierPricingModal } from './components/MultiTierPricingModal';
import { SelectedServiceDisplay } from './components/SelectedServiceDisplay';
import { ServiceActionsHeader } from './components/ServiceActionsHeader';
import { ServiceSelector } from './components/ServiceSelector';
import { VehicleSelector } from './components/VehicleSelector';
import { useServiceOperations } from './hooks/useServiceOperations';
import { useServicesAPI, useServicesData } from './hooks/useServicesData';
import { useServiceSelection } from './hooks/useServiceSelection';
import { useTenantId } from './hooks/useTenantId';
import {
  convertTierToNewFormat,
  convertTierToOldFormat,
  removeServiceFromTierGroup,
} from './types/ServiceFeature';

// Fallback empty data for features
const CAR_SERVICE_OPTIONS: Array<{ id: string; name: string }> = [];

const ServicesTab: React.FC = () => {
  const [selectedVehicle, setSelectedVehicle] = useState<string>('cars');
  const [selectedCategory, setSelectedCategory] = useState<string>('service-packages');
  const [isMultiTierModalOpen, setIsMultiTierModalOpen] = useState(false);
  const [isDeleteServiceModalOpen, setIsDeleteServiceModalOpen] = useState(false);
  const [isEditingService, setIsEditingService] = useState(false);

  // Get auth context and business slug
  const authContext = useAuth();
  const user = authContext.user;
  const { businessSlug } = useParams<{ businessSlug: string }>();
  
  // Resolve affiliate ID (handles both affiliate users and admin users)
  const tenantId = useTenantId();

  // Get vehicles data and API
  const { vehicles } = useServicesData();
  const api = useServicesAPI(tenantId);
  const { fetchServices, loading, error } = api;
  
  // Service selection and data management
  const {
    selectedService,
    setSelectedService,
    currentServiceData,
    setCurrentServiceData,
    availableServices,
    setAvailableServices
  } = useServiceSelection({
    selectedVehicle,
    selectedCategory,
    tenantId,
    fetchServices
  });

  // Service operations (CRUD)
  const operations = useServiceOperations(api, tenantId, selectedVehicle, selectedCategory);

  // Get selected vehicle and category data
  const selectedVehicleData = vehicles.find(v => v.id === selectedVehicle);
  const selectedCategoryData = selectedVehicleData?.categories.find(c => c.id === selectedCategory);

  // Memoize initialTiers to prevent infinite re-renders
  const initialTiers = useMemo(() => {
    if (currentServiceData?.tiers && currentServiceData.tiers.length > 0) {
      return currentServiceData.tiers.map(tier => ({
        id: tier.id,
        name: tier.name,
        price: tier.price,
        duration: tier.duration,
        features: tier.features,
        enabled: tier.enabled,
        popular: tier.popular || false
      }));
    }
    return undefined;
  }, [currentServiceData]);

  // Handle removing features from tiers
  const handleRemoveFeature = (serviceId: string, currentTierId: string, groupTierName: string) => {
    if (currentServiceData) {
      const tierToUpdate = currentServiceData.tiers.find(tier => `tier-${tier.id}` === currentTierId);
      if (tierToUpdate) {
        const newFormatTier = convertTierToNewFormat(tierToUpdate);
        const updatedNewFormatTiers = removeServiceFromTierGroup([newFormatTier], newFormatTier.id, groupTierName, serviceId);
        const updatedOldFormatTier = convertTierToOldFormat(updatedNewFormatTiers[0]);
        
        const updatedTiers = currentServiceData.tiers.map(tier => 
          tier.id === tierToUpdate.id ? updatedOldFormatTier : tier
        );
        
        setCurrentServiceData({
          ...currentServiceData,
          tiers: updatedTiers
        });
      }
    }
  };

  // Loading state for admin users
  if (user?.role === 'admin' && businessSlug && !tenantId) {
    return (
      <div className="text-center py-12">
        <div className="text-gray-400 mb-4">Loading affiliate data...</div>
      </div>
    );
  }

  // Error state for missing affiliate ID
  if (!tenantId) {
    return (
      <div className="text-center py-12">
        <div className="text-red-400 mb-4">Configuration Error</div>
        <h3 className="text-lg font-medium text-white mb-2">Affiliate ID not found</h3>
        <p className="text-gray-400 mb-4">
          {user?.role === 'admin' 
            ? 'Unable to load affiliate data. Please check the URL and try again.'
            : 'Please log in again or contact support'
          }
        </p>
      </div>
    );
  }

  const handleVehicleChange = (vehicleId: string) => {
    setSelectedVehicle(vehicleId);
    const vehicle = vehicles.find(v => v.id === vehicleId);
    if (vehicle && vehicle.categories.length > 0) {
      setSelectedCategory(vehicle.categories[0]?.id || 'service-packages');
      setSelectedService('');
    }
  };

  const handleCategoryChange = (categoryId: string) => {
    setSelectedCategory(categoryId);
    setSelectedService('');
  };

  const handleEditService = () => {
    if (currentServiceData) {
      setIsEditingService(true);
      setIsMultiTierModalOpen(true);
    }
  };

  const handleMultiTierSubmit = async (serviceName: string, tiers: Array<{
    id: string;
    name: string;
    price: number;
    duration: number;
    features: string[];
    enabled: boolean;
    popular?: boolean;
  }>) => {
    try {
      let updatedServices;
      
      if (isEditingService && currentServiceData) {
        updatedServices = await operations.handleUpdateService(currentServiceData.id, serviceName, tiers);
      } else {
        updatedServices = await operations.handleCreateService(serviceName, tiers);
      }
      
      if (updatedServices) {
        setAvailableServices(updatedServices);
        
        if (isEditingService && currentServiceData) {
          const updatedService = updatedServices.find(s => s.id === currentServiceData.id);
          if (updatedService) {
            setCurrentServiceData(updatedService);
          }
        } else if (updatedServices.length > 0) {
          const newService = updatedServices[0];
          if (newService) {
            setCurrentServiceData(newService);
            setSelectedService(newService.id);
          }
        }
        
        setIsMultiTierModalOpen(false);
        setIsEditingService(false);
      }
    } catch (err: unknown) {
      console.error('Error saving service:', err);
      setIsMultiTierModalOpen(false);
      setIsEditingService(false);
    }
  };

  const handleDeleteService = async () => {
    if (!selectedService || !currentServiceData) return;
    
    try {
      const success = await operations.handleDeleteService(selectedService);
      if (success) {
        setIsDeleteServiceModalOpen(false);
        
        const updatedServices = availableServices.filter(service => service.id !== selectedService);
        setAvailableServices(updatedServices);
        setCurrentServiceData(null);
        setSelectedService('');
        
        if (updatedServices.length > 0) {
          const firstService = updatedServices[0];
          if (firstService) {
            setSelectedService(firstService.id);
            setCurrentServiceData(firstService);
          }
        }
      }
    } catch (err: unknown) {
      console.error('Error deleting service:', err);
    }
  };

  return (
    <div className="space-y-6">
      {/* Unified Three Column Container with Action Buttons */}
      <div className="bg-stone-800 rounded-lg border border-stone-700 overflow-hidden">
        <ServiceActionsHeader
          onEditService={handleEditService}
          onAddService={() => {
            setIsEditingService(false);
            setIsMultiTierModalOpen(true);
          }}
          onDeleteService={() => { setIsDeleteServiceModalOpen(true); }}
          hasSelectedService={!!(selectedService && currentServiceData)}
        />
        
        <div className="grid grid-cols-[200px_200px_200px_auto] gap-0 min-h-[400px]">
          <div>
            <VehicleSelector
              vehicles={vehicles}
              selectedVehicle={selectedVehicle}
              onVehicleChange={handleVehicleChange}
            />
          </div>
          
          <div>
            <CategorySelector
              categories={selectedVehicleData?.categories || []}
              selectedCategory={selectedCategory}
              onCategoryChange={handleCategoryChange}
            />
          </div>
          
          <div>
            <ServiceSelector
              services={availableServices}
              selectedService={selectedService}
              onServiceChange={setSelectedService}
            />
          </div>
          <div></div>
        </div>
      </div>

      {/* Selected Service Display */}
      {currentServiceData && (
        <SelectedServiceDisplay
          service={currentServiceData}
          availableFeatures={CAR_SERVICE_OPTIONS}
          onRemoveFeature={handleRemoveFeature}
        />
      )}

      {/* Loading States */}
      {!tenantId && (
        <div className="text-center py-12">
          <div className="text-gray-400 mb-4">Initializing...</div>
        </div>
      )}
      
      {loading && tenantId && (
        <div className="text-center py-12">
          <div className="text-gray-400 mb-4">Loading services...</div>
        </div>
      )}
      
      {error && (
        <div className="text-center py-12">
          <div className="text-red-400 mb-4">Error: {error}</div>
        </div>
      )}

      {/* Empty State */}
      {availableServices.length === 0 && !loading && !error && selectedCategoryData && (
        <div className="text-center py-12">
          <div className="text-gray-400 mb-4">
            No services configured for this category yet.
          </div>
          <h3 className="text-lg font-medium text-white mb-2">Add Your First Service</h3>
          <p className="text-gray-400 mb-4">Click the + button above to create your first service and pricing tiers.</p>
        </div>
      )}

      {/* Multi-Tier Pricing Modal */}
      <MultiTierPricingModal
        key={`${isEditingService ? 'edit' : 'create'}-${currentServiceData?.id || 'new'}`}
        isOpen={isMultiTierModalOpen}
        onClose={() => {
          setIsMultiTierModalOpen(false);
          setIsEditingService(false);
        }}
        onSubmit={(serviceName, tiers) => void handleMultiTierSubmit(serviceName, tiers)}
        initialTiers={isEditingService ? initialTiers : undefined}
        initialServiceName={isEditingService ? currentServiceData?.name || '' : ''}
        loading={loading || false}
        error={error}
        vehicleType={selectedVehicle}
        categoryType={selectedCategory as 'service-packages' | 'addons'}
      />

      {/* Delete Service Modal */}
      <DeleteServiceModal
        isOpen={isDeleteServiceModalOpen}
        onClose={() => { setIsDeleteServiceModalOpen(false); }}
        onConfirm={() => { void handleDeleteService(); }}
        serviceName={currentServiceData?.name || ''}
        loading={loading || false}
      />
    </div>
  );
};
/* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call -- End of complex service management section */

export default ServicesTab;


============================
FILE: frontend\src\features\tenantDashboard\tabs\services\SimpleFixedServicesTab.tsx
============================
import React, { useCallback, useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { Plus, Settings, Trash2 } from 'lucide-react';

import { useAuth } from '@/shared/hooks';
import { Button } from '@/shared/ui';

import { CategorySelector } from './components/CategorySelector';
import { DeleteServiceModal } from './components/DeleteServiceModal';
import { MultiTierPricingModal } from './components/MultiTierPricingModal';
import { ServiceSelector } from './components/ServiceSelector';
import { VehicleSelector } from './components/VehicleSelector';
import { useServicesData } from './hooks/useServicesData';
import type { Service } from './types';

const SimpleFixedServicesTab: React.FC = () => {
  const [selectedVehicle, setSelectedVehicle] = useState<string>('cars');
  const [selectedCategory, setSelectedCategory] = useState<string>('service-packages');
  const [selectedService, setSelectedService] = useState<string>('');
  const [currentServiceData, setCurrentServiceData] = useState<Service | null>(null);
  const [availableServices, setAvailableServices] = useState<Service[]>([]);
  const [isMultiTierModalOpen, setIsMultiTierModalOpen] = useState(false);
  const [isDeleteServiceModalOpen, setIsDeleteServiceModalOpen] = useState(false);
  const [isEditingService, setIsEditingService] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Prevent infinite loops
  const lastFetchRef = React.useRef<string>('');
  
  // Get tenant ID from AuthContext or URL params for admin users
  const authContext = useAuth();
  const user = authContext.user;
  const { businessSlug } = useParams<{ businessSlug: string }>();
  
  // For tenant users, get ID from auth context
  // For admin users, we'll need to fetch tenant ID from the business slug
  const [adminTenantId, setAdminTenantId] = useState<string | null>(null);
  
  // Fetch tenant ID for admin users
  useEffect(() => {
    // Only fetch if user is admin and we have a business slug
    if (user?.role === 'admin' && businessSlug && !adminTenantId) {
      const fetchTenantId = async () => {
        try {
          const response = await fetch(`/api/tenants/${businessSlug}`);
          
          if (response.ok) {
            const data = await response.json() as {
              success: boolean;
              tenant?: {
                id: number;
              };
            };
            
            if (data.success && data.tenant?.id) {
              setAdminTenantId(data.tenant.id.toString());
            }
          }
        } catch (err: unknown) {
          console.error('Error fetching tenant ID:', err);
        }
      };
      void fetchTenantId();
    }
  }, [user?.role, businessSlug, adminTenantId]);
  
  // Get tenant ID from user context or admin lookup
  const tenantId = user?.tenant_id?.toString() ?? adminTenantId ?? undefined;

  const { vehicles } = useServicesData();
  
  // Direct API call function to avoid hook dependency issues
  const fetchServicesDirect = useCallback(async (vehicleId: string, categoryId: string) => {
    if (!tenantId) return null;
    
    setLoading(true);
    setError(null);
    
    try {
      // Convert frontend IDs to database IDs
      const VEHICLE_ID_MAP: Record<string, number> = {
        'cars': 1,
        'suv': 3, // SUV has its own database ID
        'trucks': 2,
        'rvs': 4,
        'boats': 5,
        'motorcycles': 6,
        'offroad': 7,
        'other': 8
      };
      
      const CATEGORY_ID_MAP: Record<string, number> = {
        'interior': 1,
        'exterior': 2, 
        'service-packages': 3,
        'addons': 7,
        'ceramic-coating': 4,
        'paint-correction': 5,
        'paint-protection-film': 6
      };
      
      const dbVehicleId = VEHICLE_ID_MAP[vehicleId];
      const dbCategoryId = CATEGORY_ID_MAP[categoryId];
      
      if (!dbVehicleId || !dbCategoryId) {
        throw new Error('Invalid vehicle or category ID');
      }
      
      const response = await fetch(`/api/services/tenant/${tenantId}/vehicle/${vehicleId}/category/${dbCategoryId}`);
      if (!response.ok) {
        throw new Error('Failed to fetch services');
      }
      
      const data = await response.json() as { success: boolean; data: unknown[] };
      return data.data;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch services');
      return null;
    } finally {
      setLoading(false);
    }
  }, [tenantId]);
  
  // Effect to fetch services when vehicle or category changes
  useEffect(() => {
    if (selectedVehicle && selectedCategory && tenantId) {
      const fetchKey = `${selectedVehicle}-${selectedCategory}-${tenantId}`;
      
      // Prevent duplicate calls
      if (lastFetchRef.current === fetchKey) {
        return;
      }
      
      lastFetchRef.current = fetchKey;
      
      void fetchServicesDirect(selectedVehicle, selectedCategory).then((data: unknown) => {
        if (data && Array.isArray(data) && data.length > 0) {
          // Convert API data to frontend Service format
          const services = data.map((serviceData: unknown) => {
            const service = serviceData as {
              id: number;
              name: string;
              tiers?: Array<{
                id: number;
                name: string;
                price: number;
                duration: number;
                features?: string[];
                enabled: boolean;
                popular?: boolean;
              }>;
            };
            return {
              id: service.id.toString(),
              name: service.name,
              tiers: service.tiers && service.tiers.length > 0 ? service.tiers.map((tier) => ({
                id: tier.id.toString(),
                name: tier.name,
                price: tier.price,
                duration: tier.duration,
                features: tier.features || [],
                enabled: tier.enabled,
                popular: tier.popular || false
              })) : []
            };
          });
          
          setAvailableServices(services);
          
          // If no service is currently selected, select the first one
          if (!selectedService && services.length > 0) {
            const firstService = services[0];
            if (firstService) {
              setSelectedService(firstService.id);
              setCurrentServiceData(firstService);
            }
          } else if (selectedService) {
            // Find the currently selected service in the new list
            const currentService = services.find(s => s.id === selectedService);
            if (currentService) {
              setCurrentServiceData(currentService);
            } else if (services.length > 0) {
              // If the selected service is not in the new list, select the first one
              const firstService = services[0];
              if (firstService) {
                setSelectedService(firstService.id);
                setCurrentServiceData(firstService);
              }
            }
          }
        } else {
          setCurrentServiceData(null);
          setAvailableServices([]);
          setSelectedService('');
        }
      });
    }
  }, [selectedVehicle, selectedCategory, tenantId, fetchServicesDirect, selectedService]);

  // Effect to handle service selection changes
  useEffect(() => {
    if (selectedService && availableServices.length > 0) {
      const selectedServiceData = availableServices.find(service => service.id === selectedService);
      if (selectedServiceData) {
        setCurrentServiceData(selectedServiceData);
      }
    }
  }, [selectedService, availableServices]);

  // Add the missing variable declarations here
  const selectedVehicleData = vehicles.find(v => v.id === selectedVehicle);
  const selectedCategoryData = selectedVehicleData?.categories.find(c => c.id === selectedCategory);

  if (user?.role === 'admin' && businessSlug && !tenantId) {
    return (
      <div className="text-center py-12">
        <div className="text-gray-400 mb-4">Loading affiliate data...</div>
      </div>
    );
  }

  if (!tenantId) {
    return (
      <div className="text-center py-12">
        <div className="text-red-400 mb-4">Configuration Error</div>
        <h3 className="text-lg font-medium text-white mb-2">Affiliate ID not found</h3>
        <p className="text-gray-400 mb-4">
          {user?.role === 'admin' 
            ? 'Unable to load affiliate data. Please check the URL and try again.'
            : 'Please log in again or contact support'
          }
        </p>
      </div>
    );
  }

  const handleVehicleChange = (vehicleId: string) => {
    setSelectedVehicle(vehicleId);
    const vehicle = vehicles.find(v => v.id === vehicleId);
    if (vehicle && vehicle.categories.length > 0) {
      setSelectedCategory(vehicle.categories[0]?.id || 'service-packages');
      setSelectedService(''); // Reset service selection
    }
  };

  const handleCategoryChange = (categoryId: string) => {
    setSelectedCategory(categoryId);
    setSelectedService(''); // Reset service selection
  };

  const handleEditService = () => {
    if (currentServiceData) {
      setIsEditingService(true);
      setIsMultiTierModalOpen(true);
    }
  };

  return (
    <div className="space-y-6">
      {/* Unified Three Column Container with Action Buttons */}
      <div className="bg-stone-800 rounded-lg border border-stone-700 overflow-hidden">
        {/* Header Row with Column Titles and Action Buttons */}
        <div className="p-4 border-b border-stone-700">
          <div className="grid grid-cols-[200px_200px_200px_auto] gap-0">
            <h3 className="text-lg font-semibold text-white px-4">Vehicle</h3>
            <h3 className="text-lg font-semibold text-white px-4">Category</h3>
            <h3 className="text-lg font-semibold text-white px-4">Service</h3>
            <div className="flex items-center justify-end space-x-2">
              <Button 
                variant="ghost"
                size="sm"
                className="p-2 text-gray-400 hover:text-white"
                title="Edit Service"
                onClick={handleEditService}
                disabled={!selectedService || !currentServiceData}
              >
                <Settings className="h-5 w-5" />
              </Button>
              <Button 
                variant="primary"
                size="sm"
                className="p-2 bg-green-500 hover:bg-green-600"
                title="Add Service"
                onClick={() => {
                  setIsEditingService(false);
                  setIsMultiTierModalOpen(true);
                }}
                leftIcon={<Plus className="h-5 w-5" />}
              />
              <Button 
                variant="destructive"
                size="sm"
                className="p-2 bg-red-500 hover:bg-red-600"
                title="Delete Service"
                onClick={() => { setIsDeleteServiceModalOpen(true); }}
                disabled={!selectedService || !currentServiceData}
                leftIcon={<Trash2 className="h-5 w-5" />}
              />
            </div>
          </div>
        </div>
        <div className="grid grid-cols-[200px_200px_200px_auto] gap-0 min-h-[400px]">
          <div>
            <VehicleSelector
              vehicles={vehicles}
              selectedVehicle={selectedVehicle}
              onVehicleChange={handleVehicleChange}
            />
          </div>
          
          <div>
            <CategorySelector
              categories={selectedVehicleData?.categories || []}
              selectedCategory={selectedCategory}
              onCategoryChange={handleCategoryChange}
            />
          </div>
          
          <div>
            <ServiceSelector
              services={availableServices}
              selectedService={selectedService}
              onServiceChange={setSelectedService}
            />
          </div>
          <div></div>
        </div>
      </div>

      {/* Selected Service Display */}
      {currentServiceData && (
        <div className="bg-stone-800 rounded-lg border border-stone-700 p-6">
          <h3 className="text-lg font-semibold text-white mb-4">Selected Service: {currentServiceData.name}</h3>
          
          {currentServiceData.tiers.length > 0 ? (
            <div className="space-y-4">
              <div className="text-sm text-gray-400 mb-2">
                {currentServiceData.tiers.length} tier{currentServiceData.tiers.length !== 1 ? 's' : ''} configured:
              </div>
              <div className="space-y-4">
                {currentServiceData.tiers.map((tier, index) => (
                  <div key={tier.id} className="bg-stone-700 rounded-lg p-4 border border-stone-600">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-medium text-white">{tier.name}</h4>
                      <span className="text-xs text-gray-400">Tier {index + 1}</span>
                    </div>
                    <div className="space-y-2">
                      <div className="text-2xl font-bold text-green-400">
                        ${Number(tier.price).toFixed(2)}
                      </div>
                      <div className="text-sm text-gray-400">
                        {tier.duration} minutes
                      </div>
                      {tier.features.length > 0 && (
                        <div className="text-sm text-gray-300">
                          <div className="font-medium mb-2">Features:</div>
                          <ul className="list-disc list-inside space-y-1">
                            {tier.features.map((feature, idx) => (
                              <li key={idx} className="text-gray-400">{feature}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      <div className="flex gap-2 mt-3">
                        {tier.enabled && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-900 text-green-200">
                            Enabled
                          </span>
                        )}
                        {tier.popular && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-900 text-yellow-200">
                            Popular
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <div className="text-gray-400">No tiers configured for this service.</div>
          )}
        </div>
      )}

      {/* Loading State */}
      {loading && (
        <div className="text-center py-12">
          <div className="text-gray-400 mb-4">Loading services...</div>
        </div>
      )}
      
      {/* Error State */}
      {error && (
        <div className="text-center py-12">
          <div className="text-red-400 mb-4">Error: {error}</div>
        </div>
      )}
      
      {/* Empty State */}
      {availableServices.length === 0 && !loading && !error && selectedCategoryData && (
        <div className="text-center py-12">
          <div className="text-gray-400 mb-4">
            No services configured for this category yet.
          </div>
          <h3 className="text-lg font-medium text-white mb-2">Add Your First Service</h3>
          <p className="text-gray-400 mb-4">Click the + button above to create your first service and pricing tiers.</p>
        </div>
      )}

      {/* Multi-Tier Pricing Modal */}
      <MultiTierPricingModal
        key={`${isEditingService ? 'edit' : 'create'}-${currentServiceData?.id || 'new'}`}
        isOpen={isMultiTierModalOpen}
        onClose={() => {
          setIsMultiTierModalOpen(false);
          setIsEditingService(false);
        }}
        onSubmit={(_serviceName, _tiers) => {
          setIsMultiTierModalOpen(false);
          setIsEditingService(false);
        }}
        initialTiers={isEditingService ? currentServiceData?.tiers : undefined}
        initialServiceName={isEditingService ? currentServiceData?.name || '' : ''}
        loading={loading || false}
        error={error}
        vehicleType={selectedVehicle}
        categoryType={selectedCategory as 'service-packages' | 'addons'}
      />

      {/* Delete Service Modal */}
      <DeleteServiceModal
        isOpen={isDeleteServiceModalOpen}
        onClose={() => { setIsDeleteServiceModalOpen(false); }}
        onConfirm={() => {
          setIsDeleteServiceModalOpen(false);
        }}
        serviceName={currentServiceData?.name || ''}
        loading={loading || false}
      />
    </div>
  );
};

export default SimpleFixedServicesTab;


============================
FILE: frontend\src\features\tenantDashboard\tabs\services\types\index.ts
============================
import type { ComponentType } from 'react';

import type { Service as _CentralService, Service, ServiceTier as CentralServiceTier } from '@/shared/types';

/**
 * Re-export centralized Service and ServiceTier types
 * This prevents duplication and ensures consistency across verticals
 */
export type { Service, ServiceCatalog,ServiceCategory, ServiceTier, VehicleType } from '@/shared/types';

/**
 * Legacy compatibility: Service tier with price in dollars instead of cents
 * @deprecated Use ServiceTier from @/shared/types and convert using priceCents
 */
export interface LegacyServiceTier {
  id: string;
  name: string;
  price: number;                   // Price in dollars (legacy)
  duration: number;
  features: string[];
  enabled: boolean;
  popular?: boolean;
}

/**
 * Helper to convert from centralized ServiceTier to legacy format
 */
// eslint-disable-next-line @typescript-eslint/no-deprecated -- Helper function for legacy compatibility
export function toWLegacyServiceTier(tier: CentralServiceTier): LegacyServiceTier {
  return {
    id: String(tier.id),
    name: tier.name,
    price: tier.priceCents / 100,  // Convert cents to dollars
    duration: tier.durationMinutes,
    features: tier.features,
    enabled: tier.enabled ?? true,
    popular: tier.popular
  };
}

/**
 * Helper to convert from legacy format to centralized ServiceTier
 */
// eslint-disable-next-line @typescript-eslint/no-deprecated -- Helper function for legacy compatibility
export function fromLegacyServiceTier(legacy: LegacyServiceTier): CentralServiceTier {
  return {
    id: legacy.id,
    name: legacy.name,
    priceCents: Math.round(legacy.price * 100),  // Convert dollars to cents
    durationMinutes: legacy.duration,
    description: '',
    features: legacy.features,
    enabled: legacy.enabled,
    popular: legacy.popular
  };
}

export interface Subcategory {
  id: string;
  name: string;
  color: string;
  services: Service[];
}

export interface Category {
  id: string;
  name: string;
  color: string;
  services: Service[];
  subcategories?: Subcategory[];
}

export interface Vehicle {
  id: string;
  name: string;
  icon: ComponentType<{ className?: string }>;
  categories: Category[];
}

============================
FILE: frontend\src\features\tenantDashboard\tabs\services\types\ServiceClasses.ts
============================
// JSON representation interfaces
interface TierJSON {
  id: string;
  name: string;
  price: number;
  duration: number;
  serviceOptions?: string[];
  enabled: boolean;
  popular: boolean;
}

interface ServiceJSON {
  id: string;
  name: string;
  tiers: TierJSON[];
}

export class Tier {
  id: string;
  name: string;
  price: number;
  duration: number;
  serviceOptions: string[]; // Only service IDs from service.json
  enabled: boolean;
  popular: boolean;

  constructor(id: string, name: string, price: number, duration: number) {
    this.id = id;
    this.name = name;
    this.price = price;
    this.duration = duration;
    this.serviceOptions = [];
    this.enabled = true;
    this.popular = false;
  }

  // Add a service option (only service IDs from service.json)
  addServiceOption(option: string) {
    if (!this.serviceOptions.includes(option)) {
      this.serviceOptions.push(option);
    }
  }


  // Get all features (just the serviceOptions, no complex logic)
  get all_features(): string[] {
    return [...this.serviceOptions];
  }

  // Get all service IDs (all options are service IDs now)
  getServiceIds(availableServices: Array<{id: string, name: string}>): string[] {
    return this.serviceOptions.filter(option => 
      availableServices.some(service => service.id === option)
    );
  }
}

export class Service {
  id: string;
  name: string;
  tiers: Tier[];

  constructor(id: string, name: string) {
    this.id = id;
    this.name = name;
    this.tiers = [];
  }

  addTier(tier: Tier) {
    this.tiers.push(tier);
  }

  getTierById(id: string): Tier | undefined {
    return this.tiers.find(tier => tier.id === id);
  }

  getTierNames(): string[] {
    return this.tiers.map(tier => tier.name);
  }

  toJSON() {
    return {
      id: this.id,
      name: this.name,
      tiers: this.tiers.map(tier => ({
        id: tier.id,
        name: tier.name,
        price: tier.price,
        duration: tier.duration,
        serviceOptions: tier.serviceOptions,
        enabled: tier.enabled,
        popular: tier.popular
      }))
    };
  }

  static fromJSON(data: ServiceJSON): Service {
    const service = new Service(data.id, data.name);
    service.tiers = data.tiers.map((tierData: TierJSON) => {
      const tier = new Tier(tierData.id, tierData.name, tierData.price, tierData.duration);
      tier.enabled = tierData.enabled;
      tier.popular = tierData.popular;
      tier.serviceOptions = tierData.serviceOptions || [];
      return tier;
    });
    return service;
  }
}

============================
FILE: frontend\src\features\tenantDashboard\tabs\services\types\ServiceFeature.ts
============================
/**
 * Service feature types for handling explicit tier structures
 */

export interface TierFeatureGroup {
  tierName: string;
  services: string[];
}

export interface ServiceFeature {
  id: string;
  name: string;
  type: 'service' | 'tier';
  children?: ServiceFeature[]; // For tier references
}

export interface TierFeature {
  id: string;
  name: string;
  type: 'service' | 'tier';
  children?: ServiceFeature[];
}

export interface ExpandedTier {
  id: string;
  name: string;
  price: number;
  duration: number;
  features: TierFeatureGroup[];
  enabled: boolean;
  popular?: boolean;
}

/**
 * Utility functions for handling explicit tier structures
 */

/**
 * Convert old string array format to new TierFeatureGroup format
 */
export const convertToTierFeatureGroups = (
  features: string[],
  _tiers: Array<{ id: string; name: string; features: TierFeatureGroup[] }>
): TierFeatureGroup[] => {
  // For now, just create a single group with the current tier's services
  // This will be expanded when we add tier references
  return [{
    tierName: "Current Tier", // This will be replaced with actual tier name
    services: features
  }];
};

/**
 * Expand tier features for display - converts TierFeatureGroup[] to ServiceFeature[]
 */
export const expandTierFeatures = (
  featureGroups: TierFeatureGroup[],
  serviceOptions: Array<{ id: string; name: string }>
): ServiceFeature[] => {
  if (!Array.isArray(featureGroups)) {
    return [];
  }
  
  // If only one group (Tier 1), show flat features
  if (featureGroups.length === 1) {
    const group = featureGroups[0];
    return group.services.map(serviceId => {
      const service = serviceOptions.find(s => s.id === serviceId);
      return {
        id: serviceId,
        name: service?.name || serviceId,
        type: 'service' as const
      };
    });
  }
  
  // Multiple groups (Tier 2+), show dropdowns for previous tiers + flat for current
  return featureGroups.map((group, index) => {
    const isLastGroup = index === featureGroups.length - 1;
    
    if (isLastGroup) {
      // Current tier - show flat features
      return group.services.map(serviceId => {
        const service = serviceOptions.find(s => s.id === serviceId);
        return {
          id: serviceId,
          name: service?.name || serviceId,
          type: 'service' as const
        };
      });
    } else {
      // Previous tier - show as dropdown
      const children = group.services.map(serviceId => {
        const service = serviceOptions.find(s => s.id === serviceId);
        return {
          id: serviceId,
          name: service?.name || serviceId,
          type: 'service' as const
        };
      });

      return {
        id: `tier-group-${group.tierName}`,
        name: group.tierName,
        type: 'tier',
        children
      };
    }
  }).flat();
};

/**
 * Resolve service names from service IDs
 */
export const resolveServiceNames = (
  features: ServiceFeature[],
  serviceOptions: Array<{ id: string; name: string }>
): ServiceFeature[] => {
  return features.map(feature => {
    if (feature.type === 'service') {
      const service = serviceOptions.find(s => s.id === feature.id);
      return {
        ...feature,
        name: service?.name || feature.name
      };
    } else if (feature.children) {
      // Type must be 'tier' if not 'service'
      return {
        ...feature,
        children: resolveServiceNames(feature.children, serviceOptions)
      };
    }
    return feature;
  });
};

/**
 * Remove a service from a specific tier group
 */
export const removeServiceFromTierGroup = (
  tiers: Array<{ id: string; name: string; features: TierFeatureGroup[] }>,
  tierId: string,
  groupTierName: string,
  serviceId: string
): Array<{ id: string; name: string; features: TierFeatureGroup[] }> => {
  return tiers.map(tier => {
    if (tier.id === tierId) {
      return {
        ...tier,
        features: tier.features.map(group => {
          if (group.tierName === groupTierName) {
            return {
              ...group,
              services: group.services.filter(s => s !== serviceId)
            };
          }
          return group;
        })
      };
    }
    return tier;
  });
};

/**
 * Add a tier reference to a tier's features
 */
export const addTierReference = (
  tiers: Array<{ id: string; name: string; features: TierFeatureGroup[] }>,
  tierId: string,
  referencedTierName: string,
  referencedTierServices: string[]
): Array<{ id: string; name: string; features: TierFeatureGroup[] }> => {
  return tiers.map(tier => {
    if (tier.id === tierId) {
      return {
        ...tier,
        features: [
          ...tier.features,
          {
            tierName: referencedTierName,
            services: referencedTierServices
          }
        ]
      };
    }
    return tier;
  });
};

/**
 * Convert old string array format to new TierFeatureGroup format
 */
export const convertStringArrayToTierFeatureGroups = (
  features: string[],
  tierName: string
): TierFeatureGroup[] => {
  return [{
    tierName: tierName,
    services: features
  }];
};

/**
 * Convert new TierFeatureGroup format back to string array for backend
 */
export const convertTierFeatureGroupsToStringArray = (
  featureGroups: TierFeatureGroup[]
): string[] => {
  // Flatten all services from all groups into a single array
  return featureGroups.flatMap(group => group.services);
};

/**
 * Convert old tier structure to new tier structure
 */
export const convertTierToNewFormat = (
  tier: { id: string; name: string; price: number; duration: number; features: string[]; enabled: boolean; popular?: boolean }
): { id: string; name: string; price: number; duration: number; features: TierFeatureGroup[]; enabled: boolean; popular?: boolean } => {
  return {
    ...tier,
    features: convertStringArrayToTierFeatureGroups(tier.features, tier.name)
  };
};

/**
 * Convert new tier structure back to old format for backend
 */
export const convertTierToOldFormat = (
  tier: { id: string; name: string; price: number; duration: number; features: TierFeatureGroup[]; enabled: boolean; popular?: boolean }
): { id: string; name: string; price: number; duration: number; features: string[]; enabled: boolean; popular?: boolean } => {
  return {
    ...tier,
    features: convertTierFeatureGroupsToStringArray(tier.features)
  };
};

/**
 * Build proper tier structure for display based on tier position
 */
export const buildTierDisplayStructure = (
  tier: { id: string; name: string; features: string[] },
  allTiers: Array<{ id: string; name: string; features: string[] }>,
  serviceOptions: Array<{ id: string; name: string }>
): ServiceFeature[] => {
  // Always show only the current tier's actual features as flat bullet points
  // No dropdowns or references to previous tiers in the display
  return tier.features.map(serviceId => {
    const service = serviceOptions.find(s => s.id === serviceId);
    return {
      id: serviceId,
      name: service?.name || serviceId,
      type: 'service' as const
    };
  });
};

/**
 * Build tier structure for editing modal with dropdowns for previous tiers
 */
export const buildTierEditStructure = (
  tier: { id: string; name: string; features: string[] },
  allTiers: Array<{ id: string; name: string; features: string[] }>,
  serviceOptions: Array<{ id: string; name: string }>
): ServiceFeature[] => {
  // Find the tier's position in the list
  const tierIndex = allTiers.findIndex(t => t.id === tier.id);
  
  if (tierIndex === 0) {
    // Tier 1 - show flat features
    return tier.features.map(serviceId => {
      const service = serviceOptions.find(s => s.id === serviceId);
      return {
        id: serviceId,
        name: service?.name || serviceId,
        type: 'service' as const
      };
    });
  } else {
    // Tier 2+ - show previous tiers as dropdowns + current tier as flat
    const result: ServiceFeature[] = [];
    
    // Add previous tiers as dropdowns (only show features that are NOT in current tier)
    for (let i = 0; i < tierIndex; i++) {
      const prevTier = allTiers[i];
      const featuresNotInCurrentTier = prevTier.features.filter(feature => !tier.features.includes(feature));
      
      if (featuresNotInCurrentTier.length > 0) {
        const children = featuresNotInCurrentTier.map(serviceId => {
          const service = serviceOptions.find(s => s.id === serviceId);
          return {
            id: serviceId,
            name: service?.name || serviceId,
            type: 'service' as const
          };
        });
        
        result.push({
          id: `tier-group-${prevTier.name}`,
          name: prevTier.name,
          type: 'tier',
          children
        });
      }
    }
    
    // Add current tier features as flat
    const currentTierFeatures = tier.features.map(serviceId => {
      const service = serviceOptions.find(s => s.id === serviceId);
      return {
        id: serviceId,
        name: service?.name || serviceId,
        type: 'service' as const
      };
    });
    
    result.push(...currentTierFeatures);
    return result;
  }
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\services\utils\.gitkeep
============================
# This file keeps the utils folder in git
# Remove this file when you add your first utility

============================
FILE: frontend\src\features\tenantDashboard\tabs\website\components\AddReviewForm.tsx
============================
import React, { useState } from 'react';
import { AlertCircle, Link, MessageSquare, Send, Star, Upload,User } from 'lucide-react';

import { createReview, type TenantReviewData,uploadAvatar } from '../../../api/reviewsApi';

interface ReviewFormData {
  customerName: string;
  reviewerUrl: string;
  rating: number;
  comment: string;
  vehicleType: string;
  paintCorrection: boolean;
  ceramicCoating: boolean;
  paintProtectionFilm: boolean;
  source: 'website' | 'google' | 'yelp' | 'facebook';
  avatarFile?: File;
}

interface AddReviewFormProps {
  tenantSlug?: string;
}

export const AddReviewForm: React.FC<AddReviewFormProps> = ({ tenantSlug }) => {
  const [formData, setFormData] = useState<ReviewFormData>({
    customerName: '',
    reviewerUrl: '',
    rating: 0,
    comment: '',
    vehicleType: 'car',
    paintCorrection: false,
    ceramicCoating: false,
    paintProtectionFilm: false,
    source: 'website',
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitMessage, setSubmitMessage] = useState<{
    type: 'success' | 'error';
    message: string;
  } | null>(null);

  const vehicleTypes = [
    { value: 'car', label: 'Car' },
    { value: 'truck', label: 'Truck' },
    { value: 'suv', label: 'SUV' },
    { value: 'boat', label: 'Boat' },
    { value: 'rv', label: 'RV' },
    { value: 'motorcycle', label: 'Motorcycle' },
  ];

  const detectReviewSource = (url: string): 'website' | 'google' | 'yelp' | 'facebook' => {
    if (!url) return 'website';
    
    const lowerUrl = url.toLowerCase();
    
    if (lowerUrl.includes('google.com') || lowerUrl.includes('maps.google') || lowerUrl.includes('google.com/maps')) {
      return 'google';
    }
    if (lowerUrl.includes('yelp.com')) {
      return 'yelp';
    }
    if (lowerUrl.includes('facebook.com') || lowerUrl.includes('fb.com')) {
      return 'facebook';
    }
    
    return 'website';
  };

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value, type } = e.target;
    
    setFormData(prev => {
      const newData = {
        ...prev,
        [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value,
      };
      
      // Auto-detect review source when reviewer URL changes
      if (name === 'reviewerUrl') {
        newData.source = detectReviewSource(value);
      }
      
      return newData;
    });
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // Validate file size (5MB limit)
      if (file.size > 5 * 1024 * 1024) {
        setSubmitMessage({
          type: 'error',
          message: 'Avatar file must be less than 5MB',
        });
        return;
      }
      setFormData(prev => ({
        ...prev,
        avatarFile: file,
      }));
    }
  };

  const handleRatingClick = (rating: number) => {
    setFormData(prev => ({
      ...prev,
      rating,
    }));
  };

  const renderStars = (rating: number, interactive = false) => {
    return Array.from({ length: 5 }, (_, index) => (
      <button
        key={index}
        type="button"
        onClick={() => { if (interactive) handleRatingClick(index + 1); }}
        disabled={!interactive}
        className={`h-8 w-8 transition-colors ${
          index < rating
            ? 'text-yellow-400 fill-current'
            : 'text-gray-300 hover:text-yellow-300'
        } ${interactive ? 'cursor-pointer hover:scale-110' : 'cursor-default'}`}
      >
        <Star className="h-full w-full" />
      </button>
    ));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (formData.rating === 0) {
      setSubmitMessage({
        type: 'error',
        message: 'Please select a rating',
      });
      return;
    }

    if (!tenantSlug) {
      setSubmitMessage({
        type: 'error',
        message: 'Tenant information is missing. Please refresh the page.',
      });
      return;
    }

    setIsSubmitting(true);
    setSubmitMessage(null);

    try {
      // Step 1: Create the review first (without avatar)
      const reviewData: TenantReviewData = {
        customer_name: formData.customerName,
        rating: formData.rating,
        comment: formData.comment,
        reviewer_url: formData.reviewerUrl || undefined,
        vehicle_type: formData.vehicleType as TenantReviewData['vehicle_type'],
        paint_correction: formData.paintCorrection,
        ceramic_coating: formData.ceramicCoating,
        paint_protection_film: formData.paintProtectionFilm,
        source: formData.source,
        // Don't include avatar_filename yet - we'll upload the file first
      };

      const createResponse = await createReview(tenantSlug, reviewData);
      const reviewId = createResponse.data.id;

      // Step 2: Upload avatar if provided
      if (formData.avatarFile && reviewId) {
        try {
          const _avatarResult = await uploadAvatar(formData.avatarFile, formData.customerName, reviewId);
        } catch (avatarError) {
          // Avatar upload failed, but review was created successfully
          console.warn('Avatar upload failed:', avatarError);
          // Don't fail the entire operation for avatar upload failure
        }
      }
      
      setSubmitMessage({
        type: 'success',
        message: 'Review published successfully!',
      });
      
      // Reset form
      setFormData({
        customerName: '',
        reviewerUrl: '',
        rating: 0,
        comment: '',
        vehicleType: 'car',
        paintCorrection: false,
        ceramicCoating: false,
        paintProtectionFilm: false,
        source: 'website',
      });
    } catch (error) {
      setSubmitMessage({
        type: 'error',
        message: error instanceof Error ? error.message : 'Failed to add review. Please try again.',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const isFormValid = formData.customerName.trim() && 
                     formData.rating > 0 && 
                     formData.comment.trim();

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h3 className="text-lg font-semibold text-white">Add New Review</h3>
        <p className="text-gray-400 text-sm">
          Add a customer review to showcase your services
        </p>
      </div>

      {/* Form */}
      <div className="bg-stone-800 rounded-xl border border-stone-700 p-6">
        <form onSubmit={(e) => { e.preventDefault(); void handleSubmit(e); }} className="space-y-6">
          {/* Customer Information */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label htmlFor="customerName" className="flex items-center text-sm font-medium text-white mb-2">
                <User className="h-4 w-4 mr-2" />
                Customer Name *
              </label>
              <input
                type="text"
                id="customerName"
                name="customerName"
                value={formData.customerName}
                onChange={handleInputChange}
                className="w-full px-4 py-3 bg-stone-700 border border-stone-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                placeholder="Enter customer name"
                required
              />
            </div>
            
            <div>
              <label htmlFor="reviewerUrl" className="flex items-center text-sm font-medium text-white mb-2">
                <Link className="h-4 w-4 mr-2" />
                Reviewer Profile URL
              </label>
              <input
                type="url"
                id="reviewerUrl"
                name="reviewerUrl"
                value={formData.reviewerUrl}
                onChange={handleInputChange}
                className="w-full px-4 py-3 bg-stone-700 border border-stone-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                placeholder="e.g., https://www.google.com/maps/contrib/123456789"
              />
              <p className="text-xs text-gray-400 mt-1">
                Link to reviewer&apos;s profile page (Google, Yelp, etc.)
              </p>
            </div>
          </div>

          {/* Vehicle Type */}
          <div>
            <label htmlFor="vehicleType" className="block text-sm font-medium text-white mb-2">
              Vehicle Type
            </label>
            <select
              id="vehicleType"
              name="vehicleType"
              value={formData.vehicleType}
              onChange={handleInputChange}
              className="w-1/4 px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            >
              {vehicleTypes.map((type) => (
                <option key={type.value} value={type.value}>
                  {type.label}
                </option>
              ))}
            </select>
          </div>

          {/* Service Types */}
          <div>
            <div className="block text-sm font-medium text-white mb-3">
              Service Types
            </div>
            <div className="space-y-3">
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="paintCorrection"
                  name="paintCorrection"
                  checked={formData.paintCorrection}
                  onChange={handleInputChange}
                  className="h-4 w-4 text-orange-500 bg-stone-700 border-stone-600 rounded focus:ring-orange-500 focus:ring-2"
                />
                <label htmlFor="paintCorrection" className="ml-2 text-sm text-white">
                  Paint Correction
                </label>
              </div>
              
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="ceramicCoating"
                  name="ceramicCoating"
                  checked={formData.ceramicCoating}
                  onChange={handleInputChange}
                  className="h-4 w-4 text-orange-500 bg-stone-700 border-stone-600 rounded focus:ring-orange-500 focus:ring-2"
                />
                <label htmlFor="ceramicCoating" className="ml-2 text-sm text-white">
                  Ceramic Coating
                </label>
              </div>
              
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="paintProtectionFilm"
                  name="paintProtectionFilm"
                  checked={formData.paintProtectionFilm}
                  onChange={handleInputChange}
                  className="h-4 w-4 text-orange-500 bg-stone-700 border-stone-600 rounded focus:ring-orange-500 focus:ring-2"
                />
                <label htmlFor="paintProtectionFilm" className="ml-2 text-sm text-white">
                  Paint Protection Film
                </label>
              </div>
            </div>
          </div>

          {/* Review Source */}
          <div>
            <label htmlFor="source" className="block text-sm font-medium text-white mb-2">
              Review Source
              {formData.reviewerUrl && (
                <span className="text-xs text-gray-400 ml-2">(auto-detected)</span>
              )}
            </label>
            <select
              id="source"
              name="source"
              value={formData.source}
              onChange={handleInputChange}
              className="w-1/4 px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            >
              <option value="website">Website</option>
              <option value="google">Google</option>
              <option value="yelp">Yelp</option>
              <option value="facebook">Facebook</option>
            </select>
            {formData.reviewerUrl && (
              <p className="text-xs text-gray-400 mt-1">
                Automatically detected from profile URL. You can change this manually if needed.
              </p>
            )}
          </div>

          {/* Rating */}
          <div>
            <div className="block text-sm font-medium text-white mb-3">
              Rating *
            </div>
            <div className="flex items-center space-x-1">
              {renderStars(formData.rating, true)}
              {formData.rating > 0 && (
                <span className="ml-3 text-gray-300">
                  {formData.rating} out of 5 stars
                </span>
              )}
            </div>
          </div>

          {/* Comment */}
          <div>
            <label htmlFor="comment" className="flex items-center text-sm font-medium text-white mb-2">
              <MessageSquare className="h-4 w-4 mr-2" />
              Review Comment *
            </label>
            <textarea
              id="comment"
              name="comment"
              value={formData.comment}
              onChange={handleInputChange}
              rows={4}
              className="w-full px-4 py-3 bg-stone-700 border border-stone-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-none"
              placeholder="Enter the customer's review comment..."
              required
            />
          </div>


          {/* Avatar Image Upload */}
          <div>
            <label htmlFor="avatarFile" className="flex items-center text-sm font-medium text-white mb-2">
              <Upload className="h-4 w-4 mr-2" />
              Avatar Image (Optional)
            </label>
            <input
              type="file"
              id="avatarFile"
              name="avatarFile"
              accept="image/*"
              onChange={handleFileChange}
              className="w-full px-4 py-3 bg-stone-700 border border-stone-600 rounded-lg text-white file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-orange-600 file:text-white hover:file:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            />
            {formData.avatarFile && (
              <div className="mt-2 text-sm text-gray-400">
                Selected: {formData.avatarFile.name} ({(formData.avatarFile.size / 1024 / 1024).toFixed(2)} MB)
              </div>
            )}
          </div>

          {/* Submit Message */}
          {submitMessage && (
            <div className={`flex items-center space-x-2 p-4 rounded-lg ${
              submitMessage.type === 'success'
                ? 'bg-green-900/20 border border-green-700 text-green-400'
                : 'bg-red-900/20 border border-red-700 text-red-400'
            }`}>
              <AlertCircle className="h-5 w-5" />
              <span>{submitMessage.message}</span>
            </div>
          )}

          {/* Submit Button */}
          <div className="flex justify-end">
            <button
              type="submit"
              disabled={!isFormValid || isSubmitting}
              className={`flex items-center space-x-2 px-6 py-3 rounded-lg font-medium transition-all duration-200 ${
                isFormValid && !isSubmitting
                  ? 'bg-orange-500 hover:bg-orange-600 text-white shadow-lg hover:shadow-xl'
                  : 'bg-gray-600 text-gray-400 cursor-not-allowed'
              }`}
            >
              <Send className="h-4 w-4" />
              <span>{isSubmitting ? 'Adding Review...' : 'Add Review'}</span>
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\website\components\FAQItemAutoSaveField.tsx
============================
import React from 'react';
import { AlertCircle, CheckCircle, Loader2 } from 'lucide-react';

import type { FAQItem } from '@/shared/api/websiteContent.api';
import { useAutoSave } from '@/shared/hooks/useAutoSave';

import { useWebsiteContent } from '../contexts/WebsiteContentContext';

interface FAQItemAutoSaveFieldProps {
  faqIndex: number;
  field: 'question' | 'answer';
  label: string;
  type?: 'text' | 'textarea';
  placeholder?: string;
  rows?: number;
}

export const FAQItemAutoSaveField: React.FC<FAQItemAutoSaveFieldProps> = ({
  faqIndex,
  field,
  label,
  type = 'text',
  placeholder,
  rows = 3,
}) => {
  const { contentData, updateContent } = useWebsiteContent();
  
  const getInitialValue = (): string => {
    if (!contentData?.faq_items) return '';
    const faqItem = contentData.faq_items[faqIndex];
    if (!faqItem) return '';
    return faqItem[field] || '';
  };

  const saveField = async (value: string) => {
    if (!contentData?.faq_items) return;
    
    const currentItem = contentData.faq_items[faqIndex];
    if (!currentItem) return;
    
    // Create updated FAQ items array
    const updatedFaqItems: FAQItem[] = [...contentData.faq_items];
    updatedFaqItems[faqIndex] = {
      ...currentItem,
      [field]: value
    };
    
    // Update the entire faq_items array
    await updateContent({ faq_items: updatedFaqItems });
  };

  const { value, setValue, isSaving, error } = useAutoSave(
    getInitialValue(),
    saveField,
    { debounce: 1000 }
  );

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setValue(e.target.value);
  };

  const getStatusIcon = () => {
    if (isSaving) {
      return <Loader2 className="h-4 w-4 text-blue-500 animate-spin" />;
    }
    if (error) {
      return <AlertCircle className="h-4 w-4 text-red-500" />;
    }
    if (value && value.trim() !== '') {
      return <CheckCircle className="h-4 w-4 text-green-500" />;
    }
    return null;
  };

  return (
    <div className="relative">
      <label className="block text-xs font-medium text-gray-300 mb-1">{label}</label>
      <div className="relative">
        {type === 'textarea' ? (
          <textarea
            value={value}
            onChange={handleChange}
            placeholder={placeholder}
            rows={rows}
            className={`w-full px-3 py-2 pr-10 bg-stone-600 border rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-none ${
              error ? 'border-red-500' : 'border-stone-500'
            }`}
          />
        ) : (
          <input
            type={type}
            value={value}
            onChange={handleChange}
            placeholder={placeholder}
            className={`w-full px-3 py-2 pr-10 bg-stone-600 border rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent ${
              error ? 'border-red-500' : 'border-stone-500'
            }`}
          />
        )}
        <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
          {getStatusIcon()}
        </div>
      </div>
      {error && (
        <p className="mt-1 text-xs text-red-400">{error}</p>
      )}
    </div>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\website\components\FAQSection.tsx
============================
import React, { useMemo, useState } from 'react';
import { ChevronDown, ChevronRight, Eye, FileText, HelpCircle, Plus, Save, X } from 'lucide-react';

import { useData } from '@/shared/hooks';
import { loadIndustryFAQs } from '@/shared/utils/faqLoader';

import { FAQItemAutoSaveField } from './FAQItemAutoSaveField';
import { WebsiteAutoSaveField } from './WebsiteAutoSaveField';

interface FAQItem {
  category: string;
  question: string;
  answer: string;
}

interface FAQSectionProps {
  faqContent?: FAQItem[];
  onUpdateContent: (field: string, value: unknown) => void;
  onResetToDefault: () => void;
}

export const FAQSection: React.FC<FAQSectionProps> = ({
  faqContent,
  onUpdateContent,
  onResetToDefault,
}) => {
  const [isCollapsed, setIsCollapsed] = useState(true);
  const [activeTab, setActiveTab] = useState<'content' | 'categories'>('content');
  const [activeCategory, setActiveCategory] = useState<string>('Services');

  const faqCategories = [
    'Services',
    'Pricing', 
    'Scheduling',
    'Locations',
    'Preparation',
    'Payments',
    'Warranty',
    'Aftercare',
    'General'
  ];

  // Load industry-specific FAQs for template picker
  const { industry } = useData();
  const [industryFAQs, setIndustryFAQs] = React.useState<Array<{ question: string; answer: string; category: string }>>([]);
  
  React.useEffect(() => {
    if (!industry) return;
    loadIndustryFAQs(industry)
      .then(setIndustryFAQs)
      .catch(() => {
        setIndustryFAQs([]);
      });
  }, [industry]);
  
  const _categoryFaqMap = useMemo(() => {
    const map: Record<string, typeof industryFAQs> = {};
    industryFAQs.forEach(faq => {
      if (!map[faq.category]) {
        map[faq.category] = [];
      }
      map[faq.category].push(faq);
    });
    return map;
  }, [industryFAQs]);

  const handleAddFAQ = () => {
    const currentContent = faqContent || [];
    const newContent = [...currentContent, { 
      question: `New ${activeCategory} question`, 
      answer: `New ${activeCategory} answer`, 
      category: activeCategory 
    }];
    onUpdateContent('content', newContent);
  };

  const handleRemoveFAQ = (globalIndex: number) => {
    const currentContent = faqContent || [];
    const newContent = currentContent.filter((_item, i) => i !== globalIndex);
    onUpdateContent('content', newContent);
  };

  const customFaqs = (faqContent || []).filter((faq) => faq.category === activeCategory);

  return (
    <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <HelpCircle className="h-5 w-5 text-orange-400 mr-3" />
          <h3 className="text-lg font-semibold text-white">FAQ</h3>
        </div>
        <div className="flex items-center space-x-2">
          <button
            onClick={() => { /* Preview functionality */ }}
            className="flex items-center px-3 py-1 text-sm text-gray-400 hover:text-white transition-colors"
          >
            <Eye className="h-4 w-4 mr-1" />
            Preview
          </button>
          <button
            onClick={onResetToDefault}
            className="flex items-center px-3 py-1 text-sm text-gray-400 hover:text-white transition-colors"
          >
            <Save className="h-4 w-4 mr-1" />
            Default
          </button>
          <button
            onClick={() => { setIsCollapsed(!isCollapsed); }}
            className="flex items-center px-3 py-1 text-sm text-gray-400 hover:text-white transition-colors"
          >
            {isCollapsed ? (
              <ChevronRight className="h-4 w-4 mr-1" />
            ) : (
              <ChevronDown className="h-4 w-4 mr-1" />
            )}
            {isCollapsed ? 'Expand' : 'Collapse'}
          </button>
        </div>
      </div>

      {!isCollapsed && (
        <div className="space-y-4">
          {/* FAQ Sub-tabs */}
          <div className="flex space-x-1 bg-stone-800 rounded-lg p-1 mb-4">
            <button
              onClick={() => { setActiveTab('content'); }}
              className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'content'
                  ? 'bg-orange-500 text-white'
                  : 'text-gray-400 hover:text-white hover:bg-stone-700'
              }`}
            >
              <FileText className="h-4 w-4 mr-2" />
              Content
            </button>
            <button
              onClick={() => { setActiveTab('categories'); }}
              className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'categories'
                  ? 'bg-orange-500 text-white'
                  : 'text-gray-400 hover:text-white hover:bg-stone-700'
              }`}
            >
              <HelpCircle className="h-4 w-4 mr-2" />
              Categories
            </button>
          </div>

          {/* FAQ Sub-tab Content */}
          <div className="transition-all duration-300 ease-in-out">
            {activeTab === 'content' && (
              <div className="space-y-4">
                <div className="w-2/5">
                  <WebsiteAutoSaveField
                    field="faq_title"
                    label="FAQ Title"
                    placeholder="Enter FAQ title"
                  />
                </div>
                <div className="w-2/5">
                  <WebsiteAutoSaveField
                    field="faq_subtitle"
                    label="FAQ Subtitle"
                    placeholder="Enter FAQ subtitle"
                  />
                </div>
              </div>
            )}

            {activeTab === 'categories' && (
              <div className="space-y-4">
                {/* FAQ Category Sub-tabs */}
                <div className="flex flex-wrap gap-1 bg-stone-800 rounded-lg p-1 mb-4">
                  {faqCategories.map((category) => (
                    <button
                      key={category}
                      onClick={() => { setActiveCategory(category); }}
                      className={`flex items-center px-3 py-2 rounded-md text-xs font-medium transition-colors ${
                        activeCategory === category
                          ? 'bg-orange-500 text-white'
                          : 'text-gray-400 hover:text-white hover:bg-stone-700'
                      }`}
                    >
                      {category}
                    </button>
                  ))}
                </div>
                
                {/* Category-specific FAQ Content */}
                <div>
                  <div className="flex items-center justify-between mb-4">
                    <div className="block text-sm font-medium text-gray-300">
                      {activeCategory} FAQs
                    </div>
                    <button
                      onClick={handleAddFAQ}
                      className="flex items-center px-3 py-1 bg-orange-500 text-white rounded text-xs hover:bg-orange-600 transition-colors"
                    >
                      <Plus className="h-3 w-3 mr-1" />
                      Add {activeCategory} FAQ
                    </button>
                  </div>
                  
                  <div className="space-y-3">
                    {customFaqs.map((faq, categoryIndex) => {
                      const currentContent = faqContent || [];
                      const globalIndex = currentContent.findIndex((item) => item === faq);
                      
                      return (
                        <div key={`${activeCategory}-${categoryIndex}`} className="rounded-lg p-4 bg-stone-700 border border-stone-600">
                          <div className="grid grid-cols-1 gap-3">
                            <FAQItemAutoSaveField
                              faqIndex={globalIndex}
                              field="question"
                              label="Question"
                              placeholder={`Enter ${activeCategory.toLowerCase()} question...`}
                            />
                            
                            <FAQItemAutoSaveField
                              faqIndex={globalIndex}
                              field="answer"
                              label="Answer"
                              type="textarea"
                              rows={3}
                              placeholder={`Enter ${activeCategory.toLowerCase()} answer...`}
                            />
                            <div className="flex justify-end">
                              <button
                                onClick={() => { handleRemoveFAQ(globalIndex); }}
                                className="flex items-center px-2 py-1 bg-red-600 text-white rounded text-xs hover:bg-red-700 transition-colors"
                              >
                                <X className="h-3 w-3 mr-1" />
                                Remove
                              </button>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                    
                    {/* Show message if no FAQs in this category */}
                    {customFaqs.length === 0 && (
                      <div className="text-center py-8 text-gray-400">
                        <HelpCircle className="h-8 w-8 mx-auto mb-2 opacity-50" />
                        <p className="text-sm">No {activeCategory} FAQs yet</p>
                        <p className="text-xs mt-1">Click &quot;Add {activeCategory} FAQ&quot; to get started</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\website\components\GallerySection.tsx
============================
import React, { useState } from 'react';
import { ChevronDown, ChevronRight, Eye, Image, Plus } from 'lucide-react';

interface GalleryImage {
  src: string;
  alt: string;
}

interface GallerySectionProps {
  stockImages: GalleryImage[];
  customImages: GalleryImage[];
  onAddCustomImage: () => void;
}

export const GallerySection: React.FC<GallerySectionProps> = ({
  stockImages,
  customImages,
  onAddCustomImage,
}) => {
  const [isCollapsed, setIsCollapsed] = useState(true);
  const [activeTab, setActiveTab] = useState<'stock' | 'custom'>('stock');

  return (
    <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <Image className="h-5 w-5 text-orange-400 mr-3" />
          <h3 className="text-lg font-semibold text-white">Gallery</h3>
        </div>
        <div className="flex items-center space-x-2">
          <button
            onClick={() => { /* Preview functionality */ }}
            className="flex items-center px-3 py-1 text-sm text-gray-400 hover:text-white transition-colors"
          >
            <Eye className="h-4 w-4 mr-1" />
            Preview
          </button>
          <button
            onClick={() => { setIsCollapsed(!isCollapsed); }}
            className="flex items-center px-3 py-1 text-sm text-gray-400 hover:text-white transition-colors"
          >
            {isCollapsed ? (
              <ChevronRight className="h-4 w-4 mr-1" />
            ) : (
              <ChevronDown className="h-4 w-4 mr-1" />
            )}
            {isCollapsed ? 'Expand' : 'Collapse'}
          </button>
        </div>
      </div>

      {!isCollapsed && (
        <div className="space-y-4">
          {/* Gallery Sub-tabs */}
          <div className="flex space-x-1 bg-stone-800 rounded-lg p-1 mb-4">
            <button
              onClick={() => { setActiveTab('stock'); }}
              className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'stock'
                  ? 'bg-orange-500 text-white'
                  : 'text-gray-400 hover:text-white hover:bg-stone-700'
              }`}
            >
              <Image className="h-4 w-4 mr-2" />
              Stock
            </button>
            <button
              onClick={() => { setActiveTab('custom'); }}
              className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'custom'
                  ? 'bg-orange-500 text-white'
                  : 'text-gray-400 hover:text-white hover:bg-stone-700'
              }`}
            >
              <Plus className="h-4 w-4 mr-2" />
              Custom
            </button>
          </div>

          {/* Gallery Sub-tab Content */}
          <div className="transition-all duration-300 ease-in-out">
            {activeTab === 'stock' && (
              <div className="space-y-4">
                <div>
                  <div className="block text-sm font-medium text-gray-300 mb-2">Stock Gallery Images</div>
                  <div className="grid grid-cols-4 gap-4 max-w-6xl">
                    {stockImages.map((imageItem, index) => (
                      <div
                        key={`stock-${index}`}
                        className="relative cursor-pointer rounded-lg overflow-hidden border-2 border-stone-600 hover:border-stone-500 transition-all duration-200"
                      >
                        <div className="aspect-square bg-stone-700 relative">
                          <img
                            src={imageItem.src}
                            alt={imageItem.alt}
                            className="w-full h-full object-cover"
                            onError={(e) => {
                              const target = e.target as HTMLImageElement;
                              target.style.display = 'none';
                              const fallback = document.createElement('div');
                              fallback.className = 'w-full h-full flex items-center justify-center text-gray-400 text-sm';
                              fallback.textContent = 'Image not found';
                              target.parentNode?.appendChild(fallback);
                            }}
                          />
                        </div>
                        <div className="p-2 bg-stone-800">
                          <p className="text-xs text-gray-300 truncate">
                            {imageItem.alt}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                  <p className="text-xs text-gray-500 mt-2">
                    {stockImages.length} stock gallery images loaded from gallery.json
                  </p>
                </div>
              </div>
            )}

            {activeTab === 'custom' && (
              <div className="space-y-4">
                <div>
                  <div className="flex items-center justify-between mb-4">
                    <div className="block text-sm font-medium text-gray-300">Custom Gallery Images</div>
                    <button
                      onClick={onAddCustomImage}
                      className="flex items-center px-3 py-1 bg-orange-500 text-white rounded text-xs hover:bg-orange-600 transition-colors"
                    >
                      <Plus className="h-3 w-3 mr-1" />
                      Add Custom Image
                    </button>
                  </div>
                  
                  <div className="grid grid-cols-4 gap-4 max-w-6xl">
                    {customImages.map((imageItem, index) => (
                      <div
                        key={index}
                        className="relative cursor-pointer rounded-lg overflow-hidden border-2 border-stone-600 hover:border-stone-500 transition-all duration-200"
                      >
                        <div className="aspect-square bg-stone-700 relative">
                          {imageItem.src ? (
                            <img
                              src={imageItem.src}
                              alt={imageItem.alt || 'Custom gallery image'}
                              className="w-full h-full object-cover"
                              onError={(e) => {
                                const target = e.target as HTMLImageElement;
                                target.style.display = 'none';
                                const fallback = document.createElement('div');
                                fallback.className = 'w-full h-full flex items-center justify-center text-gray-400 text-sm';
                                fallback.textContent = 'Image not found';
                                target.parentNode?.appendChild(fallback);
                              }}
                            />
                          ) : (
                            <div className="w-full h-full flex items-center justify-center text-gray-400 text-sm">
                              <div className="text-center">
                                <Plus className="h-8 w-8 mx-auto mb-2 opacity-50" />
                                <p>Add Image</p>
                              </div>
                            </div>
                          )}
                        </div>
                        <div className="p-2 bg-stone-800">
                          <p className="text-xs text-gray-300 truncate">
                            {imageItem.alt || 'Custom Image'}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  {customImages.length === 0 && (
                    <div className="text-center py-8 text-gray-400">
                      <Image className="h-8 w-8 mx-auto mb-2 opacity-50" />
                      <p className="text-sm">No custom images yet</p>
                      <p className="text-xs mt-1">Click &quot;Add Custom Image&quot; to get started</p>
                    </div>
                  )}
                  
                  <p className="text-xs text-gray-500 mt-2">
                    {customImages.length} custom gallery images
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\website\components\HealthTab.tsx
============================
import React, { useCallback, useEffect,useState } from 'react';
import { AlertTriangle, CheckCircle, Clock,RefreshCw, XCircle } from 'lucide-react';

import { 
  formatDisplayValue,
  getHealthStatus, 
  getScoreColor, 
  type HealthData,
  type HealthScanResponse,
  triggerHealthScan} from '../../../api/healthApi';

interface HealthTabProps {
  tenantSlug?: string;
}

export const HealthTab: React.FC<HealthTabProps> = ({ tenantSlug }) => {
  const [healthData, setHealthData] = useState<HealthData | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isScanning, setIsScanning] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [scanResult, setScanResult] = useState<HealthScanResponse['data'] | null>(null);

  const loadHealthData = useCallback(async () => {
    if (!tenantSlug) return;

    setIsLoading(true);
    setError(null);

    try {
      const response = await getHealthStatus(tenantSlug);
      setHealthData(response.data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load health data');
    } finally {
      setIsLoading(false);
    }
  }, [tenantSlug]);

  const handleScan = async () => {
    if (!tenantSlug) return;

    setIsScanning(true);
    setError(null);
    setScanResult(null);

    try {
      const response = await triggerHealthScan(tenantSlug);
      setScanResult(response.data);
      
      // Reload health data after scan
      setTimeout(() => {
        void loadHealthData();
      }, 1000);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to run health scan');
    } finally {
      setIsScanning(false);
    }
  };

  useEffect(() => {
    void loadHealthData();
  }, [loadHealthData]);

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'healthy':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'warning':
        return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
      case 'critical':
      case 'error':
        return <XCircle className="h-4 w-4 text-red-500" />;
      default:
        return <Clock className="h-4 w-4 text-gray-500" />;
    }
  };

  const renderScoreRing = (score: number, size: string = 'w-16 h-16') => {
    const radius = 28;
    const circumference = 2 * Math.PI * radius;
    const strokeDasharray = circumference;
    const strokeDashoffset = circumference - score / 100 * circumference;
    
    return (
      <div className={`${size} relative`}>
        <svg className="w-full h-full transform -rotate-90" viewBox="0 0 60 60">
          {/* Background circle */}
          <circle
            cx="30"
            cy="30"
            r={radius}
            stroke="currentColor"
            strokeWidth="4"
            fill="none"
            className="text-gray-700"
          />
          {/* Progress circle */}
          <circle
            cx="30"
            cy="30"
            r={radius}
            stroke="currentColor"
            strokeWidth="4"
            fill="none"
            strokeDasharray={strokeDasharray}
            strokeDashoffset={strokeDashoffset}
            strokeLinecap="round"
            className={`transition-all duration-300 ${getScoreColor(score).replace('text-', '')}`}
            style={{
              stroke: score >= 90 ? '#10b981' : score >= 50 ? '#f59e0b' : '#ef4444'
            }}
          />
        </svg>
        {/* Score text in center */}
        <div className="absolute inset-0 flex items-center justify-center">
          <span className={`text-sm font-bold ${getScoreColor(score)}`}>
            {score}
          </span>
        </div>
      </div>
    );
  };

  const renderScoreCard = (title: string, score: number, _color?: string) => (
    <div className="bg-stone-800 rounded-lg p-4">
      <div className="flex items-center gap-4">
        {renderScoreRing(score)}
        <div className="flex-1">
          <h4 className="text-sm font-medium text-gray-300">{title}</h4>
          <div className="text-xs text-gray-500 mt-1">
            {score >= 90 ? 'Good' : score >= 50 ? 'Needs Improvement' : 'Poor'}
          </div>
        </div>
      </div>
    </div>
  );

  const renderCoreWebVitals = (data: {
    lcp: { score: number; value: number };
    fid: { score: number; value: number };
    cls: { score: number; value: number | string };
    fcp: { score: number; value: number };
  }) => (
    <div className="space-y-3">
      <h4 className="text-sm font-medium text-gray-300">Core Web Vitals</h4>
      <div className="grid grid-cols-2 gap-3">
        <div className="bg-stone-800 rounded-lg p-3">
          <div className="flex items-center gap-3">
            {renderScoreRing(Math.round(data.lcp.score * 100), 'w-12 h-12')}
            <div className="flex-1">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">LCP</span>
                <span className={`text-xs font-medium ${getScoreColor(data.lcp.score * 100)}`}>
                  {formatDisplayValue(data.lcp.value, 'ms')}
                </span>
              </div>
              <div className="text-xs text-gray-500">Largest Contentful Paint</div>
            </div>
          </div>
        </div>
        
        <div className="bg-stone-800 rounded-lg p-3">
          <div className="flex items-center gap-3">
            {renderScoreRing(Math.round(data.fid.score * 100), 'w-12 h-12')}
            <div className="flex-1">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">FID</span>
                <span className={`text-xs font-medium ${getScoreColor(data.fid.score * 100)}`}>
                  {formatDisplayValue(data.fid.value, 'ms')}
                </span>
              </div>
              <div className="text-xs text-gray-500">First Input Delay</div>
            </div>
          </div>
        </div>
        
        <div className="bg-stone-800 rounded-lg p-3">
          <div className="flex items-center gap-3">
            {renderScoreRing(Math.round(data.cls.score * 100), 'w-12 h-12')}
            <div className="flex-1">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">CLS</span>
                <span className={`text-xs font-medium ${getScoreColor(data.cls.score * 100)}`}>
                  {data.cls.value ? (typeof data.cls.value === 'number' ? data.cls.value.toFixed(3) : parseFloat(data.cls.value).toFixed(3)) : 'N/A'}
                </span>
              </div>
              <div className="text-xs text-gray-500">Cumulative Layout Shift</div>
            </div>
          </div>
        </div>
        
        <div className="bg-stone-800 rounded-lg p-3">
          <div className="flex items-center gap-3">
            {renderScoreRing(Math.round(data.fcp.score * 100), 'w-12 h-12')}
            <div className="flex-1">
              <div className="flex items-center justify-between mb-1">
                <span className="text-xs text-gray-400">FCP</span>
                <span className={`text-xs font-medium ${getScoreColor(data.fcp.score * 100)}`}>
                  {formatDisplayValue(data.fcp.value, 'ms')}
                </span>
              </div>
              <div className="text-xs text-gray-500">First Contentful Paint</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderOpportunities = (opportunities: Array<{ title: string; savings: number; description: string }>) => (
    <div className="space-y-3">
      <h4 className="text-sm font-medium text-gray-300">Top Optimization Opportunities</h4>
      {opportunities.slice(0, 3).map((opp, index) => (
        <div key={index} className="bg-stone-800 rounded-lg p-3">
          <div className="flex items-center justify-between mb-1">
            <h5 className="text-sm font-medium text-white">{opp.title}</h5>
            <span className="text-xs text-green-400">
              Save {formatDisplayValue(opp.savings, 'ms')}
            </span>
          </div>
          <p className="text-xs text-gray-400">{opp.description}</p>
        </div>
      ))}
    </div>
  );

  if (!tenantSlug) {
    return (
      <div className="flex items-center justify-center h-64">
        <p className="text-gray-400">No tenant selected</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-semibold text-white">Website Health</h3>
          <p className="text-sm text-gray-400">Monitor your website&apos;s performance and Core Web Vitals</p>
        </div>
        <button
          onClick={() => void handleScan()}
          disabled={isScanning || isLoading}
          className="px-4 py-2 bg-orange-600 hover:bg-orange-700 disabled:bg-orange-800 disabled:cursor-not-allowed text-white rounded-lg font-medium transition-colors flex items-center gap-2"
        >
          <RefreshCw className={`h-4 w-4 ${isScanning ? 'animate-spin' : ''}`} />
          {isScanning ? 'Scanning...' : 'Run Health Scan'}
        </button>
      </div>

      {/* Error Message */}
      {error && (
        <div className="bg-red-900 text-red-300 border border-red-700 rounded-lg p-4">
          <div className="flex items-center gap-2">
            <XCircle className="h-4 w-4" />
            <span className="font-medium">Error</span>
          </div>
          <p className="text-sm mt-1">{error}</p>
        </div>
      )}

      {/* Scan Result */}
      {scanResult && (
        <div className="bg-green-900 text-green-300 border border-green-700 rounded-lg p-4">
          <div className="flex items-center gap-2">
            <CheckCircle className="h-4 w-4" />
            <span className="font-medium">Scan Completed</span>
          </div>
          <p className="text-sm mt-1">
            Overall Score: <span className="font-bold">{scanResult.overallScore}</span>
          </p>
          {scanResult.summary.priority.length > 0 && (
            <div className="mt-2">
              <p className="text-xs text-green-400">Priority Issues:</p>
              <ul className="text-xs mt-1 space-y-1">
                {scanResult.summary.priority.map((item, index) => (
                  <li key={index}>• {item}</li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}

      {/* Loading State */}
      {isLoading && !healthData && (
        <div className="flex items-center justify-center h-64">
          <div className="flex items-center gap-2">
            <RefreshCw className="h-5 w-5 animate-spin text-orange-500" />
            <span className="text-gray-400">Loading health data...</span>
          </div>
        </div>
      )}

      {/* No Data State */}
      {!isLoading && healthData && !healthData.hasData && (
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <Clock className="h-12 w-12 text-gray-500 mx-auto mb-4" />
            <h4 className="text-lg font-medium text-white mb-2">No Health Data</h4>
            <p className="text-gray-400 mb-4">{healthData.message}</p>
            <button
              onClick={() => void handleScan()}
              className="px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg font-medium transition-colors"
            >
              Run First Health Scan
            </button>
          </div>
        </div>
      )}

      {/* Health Data */}
      {healthData && healthData.hasData && (
        <div className="space-y-6">
          {/* Overall Status */}
          {healthData.overall && (
            <div className="bg-stone-800 rounded-lg p-6">
              <div className="flex items-center gap-6">
                {renderScoreRing(healthData.overall.score, 'w-20 h-20')}
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    {getStatusIcon(healthData.overall.status)}
                    <span className="text-lg font-semibold text-white">Overall Health</span>
                  </div>
                  <p className="text-sm text-gray-400 mb-2">
                    {healthData.overall.score >= 90 ? 'Excellent' : healthData.overall.score >= 50 ? 'Needs Improvement' : 'Poor'}
                  </p>
                  <p className="text-xs text-gray-500">
                    Last updated: {new Date(healthData.lastUpdated || '').toLocaleString()}
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Performance Scores */}
          {healthData.performance ? (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Mobile Performance */}
              <div className="space-y-4">
                <h4 className="text-lg font-semibold text-white flex items-center gap-2">
                  📱 Mobile Performance
                </h4>
                
                {healthData.performance.mobile ? (
                  <>
                    <div className="grid grid-cols-2 gap-3">
                      {renderScoreCard('Performance', healthData.performance.mobile.performanceScore || healthData.performance.mobile.overallScore || 0)}
                      {renderScoreCard('Accessibility', healthData.performance.mobile.accessibilityScore || 0)}
                      {renderScoreCard('Best Practices', healthData.performance.mobile.bestPracticesScore || 0)}
                      {renderScoreCard('SEO', healthData.performance.mobile.seoScore || 0)}
                    </div>

                    {renderCoreWebVitals(healthData.performance.mobile.coreWebVitals)}
                    
                    {healthData.performance.mobile.opportunities.length > 0 && 
                      renderOpportunities(healthData.performance.mobile.opportunities)
                    }
                  </>
                ) : (
                  <div className="bg-stone-700 rounded-lg p-6 text-center">
                    <p className="text-gray-400">No mobile performance data available</p>
                    <p className="text-xs text-gray-500 mt-1">Run a health scan to get mobile metrics</p>
                  </div>
                )}
              </div>

              {/* Desktop Performance */}
              <div className="space-y-4">
                <h4 className="text-lg font-semibold text-white flex items-center gap-2">
                  🖥️ Desktop Performance
                </h4>
                
                {healthData.performance.desktop ? (
                  <>
                    <div className="grid grid-cols-2 gap-3">
                      {renderScoreCard('Performance', healthData.performance.desktop.performanceScore || healthData.performance.desktop.overallScore || 0)}
                      {renderScoreCard('Accessibility', healthData.performance.desktop.accessibilityScore || 0)}
                      {renderScoreCard('Best Practices', healthData.performance.desktop.bestPracticesScore || 0)}
                      {renderScoreCard('SEO', healthData.performance.desktop.seoScore || 0)}
                    </div>

                    {renderCoreWebVitals(healthData.performance.desktop.coreWebVitals)}
                    
                    {healthData.performance.desktop.opportunities.length > 0 && 
                      renderOpportunities(healthData.performance.desktop.opportunities)
                    }
                  </>
                ) : (
                  <div className="bg-stone-700 rounded-lg p-6 text-center">
                    <p className="text-gray-400">No desktop performance data available</p>
                    <p className="text-xs text-gray-500 mt-1">Run a health scan to get desktop metrics</p>
                  </div>
                )}
              </div>
            </div>
          ) : (
            <div className="bg-stone-800 rounded-lg p-8 text-center">
              <div className="text-gray-400 mb-4">
                <svg className="w-16 h-16 mx-auto mb-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
              </div>
              <h3 className="text-lg font-semibold text-white mb-2">No Performance Data</h3>
              <p className="text-gray-400 mb-4">Run a health scan to get detailed performance metrics for both mobile and desktop.</p>
              <button
                onClick={() => void handleScan()}
                disabled={isScanning}
                className="px-4 py-2 bg-orange-600 hover:bg-orange-700 disabled:bg-orange-800 disabled:cursor-not-allowed text-white rounded-lg text-sm font-medium transition-colors flex items-center gap-2 mx-auto"
              >
                {isScanning ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    Scanning...
                  </>
                ) : (
                  <>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    Run Health Scan
                  </>
                )}
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\website\components\HeroSection.tsx
============================
import React, { useState } from 'react';
import { Check, ChevronDown, ChevronRight, Eye, FileText, Image } from 'lucide-react';

import { WebsiteAutoSaveField } from './WebsiteAutoSaveField';

interface HeroSectionProps {
  heroImages?: string[];
  onUpdateContent: (field: string, value: unknown) => void;
}

export const HeroSection: React.FC<HeroSectionProps> = ({
  heroImages = [],
  onUpdateContent,
}) => {
  const [isCollapsed, setIsCollapsed] = useState(true);
  const [activeTab, setActiveTab] = useState<'content' | 'images'>('content');

  const availableImages = [
    { url: '/images/hero/hero1.png', alt: 'Professional mobile detailing service in action' },
    { url: '/images/hero/hero2.png', alt: 'High-quality car detailing and ceramic coating' }
  ];

  const handleImageSelect = (imageUrl: string, isSelected: boolean) => {
    let newImages;
    if (isSelected) {
      newImages = heroImages.filter(img => img !== imageUrl);
    } else {
      if (heroImages.length < 2) {
        newImages = [...heroImages, imageUrl];
      } else {
        newImages = [imageUrl, heroImages[1]];
      }
    }
    onUpdateContent('images', newImages);
  };

  return (
    <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <Image className="h-5 w-5 text-orange-400 mr-3" />
          <h3 className="text-lg font-semibold text-white">Hero</h3>
        </div>
        <div className="flex items-center space-x-2">
          <button
            onClick={() => { /* Preview functionality */ }}
            className="flex items-center px-3 py-1 text-sm text-gray-400 hover:text-white transition-colors"
          >
            <Eye className="h-4 w-4 mr-1" />
            Preview
          </button>
          <button
            onClick={() => { setIsCollapsed(!isCollapsed); }}
            className="flex items-center px-3 py-1 text-sm text-gray-400 hover:text-white transition-colors"
          >
            {isCollapsed ? (
              <ChevronRight className="h-4 w-4 mr-1" />
            ) : (
              <ChevronDown className="h-4 w-4 mr-1" />
            )}
            {isCollapsed ? 'Expand' : 'Collapse'}
          </button>
        </div>
      </div>

      {!isCollapsed && (
        <div className="space-y-4">
          {/* Hero Sub-tabs */}
          <div className="flex space-x-1 bg-stone-800 rounded-lg p-1 mb-4">
            <button
              onClick={() => { setActiveTab('content'); }}
              className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'content'
                  ? 'bg-orange-500 text-white'
                  : 'text-gray-400 hover:text-white hover:bg-stone-700'
              }`}
            >
              <FileText className="h-4 w-4 mr-2" />
              Content
            </button>
            <button
              onClick={() => { setActiveTab('images'); }}
              className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'images'
                  ? 'bg-orange-500 text-white'
                  : 'text-gray-400 hover:text-white hover:bg-stone-700'
              }`}
            >
              <Image className="h-4 w-4 mr-2" />
              Images
            </button>
          </div>

          {/* Hero Sub-tab Content */}
          <div className="transition-all duration-300 ease-in-out">
            {activeTab === 'content' && (
              <div className="space-y-4">
                <div className="w-2/5">
                  <WebsiteAutoSaveField
                    field="hero_title"
                    label="Hero Title"
                    placeholder="Enter hero title"
                  />
                </div>
                <div className="w-2/5">
                  <WebsiteAutoSaveField
                    field="hero_subtitle"
                    label="Hero Subtitle"
                    placeholder="Enter hero subtitle"
                  />
                </div>
              </div>
            )}

            {activeTab === 'images' && (
              <div className="space-y-4">
                <div>
                  <div className="block text-sm font-medium text-gray-300 mb-2">
                    Hero Images (Select up to 2 images)
                  </div>
                  <div className="grid grid-cols-2 gap-4 max-w-2xl">
                    {availableImages.map((image, index) => {
                      const isSelected = heroImages.includes(image.url);
                      return (
                        <div
                          key={index}
                          role="button"
                          tabIndex={0}
                          className={`relative cursor-pointer rounded-lg overflow-hidden border-2 transition-all duration-200 ${
                            isSelected 
                              ? 'border-orange-500 ring-2 ring-orange-500/20' 
                              : 'border-stone-600 hover:border-stone-500'
                          }`}
                          onClick={() => { handleImageSelect(image.url, isSelected); }}
                          onKeyDown={(e) => {
                            if (e.key === 'Enter' || e.key === ' ') {
                              e.preventDefault();
                              handleImageSelect(image.url, isSelected);
                            }
                          }}
                        >
                          <div className="aspect-video bg-stone-700 relative">
                            <img
                              src={image.url}
                              alt={image.alt}
                              className="w-full h-full object-cover"
                              onError={(e) => {
                                const target = e.target as HTMLImageElement;
                                target.style.display = 'none';
                                const fallback = document.createElement('div');
                                fallback.className = 'w-full h-full flex items-center justify-center text-gray-400 text-sm';
                                fallback.textContent = 'Image not found';
                                target.parentNode?.appendChild(fallback);
                              }}
                            />
                            {isSelected && (
                              <div className="absolute inset-0 bg-orange-500/20 flex items-center justify-center">
                                <div className="bg-orange-500 text-white rounded-full p-2">
                                  <Check className="h-5 w-5" />
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                  <p className="text-xs text-gray-500 mt-2">
                    These images will rotate as the hero background on your website homepage.
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\website\components\index.ts
============================
export { AddReviewForm } from './AddReviewForm';
export { FAQItemAutoSaveField } from './FAQItemAutoSaveField';
export { FAQSection } from './FAQSection';
export { GallerySection } from './GallerySection';
export { HealthTab } from './HealthTab';
export { HeroSection } from './HeroSection';
export { RemoveReviewTab } from './RemoveReviewTab';
export { ReviewsContent } from './ReviewsContent';
export { ReviewsSection } from './ReviewsSection';
export { ServicesSection } from './ServicesSection';
export { WebsiteAutoSaveField } from './WebsiteAutoSaveField';


============================
FILE: frontend\src\features\tenantDashboard\tabs\website\components\RemoveReviewTab.tsx
============================
import React, { useCallback, useEffect,useState } from 'react';
import { Car, ExternalLink, Star, Trash2, Truck, Wrench } from 'lucide-react';

import { deleteReview,getReviews } from '../../../api/reviewsApi';

interface Review {
  id: number;
  customer_name: string;
  rating: number;
  comment: string;
  reviewer_url?: string;
  vehicle_type?: 'car' | 'truck' | 'suv' | 'boat' | 'rv' | 'motorcycle';
  paint_correction: boolean;
  ceramic_coating: boolean;
  paint_protection_film: boolean;
  source: 'website' | 'google' | 'yelp' | 'facebook';
  avatar_filename?: string;
  created_at: string;
}

interface RemoveReviewTabProps {
  tenantSlug?: string;
}

export const RemoveReviewTab: React.FC<RemoveReviewTabProps> = ({ tenantSlug }) => {
  const [reviews, setReviews] = useState<Review[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [deletingId, setDeletingId] = useState<number | null>(null);

  const loadReviews = useCallback(async () => {
    if (!tenantSlug) return;
    
    try {
      setLoading(true);
      setError(null);
      const response = await getReviews(tenantSlug);
      setReviews(response.data);
    } catch (err) {
      setError('Failed to load reviews');
      console.error('Error loading reviews:', err);
    } finally {
      setLoading(false);
    }
  }, [tenantSlug]);

  useEffect(() => {
    if (tenantSlug) {
      void loadReviews();
    }
  }, [tenantSlug, loadReviews]);

  const handleDeleteReview = async (reviewId: number) => {
    if (!confirm('Are you sure you want to delete this review? This action cannot be undone.')) {
      return;
    }

    try {
      setDeletingId(reviewId);
      await deleteReview(reviewId);
      
      // Remove the review from the local state
      setReviews(prev => prev.filter(review => review.id !== reviewId));
      
    } catch (err) {
      console.error('Error deleting review:', err);
      alert('Failed to delete review. Please try again.');
    } finally {
      setDeletingId(null);
    }
  };

  const getVehicleIcon = (vehicleType?: string) => {
    switch (vehicleType) {
      case 'car': return <Car className="h-4 w-4" />;
      case 'truck': return <Truck className="h-4 w-4" />;
      default: return <Car className="h-4 w-4" />;
    }
  };

  const getServiceIcons = (review: Review) => {
    const services = [];
    if (review.paint_correction) services.push('Paint Correction');
    if (review.ceramic_coating) services.push('Ceramic Coating');
    if (review.paint_protection_film) services.push('Paint Protection Film');
    return services.length > 0 ? services.join(', ') : 'No specific services';
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const renderStars = (rating: number) => {
    return Array.from({ length: 5 }, (_, i) => (
      <Star
        key={i}
        className={`h-4 w-4 ${
          i < rating ? 'text-yellow-400 fill-current' : 'text-gray-400'
        }`}
      />
    ));
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-8">
        <div className="text-gray-400">Loading reviews...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-8">
        <div className="text-red-400 mb-4">{error}</div>
        <button
          onClick={() => void loadReviews()}
          className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors"
        >
          Try Again
        </button>
      </div>
    );
  }

  if (reviews.length === 0) {
    return (
      <div className="text-center py-8">
        <div className="text-gray-400 mb-4">No reviews found</div>
        <div className="text-sm text-gray-500">
          Reviews will appear here once they are added.
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-white">
          Manage Reviews ({reviews.length})
        </h3>
        <button
          onClick={() => void loadReviews()}
          className="px-3 py-1 text-sm bg-stone-700 text-white rounded-lg hover:bg-stone-600 transition-colors"
        >
          Refresh
        </button>
      </div>

      <div className="space-y-3">
        {reviews.map((review) => (
          <div
            key={review.id}
            className="bg-stone-800 border border-stone-700 rounded-lg p-4"
          >
            <div className="flex items-start justify-between">
              <div className="flex-1">
                {/* Header with customer name and rating */}
                <div className="flex items-center gap-3 mb-2">
                  <div className="font-medium text-white">{review.customer_name}</div>
                  <div className="flex items-center gap-1">
                    {renderStars(review.rating)}
                  </div>
                  <div className="text-sm text-gray-400">
                    {formatDate(review.created_at)}
                  </div>
                </div>

                {/* Review content */}
                <div className="text-gray-300 mb-3">
                  {review.comment}
                </div>

                {/* Review details */}
                <div className="flex flex-wrap gap-4 text-sm text-gray-400">
                  {/* Vehicle type */}
                  {review.vehicle_type && (
                    <div className="flex items-center gap-1">
                      {getVehicleIcon(review.vehicle_type)}
                      <span className="capitalize">{review.vehicle_type}</span>
                    </div>
                  )}

                  {/* Services */}
                  <div className="flex items-center gap-1">
                    <Wrench className="h-4 w-4" />
                    <span>{getServiceIcons(review)}</span>
                  </div>

                  {/* Source */}
                  <div className="flex items-center gap-1">
                    <span className="capitalize">{review.source}</span>
                  </div>

                  {/* Reviewer URL */}
                  {review.reviewer_url && (
                    <a
                      href={review.reviewer_url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center gap-1 text-orange-400 hover:text-orange-300"
                    >
                      <ExternalLink className="h-4 w-4" />
                      Profile
                    </a>
                  )}
                </div>
              </div>

              {/* Delete button */}
              <button
                onClick={() => void handleDeleteReview(review.id)}
                disabled={deletingId === review.id}
                className="ml-4 p-2 text-red-400 hover:text-red-300 hover:bg-red-900/20 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                title="Delete review"
              >
                {deletingId === review.id ? (
                  <div className="animate-spin h-4 w-4 border-2 border-red-400 border-t-transparent rounded-full" />
                ) : (
                  <Trash2 className="h-4 w-4" />
                )}
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\website\components\ReviewsContent.tsx
============================
import React, { useState } from 'react';
import { RefreshCw } from 'lucide-react';

import { getBusinessData, scrapeGoogleBusinessProfile } from '../../../api/reviewsApi';
import { useWebsiteContent } from '../contexts/WebsiteContentContext';
import { WebsiteAutoSaveField } from './WebsiteAutoSaveField';

interface ReviewsContentProps {
  tenantSlug: string;
}

export const ReviewsContent: React.FC<ReviewsContentProps> = ({ 
  tenantSlug
}) => {
  const { updateContent, refetch } = useWebsiteContent();
  const [isUpdating, setIsUpdating] = useState(false);
  const [updateMessage, setUpdateMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);

  const handleUpdateBusinessData = async () => {
    setIsUpdating(true);
    setUpdateMessage(null);

    try {
      // First, get the business data to find the Google Maps URL
      const businessResponse = await getBusinessData(tenantSlug);
      
      if (!businessResponse.success || !businessResponse.data.google_maps_url) {
        setUpdateMessage({ 
          type: 'error', 
          message: 'No Google Maps URL found for this business' 
        });
        return;
      }

      const googleMapsUrl = businessResponse.data.google_maps_url;
      
      // Now scrape the Google Business Profile using the Google Maps URL
      const scrapeResponse = await scrapeGoogleBusinessProfile(googleMapsUrl, tenantSlug);
      
      if (scrapeResponse.success && scrapeResponse.data) {
        const { averageRating, totalReviews, businessName } = scrapeResponse.data;
        
        // Update the fields immediately with the scraped data
        const updates: Record<string, number> = {};
        if (averageRating !== null) {
          updates.reviews_avg_rating = parseFloat(averageRating);
        }
        if (totalReviews !== null) {
          updates.reviews_total_count = parseInt(totalReviews, 10);
        }
        
        if (Object.keys(updates).length > 0) {
          await updateContent(updates);
          // Refetch to update all field instances immediately
          await refetch();
        }
        
        // Show success message with the scraped values
        const ratingText = averageRating ? `Rating: ${averageRating}` : '';
        const reviewsText = totalReviews ? `Reviews: ${totalReviews}` : '';
        const separator = ratingText && reviewsText ? ', ' : '';
        const successMessage = `Successfully scraped ${businessName || 'business'}: ${ratingText}${separator}${reviewsText}`.trim();
        
        setUpdateMessage({ 
          type: 'success', 
          message: successMessage
        });
        
        // Clear message after 8 seconds (longer for more complex message)
        setTimeout(() => { setUpdateMessage(null); }, 8000);
      } else {
        setUpdateMessage({ 
          type: 'error', 
          message: 'Failed to scrape Google Maps data. Check server logs for details.' 
        });
      }
    } catch (error) {
      console.error('Scraping error:', error);
      setUpdateMessage({ 
        type: 'error', 
        message: error instanceof Error ? error.message : 'Failed to update business data. Check console for details.' 
      });
    } finally {
      setIsUpdating(false);
    }
  };
  
  return (
    <div className="space-y-4">
      {/* Section Title */}
      <WebsiteAutoSaveField
        field="reviews_title"
        label="Section Title"
        placeholder="Enter reviews section title"
      />

      {/* Section Description */}
      <WebsiteAutoSaveField
        field="reviews_subtitle"
        label="Section Description"
        type="textarea"
        rows={3}
        placeholder="Enter reviews section description"
      />

      {/* Average Review and Total Review Count - Side by Side */}
      <div className="space-y-3">
        <div className="flex gap-4 items-end">
          {/* Average Review */}
          <div className="w-32">
            <WebsiteAutoSaveField
              field="reviews_avg_rating"
              label="Avg Rating"
              type="number"
              step="0.01"
              placeholder="4.90"
            />
          </div>

          {/* Total Review Count */}
          <div className="w-32">
            <WebsiteAutoSaveField
              field="reviews_total_count"
              label="Total"
              type="number"
              placeholder="0"
            />
          </div>

          {/* Update Button */}
          <button
            type="button"
            onClick={() => void handleUpdateBusinessData()}
            disabled={isUpdating}
            className="px-3 py-2 bg-orange-600 hover:bg-orange-700 disabled:bg-orange-800 disabled:cursor-not-allowed text-white rounded text-sm font-medium transition-colors flex items-center gap-2 whitespace-nowrap"
            title="Scrape Google Maps URL for rating and review count"
          >
            <RefreshCw className={`h-4 w-4 ${isUpdating ? 'animate-spin' : ''}`} />
            {isUpdating ? 'Loading...' : 'Update from Google'}
          </button>
        </div>
        
        <div className="text-xs text-gray-400">
          <strong className="text-gray-300">Note:</strong> You can manually edit these values or click &quot;Update from Google&quot; to fetch the latest ratings from your Google Business Profile.
        </div>
      </div>

      {/* Update Message */}
      {updateMessage && (
        <div className={`text-sm p-3 rounded ${
          updateMessage.type === 'success' 
            ? 'bg-green-900 text-green-300 border border-green-700' 
            : 'bg-red-900 text-red-300 border border-red-700'
        }`}>
          {updateMessage.message}
        </div>
      )}
    </div>
  );
};


============================
FILE: frontend\src\features\tenantDashboard\tabs\website\components\ReviewsSection.tsx
============================
import React, { useState } from 'react';
import { ChevronDown, ChevronRight, Eye, FileText, Plus, Star } from 'lucide-react';

import { AddReviewForm } from './AddReviewForm';
import { RemoveReviewTab } from './RemoveReviewTab';
import { ReviewsContent } from './ReviewsContent';

interface ReviewsSectionProps {
  tenantSlug: string;
}

export const ReviewsSection: React.FC<ReviewsSectionProps> = ({ tenantSlug }) => {
  const [isCollapsed, setIsCollapsed] = useState(true);
  const [activeTab, setActiveTab] = useState<'content' | 'add-review' | 'remove-review'>('content');

  return (
    <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <Star className="h-5 w-5 text-orange-400 mr-3" />
          <h3 className="text-lg font-semibold text-white">Reviews</h3>
        </div>
        <div className="flex items-center space-x-2">
          <button
            onClick={() => { /* Preview functionality */ }}
            className="flex items-center px-3 py-1 text-sm text-gray-400 hover:text-white transition-colors"
          >
            <Eye className="h-4 w-4 mr-1" />
            Preview
          </button>
          <button
            onClick={() => { setIsCollapsed(!isCollapsed); }}
            className="flex items-center px-3 py-1 text-sm text-gray-400 hover:text-white transition-colors"
          >
            {isCollapsed ? (
              <ChevronRight className="h-4 w-4 mr-1" />
            ) : (
              <ChevronDown className="h-4 w-4 mr-1" />
            )}
            {isCollapsed ? 'Expand' : 'Collapse'}
          </button>
        </div>
      </div>

      {!isCollapsed && (
        <div className="space-y-4">
          {/* Reviews Sub-tabs */}
          <div className="flex space-x-1 bg-stone-800 rounded-lg p-1 mb-4">
            <button
              onClick={() => { setActiveTab('content'); }}
              className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'content'
                  ? 'bg-orange-500 text-white'
                  : 'text-gray-400 hover:text-white hover:bg-stone-700'
              }`}
            >
              <Star className="h-4 w-4 mr-2" />
              Content
            </button>
            <button
              onClick={() => { setActiveTab('add-review'); }}
              className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'add-review'
                  ? 'bg-orange-500 text-white'
                  : 'text-gray-400 hover:text-white hover:bg-stone-700'
              }`}
            >
              <Plus className="h-4 w-4 mr-2" />
              Add Review
            </button>
            <button
              onClick={() => { setActiveTab('remove-review'); }}
              className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'remove-review'
                  ? 'bg-orange-500 text-white'
                  : 'text-gray-400 hover:text-white hover:bg-stone-700'
              }`}
            >
              <FileText className="h-4 w-4 mr-2" />
              Remove Review
            </button>
          </div>

          {/* Reviews Sub-tab Content */}
          <div className="transition-all duration-300 ease-in-out">
            {activeTab === 'content' && (
              <ReviewsContent tenantSlug={tenantSlug} />
            )}
            {activeTab === 'add-review' && (
              <AddReviewForm tenantSlug={tenantSlug} />
            )}
            {activeTab === 'remove-review' && (
              <RemoveReviewTab tenantSlug={tenantSlug} />
            )}
          </div>
        </div>
      )}
    </div>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\website\components\ServicesSection.tsx
============================
import React, { useState } from 'react';
import { BarChart3, ChevronDown, ChevronRight, Eye } from 'lucide-react';

interface ServiceImage {
  slug: string;
  image: string;
  alt: string;
  title: string;
}

interface ServicesSectionProps {
  serviceImages?: ServiceImage[];
}

export const ServicesSection: React.FC<ServicesSectionProps> = ({
  serviceImages = [],
}) => {
  const [isCollapsed, setIsCollapsed] = useState(true);

  return (
    <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <BarChart3 className="h-5 w-5 text-orange-400 mr-3" />
          <h3 className="text-lg font-semibold text-white">Services</h3>
        </div>
        <div className="flex items-center space-x-2">
          <button
            onClick={() => { /* Preview functionality */ }}
            className="flex items-center px-3 py-1 text-sm text-gray-400 hover:text-white transition-colors"
          >
            <Eye className="h-4 w-4 mr-1" />
            Preview
          </button>
          <button
            onClick={() => { setIsCollapsed(!isCollapsed); }}
            className="flex items-center px-3 py-1 text-sm text-gray-400 hover:text-white transition-colors"
          >
            {isCollapsed ? (
              <ChevronRight className="h-4 w-4 mr-1" />
            ) : (
              <ChevronDown className="h-4 w-4 mr-1" />
            )}
            {isCollapsed ? 'Expand' : 'Collapse'}
          </button>
        </div>
      </div>

      {!isCollapsed && (
        <div className="space-y-4">
          <div>
            <div className="block text-sm font-medium text-gray-300 mb-2">
              Service Images (6 services)
            </div>
            <div className="grid grid-cols-3 gap-6 max-w-5xl">
              {serviceImages.map((service) => (
                <div
                  key={service.slug}
                  className="relative cursor-pointer rounded-lg overflow-hidden border-2 border-stone-600 hover:border-stone-500 transition-all duration-200"
                >
                  <div className="aspect-[4/3] bg-stone-700 relative">
                    <img
                      src={service.image}
                      alt={service.alt}
                      className="w-full h-full object-cover"
                      onError={(e) => {
                        const target = e.target as HTMLImageElement;
                        target.style.display = 'none';
                        const fallback = document.createElement('div');
                        fallback.className = 'w-full h-full flex items-center justify-center text-gray-400 text-sm';
                        fallback.textContent = 'Image not found';
                        target.parentNode?.appendChild(fallback);
                      }}
                    />
                  </div>
                  <div className="p-4 bg-stone-800">
                    <p className="text-sm text-gray-300 font-medium text-center">
                      {service.title}
                    </p>
                  </div>
                </div>
              ))}
            </div>
            <p className="text-xs text-gray-500 mt-2">
              These 6 service images will be displayed in the services grid on your website.
            </p>
          </div>
        </div>
      )}
    </div>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\website\components\WebsiteAutoSaveField.tsx
============================
import React from 'react';
import { AlertCircle, CheckCircle, Loader2 } from 'lucide-react';

import { useWebsiteContentField } from '../hooks/useWebsiteContentField';

type WebsiteContentField = 
  | 'hero_title'
  | 'hero_subtitle'
  | 'services_title'
  | 'services_subtitle'
  | 'services_auto_description'
  | 'services_marine_description'
  | 'services_rv_description'
  | 'services_ceramic_description'
  | 'services_correction_description'
  | 'services_ppf_description'
  | 'reviews_title'
  | 'reviews_subtitle'
  | 'reviews_avg_rating'
  | 'reviews_total_count'
  | 'faq_title'
  | 'faq_subtitle';

interface WebsiteAutoSaveFieldProps {
  field: WebsiteContentField;
  label: string;
  type?: 'text' | 'textarea' | 'number';
  placeholder?: string;
  className?: string;
  debounce?: number;
  rows?: number;
  step?: string;
}

export const WebsiteAutoSaveField: React.FC<WebsiteAutoSaveFieldProps> = ({
  field,
  label,
  type = 'text',
  placeholder,
  className = '',
  debounce = 1000,
  rows = 3,
  step,
}) => {
  const { value, setValue, isSaving, error } = useWebsiteContentField({ 
    field, 
    debounce 
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setValue(e.target.value);
  };

  const getStatusIcon = () => {
    if (isSaving) {
      return <Loader2 className="h-4 w-4 text-blue-500 animate-spin" />;
    }
    if (error) {
      return <AlertCircle className="h-4 w-4 text-red-500" />;
    }
    if (value && value.trim() !== '') {
      return <CheckCircle className="h-4 w-4 text-green-500" />;
    }
    return null;
  };

  return (
    <div className="relative">
      <label className="block text-sm font-medium text-gray-300 mb-2">
        {label}
      </label>
      <div className="relative">
        {type === 'textarea' ? (
          <textarea
            value={value}
            onChange={handleChange}
            placeholder={placeholder}
            rows={rows}
            className={`w-full px-3 py-2 pr-10 border rounded-md bg-stone-700 text-white focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-none ${
              error ? 'border-red-500' : 'border-stone-600'
            } ${className}`}
          />
        ) : (
          <input
            type={type}
            value={value}
            onChange={handleChange}
            placeholder={placeholder}
            step={step}
            className={`w-full px-3 py-2 pr-10 border rounded-md bg-stone-700 text-white focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent ${
              error ? 'border-red-500' : 'border-stone-600'
            } ${className}`}
          />
        )}
        <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
          {getStatusIcon()}
        </div>
      </div>
      {error && (
        <p className="mt-1 text-sm text-red-400">{error}</p>
      )}
      {isSaving && (
        <p className="mt-1 text-sm text-blue-400">Saving...</p>
      )}
    </div>
  );
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\website\contexts\WebsiteContentContext.tsx
============================
import React, { createContext, useContext } from 'react';

import type { WebsiteContentData } from '@/shared/api/websiteContent.api';

import { useWebsiteContentData } from '../hooks/useWebsiteContentData';

interface WebsiteContentContextValue {
  contentData: WebsiteContentData | null;
  loading: boolean;
  error: string | null;
  updateContent: (data: Partial<WebsiteContentData>) => Promise<boolean>;
  isUpdating: boolean;
  refetch: () => Promise<void>;
}

const WebsiteContentContext = createContext<WebsiteContentContextValue | undefined>(undefined);

interface WebsiteContentProviderProps {
  tenantSlug: string;
  children: React.ReactNode;
}

export const WebsiteContentProvider: React.FC<WebsiteContentProviderProps> = ({ 
  tenantSlug, 
  children 
}) => {
  const value = useWebsiteContentData(tenantSlug);

  return (
    <WebsiteContentContext.Provider value={value}>
      {children}
    </WebsiteContentContext.Provider>
  );
};

// eslint-disable-next-line react-refresh/only-export-components -- Hook is part of the provider pattern
export const useWebsiteContent = () => {
  const context = useContext(WebsiteContentContext);
  if (!context) {
    throw new Error('useWebsiteContent must be used within WebsiteContentProvider');
  }
  return context;
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\website\hooks\index.ts
============================
export { useWebsiteContentData } from './useWebsiteContentData';
export { useWebsiteContentField } from './useWebsiteContentField';



============================
FILE: frontend\src\features\tenantDashboard\tabs\website\hooks\useWebsiteContentData.ts
============================
import { useEffect, useState } from 'react';

import { config } from '@/../config/env';
import type { WebsiteContentData } from '@/shared/api/websiteContent.api';

interface UseWebsiteContentDataReturn {
  contentData: WebsiteContentData | null;
  loading: boolean;
  error: string | null;
  updateContent: (data: Partial<WebsiteContentData>) => Promise<boolean>;
  isUpdating: boolean;
  refetch: () => Promise<void>;
}

export const useWebsiteContentData = (tenantSlug?: string): UseWebsiteContentDataReturn => {
  const [contentData, setContentData] = useState<WebsiteContentData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isUpdating, setIsUpdating] = useState(false);
  const [refetchTrigger, setRefetchTrigger] = useState(0);

  // Fetch website content data
  useEffect(() => {
    const fetchContentData = async () => {
      if (!tenantSlug) {
        setError('Tenant slug is required');
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        setError(null);

        const response = await fetch(`${config.apiUrl}/api/website-content/${tenantSlug}`);
        
        if (!response.ok) {
          if (response.status === 404) {
            throw new Error('Website content not found');
          }
          throw new Error(`Failed to fetch website content: ${response.statusText}`);
        }

        const result = await response.json() as { content?: WebsiteContentData };
        const data = result.content;
        
        if (!data) {
          throw new Error('No website content received');
        }
        
        setContentData(data);
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : 'Failed to fetch website content';
        setError(errorMessage);
        console.error('Error fetching website content:', err);
      } finally {
        setLoading(false);
      }
    };

    void fetchContentData();
  }, [tenantSlug, refetchTrigger]);

  // Refetch function
  const refetch = () => {
    setRefetchTrigger(prev => prev + 1);
    return Promise.resolve();
  };

  // Update website content data
  const updateContent = async (data: Partial<WebsiteContentData>): Promise<boolean> => {
    if (!tenantSlug) {
      setError('Tenant slug is required');
      return false;
    }

    try {
      setIsUpdating(true);
      setError(null);

      // Send the partial data to update
      const response = await fetch(`${config.apiUrl}/api/website-content/${tenantSlug}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ ...contentData, ...data }),
      });

      if (!response.ok) {
        throw new Error(`Failed to update website content: ${response.statusText}`);
      }

      const result = await response.json() as { content?: WebsiteContentData };
      const updatedData = result.content;
      
      if (updatedData) {
        setContentData(updatedData);
      }
      
      return true;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to update website content';
      setError(errorMessage);
      console.error('Error updating website content:', err);
      return false;
    } finally {
      setIsUpdating(false);
    }
  };

  return {
    contentData,
    loading,
    error,
    updateContent,
    isUpdating,
    refetch,
  };
};



============================
FILE: frontend\src\features\tenantDashboard\tabs\website\hooks\useWebsiteContentField.ts
============================
import type { WebsiteContentData } from '@/shared/api/websiteContent.api';
import { useAutoSave } from '@/shared/hooks/useAutoSave';

import { useWebsiteContent } from '../contexts/WebsiteContentContext';

type WebsiteContentField = keyof WebsiteContentData;

interface UseWebsiteContentFieldOptions {
  debounce?: number;
  field: WebsiteContentField;
}

export function useWebsiteContentField(options: UseWebsiteContentFieldOptions) {
  const { debounce = 1000, field } = options;
  const { updateContent, contentData } = useWebsiteContent();
  
  // Get the initial value for this field
  const getInitialValue = (): string => {
    if (!contentData) return '';
    const value = contentData[field];
    // Convert numbers to strings for the input field
    if (typeof value === 'number') return String(value);
    if (typeof value === 'string') return value;
    return '';
  };

  const saveField = async (value: string) => {
    if (!contentData) return;
    
    // Convert string back to appropriate type for saving
    let saveValue: string | number = value;
    if (field === 'reviews_avg_rating') {
      saveValue = parseFloat(value) || 0;
    } else if (field === 'reviews_total_count') {
      saveValue = parseInt(value, 10) || 0;
    }
    
    // Create a partial update object with just this field
    const updateData = { [field]: saveValue };
    
    const success = await updateContent(updateData);
    if (!success) {
      throw new Error(`Failed to save ${field}`);
    }
  };

  return useAutoSave(getInitialValue(), saveField, { debounce });
}



============================
FILE: frontend\src\features\tenantDashboard\tabs\website\WebsiteContentTab.tsx
============================
import React, { useEffect, useMemo,useState } from 'react';

import { useData } from '@/shared/hooks';
import { loadIndustryFAQs } from '@/shared/utils/faqLoader';
import { useAutoSave } from '@/shared/hooks/useAutoSave';

import { getWebsiteContent, saveWebsiteContent } from '../../api/websiteContentApi';
import {
  FAQSection,
  GallerySection,
  HeroSection,
  ReviewsSection,
  ServicesSection
} from './components';
import { WebsiteContentProvider } from './contexts/WebsiteContentContext';

// Type definitions
interface GalleryImage {
  src: string;
  alt: string;
}

interface ServiceImage {
  slug: string;
  image: string;
  alt: string;
  title: string;
}

interface FAQItem {
  category: string;
  question: string;
  answer: string;
}

interface ContentData {
  hero_title: string;
  hero_subtitle: string;
  services_title: string;
  services_subtitle: string;
  services_auto_description: string;
  services_marine_description: string;
  services_rv_description: string;
  services_ceramic_description: string;
  services_correction_description: string;
  services_ppf_description: string;
  reviews_title: string;
  reviews_subtitle: string;
  reviews_avg_rating: number;
  reviews_total_count: number;
  faq_title: string;
  faq_subtitle: string;
  faq_content: FAQItem[];
  gallery_title?: string;
  gallery_description?: string;
  services?: {
    images?: ServiceImage[];
    [key: string]: unknown;
  };
  [key: string]: unknown;
}

interface WebsiteContentTabProps {
  tenantSlug?: string;
}

const WebsiteContentTab: React.FC<WebsiteContentTabProps> = ({ tenantSlug }) => {
  const [galleryImages, setGalleryImages] = useState<GalleryImage[]>([]);
  const [customGalleryImages, setCustomGalleryImages] = useState<GalleryImage[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  // Load industry-specific FAQs
  const { industry } = useData();
  const [industryFAQs, setIndustryFAQs] = useState<Array<{ question: string; answer: string; category: string }>>([]);
  
  useEffect(() => {
    if (!industry) return;
    loadIndustryFAQs(industry)
      .then(setIndustryFAQs)
      .catch(() => {
        setIndustryFAQs([]);
      });
  }, [industry]);
  
  // Group FAQs by category
  const categoryFaqMap = useMemo(() => {
    const map: Record<string, typeof industryFAQs> = {};
    industryFAQs.forEach(faq => {
      if (!map[faq.category]) {
        map[faq.category] = [];
      }
      map[faq.category].push(faq);
    });
    return map;
  }, [industryFAQs]);
  
  // Memoize initial content data to prevent infinite re-renders
  const initialContentData = useMemo<ContentData>(() => ({
    hero_title: '',
    hero_subtitle: '',
    services_title: '',
    services_subtitle: '',
    services_auto_description: '',
    services_marine_description: '',
    services_rv_description: '',
    services_ceramic_description: '',
    services_correction_description: '',
    services_ppf_description: '',
    reviews_title: '',
    reviews_subtitle: '',
    reviews_avg_rating: 0,
    reviews_total_count: 0,
    faq_title: '',
    faq_subtitle: '',
    faq_content: []
  }), []);

  // Create save function that uses tenant slug
  const saveContentData = useMemo(() => {
    return async (data: ContentData) => {
      if (!tenantSlug) {
        throw new Error('No tenant selected');
      }

      // Clean up FAQ content - remove empty FAQs
      const cleanedFaqContent = data.faq_content.filter((faq: FAQItem) => 
        faq.question && faq.question.trim() !== '' && 
        faq.answer && faq.answer.trim() !== '' &&
        faq.category && faq.category.trim() !== ''
      );
      
      const cleanedData: ContentData = {
        ...data,
        faq_content: cleanedFaqContent
      };

      const result = await saveWebsiteContent(tenantSlug, cleanedData);
      
      return result;
    };
  }, [tenantSlug]);

  // Use auto-save hook
  const { value: contentData, setValue: setContentData } = useAutoSave(
    initialContentData,
    saveContentData,
    { debounce: 1000 }
  );

  // Load initial data from API
  useEffect(() => {
    const loadContentData = async () => {
      if (!tenantSlug) return;
      
      try {
        setIsLoading(true);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- getWebsiteContent returns WebsiteContentData which matches ContentData
        const data = await getWebsiteContent(tenantSlug);
        setContentData(data as ContentData);
      } catch (error) {
        console.error('Failed to load website content:', error);
      } finally {
        setIsLoading(false);
      }
    };

    void loadContentData();
  }, [tenantSlug, setContentData]);

  const updateContent = (section: string, field: string, value: unknown) => {
    setContentData(prev => {
      // For flat structure (hero, reviews, faq, gallery), use direct field mapping
      if (section === 'hero') {
        const fieldMap: { [key: string]: keyof ContentData } = {
          'title': 'hero_title',
          'subtitle': 'hero_subtitle'
        };
        const dbField = fieldMap[field];
        if (dbField) {
          return {
            ...prev,
            [dbField]: value
          };
        }
      } else if (section === 'reviews') {
        const fieldMap: { [key: string]: keyof ContentData } = {
          'title': 'reviews_title',
          'subtitle': 'reviews_subtitle',
          'avg_rating': 'reviews_avg_rating',
          'total_count': 'reviews_total_count'
        };
        const dbField = fieldMap[field];
        if (dbField) {
          return {
            ...prev,
            [dbField]: value
          };
        }
      } else if (section === 'faq') {
        const fieldMap: { [key: string]: keyof ContentData } = {
          'title': 'faq_title',
          'subtitle': 'faq_subtitle',
          'content': 'faq_content'
        };
        const dbField = fieldMap[field];
        if (dbField) {
          return {
            ...prev,
            [dbField]: value
          };
        }
      }
      
      // Fallback to old nested structure for other sections
      const sectionKey = section as keyof ContentData;
      const existingSection = prev[sectionKey];
      const sectionValue = typeof existingSection === 'object' && existingSection !== null 
        ? { ...existingSection as Record<string, unknown>, [field]: value }
        : { [field]: value };
      
      return {
        ...prev,
        [section]: sectionValue
      } as ContentData;
    });
  };

  const resetToDefault = () => {
    // For FAQ section, load all default FAQs from utils
    const defaultFaqs = Object.values(categoryFaqMap).flat().map((faq: FAQItem) => ({
      category: faq.category,
      question: faq.question,
      answer: faq.answer
    }));
    
    const updatedContentData: ContentData = {
      ...contentData,
      faq_content: defaultFaqs
    };
    
    setContentData(updatedContentData);
  };

  // Function to load gallery images from gallery.json
  const loadGalleryImages = async () => {
    try {
      const response = await fetch('/mobile-detailing/data/gallery.json');
      const galleryData = (await response.json()) as GalleryImage[];
      setGalleryImages(galleryData);
    } catch {
      setGalleryImages([]);
    }
  };

  useEffect(() => {
    void loadGalleryImages();
  }, []);

  const handleAddCustomImage = () => {
    const newCustomImage = {
      src: '',
      alt: '',
    };
    setCustomGalleryImages(prev => [...prev, newCustomImage]);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-400">Loading website content...</p>
        </div>
      </div>
    );
  }

  if (!tenantSlug) {
    return <div className="text-red-500">Error: No tenant slug provided</div>;
  }

  return (
    <WebsiteContentProvider tenantSlug={tenantSlug}>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold text-white">Website Content</h2>
            <p className="text-gray-400 mt-1">Manage your website sections and content</p>
          </div>
        </div>

      {/* Content Sections Grid - Single Column */}
      <div className="grid grid-cols-1 gap-6">
          <HeroSection
            heroTitle={contentData.hero_title || ''}
            heroSubtitle={contentData.hero_subtitle || ''}
            heroImages={(contentData.services?.images as string[] | undefined) || []}
            onUpdateContent={(field, value) => { updateContent('hero', field, value); }}
          />

          <ServicesSection
            serviceImages={contentData.services?.images || []}
          />

          <ReviewsSection tenantSlug={tenantSlug} />

          <FAQSection
            faqContent={contentData.faq_content}
            onUpdateContent={(field, value) => { updateContent('faq', field, value); }}
            onResetToDefault={resetToDefault}
          />

          <GallerySection
            stockImages={galleryImages}
            customImages={customGalleryImages}
            onAddCustomImage={handleAddCustomImage}
          />
      </div>
      </div>
    </WebsiteContentProvider>
  );
};

export default WebsiteContentTab;


============================
FILE: frontend\src\features\tenantDashboard\tabs\website\WebsiteDomainTab.tsx
============================
import React, { useState } from 'react';
import { AlertCircle, Check, Copy, ExternalLink, Globe, Settings, Shield, Zap } from 'lucide-react';

const WebsiteDomainTab: React.FC = () => {
  const [isEditing, setIsEditing] = useState(false);
  const [copiedField, setCopiedField] = useState<string | null>(null);
  
  const [domainData, setDomainData] = useState({
    primaryDomain: 'jpsmobiledetailing.com',
    customDomain: '',
    subdomain: 'jps',
    sslStatus: 'active',
    dnsStatus: 'configured',
    lastChecked: '2024-01-15T10:30:00Z',
    nameservers: [
      'ns1.example.com',
      'ns2.example.com'
    ],
    records: [
      { type: 'A', name: '@', value: '192.168.1.1', ttl: 3600 },
      { type: 'CNAME', name: 'www', value: 'jpsmobiledetailing.com', ttl: 3600 },
      { type: 'MX', name: '@', value: 'mail.example.com', ttl: 3600 }
    ]
  });

  const handleSave = () => {
    // TODO: Implement save functionality
    setIsEditing(false);
  };

  const handleCopy = (text: string, field: string) => {
    void navigator.clipboard.writeText(text);
    setCopiedField(field);
    setTimeout(() => { setCopiedField(null); }, 2000);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
      case 'configured':
        return 'text-green-400 bg-green-900/20';
      case 'pending':
        return 'text-yellow-400 bg-yellow-900/20';
      case 'error':
        return 'text-red-400 bg-red-900/20';
      default:
        return 'text-gray-400 bg-gray-900/20';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active':
      case 'configured':
        return <Check className="h-4 w-4" />;
      case 'pending':
        return <Zap className="h-4 w-4" />;
      case 'error':
        return <AlertCircle className="h-4 w-4" />;
      default:
        return <Settings className="h-4 w-4" />;
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-white">Domain Settings</h2>
          <p className="text-gray-400 mt-1">Manage your website domain and DNS configuration</p>
        </div>
        <div className="flex space-x-3">
          <button
            onClick={() => { setIsEditing(!isEditing); }}
            className="flex items-center px-4 py-2 bg-stone-700 text-white rounded-lg hover:bg-stone-600 transition-colors"
          >
            <Settings className="h-4 w-4 mr-2" />
            {isEditing ? 'Cancel' : 'Edit'}
          </button>
          {isEditing && (
            <button
              onClick={handleSave}
              className="flex items-center px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors"
            >
              <Check className="h-4 w-4 mr-2" />
              Save
            </button>
          )}
        </div>
      </div>

      {/* Domain Status Overview */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center">
              <Globe className="h-5 w-5 text-orange-400 mr-2" />
              <h3 className="text-lg font-semibold text-white">Primary Domain</h3>
            </div>
            <div className={`flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(domainData.sslStatus)}`}>
              {getStatusIcon(domainData.sslStatus)}
              <span className="ml-1 capitalize">{domainData.sslStatus}</span>
            </div>
          </div>
          <div className="flex items-center justify-between">
            <span className="text-white font-mono">{domainData.primaryDomain}</span>
            <button
              onClick={() => { handleCopy(domainData.primaryDomain, 'primary'); }}
              className="flex items-center text-gray-400 hover:text-white transition-colors"
            >
              {copiedField === 'primary' ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
            </button>
          </div>
        </div>

        <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center">
              <Shield className="h-5 w-5 text-orange-400 mr-2" />
              <h3 className="text-lg font-semibold text-white">SSL Certificate</h3>
            </div>
            <div className={`flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(domainData.sslStatus)}`}>
              {getStatusIcon(domainData.sslStatus)}
              <span className="ml-1 capitalize">{domainData.sslStatus}</span>
            </div>
          </div>
          <p className="text-gray-400 text-sm">Valid until: Jan 15, 2025</p>
        </div>

        <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center">
              <Settings className="h-5 w-5 text-orange-400 mr-2" />
              <h3 className="text-lg font-semibold text-white">DNS Status</h3>
            </div>
            <div className={`flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(domainData.dnsStatus)}`}>
              {getStatusIcon(domainData.dnsStatus)}
              <span className="ml-1 capitalize">{domainData.dnsStatus}</span>
            </div>
          </div>
          <p className="text-gray-400 text-sm">Last checked: {new Date(domainData.lastChecked).toLocaleDateString()}</p>
        </div>
      </div>

      {/* Domain Configuration */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Primary Domain Settings */}
        <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
          <div className="flex items-center mb-4">
            <Globe className="h-5 w-5 text-orange-400 mr-2" />
            <h3 className="text-lg font-semibold text-white">Primary Domain</h3>
          </div>
          
          <div className="space-y-4">
            <div>
              <label htmlFor="domain-name-input" className="block text-sm font-medium text-gray-300 mb-2">
                Domain Name
              </label>
              {isEditing ? (
                <input
                  id="domain-name-input"
                  type="text"
                  value={domainData.primaryDomain}
                  onChange={(e) => { setDomainData({ ...domainData, primaryDomain: e.target.value }); }}
                  className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              ) : (
                <div className="flex items-center justify-between">
                  <span className="text-white font-mono">{domainData.primaryDomain}</span>
                  <button
                    onClick={() => { handleCopy(domainData.primaryDomain, 'primary'); }}
                    className="flex items-center text-gray-400 hover:text-white transition-colors"
                  >
                    {copiedField === 'primary' ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                  </button>
                </div>
              )}
            </div>

            <div>
              <label htmlFor="subdomain-input" className="block text-sm font-medium text-gray-300 mb-2">
                Subdomain
              </label>
              {isEditing ? (
                <input
                  id="subdomain-input"
                  type="text"
                  value={domainData.subdomain}
                  onChange={(e) => { setDomainData({ ...domainData, subdomain: e.target.value }); }}
                  className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              ) : (
                <div className="flex items-center justify-between">
                  <span className="text-white font-mono">{domainData.subdomain}.yourdomain.com</span>
                  <button
                    onClick={() => { handleCopy(`${domainData.subdomain}.yourdomain.com`, 'subdomain'); }}
                    className="flex items-center text-gray-400 hover:text-white transition-colors"
                  >
                    {copiedField === 'subdomain' ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Custom Domain Settings */}
        <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
          <div className="flex items-center mb-4">
            <ExternalLink className="h-5 w-5 text-orange-400 mr-2" />
            <h3 className="text-lg font-semibold text-white">Custom Domain</h3>
          </div>
          
          <div className="space-y-4">
            <div>
              <label htmlFor="custom-domain-input" className="block text-sm font-medium text-gray-300 mb-2">
                Custom Domain (Optional)
              </label>
              {isEditing ? (
                <input
                  id="custom-domain-input"
                  type="text"
                  value={domainData.customDomain}
                  onChange={(e) => { setDomainData({ ...domainData, customDomain: e.target.value }); }}
                  placeholder="your-custom-domain.com"
                  className="w-full px-3 py-2 bg-stone-700 border border-stone-600 rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              ) : (
                <div className="flex items-center justify-between">
                  <span className="text-white font-mono">
                    {domainData.customDomain || 'No custom domain set'}
                  </span>
                  {domainData.customDomain && (
                    <button
                      onClick={() => { handleCopy(domainData.customDomain, 'custom'); }}
                      className="flex items-center text-gray-400 hover:text-white transition-colors"
                    >
                      {copiedField === 'custom' ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                    </button>
                  )}
                </div>
              )}
            </div>

            <div className="text-sm text-gray-400">
              <p>To use a custom domain:</p>
              <ul className="list-disc list-inside mt-2 space-y-1">
                <li>Purchase a domain from a registrar</li>
                <li>Point your domain&apos;s DNS to our nameservers</li>
                <li>Add your domain here once DNS is configured</li>
              </ul>
            </div>
          </div>
        </div>
      </div>

      {/* DNS Records */}
      <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center">
            <Settings className="h-5 w-5 text-orange-400 mr-2" />
            <h3 className="text-lg font-semibold text-white">DNS Records</h3>
          </div>
          <button className="text-sm text-orange-400 hover:text-orange-300 transition-colors">
            Refresh DNS
          </button>
        </div>
        
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b border-stone-700">
                <th className="text-left py-3 px-4 text-sm font-medium text-gray-300">Type</th>
                <th className="text-left py-3 px-4 text-sm font-medium text-gray-300">Name</th>
                <th className="text-left py-3 px-4 text-sm font-medium text-gray-300">Value</th>
                <th className="text-left py-3 px-4 text-sm font-medium text-gray-300">TTL</th>
                <th className="text-left py-3 px-4 text-sm font-medium text-gray-300">Actions</th>
              </tr>
            </thead>
            <tbody>
              {domainData.records.map((record, index) => (
                <tr key={index} className="border-b border-stone-700/50">
                  <td className="py-3 px-4 text-sm text-white font-mono">{record.type}</td>
                  <td className="py-3 px-4 text-sm text-white font-mono">{record.name}</td>
                  <td className="py-3 px-4 text-sm text-white font-mono">{record.value}</td>
                  <td className="py-3 px-4 text-sm text-gray-400">{record.ttl}</td>
                  <td className="py-3 px-4">
                    <button
                      onClick={() => { handleCopy(record.value, `record-${index}`); }}
                      className="flex items-center text-gray-400 hover:text-white transition-colors"
                    >
                      {copiedField === `record-${index}` ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
        <h3 className="text-lg font-semibold text-white mb-4">Quick Actions</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button className="flex items-center justify-center px-4 py-3 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors">
            <Globe className="h-4 w-4 mr-2" />
            View Live Site
          </button>
          <button className="flex items-center justify-center px-4 py-3 bg-stone-700 text-white rounded-lg hover:bg-stone-600 transition-colors">
            <Settings className="h-4 w-4 mr-2" />
            DNS Settings
          </button>
          <button className="flex items-center justify-center px-4 py-3 bg-stone-700 text-white rounded-lg hover:bg-stone-600 transition-colors">
            <Shield className="h-4 w-4 mr-2" />
            SSL Certificate
          </button>
        </div>
      </div>
    </div>
  );
};

export default WebsiteDomainTab;


============================
FILE: frontend\src\features\tenantDashboard\tabs\website\WebsiteHealthTab.tsx
============================
import React from 'react';

import { HealthTab } from './components';

interface WebsiteHealthTabProps {
  tenantSlug?: string;
}

const WebsiteHealthTab: React.FC<WebsiteHealthTabProps> = ({ tenantSlug }) => {
  return <HealthTab tenantSlug={tenantSlug} />;
};

export default WebsiteHealthTab;


============================
FILE: frontend\src\features\tenantDashboard\tabs\website\WebsitePerformanceTab.tsx
============================
import React, { useState } from 'react';
import { BarChart3, Clock, Eye, Globe, Monitor, Smartphone, TrendingUp, Users, AlertCircle, RefreshCw } from 'lucide-react';

import { useAnalyticsSummary, useRealtimeData, useGoogleAnalyticsStatus, initiateGoogleAnalyticsAuth } from '../../api/analytics';
import { useTenantId } from '../services/hooks/useTenantId';
import { useParams } from 'react-router-dom';

const WebsitePerformanceTab: React.FC = () => {
  const [timeRange, setTimeRange] = useState<'7d' | '30d' | '90d'>('30d');
  
  // Get tenant ID and convert to number for API calls
  const tenantIdString = useTenantId();
  const tenantId = tenantIdString ? parseInt(tenantIdString) : undefined;
  const { businessSlug } = useParams<{ businessSlug: string }>();
  
  // Convert time range to days for API
  const days = timeRange === '7d' ? 7 : timeRange === '30d' ? 30 : 90;
  
  // Fetch real data
  const { data: analyticsStatus, isLoading: statusLoading } = useGoogleAnalyticsStatus(tenantId);
  const { data: analyticsData, isLoading: analyticsLoading, error: analyticsError } = useAnalyticsSummary(tenantId, days);
  const { data: realtimeData, isLoading: realtimeLoading } = useRealtimeData(tenantId);
  
  const isLoading = statusLoading || analyticsLoading || realtimeLoading;

  // Connection status component
  const ConnectionStatus = () => {
    if (!analyticsStatus) return null;
    
    if (!analyticsStatus.connected) {
      return (
        <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <AlertCircle className="h-6 w-6 text-yellow-400 mr-3" />
              <div>
                <h3 className="text-lg font-semibold text-white">Google Analytics Not Connected</h3>
                <p className="text-gray-400 mt-1">Connect your Google Analytics account to view website performance data</p>
              </div>
            </div>
            <button
              onClick={() => tenantId && initiateGoogleAnalyticsAuth(tenantId)}
              className="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors flex items-center"
            >
              <BarChart3 className="h-4 w-4 mr-2" />
              Connect Analytics
            </button>
          </div>
        </div>
      );
    }
    
    return (
      <div className="bg-stone-800 rounded-lg p-4 border border-stone-700">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <div className="h-3 w-3 bg-green-400 rounded-full mr-3"></div>
            <div>
              <span className="text-white font-medium">Google Analytics Connected</span>
              <p className="text-gray-400 text-sm">Last sync: {analyticsStatus.lastSync ? new Date(analyticsStatus.lastSync).toLocaleString() : 'Never'}</p>
            </div>
          </div>
          <button
            onClick={() => window.location.reload()}
            className="p-2 text-gray-400 hover:text-white transition-colors"
            title="Refresh data"
          >
            <RefreshCw className="h-4 w-4" />
          </button>
        </div>
      </div>
    );
  };

  const StatCard = ({ 
    title, 
    value, 
    change, 
    trend, 
    icon: Icon 
  }: { 
    title: string; 
    value: string | number; 
    change: number; 
    trend: 'up' | 'down'; 
    icon: React.ComponentType<{ className?: string }>;
  }) => (
    <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <Icon className="h-5 w-5 text-orange-400 mr-2" />
          <h3 className="text-sm font-medium text-gray-300">{title}</h3>
        </div>
        {change !== 0 && (
          <div className={`flex items-center text-sm ${
            trend === 'up' ? 'text-green-400' : 'text-red-400'
          }`}>
            <TrendingUp className={`h-4 w-4 mr-1 ${
              trend === 'down' ? 'rotate-180' : ''
            }`} />
            {Math.abs(change)}%
          </div>
        )}
      </div>
      <div className="text-2xl font-bold text-white mb-1">{value}</div>
      {change !== 0 && (
        <div className="text-xs text-gray-400">
          {trend === 'up' ? '↗' : '↘'} {change > 0 ? '+' : ''}{change}% from last period
        </div>
      )}
    </div>
  );

  // Helper function to format session duration
  const formatSessionDuration = (seconds: number): string => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}m ${remainingSeconds}s`;
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-white">Website Performance</h2>
          <p className="text-gray-400 mt-1">Analytics and performance metrics for your website</p>
        </div>
        {analyticsStatus?.connected && (
          <div className="flex space-x-2">
            {(['7d', '30d', '90d'] as const).map((range) => (
              <button
                key={range}
                onClick={() => { setTimeRange(range); }}
                className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${
                  timeRange === range
                    ? 'bg-orange-500 text-white'
                    : 'bg-stone-700 text-gray-300 hover:bg-stone-600'
                }`}
              >
                {range === '7d' ? '7 Days' : range === '30d' ? '30 Days' : '90 Days'}
              </button>
            ))}
          </div>
        )}
      </div>

      {/* Connection Status */}
      <ConnectionStatus />

      {/* Key Metrics */}
      {analyticsStatus?.connected && (
        <>
          {isLoading ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {[...Array(4)].map((_, i) => (
                <div key={i} className="bg-stone-800 rounded-lg p-6 border border-stone-700 animate-pulse">
                  <div className="h-4 bg-stone-700 rounded mb-4"></div>
                  <div className="h-8 bg-stone-700 rounded mb-2"></div>
                  <div className="h-3 bg-stone-700 rounded"></div>
                </div>
              ))}
            </div>
          ) : analyticsError ? (
            <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
              <div className="flex items-center">
                <AlertCircle className="h-6 w-6 text-red-400 mr-3" />
                <div>
                  <h3 className="text-lg font-semibold text-white">Error Loading Analytics</h3>
                  <p className="text-gray-400 mt-1">Failed to fetch analytics data. Please try refreshing.</p>
                </div>
              </div>
            </div>
          ) : analyticsData ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <StatCard
                title="Total Sessions"
                value={analyticsData.totalSessions.toLocaleString()}
                change={0}
                trend="up"
                icon={Users}
              />
              <StatCard
                title="Total Users"
                value={analyticsData.totalUsers.toLocaleString()}
                change={0}
                trend="up"
                icon={Eye}
              />
              <StatCard
                title="Bounce Rate"
                value={`${analyticsData.averageBounceRate.toFixed(1)}%`}
                change={0}
                trend="down"
                icon={BarChart3}
              />
              <StatCard
                title="Avg. Session"
                value={formatSessionDuration(analyticsData.averageSessionDuration)}
                change={0}
                trend="up"
                icon={Clock}
              />
            </div>
          ) : null}

          {/* Real-time Data */}
          {realtimeData && (
            <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-white">Real-time Activity</h3>
                <div className="flex items-center">
                  <div className="h-2 w-2 bg-green-400 rounded-full mr-2 animate-pulse"></div>
                  <span className="text-sm text-gray-400">Live</span>
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="text-center">
                  <div className="text-3xl font-bold text-white">{realtimeData.activeUsers}</div>
                  <div className="text-sm text-gray-400">Active Users</div>
                </div>
                <div className="text-center">
                  <div className="text-3xl font-bold text-white">{realtimeData.countries.length}</div>
                  <div className="text-sm text-gray-400">Countries</div>
                </div>
                <div className="text-center">
                  <div className="text-sm text-gray-400">Last Updated</div>
                  <div className="text-sm text-gray-300">
                    {new Date(realtimeData.lastUpdated).toLocaleTimeString()}
                  </div>
                </div>
              </div>
            </div>
          )}
        </>
      )}

      {/* Quick Actions */}
      {analyticsStatus?.connected && (
        <div className="bg-stone-800 rounded-lg p-6 border border-stone-700">
          <h3 className="text-lg font-semibold text-white mb-4">Quick Actions</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <button 
              onClick={() => window.open('https://analytics.google.com', '_blank')}
              className="flex items-center justify-center px-4 py-3 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors"
            >
              <BarChart3 className="h-4 w-4 mr-2" />
              View Full Analytics
            </button>
            <button 
              onClick={() => window.open(`https://${businessSlug}.thatsmartsite.com`, '_blank')}
              className="flex items-center justify-center px-4 py-3 bg-stone-700 text-white rounded-lg hover:bg-stone-600 transition-colors"
            >
              <Globe className="h-4 w-4 mr-2" />
              Open Website
            </button>
            <button 
              onClick={() => window.location.reload()}
              className="flex items-center justify-center px-4 py-3 bg-stone-700 text-white rounded-lg hover:bg-stone-600 transition-colors"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              Refresh Data
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default WebsitePerformanceTab;


============================
FILE: frontend\src\features\tenantDashboard\tabs\website\WebsiteTab.tsx
============================
import React, { useState } from 'react';
import { BarChart3, FileText, Globe,Heart } from 'lucide-react';

import WebsiteContentTab from './WebsiteContentTab';
import WebsiteDomainTab from './WebsiteDomainTab';
import WebsiteHealthTab from './WebsiteHealthTab';
import WebsitePerformanceTab from './WebsitePerformanceTab';

type WebsiteSubTab = 'content' | 'performance' | 'health' | 'domain';

interface WebsiteTabProps {
  tenantSlug?: string;
}

const WebsiteTab: React.FC<WebsiteTabProps> = ({ tenantSlug }) => {
  const [activeSubTab, setActiveSubTab] = useState<WebsiteSubTab>('content');

  const subTabs = [
    { id: 'content' as const, name: 'Content', icon: FileText },
    { id: 'performance' as const, name: 'Performance', icon: BarChart3 },
    { id: 'health' as const, name: 'Health', icon: Heart },
    { id: 'domain' as const, name: 'Domain', icon: Globe },
  ];

  return (
    <div className="space-y-6">
      {/* Sub-tab Navigation */}
      <div className="border-b border-stone-700">
        <nav className="flex space-x-8">
          {subTabs.map((tab) => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => { setActiveSubTab(tab.id); }}
                className={`flex items-center px-1 py-4 text-sm font-medium border-b-2 transition-colors duration-200 ${
                  activeSubTab === tab.id
                    ? 'border-orange-500 text-orange-400'
                    : 'border-transparent text-gray-400 hover:text-gray-300 hover:border-gray-300'
                }`}
              >
                <Icon className="h-4 w-4 mr-2" />
                {tab.name}
              </button>
            );
          })}
        </nav>
      </div>

      {/* Sub-tab Content */}
      <div className="mt-6">
        {activeSubTab === 'content' && <WebsiteContentTab tenantSlug={tenantSlug} />}
        {activeSubTab === 'performance' && <WebsitePerformanceTab />}
        {activeSubTab === 'health' && <WebsiteHealthTab tenantSlug={tenantSlug} />}
        {activeSubTab === 'domain' && <WebsiteDomainTab />}
      </div>
    </div>
  );
};

export default WebsiteTab;


============================
FILE: frontend\src\features\tenantDashboard\types\index.ts
============================
import type { ComponentType } from 'react';

export type DashboardTab = 'overview' | 'schedule' | 'customers' | 'services' | 'locations' | 'profile' | 'website';

export interface DetailerData {
  business_name: string;
  first_name: string;
  last_name: string;
  email: string;
  phone: string;
  location: string;
  services: string[];
  memberSince: string;
  bio?: string;
}

export interface TabConfig {
  id: DashboardTab;
  name: string;
  icon: ComponentType<{ className?: string }>;
}

export interface DashboardMetrics {
  dailyRevenue: number;
  weeklyRevenue: number;
  monthlyRevenue: number;
  totalAppointments: number;
  totalCustomers: number;
  averageRating: number;
}

export interface Appointment {
  id: string;
  customer: string;
  service: string;
  time: string;
  date: string;
  status: 'confirmed' | 'pending' | 'cancelled';
  duration: number;
  phone?: string;
}

export interface Customer {
  id: string;
  name: string;
  email: string;
  phone: string;
  lastVisit: string;
  totalSpent: number;
  visits: number;
  rating: number;
  status: 'active' | 'inactive';
  favoriteService: string;
}

export interface Service {
  id: string;
  name: string;
  description: string;
  price: number;
  duration: number;
  category: string;
  active: boolean;
  popularity: number;
}

============================
FILE: frontend\src\features\tenantDashboard\utils\constants.ts
============================
import { Calendar, Car, Globe,Home, MapPin, User, Users } from 'lucide-react';

import type { TabConfig } from '../types';

export const DASHBOARD_TABS: TabConfig[] = [
  { id: 'overview', name: 'Overview', icon: Home },
  { id: 'website', name: 'Website', icon: Globe },
  { id: 'locations', name: 'Locations', icon: MapPin },
  { id: 'profile', name: 'Profile', icon: User },
  { id: 'schedule', name: 'Schedule', icon: Calendar },
  { id: 'customers', name: 'Customers', icon: Users },
  { id: 'services', name: 'Services', icon: Car },
];

export const BUSINESS_CATEGORIES = [
  'Exterior',
  'Interior', 
  'Protection',
  'Correction',
  'Maintenance'
] as const;

export const APPOINTMENT_STATUSES = [
  'confirmed',
  'pending', 
  'cancelled'
] as const;

============================
FILE: frontend\src\features\tenantDashboard\utils\index.ts
============================
export * from './constants';
export * from './tenantEvents';



============================
FILE: frontend\src\features\tenantDashboard\utils\tenantEvents.ts
============================
// This has been moved to @/shared/utils/tenantEventManager.ts
// Re-export from shared for backward compatibility
export { TENANT_EVENTS, tenantEventManager } from '@/shared/utils/tenantEventManager';


============================
FILE: frontend\src\features\tenantOnboarding\api\api.ts
============================
import { config } from '@/shared/env';

import type { AffiliateApplication } from '../types';

interface ApiResponse {
  ok: boolean;
  message?: string;
  data?: unknown;
}

interface AffiliateApiResponse {
  success?: boolean;
  message?: string;
  error?: string;
  affiliate?: AffiliateApplication;
}

export const postApplication = async (data: AffiliateApplication): Promise<ApiResponse> => {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => { controller.abort(); }, 30000); // 30 second timeout
    
    const response = await fetch(`${config.apiUrl || ''}/api/affiliates/apply`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
      signal: controller.signal,
    });
    
    clearTimeout(timeoutId);

    const result = await response.json() as AffiliateApiResponse;

    if (!response.ok) {
      return {
        ok: false,
        message: result.error || `HTTP error! status: ${response.status.toString()}`
      };
    }

    return {
      ok: true,
      message: result.message || 'Application submitted successfully',
      data: result.affiliate
    };

  } catch (error) {
    if (error instanceof Error) {
      if (error.name === 'AbortError') {
        return {
          ok: false,
          message: 'Request timed out. Please check if the backend server is running and try again.'
        };
      }
      return {
        ok: false,
        message: error.message || 'Network error. Please try again.'
      };
    }
    
    return {
      ok: false,
      message: 'Network error. Please try again.'
    };
  }
};


============================
FILE: frontend\src\features\tenantOnboarding\api\onboarding.api.ts
============================
// Affiliate onboarding API calls
import type { 
  AffiliateApplication, 
  DraftApplication
} from '../schemas/onboarding.schemas';

// API Response types
interface ApiErrorResponse {
  message: string;
  code?: string;
  details?: unknown;
}

interface ApiSuccessResponse<T = unknown> {
  success: boolean;
  data: T;
  message?: string;
}

// Helper function to handle API responses safely
async function handleApiResponse<T>(response: Response): Promise<T> {
  const responseData = await response.json() as ApiErrorResponse | ApiSuccessResponse<T>;
  
  if (!response.ok) {
    const errorData = responseData as ApiErrorResponse;
    throw new Error(errorData.message || 'An error occurred');
  }
  
  const successData = responseData as ApiSuccessResponse<T>;
  return successData.data;
}

export const onboardingApi = {
  // Submit affiliate application
  submitApplication: async (applicationData: AffiliateApplication): Promise<{ id: string; status: string }> => {
    const response = await fetch('/api/affiliates/apply', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(applicationData),
    });

    return handleApiResponse<{ id: string; status: string }>(response);
  },

  // Save draft application
  saveDraft: async (applicationData: Partial<AffiliateApplication>): Promise<{ success: boolean }> => {
    const response = await fetch('/api/affiliates/draft', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(applicationData),
    });

    return handleApiResponse<{ success: boolean }>(response);
  },

  // Load draft application
  loadDraft: async (userId?: string): Promise<DraftApplication | null> => {
    const url = userId ? `/api/affiliates/draft?user_id=${userId}` : '/api/affiliates/draft';
    const response = await fetch(url);

    if (!response.ok) {
      if (response.status === 404) {
        return null; // No draft found
      }
      // Handle other errors by throwing
      const errorData = await response.json() as ApiErrorResponse;
      throw new Error(errorData.message || 'An error occurred');
    }

    return handleApiResponse<DraftApplication>(response);
  },

  // Delete draft application
  deleteDraft: async (userId?: string): Promise<{ success: boolean }> => {
    const url = userId ? `/api/affiliates/draft?user_id=${userId}` : '/api/affiliates/draft';
    const response = await fetch(url, {
      method: 'DELETE',
    });

    return handleApiResponse<{ success: boolean }>(response);
  },

  // Upload files for proof of work
  uploadFiles: async (files: File[], applicationId?: string) => {
    const formData = new FormData();
    files.forEach((file, index) => {
      formData.append(`file_${index.toString()}`, file);
    });
    
    if (applicationId) {
      formData.append('application_id', applicationId);
    }

    const response = await fetch('/api/affiliates/upload', {
      method: 'POST',
      body: formData,
    });

    return handleApiResponse<{ success: boolean }>(response);
  },

  // Get application status
  getApplicationStatus: async (applicationId: string) => {
    const response = await fetch(`/api/affiliates/status/${applicationId}`);

    return handleApiResponse<{ status: string }>(response);
  },

  // Update application
  updateApplication: async (applicationId: string, updates: Partial<AffiliateApplication>) => {
    const response = await fetch(`/api/affiliates/application/${applicationId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updates),
    });

    return handleApiResponse<AffiliateApplication>(response);
  },

  // Get application by ID
  getApplication: async (applicationId: string) => {
    const response = await fetch(`/api/affiliates/application/${applicationId}`);

    return handleApiResponse<AffiliateApplication>(response);
  },

  // Validate business name availability
  validateBusinessName: async (businessName: string) => {
    const response = await fetch(`/api/affiliates/validate-business-name?name=${encodeURIComponent(businessName)}`);

    return handleApiResponse<{ isAvailable: boolean; suggestions?: string[] }>(response);
  },

  // Get service areas for location
  getServiceAreas: async (location: { city: string; state: string; zipCode: string }) => {
    const response = await fetch('/api/affiliates/service-areas', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(location),
    });

    return handleApiResponse<{ areas: Array<{ name: string; coordinates: { lat: number; lng: number }; radius: number }> }>(response);
  }
};


============================
FILE: frontend\src\features\tenantOnboarding\api\payments.api.ts
============================
/**
 * Payment API client for tenant onboarding
 */

import { apiClient } from '@/shared/api';

export interface CreatePaymentIntentRequest {
  amount: number;
  customerEmail: string;
  businessName: string;
  planType: string;
  metadata?: Record<string, unknown>;
}

export interface CreatePaymentIntentResponse {
  success: boolean;
  clientSecret?: string;
  paymentIntentId?: string;
  error?: string;
}

export interface ConfirmPaymentRequest {
  paymentIntentId: string;
  tenantData: Record<string, unknown>;
}

export interface ConfirmPaymentResponse {
  success: boolean;
  data?: {
    slug: string;
    websiteUrl: string;
    dashboardUrl: string;
    tenantId: string;
    userId: string;
    paymentIntentId: string;
  };
  error?: string;
}

export const createPaymentIntent = async (request: CreatePaymentIntentRequest): Promise<CreatePaymentIntentResponse> => {
  return apiClient.post<CreatePaymentIntentResponse>('/api/payments/create-intent', request);
};

export const confirmPayment = async (request: ConfirmPaymentRequest): Promise<ConfirmPaymentResponse> => {
  return apiClient.post<ConfirmPaymentResponse>('/api/payments/confirm', request);
};


============================
FILE: frontend\src\features\tenantOnboarding\components\ApplicationHeader.tsx
============================
import React from 'react';
import { Link } from 'react-router-dom';
import { ArrowLeft } from 'lucide-react';

import { Button } from '@/shared/ui';

const ApplicationHeader: React.FC = () => {
  return (
    <header className="fixed top-0 z-50 bg-stone-900/95 backdrop-blur-sm w-full border-b border-stone-800 relative">
      <div className="w-full py-4">
        <div className="max-w-7xl mx-auto flex items-center justify-between px-4 sm:px-6 lg:px-8">
          {/* Logo and Business Name */}
          <div className="flex items-center space-x-3">
            <img 
              src="/shared/icons/logo.png" 
              alt="That Smart Site Logo" 
              className="h-14 w-14 object-contain"
              width={56}
              height={56}
              decoding="async"
              loading="eager"
            />
            <div>
              <h1 className="text-2xl md:text-3xl font-bold text-white">That Smart Site</h1>
            </div>
          </div>

          {/* Back Button */}
          <Link to="/">
            <Button 
              variant="ghost"
              size="sm"
              className="text-gray-300 hover:text-white hover:bg-stone-700 px-3 py-2 rounded-lg transition-colors"
              leftIcon={<ArrowLeft className="w-4 h-4" />}
            >
              Back
            </Button>
          </Link>
        </div>
      </div>
    </header>
  );
};

export default ApplicationHeader;


============================
FILE: frontend\src\features\tenantOnboarding\components\BusinessInformationSection.tsx
============================
import React from 'react';
import { Building2, Zap } from 'lucide-react';

import { env } from '@/shared/env';
import { Input } from '@/shared/ui';
import { formatPhoneNumber } from '@/shared/utils/phoneFormatter';

interface BusinessInformationSectionProps {
  formData: {
    businessName: string;
    businessPhone: string;
    businessEmail: string;
    businessAddress: {
      address: string;
      city: string;
      state: string;
      zip: string;
    };
    industry?: string;
  };
  handleInputChange: (field: string, value: string) => void;
  handleAddressChange: (field: keyof BusinessInformationSectionProps['formData']['businessAddress'], value: string) => void;
}

const INDUSTRIES = [
  { value: 'mobile-detailing', label: 'Mobile Detailing' },
  { value: 'maid-service', label: 'Maid Service' },
  { value: 'lawncare', label: 'Lawn Care' },
  { value: 'pet-grooming', label: 'Pet Grooming' },
  { value: 'barber', label: 'Barber Shop' },
];

const BusinessInformationSection: React.FC<BusinessInformationSectionProps> = ({
  formData,
  handleInputChange,
  handleAddressChange
}) => {
  const handlePhoneChange = (value: string) => {
    const formatted = formatPhoneNumber(value);
    handleInputChange('businessPhone', formatted);
  };

  const handleAutoFill = () => {
    handleInputChange('businessName', "Testing Mobile Detail");
    handleInputChange('industry', 'mobile-detailing');
    handleInputChange('businessPhone', formatPhoneNumber('7024206066'));
    handleInputChange('businessEmail', 'bcoleman143@gmail.com');
    handleAddressChange('address', '2550 Country Club Dr');
    handleAddressChange('city', 'Bullhead City');
    handleAddressChange('state', 'AZ');
    handleAddressChange('zip', '86442');
  };

  return (
    <div className="bg-stone-800 border border-stone-700 rounded-lg">
      <div className="p-6 border-b border-stone-700">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-white text-lg font-semibold flex items-center">
              <Building2 className="h-5 w-5 mr-2" />
              Business Information
            </h2>
            <p className="text-gray-400 text-sm mt-1">Tell us about your business</p>
          </div>
          {env.DEV && (
            <button
              type="button"
              onClick={handleAutoFill}
              className="flex items-center gap-2 px-3 py-1.5 bg-orange-600 hover:bg-orange-700 text-white text-sm font-medium rounded-lg transition-colors"
              title="Auto-fill with test data"
            >
              <Zap className="h-4 w-4" />
              Auto-fill
            </button>
          )}
        </div>
      </div>
      <div className="p-6">
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Business Name */}
        <div className="md:col-span-2">
          <label htmlFor="businessName" className="block text-sm font-medium text-gray-300 mb-2">
            Business Name *
          </label>
          <Input
            id="businessName"
            type="text"
            value={formData.businessName}
            onChange={(e) => { handleInputChange('businessName', e.target.value); }}
            placeholder="Enter your business name"
            required
            className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
          />
        </div>

        {/* Industry Selection */}
        <div className="md:col-span-2">
          <label htmlFor="industry" className="block text-sm font-medium text-gray-300 mb-2">
            Industry *
          </label>
          <select
            id="industry"
            value={formData.industry || 'mobile-detailing'}
            onChange={(e) => { handleInputChange('industry', e.target.value); }}
            required
            className="w-full bg-stone-700 border border-stone-600 text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
          >
            {INDUSTRIES.map((industry) => (
              <option key={industry.value} value={industry.value}>
                {industry.label}
              </option>
            ))}
          </select>
          <p className="text-gray-400 text-xs mt-1">
            This determines your website template and features
          </p>
        </div>

        {/* Business Phone */}
        <div>
          <label htmlFor="businessPhone" className="block text-sm font-medium text-gray-300 mb-2">
            Business Phone *
          </label>
          <Input
            id="businessPhone"
            type="tel"
            value={formData.businessPhone}
            onChange={(e) => { handlePhoneChange(e.target.value); }}
            placeholder="(555) 123-4567"
            required
            maxLength={14}
            className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
          />
        </div>

        {/* Business Email */}
        <div>
          <label htmlFor="businessEmail" className="block text-sm font-medium text-gray-300 mb-2">
            Business Email *
          </label>
          <Input
            id="businessEmail"
            type="email"
            value={formData.businessEmail}
            onChange={(e) => { handleInputChange('businessEmail', e.target.value); }}
            placeholder="business@example.com"
            required
            className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
          />
        </div>

        {/* Business Address */}
        <div className="md:col-span-2">
          <h3 className="text-lg font-semibold text-white mb-4">Business Address</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Street Address */}
            <div className="md:col-span-2">
              <label htmlFor="businessAddress" className="block text-sm font-medium text-gray-300 mb-2">
                Street Address *
              </label>
              <Input
                id="businessAddress"
                type="text"
                value={formData.businessAddress.address}
                onChange={(e) => { handleAddressChange('address', e.target.value); }}
                placeholder="123 Main Street"
                required
                className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
              />
            </div>

            {/* City */}
            <div>
              <label htmlFor="businessCity" className="block text-sm font-medium text-gray-300 mb-2">
                City *
              </label>
              <Input
                id="businessCity"
                type="text"
                value={formData.businessAddress.city}
                onChange={(e) => { handleAddressChange('city', e.target.value); }}
                placeholder="Phoenix"
                required
                className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
              />
            </div>

            {/* State */}
            <div>
              <label htmlFor="businessState" className="block text-sm font-medium text-gray-300 mb-2">
                State *
              </label>
              <Input
                id="businessState"
                type="text"
                value={formData.businessAddress.state}
                onChange={(e) => { handleAddressChange('state', e.target.value); }}
                placeholder="AZ"
                required
                className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
                maxLength={2}
              />
            </div>

            {/* ZIP Code */}
            <div>
              <label htmlFor="businessZip" className="block text-sm font-medium text-gray-300 mb-2">
                ZIP Code *
              </label>
              <Input
                id="businessZip"
                type="text"
                value={formData.businessAddress.zip}
                onChange={(e) => { handleAddressChange('zip', e.target.value); }}
                placeholder="85001"
                required
                className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
                maxLength={10}
              />
            </div>
          </div>
        </div>
      </div>
      </div>
    </div>
  );
};

export default BusinessInformationSection;


============================
FILE: frontend\src\features\tenantOnboarding\components\GoogleBusinessProfileModal.tsx
============================
import React, { useState } from 'react';
import { Check, Clipboard, ExternalLink, Share2,X } from 'lucide-react';

import { Button } from '@/shared/ui';

interface GoogleBusinessProfileModalProps {
  isOpen: boolean;
  onClose: () => void;
  businessName: string;
  onUrlFound: (url: string) => void;
}

const GoogleBusinessProfileModal: React.FC<GoogleBusinessProfileModalProps> = ({
  isOpen,
  onClose,
  businessName,
  onUrlFound
}) => {
  const [copiedUrl, setCopiedUrl] = useState('');
  const [isPasted, setIsPasted] = useState(false);

  if (!isOpen) return null;

  const handleSearchGoogle = () => {
    const searchUrl = `https://www.google.com/search?q=${encodeURIComponent(businessName)}`;
    window.open(searchUrl, '_blank');
  };

  const handleUrlSubmit = () => {
    if (copiedUrl.trim()) {
      onUrlFound(copiedUrl.trim());
      onClose();
      setCopiedUrl('');
      setIsPasted(false);
    }
  };

  const handlePaste = async () => {
    try {
      const text = await navigator.clipboard.readText();
      setCopiedUrl(text);
      setIsPasted(true);
      setTimeout(() => { setIsPasted(false); }, 2000);
    } catch (error) {
      console.error('Failed to read clipboard:', error);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-stone-800 border border-stone-700 rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-stone-700">
          <h2 className="text-white text-xl font-semibold">
            Find Your Google Business Profile
          </h2>
          <Button
            onClick={onClose}
            variant="ghost"
            size="sm"
            className="text-gray-400 hover:text-white p-2"
          >
            <X className="w-6 h-6" />
          </Button>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Business Name Display */}
          <div className="bg-stone-700 p-4 rounded-lg">
            <p className="text-gray-300 text-sm">
              <span className="font-medium">Business:</span> {businessName}
            </p>
          </div>

          {/* Step-by-Step Instructions */}
          <div className="space-y-4">
            <h3 className="text-white font-medium">Follow these steps:</h3>
            
            <div className="space-y-3">
              <div className="flex items-start space-x-3">
                <div className="bg-orange-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5">
                  1
                </div>
                <div>
                  <p className="text-gray-300 text-sm">
                    Click the button below to search Google for your business
                  </p>
                  <Button
                    onClick={handleSearchGoogle}
                    variant="primary"
                    size="sm"
                    className="mt-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-sm font-medium"
                    leftIcon={<ExternalLink className="w-4 h-4" />}
                  >
                    Search Google for &quot;{businessName}&quot;
                  </Button>
                </div>
              </div>

              <div className="flex items-start space-x-3">
                <div className="bg-orange-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5">
                  2
                </div>
                <div>
                  <p className="text-gray-300 text-sm">
                    Look for your business in the search results and click on it
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-3">
                <div className="bg-orange-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5">
                  3
                </div>
                <div>
                                    <p className="text-gray-300 text-sm">
                    On your business profile page, click the share <Share2 className="inline w-4 h-4 text-blue-400 mx-1" /> button
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-3">
                <div className="bg-orange-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5">
                  4
                </div>
                <div>
                  <p className="text-gray-300 text-sm">
                    Click &quot;Copy link&quot; to copy your business profile URL
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-3">
                <div className="bg-orange-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5">
                  5
                </div>
                <div>
                  <p className="text-gray-300 text-sm">
                    Click the paste button below to paste the copied URL, then click &quot;Add URL&quot;
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* URL Input */}
          <div className="space-y-3">
            <label htmlFor="gbp_url_input" className="block text-gray-300 text-sm font-medium">
              Your Google Business Profile URL:
            </label>
            <div className="flex space-x-2">
              <input
                id="gbp_url_input"
                type="url"
                value={copiedUrl}
                onChange={(e) => { setCopiedUrl(e.target.value); }}
                placeholder="https://share.google/..."
                className="flex-1 bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
              />
              <Button
                onClick={() => { void handlePaste(); }}
                variant="secondary"
                size="sm"
                className="px-3 py-2 bg-stone-600 hover:bg-stone-500"
                title="Paste URL from clipboard"
              >
                {isPasted ? <Check className="w-4 h-4" /> : <Clipboard className="w-4 h-4" />}
              </Button>
            </div>
          </div>

          {/* Visual Guide */}
          <div className="bg-stone-700 p-4 rounded-lg">
            <p className="text-gray-300 text-sm mb-2">
              <span className="font-medium">💡 Tip:</span> The URL should look like this:
            </p>
            <code className="text-blue-400 text-xs block bg-stone-800 p-2 rounded">
              https://share.google/MM9ugGMsm1Nw5qYGl
            </code>
          </div>
        </div>

        {/* Footer */}
        <div className="flex items-center justify-end space-x-3 p-6 border-t border-stone-700">
          <Button
            onClick={onClose}
            variant="ghost"
            size="md"
            className="px-4 py-2 text-gray-400 hover:text-white"
          >
            Cancel
          </Button>
          <Button
            onClick={handleUrlSubmit}
            variant="primary"
            size="md"
            disabled={!copiedUrl.trim()}
            className="px-4 py-2 bg-orange-500 hover:bg-orange-600 disabled:bg-stone-600 font-medium"
          >
            Add URL
          </Button>
        </div>
      </div>
    </div>
  );
};

export default GoogleBusinessProfileModal;


============================
FILE: frontend\src\features\tenantOnboarding\components\IdentityContactSection.tsx
============================
import React, { useRef } from 'react';
import { Info, User } from 'lucide-react';

import { formatPhoneNumberAsTyped, isCompletePhoneNumber } from '@/shared/utils';

import type { AffiliateApplication } from '../types';
import LocationInput from './LocationInput';

interface IdentityContactSectionProps {
  formData: AffiliateApplication;
  handleInputChange: (field: string, value: string | boolean) => void;
}

const IdentityContactSection: React.FC<IdentityContactSectionProps> = ({
  formData,
  handleInputChange
}) => {
  const phoneInputRef = useRef<HTMLInputElement>(null);

  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const input = e.target.value;
    const cursorPosition = e.target.selectionStart || 0;
    
    // Use the phone formatter utility
    const { value: formattedValue, cursorPosition: newCursorPosition } = formatPhoneNumberAsTyped(input, cursorPosition);
    
    // Update the form data
    handleInputChange('phone', formattedValue);
    
    // Restore cursor position after React re-renders
    setTimeout(() => {
      if (phoneInputRef.current) {
        phoneInputRef.current.setSelectionRange(newCursorPosition, newCursorPosition);
      }
    }, 0);
  };

  const handleLocationSubmit = (location: string, zipCode?: string, city?: string, state?: string) => {
    if (city && state) {
      handleInputChange('base_location.city', city);
      handleInputChange('base_location.state', state);
      if (zipCode) {
        handleInputChange('base_location.zip', zipCode);
      }
    } else if (!location && !city && !state) {
      // Handle clearing the location
      handleInputChange('base_location.city', '');
      handleInputChange('base_location.state', '');
      handleInputChange('base_location.zip', '');
    }
  };

  const isPhoneValid = isCompletePhoneNumber(formData.phone);

  return (
    <div className="bg-stone-800 border border-stone-700 rounded-lg">
      <div className="p-6 border-b border-stone-700">
        <h2 className="text-white text-lg font-semibold flex items-center">
          <User className="w-5 h-5 mr-2 text-orange-400" />
          Identity & Contact
        </h2>
        <p className="text-gray-400 text-sm mt-1">
          Basic information about you and your business
        </p>
      </div>
      <div className="p-6 space-y-6">
        <div>
          <label htmlFor="legal_name" className="block text-gray-300 text-sm font-medium mb-2">
            Legal business name (or sole proprietor name) <span className="text-red-400">*</span>
          </label>
          <input 
            id="legal_name"
            name="legal_name"
            type="text"
            value={formData.legal_name}
            onChange={(e) => { handleInputChange('legal_name', e.target.value); }}
            className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
            placeholder="e.g., John's Mobile Detailing LLC"
            autoComplete="organization"
            required
          />
        </div>

        <div>
          <label htmlFor="primary_contact" className="block text-gray-300 text-sm font-medium mb-2">
            Owner / primary contact <span className="text-red-400">*</span>
          </label>
          <input 
            id="primary_contact"
            name="primary_contact"
            type="text"
            value={formData.primary_contact}
            onChange={(e) => { handleInputChange('primary_contact', e.target.value); }}
            className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
            placeholder="e.g., John Smith"
            autoComplete="name"
            required
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label htmlFor="phone" className="block text-gray-300 text-sm font-medium mb-2 flex items-center">
              Phone <span className="text-red-400">*</span>
              <Info className="w-4 h-4 ml-1 text-gray-400" />
            </label>
            <input 
              id="phone"
              name="phone"
              ref={phoneInputRef}
              type="tel"
              value={formData.phone}
              onChange={handlePhoneChange}
              className={`w-full bg-stone-700 border rounded-lg px-3 py-2 text-white placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 ${
                formData.phone && !isPhoneValid 
                  ? 'border-red-500 focus:ring-red-500' 
                  : 'border-stone-600'
              }`}
              placeholder="(555) 123-4567"
              autoComplete="tel"
              required
            />
            <div className="mt-1 space-y-1">
              <p className="text-gray-400 text-xs">SMS-capable phone number</p>
              {formData.phone && !isPhoneValid && (
                <p className="text-red-400 text-xs">
                  Please enter a complete 10-digit phone number
                </p>
              )}
              {isPhoneValid && (
                <p className="text-green-400 text-xs">
                  ✓ Valid phone number format
                </p>
              )}
            </div>
          </div>

          <div>
            <label htmlFor="email" className="block text-gray-300 text-sm font-medium mb-2">
              Email <span className="text-red-400">*</span>
            </label>
            <input 
              id="email"
              name="email"
              type="email"
              value={formData.email}
              onChange={(e) => { handleInputChange('email', e.target.value); }}
              className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
              placeholder="john@example.com"
              autoComplete="email"
              required
            />
          </div>
        </div>

        <div>
          <label htmlFor="location-search" className="block text-gray-300 text-sm font-medium mb-3">
            Base Location <span className="text-red-400">*</span>
          </label>
          <div className="relative">
            <LocationInput
              onLocationSubmit={handleLocationSubmit}
              placeholder="Enter your city, state, or ZIP code"
              className="w-full"
              value={formData.base_location.city && formData.base_location.state ? 
                `${formData.base_location.city}, ${formData.base_location.state}` : 
                formData.base_location.zip || ''
              }
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default IdentityContactSection;


============================
FILE: frontend\src\features\tenantOnboarding\components\index.ts
============================
// Re-export onboarding components
export { default as ApplicationHeader } from './ApplicationHeader';
export { default as BusinessInformationSection } from './BusinessInformationSection';
export { default as PersonalInformationSection } from './PersonalInformationSection';
export { PlanSelectionSection } from './PlanSelectionSection';
export { StepProgress } from './StepProgress';
export { default as SuccessPage } from './SuccessPage';
export { default as TenantApplicationPage } from './TenantApplicationPage';

// Modal components
export { default as GoogleBusinessProfileModal } from './GoogleBusinessProfileModal';
export { default as IdentityContactSection } from './IdentityContactSection';
export { default as LegalTermsSection } from './LegalTermsSection';
export { default as LocationInput } from './LocationInput';
export { default as OperatingBasicsSection } from './OperatingBasicsSection';
export { default as ProofOfWorkSection } from './ProofOfWorkSection';
export { default as SocialMediaSection } from './SocialMediaSection';
export { default as SubmitSection } from './SubmitSection';
export { default as TenantPrivacyModal } from './TenantPrivacyModal';
export { default as TenantTermsModal } from './TenantTermsModal';

============================
FILE: frontend\src\features\tenantOnboarding\components\LegalTermsSection.tsx
============================
import React, { useState } from 'react';
import { Shield } from 'lucide-react';

import type { AffiliateApplication } from '../types';
import { SOURCES } from '../types';
import TenantPrivacyModal from './TenantPrivacyModal';
import TenantTermsModal from './TenantTermsModal';

interface LegalTermsSectionProps {
  formData: AffiliateApplication;
  handleInputChange: (field: string, value: string | boolean) => void;
}

const LegalTermsSection: React.FC<LegalTermsSectionProps> = ({
  formData,
  handleInputChange
}) => {
  const [showTerms, setShowTerms] = useState(false);
  const [showPrivacy, setShowPrivacy] = useState(false);

  return (
    <div className="bg-stone-800 border border-stone-700 rounded-lg">
      <div className="p-6 border-b border-stone-700">
        <h2 className="text-white text-lg font-semibold flex items-center">
          <Shield className="w-5 h-5 mr-2 text-orange-400" />
          Legal & Terms
        </h2>
        <p className="text-gray-400 text-sm mt-1">
          Important agreements and confirmations
        </p>
      </div>
      <div className="p-6 space-y-6">
        <div className="space-y-4">
          <label htmlFor="accept_terms" className="flex items-start space-x-3">
            <input
              id="accept_terms"
              name="accept_terms"
              type="checkbox"
              checked={formData.accept_terms}
              onChange={(e) => { handleInputChange('accept_terms', e.target.checked); }}
              className="mt-1 border-stone-600 text-orange-500 rounded focus:ring-orange-500"
              required
            />
            <span className="text-gray-300 text-sm">
              I accept the <button type="button" onClick={() => { setShowTerms(true); }} className="text-orange-400 hover:underline">Terms of Service</button> and <button type="button" onClick={() => { setShowPrivacy(true); }} className="text-orange-400 hover:underline">Privacy Policy</button> <span className="text-red-400">*</span>
            </span>
          </label>

          <label htmlFor="consent_notifications" className="flex items-start space-x-3">
            <input
              id="consent_notifications"
              name="consent_notifications"
              type="checkbox"
              checked={formData.consent_notifications}
              onChange={(e) => { handleInputChange('consent_notifications', e.target.checked); }}
              className="mt-1 border-stone-600 text-orange-500 rounded focus:ring-orange-500"
              required
            />
            <span className="text-gray-300 text-sm">
              I consent to receive notifications about my application status and affiliate opportunities <span className="text-red-400">*</span>
            </span>
          </label>
        </div>

        <div>
          <label htmlFor="source" className="block text-gray-300 text-sm font-medium mb-2">How did you hear about us?</label>
          <select 
            id="source"
            name="source"
            value={formData.source}
            onChange={(e) => { handleInputChange('source', e.target.value); }}
            className="w-full bg-stone-700 border border-stone-600 text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
          >
            <option value="">Select source</option>
            {SOURCES.map(source => (
              <option key={source} value={source}>{source}</option>
            ))}
          </select>
        </div>

        <div>
          <label htmlFor="notes" className="block text-gray-300 text-sm font-medium mb-2">Additional Notes (Optional)</label>
          <textarea 
            id="notes"
            name="notes"
            value={formData.notes}
            onChange={(e) => { handleInputChange('notes', e.target.value); }}
            className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
            placeholder="Any additional information you'd like us to know..."
            rows={3}
          />
        </div>
      </div>
      
      <TenantTermsModal isOpen={showTerms} onClose={() => { setShowTerms(false); }} />
      <TenantPrivacyModal isOpen={showPrivacy} onClose={() => { setShowPrivacy(false); }} />
    </div>
  );
};

export default LegalTermsSection;


============================
FILE: frontend\src\features\tenantOnboarding\components\LocationInput.tsx
============================
import React, { useEffect, useRef, useState } from 'react';
import ReactDOM from 'react-dom';
import { MapPin, Search, X } from 'lucide-react';

import { type AutocompleteSessionToken, type AutocompleteSuggestion, type PlacesLibrary } from '@/shared';
import { config } from '@/shared/env';
import { Button } from '@/shared/ui';

// interface AutocompleteResponse {
//   suggestions?: AutocompleteSuggestion[];
// }

interface LocationInputProps {
  onLocationSubmit: (location: string, zipCode?: string, city?: string, state?: string) => void;
  placeholder?: string;
  className?: string;
  value?: string;
}

const LocationInput: React.FC<LocationInputProps> = ({
  onLocationSubmit,
  placeholder = 'Enter your city, state, or ZIP code',
  className = '',
  value = '',
}) => {
  const [inputValue, setInputValue] = useState(value);
  const [predictions, setPredictions] = useState<AutocompleteSuggestion[]>([]);
  const [showPredictions, setShowPredictions] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [apiLoaded, setApiLoaded] = useState(false);
  const [dropdownStyle, setDropdownStyle] = useState<React.CSSProperties>({});

  const inputRef = useRef<HTMLInputElement>(null);
  const predictionsRef = useRef<HTMLDivElement>(null);
  const sessionTokenRef = useRef<AutocompleteSessionToken | null>(null);

  // Update internal state when value prop changes (for test data population)
  useEffect(() => {
    if (value && value !== inputValue) {
      setInputValue(value);
    }
  }, [value, inputValue]);

  // Load Google Places API
  useEffect(() => {
    const checkAPIReady = async () => {
      try {
        const googleWindow = window as Window & { google?: typeof google };
        if (!googleWindow.google?.maps.importLibrary) {
          setTimeout(() => { void checkAPIReady(); }, 250);
          return;
        }
        
        await googleWindow.google.maps.importLibrary('places');
        setApiLoaded(true);
      } catch (error: unknown) {
        const msg = error instanceof Error ? error.message : String(error);
        console.error('Google Maps API initialization error:', msg);
        setApiLoaded(false);
      }
    };

    const loadGooglePlacesAPI = () => {
      const googleWindow = window as Window & { google?: typeof google };
      if (googleWindow.google?.maps) {
        setTimeout(() => { void checkAPIReady(); }, 300);
        return;
      }
      
      if (document.querySelector('script[src*="maps.googleapis.com"]')) {
        setTimeout(() => { void checkAPIReady(); }, 500);
        return;
      }
      
      const script = document.createElement('script');
      const apiKey = config.googleMapsApiKey;
      
      if (!apiKey) {
        console.error('Google Maps API key not found. Please set VITE_GOOGLE_MAPS_API_KEY in your .env file');
        setApiLoaded(false);
        return;
      }
      
      script.src = `https://maps.googleapis.com/maps/api/js?key=${encodeURIComponent(
        apiKey
      )}&libraries=places&v=beta&loading=async`;
      script.async = true;
      script.defer = true;
      script.onload = () => { setTimeout(() => void checkAPIReady(), 500); };
      script.onerror = (err: unknown) => {
        const msg = err instanceof Error ? err.message : String(err);
        console.error('Failed to load Google Maps JS API', msg);
        setApiLoaded(false);
      };
      document.head.appendChild(script);
    };

    loadGooglePlacesAPI();
  }, []);

  // Handle input changes and get predictions
  const handleInputChange = async (value: string) => {
    setInputValue(value);

    if (!value.trim()) {
      setPredictions([]);
      setShowPredictions(false);
      sessionTokenRef.current = null;
      return;
    }

    if (!apiLoaded) {
      setPredictions([]);
      setShowPredictions(false);
      return;
    }

    setIsLoading(true);
    try {
      const googleWindow = window as Window & { google?: typeof google };
      if (!googleWindow.google?.maps.importLibrary) {
        throw new Error('Google Maps API not loaded');
      }
      const placesLib = (await googleWindow.google.maps.importLibrary('places')) as PlacesLibrary;
      const { AutocompleteSuggestion, AutocompleteSessionToken } = placesLib;

      sessionTokenRef.current ??= new AutocompleteSessionToken();

      const request = {
        input: value,
        region: 'us',
        includedPrimaryTypes: ['locality', 'postal_code'],
        sessionToken: sessionTokenRef.current,
      };

      const { suggestions } = await AutocompleteSuggestion.fetchAutocompleteSuggestions(request);
      setPredictions(suggestions);
      setShowPredictions(suggestions.length > 0);
    } catch (err: unknown) {
      const msg = err instanceof Error ? err.message : String(err);
      console.error('LocationInput: Error getting suggestions', msg);
      setPredictions([]);
      setShowPredictions(false);
      if (err instanceof Error && err.message.includes('wI')) {
        console.warn('Google Maps API appears to be broken, disabling location functionality');
        setApiLoaded(false);
      }
    } finally {
      setIsLoading(false);
    }
  };

  // Handle prediction selection
  const handlePredictionSelect = (suggestion: AutocompleteSuggestion) => {
    const label = String(suggestion.placePrediction.text);
    
    try {
      setInputValue(label);
      setShowPredictions(false);
      setPredictions([]);

      let zipCode = '';
      let city = '';
      let state = '';

      // For now, we'll parse the text directly since toPlace() may not be available
      const text = String(suggestion.placePrediction.text);
      const parts = text.split(', ');
      
      if (parts.length >= 2) {
        city = parts[0] ?? '';
        state = parts[1] ?? '';
      }

      onLocationSubmit(label, zipCode, city, state);
    } catch (error: unknown) {
      console.error('Error processing prediction:', error);
      
      // Fallback: try to parse the text directly
      const parts = label.split(', ');
      const zip = '';
      let c = '', s = '';
      if (parts.length >= 2) {
        c = parts[0] ?? '';
        s = parts[1] ?? '';
      }
      onLocationSubmit(label, zip, c, s);
    } finally {
      sessionTokenRef.current = null;
    }
  };

  // Handle form submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (inputValue.trim()) {
      // Parse manual input for city, state when Google Places doesn't provide structured data
      const input = inputValue.trim();
      let city = '', state = '', zipCode = '';
      
      // Try to parse "City, State" or "City, State Zip" format
      if (input.includes(',')) {
        const parts = input.split(',').map(part => part.trim());
        city = parts[0] ?? '';
        
        if (parts[1]) {
          // Check if second part contains zip code
          const stateZip = parts[1].split(' ');
          const last = stateZip[stateZip.length - 1] ?? '';
          if (stateZip.length > 1 && /^\d{5}(-\d{4})?$/.test(last)) {
            // Last part is a zip code
            state = stateZip.slice(0, -1).join(' ');
            zipCode = last;
          } else {
            // No zip code, just state
            state = parts[1] ?? '';
          }
        }
      }
      
      onLocationSubmit(input, zipCode, city, state);
      sessionTokenRef.current = null;
    }
  };

  // Handle clear button click
  const handleClear = () => {
    setInputValue('');
    setPredictions([]);
    setShowPredictions(false);
    sessionTokenRef.current = null;
    // Clear the form data by calling onLocationSubmit with empty values
    onLocationSubmit('', '', '', '');
    // Focus the input after clearing
    inputRef.current?.focus();
  };

  // Close predictions when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        predictionsRef.current &&
        !predictionsRef.current.contains(event.target as Node) &&
        inputRef.current &&
        !inputRef.current.contains(event.target as Node)
      ) {
        setShowPredictions(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => { document.removeEventListener('mousedown', handleClickOutside); };
  }, []);

  // Update dropdown position when predictions are shown
  useEffect(() => {
    if (showPredictions && inputRef.current) {
      const rect = inputRef.current.getBoundingClientRect();
      setDropdownStyle({
        position: 'absolute',
        top: rect.bottom + window.scrollY,
        left: rect.left + window.scrollX,
        width: rect.width,
        zIndex: 9999,
      });
    }
  }, [showPredictions, predictions.length]);

  return (
    <div className={`relative ${className}`}>
      {!apiLoaded && <div className="mb-2 text-xs text-gray-400 text-center">Loading Google Places…</div>}

      <div className="relative">
        <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
          <MapPin className="h-6 w-6 text-gray-400" />
        </div>
        <input
          ref={inputRef}
          type="text"
          id="location-search-onboarding"
          name="location"
          value={inputValue}
          onChange={(e) => { void handleInputChange(e.target.value); }}
          onKeyDown={(e) => {
            if (e.key === 'Enter') {
              e.preventDefault();
              handleSubmit(e);
            }
          }}
          placeholder={apiLoaded ? placeholder : 'Loading…'}
          className={`w-full pl-12 pr-20 py-4 border rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 text-white placeholder:text-gray-400 text-lg ${
            apiLoaded ? 'bg-stone-700 border-stone-600' : 'bg-stone-600 border-stone-500'
          }`}
          autoComplete="off"
          disabled={!apiLoaded}
        />
        
        {/* Clear button - only show when there's input */}
        {inputValue && (
          <Button
            type="button"
            onClick={handleClear}
            variant="ghost"
            size="sm"
            className="absolute inset-y-0 right-16 px-3 text-gray-400 hover:text-white"
            title="Clear location"
          >
            <X className="h-5 w-5" />
          </Button>
        )}
        
        <Button
          type="button"
          onClick={handleSubmit}
          variant={apiLoaded ? "primary" : "secondary"}
          size="sm"
          className={`absolute inset-y-0 right-0 px-6 rounded-r-lg ${
            apiLoaded ? 'bg-orange-500 hover:bg-orange-600' : 'bg-gray-300 text-gray-500 cursor-not-allowed'
          }`}
          disabled={!apiLoaded}
          leftIcon={<Search className="h-6 w-6" />}
        />
      </div>

      {isLoading && (
        <div className="absolute top-full left-0 right-0 mt-1 bg-stone-700 border border-stone-600 rounded-lg shadow-lg p-2 text-center text-gray-400">
          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-orange-500 mx-auto"></div>
          <span className="ml-2 text-sm">Finding locations…</span>
        </div>
      )}

      {showPredictions && predictions.length > 0 && ReactDOM.createPortal(
        <div
          ref={predictionsRef}
          style={dropdownStyle}
          className="bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto"
        >
          {predictions.map((sugg: AutocompleteSuggestion, i: number) => (
            <Button
              key={i}
              onClick={() => { handlePredictionSelect(sugg); }}
              variant="ghost"
              size="md"
              className="w-full text-left px-4 py-3 hover:bg-gray-50 focus:bg-gray-50 border-b border-gray-100 last:border-b-0 justify-start"
            >
              <div className="flex items-center">
                <MapPin className="h-4 w-4 text-gray-400 mr-2 flex-shrink-0" />
                <span className="text-gray-900">
                  {String(sugg.placePrediction.text)}
                </span>
              </div>
            </Button>
          ))}
        </div>,
        document.body
      )}
    </div>
  );
};

export default LocationInput;


============================
FILE: frontend\src\features\tenantOnboarding\components\OperatingBasicsSection.tsx
============================
import React from 'react';
import { Building } from 'lucide-react';

import type { AffiliateApplication } from '../types';
import { CATEGORIES } from '../types';

interface OperatingBasicsSectionProps {
  formData: AffiliateApplication;
  handleArrayChange: (field: string, value: string, checked: boolean) => void;
}

const OperatingBasicsSection: React.FC<OperatingBasicsSectionProps> = ({
  formData,
  handleArrayChange
}) => {
  return (
    <div className="bg-stone-800 border border-stone-700 rounded-lg">
      <div className="p-6 border-b border-stone-700">
        <h2 className="text-white text-lg font-semibold flex items-center">
          <Building className="w-5 h-5 mr-2 text-orange-400" />
          Operating Basics
        </h2>
        <p className="text-gray-400 text-sm mt-1">
          Services you offer
        </p>
      </div>
      <div className="p-6 space-y-6">
        <div>
          <div className="block text-gray-300 text-sm font-medium mb-4">
            Service Categories <span className="text-red-400">*</span>
          </div>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {CATEGORIES.map((category) => (
              <label key={category} htmlFor={`category-${category}`} className="flex items-start space-x-3">
                <input
                  id={`category-${category}`}
                  name={`category-${category}`}
                  type="checkbox"
                  checked={formData.categories.includes(category)}
                  onChange={(e) => { handleArrayChange('categories', category, e.target.checked); }}
                  className="mt-1 border-stone-600 text-orange-500 rounded focus:ring-orange-500"
                />
                <span className="text-sm text-gray-300">{category}</span>
              </label>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default OperatingBasicsSection;


============================
FILE: frontend\src\features\tenantOnboarding\components\PaymentSection.tsx
============================
import React, { useState } from 'react';
import { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';
import { AlertCircle, CreditCard, Lock, Shield } from 'lucide-react';

import { env } from '@/shared/env';
import { Input } from '@/shared/ui';

import { confirmPayment, createPaymentIntent } from '../api/payments.api';
import type { Address } from '../types';
import { addressSchema } from '../utils/validation';

interface PaymentSectionProps {
  formData: {
    selectedPlan: string;
    planPrice: number;
    billingAddress: Address;
    useSameAddress: boolean;
    firstName: string;
    lastName: string;
    personalEmail: string;
    personalPhone: string;
    businessName: string;
    businessPhone: string;
    businessEmail: string;
    businessAddress: Address;
    industry: string;
    defaults: unknown;
  };
  businessAddress: Address;
  onAddressChange: (field: keyof Address, value: string) => void;
  onToggleSameAddress: (value: boolean) => void;
  onPaymentSuccess: (data: { slug: string; websiteUrl: string; dashboardUrl: string }) => void;
  errors: Record<string, string>;
  setErrors: (errors: Record<string, string>) => void;
}

const PaymentSection: React.FC<PaymentSectionProps> = ({
  formData,
  onAddressChange,
  onToggleSameAddress,
  onPaymentSuccess,
  errors,
  setErrors,
}) => {
  const stripe = useStripe();
  const elements = useElements();
  const [cardError, setCardError] = useState<string>('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [clientSecret, setClientSecret] = useState<string | null>(null);

  const validateField = (field: string, value: string) => {
    try {
      const addressField = field.split('.')[1] as keyof Address;
      switch (addressField) {
        case 'address':
          addressSchema.pick({ address: true }).parse({ address: value });
          break;
        case 'city':
          addressSchema.pick({ city: true }).parse({ city: value });
          break;
        case 'state':
          addressSchema.pick({ state: true }).parse({ state: value });
          break;
        case 'zip':
          addressSchema.pick({ zip: true }).parse({ zip: value });
          break;
      }
      setErrors({ ...errors, [field]: '' });
    } catch (error: unknown) {
      const message = error instanceof Error ? error.message : 'Invalid input';
      setErrors({ ...errors, [field]: message });
    }
  };


  const handleCardChange = (event: { error?: { message: string } | undefined }) => {
    if (event.error) {
      setCardError(event.error.message);
    } else {
      setCardError('');
    }
  };

  // Create payment intent when component mounts
  React.useEffect(() => {
    const createPaymentIntentAsync = async () => {
      try {
        // Guard against missing required fields
        if (!formData.planPrice || !formData.personalEmail || !formData.businessName || !formData.selectedPlan) {
          console.error('Missing required fields for payment intent:', {
            planPrice: formData.planPrice,
            personalEmail: formData.personalEmail,
            businessName: formData.businessName,
            selectedPlan: formData.selectedPlan
          });
          setCardError('Please complete all required fields before proceeding to payment');
          return;
        }
        
        const result = await createPaymentIntent({
          amount: formData.planPrice,
          customerEmail: formData.personalEmail,
          businessName: formData.businessName,
          planType: formData.selectedPlan,
          metadata: {
            industry: formData.industry,
          }
        });
        
        if (result.success && result.clientSecret) {
          setClientSecret(result.clientSecret);
        } else {
          setCardError(result.error || 'Failed to initialize payment');
        }
      } catch (error) {
        if (error instanceof TypeError && error.message.includes('fetch')) {
          setCardError('Unable to connect to server. Please check your network connection.');
        } else {
          setCardError('Failed to initialize payment');
        }
      }
    };

    void createPaymentIntentAsync();
  }, [formData.planPrice, formData.personalEmail, formData.businessName, formData.selectedPlan, formData.industry]);

  const handlePayment = async () => {
    if (!stripe || !elements || !clientSecret) {
      setCardError('Payment system not ready. Please try again.');
      return;
    }

    setIsProcessing(true);
    setCardError('');

    try {
      const cardElement = elements.getElement(CardElement);
      if (!cardElement) {
        throw new Error('Card element not found');
      }

      // Check payment intent status before confirming
      console.log('Checking payment intent status before confirmation...');
      const { error: retrieveError, paymentIntent: existingIntent } = await stripe.retrievePaymentIntent(clientSecret);
      if (retrieveError) {
        console.error('Error retrieving payment intent:', retrieveError);
      } else {
        console.log('Payment intent status before confirmation:', existingIntent.status);
        
        // If already succeeded, skip confirmation
        if (existingIntent.status === 'succeeded') {
          console.log('Payment already succeeded, proceeding with tenant creation...');
          const confirmResult = await confirmPayment({
            paymentIntentId: existingIntent.id,
            tenantData: formData
          });
          
          if (confirmResult.success && confirmResult.data) {
            onPaymentSuccess(confirmResult.data);
          } else {
            setCardError(confirmResult.error || 'Failed to create your account');
          }
          return;
        }
      }

      // Confirm payment with Stripe
      console.log('Confirming payment with client secret:', clientSecret);
      const { error: stripeError, paymentIntent } = await stripe.confirmCardPayment(
        clientSecret,
        {
          payment_method: {
            card: cardElement,
            billing_details: {
              name: `${formData.firstName} ${formData.lastName}`,
              email: formData.personalEmail,
              phone: formData.personalPhone,
              address: {
                line1: formData.billingAddress.address,
                city: formData.billingAddress.city,
                state: formData.billingAddress.state,
                postal_code: formData.billingAddress.zip,
                country: 'US',
              },
            },
          },
        }
      );
      
      console.log('Payment confirmation result:', { stripeError, paymentIntent });

      if (stripeError) {
        console.error('Stripe payment error:', stripeError);
        setCardError(stripeError.message || 'Payment failed');
        return;
      }

      if (paymentIntent.status === 'succeeded') {
        // Confirm payment and create tenant
        const confirmResult = await confirmPayment({
          paymentIntentId: paymentIntent.id,
          tenantData: formData
        });
        
        if (confirmResult.success && confirmResult.data) {
          // Call success callback
          onPaymentSuccess(confirmResult.data);
        } else {
          setCardError(confirmResult.error || 'Failed to create your account');
        }
      }
    } catch (error) {
      console.error('Payment processing error:', error);
      if (error instanceof TypeError && error.message.includes('fetch')) {
        setCardError('Unable to connect to server. Please check your network connection.');
      } else {
        setCardError(`Payment failed: ${error instanceof Error ? error.message : 'Please try again.'}`);
      }
    } finally {
      setIsProcessing(false);
    }
  };


  const CARD_ELEMENT_OPTIONS = {
    style: {
      base: {
        color: '#ffffff',
        fontFamily: 'system-ui, -apple-system, sans-serif',
        fontSize: '16px',
        fontSmoothing: 'antialiased',
        '::placeholder': {
          color: '#78716c',
        },
      },
      invalid: {
        color: '#f87171',
        iconColor: '#f87171',
      },
    },
  };

  return (
    <div className="w-full max-w-2xl mx-auto">
      <div className="bg-stone-800 border border-stone-700 rounded-2xl overflow-hidden">
        <div className="p-4 sm:p-6 border-b border-stone-700">
          <h2 className="text-white text-xl sm:text-2xl font-semibold flex items-center gap-2">
            <CreditCard className="h-5 w-5 sm:h-6 sm:w-6 text-orange-600" />
            Payment Information
          </h2>
          <p className="text-gray-400 text-sm sm:text-base mt-2">
            Secure payment powered by Stripe
          </p>
        </div>

        <div className="p-4 sm:p-6 space-y-4 sm:space-y-6">
          <div className="bg-stone-700/50 border border-stone-600 rounded-lg p-4">
            <div className="flex justify-between items-center">
              <div>
                <p className="text-sm text-gray-400">Selected Plan</p>
                <p className="text-xl font-bold text-white capitalize mt-1">
                  {formData.selectedPlan}
                </p>
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-400">Monthly</p>
                <p className="text-2xl font-bold text-orange-600 mt-1">
                  ${(formData.planPrice / 100).toFixed(2)}
                </p>
              </div>
            </div>
            <div className="mt-4 pt-4 border-t border-stone-600">
              <p className="text-xs text-gray-400">
                Billed monthly. Cancel anytime. 14-day money-back guarantee.
              </p>
            </div>
          </div>

          <div>
            <div className="block text-sm font-medium text-gray-300 mb-3">
              Card Information <span className="text-orange-500">*</span>
            </div>
            <div className="bg-stone-700 border border-stone-600 rounded-lg p-4">
              <CardElement options={CARD_ELEMENT_OPTIONS} onChange={handleCardChange} />
            </div>
            {cardError && (
              <div className="mt-2 flex items-center gap-2 text-sm text-red-400">
                <AlertCircle className="w-4 h-4" />
                <span>{cardError}</span>
              </div>
            )}
            <div className="mt-3 flex items-center gap-2 text-xs text-gray-400">
              <Lock className="w-3 h-3" />
              <span>Your payment information is encrypted and secure</span>
            </div>
            
            {/* Test Card Information for Development */}
            {env.DEV && (
              <div className="mt-4 p-3 bg-yellow-900/20 border border-yellow-700 rounded-lg">
                <h4 className="text-sm font-medium text-yellow-400 mb-2">🧪 Test Cards (Development)</h4>
                <div className="text-xs text-yellow-300 space-y-1">
                  <p><strong>Success:</strong> 4242 4242 4242 4242</p>
                  <p><strong>Decline:</strong> 4000 0000 0000 0002</p>
                  <p><strong>CVV:</strong> Any 3 digits | <strong>Expiry:</strong> Any future date</p>
                </div>
              </div>
            )}
          </div>

          <div className="space-y-4">
            <div className="flex items-center gap-3">
              <input
                type="checkbox"
                id="sameAddress"
                checked={formData.useSameAddress}
                onChange={(e) => { onToggleSameAddress(e.target.checked); }}
                className="w-4 h-4 rounded border-stone-600 text-orange-600 focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-stone-800 bg-stone-700"
              />
              <label htmlFor="sameAddress" className="text-sm text-gray-300 cursor-pointer">
                Billing address same as business address
              </label>
            </div>

            {!formData.useSameAddress && (
              <div className="space-y-4 pt-2">
                <h3 className="text-white text-base sm:text-lg font-medium">Billing Address</h3>

                <Input
                  label="Street Address"
                  type="text"
                  value={formData.billingAddress.address}
                  onChange={(e) => { onAddressChange('address', e.target.value); }}
                  onBlur={() => { validateField('billingAddress.address', formData.billingAddress.address); }}
                  error={errors['billingAddress.address'] || ''}
                  placeholder="123 Main Street"
                  required
                />

                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                  <div className="sm:col-span-2">
                    <Input
                      label="City"
                      type="text"
                      value={formData.billingAddress.city}
                      onChange={(e) => { onAddressChange('city', e.target.value); }}
                      onBlur={() => { validateField('billingAddress.city', formData.billingAddress.city); }}
                      error={errors['billingAddress.city'] || ''}
                      placeholder="San Francisco"
                      required
                    />
                  </div>

                  <Input
                    label="State"
                    type="text"
                    value={formData.billingAddress.state}
                    onChange={(e) => { onAddressChange('state', e.target.value.toUpperCase()); }}
                    onBlur={() => { validateField('billingAddress.state', formData.billingAddress.state); }}
                    error={errors['billingAddress.state'] || ''}
                    placeholder="CA"
                    required
                    maxLength={2}
                    helperText="2 letters"
                  />
                </div>

                <Input
                  label="ZIP Code"
                  type="text"
                  value={formData.billingAddress.zip}
                  onChange={(e) => { onAddressChange('zip', e.target.value); }}
                  onBlur={() => { validateField('billingAddress.zip', formData.billingAddress.zip); }}
                  error={errors['billingAddress.zip'] || ''}
                  placeholder="94102"
                  required
                  maxLength={10}
                />
              </div>
            )}
          </div>

          {/* Payment Button */}
          <div className="pt-4 border-t border-stone-700">
            <button
              type="button"
              onClick={() => { void handlePayment(); }}
              disabled={!stripe || !clientSecret || isProcessing}
              className={`
                w-full py-4 px-6 rounded-lg font-semibold text-lg
                transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-stone-800
                ${
                  !stripe || !clientSecret || isProcessing
                    ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                    : 'bg-orange-600 text-white hover:bg-orange-700 focus:ring-orange-500'
                }
              `}
            >
              {isProcessing ? (
                <div className="flex items-center justify-center gap-2">
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  Processing Payment...
                </div>
              ) : (
                `Complete Purchase - $${(formData.planPrice / 100).toFixed(2)}`
              )}
            </button>
            
            <p className="text-center text-xs text-gray-400 mt-2">
              You&apos;ll be charged ${(formData.planPrice / 100).toFixed(2)} monthly. Cancel anytime.
            </p>
          </div>

          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 pt-4 border-t border-stone-700">
            <div className="flex items-start gap-3">
              <Shield className="w-5 h-5 text-orange-600 flex-shrink-0 mt-0.5" />
              <div>
                <p className="text-sm font-medium text-white">PCI Compliant</p>
                <p className="text-xs text-gray-400 mt-0.5">Bank-level security</p>
              </div>
            </div>
            <div className="flex items-start gap-3">
              <Lock className="w-5 h-5 text-orange-600 flex-shrink-0 mt-0.5" />
              <div>
                <p className="text-sm font-medium text-white">256-bit SSL</p>
                <p className="text-xs text-gray-400 mt-0.5">Encrypted connection</p>
              </div>
            </div>
            <div className="flex items-start gap-3">
              <CreditCard className="w-5 h-5 text-orange-600 flex-shrink-0 mt-0.5" />
              <div>
                <p className="text-sm font-medium text-white">Money-back</p>
                <p className="text-xs text-gray-400 mt-0.5">14-day guarantee</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PaymentSection;


============================
FILE: frontend\src\features\tenantOnboarding\components\PersonalInformationSection.tsx
============================
import React from 'react';
import { User, Zap } from 'lucide-react';

import { env } from '@/shared/env';
import { Input } from '@/shared/ui';
import { formatPhoneNumber } from '@/shared/utils/phoneFormatter';

interface PersonalInformationSectionProps {
  formData: {
    firstName: string;
    lastName: string;
    personalPhone: string;
    personalEmail: string;
  };
  handleInputChange: (field: string, value: string) => void;
  errors?: Record<string, string>;
}

const PersonalInformationSection: React.FC<PersonalInformationSectionProps> = ({
  formData,
  handleInputChange,
  errors = {}
}) => {
  const handlePhoneChange = (value: string) => {
    const formatted = formatPhoneNumber(value);
    handleInputChange('personalPhone', formatted);
  };

  const handleAutoFill = () => {
    handleInputChange('firstName', 'John');
    handleInputChange('lastName', 'Doe');
    handleInputChange('personalPhone', formatPhoneNumber('5551112222'));
    handleInputChange('personalEmail', 'coleman143@hotmail.com');
  };

  return (
    <div className="bg-stone-800 border border-stone-700 rounded-lg">
      <div className="p-6 border-b border-stone-700">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-white text-lg font-semibold flex items-center">
              <User className="h-5 w-5 mr-2" />
              Personal Information
            </h2>
            <p className="text-gray-400 text-sm mt-1">Tell us about yourself</p>
          </div>
          {env.DEV && (
            <button
              type="button"
              onClick={handleAutoFill}
              className="flex items-center gap-2 px-3 py-1.5 bg-orange-600 hover:bg-orange-700 text-white text-sm font-medium rounded-lg transition-colors"
              title="Auto-fill with test data"
            >
              <Zap className="h-4 w-4" />
              Auto-fill
            </button>
          )}
        </div>
      </div>
      <div className="p-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* First Name */}
        <div>
          <label htmlFor="firstName" className="block text-sm font-medium text-gray-300 mb-2">
            First Name *
          </label>
          <Input
            id="firstName"
            type="text"
            value={formData.firstName}
            onChange={(e) => { handleInputChange('firstName', e.target.value); }}
            placeholder="Enter your first name"
            required
            className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
          />
        </div>

        {/* Last Name */}
        <div>
          <label htmlFor="lastName" className="block text-sm font-medium text-gray-300 mb-2">
            Last Name *
          </label>
          <Input
            id="lastName"
            type="text"
            value={formData.lastName}
            onChange={(e) => { handleInputChange('lastName', e.target.value); }}
            placeholder="Enter your last name"
            required
            className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
          />
        </div>

        {/* Personal Phone */}
        <div>
          <label htmlFor="personalPhone" className="block text-sm font-medium text-gray-300 mb-2">
            Personal Phone *
          </label>
          <Input
            id="personalPhone"
            type="tel"
            value={formData.personalPhone}
            onChange={(e) => { handlePhoneChange(e.target.value); }}
            placeholder="(555) 123-4567"
            required
            maxLength={14}
            className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
          />
        </div>

        {/* Personal Email */}
        <div>
          <label htmlFor="personalEmail" className="block text-sm font-medium text-gray-300 mb-2">
            Personal Email *
          </label>
          <Input
            id="personalEmail"
            type="email"
            value={formData.personalEmail}
            onChange={(e) => { handleInputChange('personalEmail', e.target.value); }}
            placeholder="your.email@example.com"
            required
            className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
          />
          {errors['personalEmail'] && (
            <p className="mt-1 text-sm text-red-400">{errors['personalEmail']}</p>
          )}
        </div>
        </div>
      </div>
    </div>
  );
};

export default PersonalInformationSection;


============================
FILE: frontend\src\features\tenantOnboarding\components\PlanSelectionSection.tsx
============================
import React, { useState } from 'react';
import { Check, Sparkles } from 'lucide-react';

import { type PricingPlan,pricingPlans } from '../types';

interface PlanSelectionSectionProps {
  selectedPlan: string;
  onSelectPlan: (planId: 'starter' | 'pro' | 'enterprise', price: number) => void;
}

export const PlanSelectionSection: React.FC<PlanSelectionSectionProps> = ({
  selectedPlan,
  onSelectPlan,
}) => {
  const [hoveredPlan, setHoveredPlan] = useState<string | null>(null);

  return (
    <div className="w-full max-w-6xl mx-auto">
      <div className="text-center mb-8 sm:mb-12">
        <h2 className="text-2xl sm:text-3xl lg:text-4xl font-bold text-white mb-3 sm:mb-4">
          Choose Your Plan
        </h2>
        <p className="text-gray-400 text-base sm:text-lg max-w-2xl mx-auto px-4">
          Select the perfect plan for your business. All plans include a 14-day money-back guarantee.
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8 px-4 items-stretch">
        {pricingPlans.map((plan: PricingPlan) => {
          const isSelected = selectedPlan === plan.id;
          const isHovered = hoveredPlan === plan.id;

          return (
            <div
              key={plan.id}
              className={`
                relative rounded-2xl border-2 transition-all duration-300 flex flex-col h-full
                ${
                  isSelected
                    ? 'border-orange-600 bg-stone-800 shadow-xl shadow-orange-600/20 scale-105'
                    : isHovered
                    ? 'border-orange-500 bg-stone-800/80 scale-102'
                    : 'border-stone-700 bg-stone-800/60'
                }
                ${plan.popular ? 'lg:scale-105 lg:z-10' : ''}
              `}
              onMouseEnter={() => { setHoveredPlan(plan.id); }}
              onMouseLeave={() => { setHoveredPlan(null); }}
            >
              {plan.popular && (
                <div className="absolute -top-4 left-1/2 transform -translate-x-1/2 z-20">
                  <div className="bg-gradient-to-r from-orange-600 to-orange-500 text-white text-xs sm:text-sm font-bold px-4 py-1.5 rounded-full flex items-center gap-1.5 shadow-lg">
                    <Sparkles className="w-3 h-3 sm:w-4 sm:h-4" />
                    MOST POPULAR
                  </div>
                </div>
              )}

              <div className="p-6 sm:p-8 flex flex-col h-full">
                <h3 className="text-xl sm:text-2xl font-bold text-white mb-2">
                  {plan.name}
                </h3>

                <div className="mb-6">
                  <div className="flex items-baseline gap-1">
                    <span className="text-3xl sm:text-4xl lg:text-5xl font-bold text-white">
                      ${plan.price}
                    </span>
                    <span className="text-gray-400 text-base sm:text-lg">/{plan.interval}</span>
                  </div>
                </div>

                <ul className="space-y-3 sm:space-y-4 mb-6 sm:mb-8 flex-grow">
                  {plan.features.map((feature, index) => (
                    <li key={index} className="flex items-start gap-3">
                      <Check className="w-5 h-5 text-orange-600 flex-shrink-0 mt-0.5" />
                      <span className="text-gray-300 text-sm sm:text-base">{feature}</span>
                    </li>
                  ))}
                </ul>

                <button
                  type="button"
                  onClick={() => { onSelectPlan(plan.id, plan.price * 100); }}
                  className={`
                    w-full py-3 sm:py-3.5 px-6 rounded-lg font-semibold text-base sm:text-lg
                    transition-all duration-200
                    focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-stone-800
                    ${
                      isSelected
                        ? 'bg-orange-600 text-white hover:bg-orange-700 focus:ring-orange-500'
                        : 'bg-stone-700 text-white hover:bg-stone-600 focus:ring-stone-500'
                    }
                  `}
                >
                  {isSelected ? 'Selected' : 'Select Plan'}
                </button>
              </div>
            </div>
          );
        })}
      </div>

      <div className="mt-8 text-center px-4">
        <div className="flex flex-wrap justify-center items-center gap-4 sm:gap-8 text-sm text-gray-400">
          <div className="flex items-center gap-2">
            <Check className="w-4 h-4 text-orange-600" />
            <span>14-day money-back guarantee</span>
          </div>
          <div className="flex items-center gap-2">
            <Check className="w-4 h-4 text-orange-600" />
            <span>Cancel anytime</span>
          </div>
          <div className="flex items-center gap-2">
            <Check className="w-4 h-4 text-orange-600" />
            <span>No setup fees</span>
          </div>
        </div>
        
        {/* Trust badges */}
        <div className="flex flex-wrap justify-center items-center gap-3 sm:gap-6 text-xs text-gray-500 mt-4">
          <span>Powered by Stripe</span>
          <span className="hidden sm:inline">•</span>
          <span>SSL Secure</span>
          <span className="hidden sm:inline">•</span>
          <span>PCI Compliant</span>
        </div>
      </div>
    </div>
  );
};



============================
FILE: frontend\src\features\tenantOnboarding\components\ProofOfWorkSection.tsx
============================
import React from 'react';
import { Camera, X } from 'lucide-react';

interface ProofOfWorkSectionProps {
  uploadedFiles: File[];
  handleFileUpload: (event: React.ChangeEvent<HTMLInputElement>) => void;
  removeFile: (index: number) => void;
}

const ProofOfWorkSection: React.FC<ProofOfWorkSectionProps> = ({
  uploadedFiles,
  handleFileUpload,
  removeFile
}) => {
  return (
    <div className="bg-stone-800 border border-stone-700 rounded-lg">
      <div className="p-6 border-b border-stone-700">
        <h2 className="text-white text-lg font-semibold flex items-center">
          <Camera className="w-5 h-5 mr-2 text-orange-400" />
          Proof of Work
        </h2>
        <p className="text-gray-400 text-sm mt-1">
          Upload photos of your best work to showcase your skills
        </p>
      </div>
      <div className="p-6 space-y-6">
        <div>
          <div className="block text-gray-300 text-sm font-medium mb-2">
            Upload Work Photos (2-3 images) <span className="text-red-400">*</span>
          </div>
          <div className="border-2 border-dashed border-stone-600 rounded-lg p-6 text-center hover:border-stone-500 transition-colors">
            <input
              type="file"
              multiple
              accept="image/*"
              onChange={handleFileUpload}
              className="hidden"
              id="file-upload"
              name="work_photos"
            />
            <label htmlFor="file-upload" className="cursor-pointer">
              <Camera className="w-8 h-8 text-gray-400 mx-auto mb-2" />
              <p className="text-gray-300 font-medium">Click to upload or drag and drop</p>
              <p className="text-gray-400 text-sm">PNG, JPG up to 3 images</p>
              <p className="text-gray-400 text-xs mt-1">Show us your best work!</p>
            </label>
          </div>
          
          {uploadedFiles.length > 0 && (
            <div className="mt-4 space-y-2">
              <p className="text-gray-300 text-sm font-medium">Uploaded Files:</p>
              {uploadedFiles.map((file, index) => (
                <div key={index} className="flex items-center justify-between bg-stone-700 p-3 rounded-lg">
                  <div className="flex items-center space-x-3">
                    <Camera className="w-4 h-4 text-gray-400" />
                    <span className="text-gray-300 text-sm">{file.name}</span>
                  </div>
                  <button
                    type="button"
                    onClick={() => { removeFile(index); }}
                    className="text-red-400 hover:text-red-300 p-1 rounded hover:bg-stone-600 transition-colors"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
              ))}
            </div>
          )}
          
          <div className="bg-stone-700 p-4 rounded-lg mt-4">
            <p className="text-gray-300 text-sm">
              <span className="font-medium">Tip:</span> Choose 2-3 high-quality photos that best showcase your 
              detailing skills and finished results. Good lighting and clear &quot;before/after&quot; shots work great!
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProofOfWorkSection;


============================
FILE: frontend\src\features\tenantOnboarding\components\SocialMediaSection.tsx
============================
import React, { useState } from 'react';
import { Share2 } from 'lucide-react';

import type { AffiliateApplication } from '../types';
import GoogleBusinessProfileModal from './GoogleBusinessProfileModal';

interface SocialMediaSectionProps {
  formData: AffiliateApplication;
  handleInputChange: (field: string, value: string) => void;
}

const SocialMediaSection: React.FC<SocialMediaSectionProps> = ({
  formData,
  handleInputChange
}) => {
  const [isGoogleProfileModalOpen, setIsGoogleProfileModalOpen] = useState(false);

  return (
    <div className="bg-stone-800 border border-stone-700 rounded-lg">
      <div className="p-6 border-b border-stone-700">
        <h2 className="text-white text-lg font-semibold flex items-center">
          <Share2 className="w-5 h-5 mr-2 text-orange-400" />
          Social Media & Portfolio
        </h2>
        <p className="text-gray-400 text-sm mt-1">
          Share your online presence and portfolio links
        </p>
      </div>
      <div className="p-6 space-y-6">
        <div className="space-y-4">
          <div>
            <label htmlFor="website_url" className="block text-gray-300 text-sm font-medium mb-2">
              Website
            </label>
            <input 
              id="website_url"
              name="website_url"
              type="url"
              value={formData.website_url}
              onChange={(e) => { handleInputChange('website_url', e.target.value); }}
              className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
              placeholder="https://yourwebsite.com"
              autoComplete="url"
            />
          </div>
          
          <div>
            <label htmlFor="gbp_url" className="block text-gray-300 text-sm font-medium mb-2">
              Google Business Profile URL
              {formData.legal_name && (
                <button
                  onClick={() => { setIsGoogleProfileModalOpen(true); }}
                  className="inline-flex items-center ml-2 text-blue-400 hover:text-blue-300 text-xs font-medium transition-colors"
                  title="Find your Google Business Profile"
                >
                  🔍 Find my profile
                </button>
              )}
            </label>
            <input 
              id="gbp_url"
              name="gbp_url"
              type="url"
              value={formData.gbp_url}
              onChange={(e) => { handleInputChange('gbp_url', e.target.value); }}
              className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
              placeholder="https://business.google.com/..."
              autoComplete="url"
            />
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label htmlFor="facebook_url" className="block text-gray-300 text-sm font-medium mb-2">Facebook</label>
              <input 
                id="facebook_url"
                name="facebook_url"
                type="url"
                value={formData.facebook_url}
                onChange={(e) => { handleInputChange('facebook_url', e.target.value); }}
                className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
                placeholder="https://facebook.com/..."
                autoComplete="url"
              />
            </div>
            <div>
              <label htmlFor="instagram_url" className="block text-gray-300 text-sm font-medium mb-2">Instagram</label>
              <input 
                id="instagram_url"
                name="instagram_url"
                type="url"
                value={formData.instagram_url}
                onChange={(e) => { handleInputChange('instagram_url', e.target.value); }}
                className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
                placeholder="https://instagram.com/..."
                autoComplete="url"
              />
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label htmlFor="youtube_url" className="block text-gray-300 text-sm font-medium mb-2">YouTube</label>
              <input 
                id="youtube_url"
                name="youtube_url"
                type="url"
                value={formData.youtube_url || ''}
                onChange={(e) => { handleInputChange('youtube_url', e.target.value); }}
                className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
                placeholder="https://youtube.com/@..."
                autoComplete="url"
              />
            </div>
            <div>
              <label htmlFor="tiktok_url" className="block text-gray-300 text-sm font-medium mb-2">TikTok</label>
              <input 
                id="tiktok_url"
                name="tiktok_url"
                type="url"
                value={formData.tiktok_url}
                onChange={(e) => { handleInputChange('tiktok_url', e.target.value); }}
                className="w-full bg-stone-700 border border-stone-600 text-white placeholder:text-gray-400 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
                placeholder="https://tiktok.com/@..."
                autoComplete="url"
              />
            </div>
          </div>
          
          <div className="bg-stone-700 p-4 rounded-lg">
            <p className="text-gray-300 text-sm">
              <span className="font-medium">Tip:</span> You don&apos;t need to fill in all fields. 
              Just share the platforms where you&apos;re most active and showcase your best work.
            </p>
          </div>
        </div>
      </div>

      {/* Google Business Profile Modal */}
      <GoogleBusinessProfileModal
        isOpen={isGoogleProfileModalOpen}
        onClose={() => { setIsGoogleProfileModalOpen(false); }}
        businessName={formData.legal_name}
        onUrlFound={(url) => {
          handleInputChange('gbp_url', url);
          setIsGoogleProfileModalOpen(false);
        }}
      />
    </div>
  );
};

export default SocialMediaSection;


============================
FILE: frontend\src\features\tenantOnboarding\components\StepProgress.tsx
============================
import React from 'react';
import { Check } from 'lucide-react';

interface StepProgressProps {
  steps: Array<{ id: number; label: string }>;
  currentStep: number;
}

export const StepProgress: React.FC<StepProgressProps> = ({ steps, currentStep }) => {
  return (
    <div className="w-full py-6 sm:py-8">
      <div className="flex justify-center items-center px-4">
        {steps.map((step, index) => {
          const isActive = step.id === currentStep;
          const isCompleted = step.id < currentStep;
          const isLast = index === steps.length - 1;

          return (
            <React.Fragment key={step.id}>
              <div className="flex flex-col items-center">
                <div
                  className={`
                    flex items-center justify-center w-8 h-8 sm:w-10 sm:h-10 rounded-full border-2
                    transition-all duration-300 relative
                    ${
                      isCompleted
                        ? 'bg-orange-600 border-orange-600 text-white scale-100'
                        : isActive
                        ? 'bg-orange-600 border-orange-600 text-white scale-110 shadow-lg shadow-orange-600/50'
                        : 'bg-stone-800 border-stone-600 text-gray-400'
                    }
                  `}
                >
                  {isCompleted ? (
                    <Check className="w-4 h-4 sm:w-5 sm:h-5" />
                  ) : (
                    <span className="text-sm sm:text-base font-semibold">{step.id + 1}</span>
                  )}
                </div>
                <div
                  className={`
                    text-xs sm:text-sm font-medium mt-2 text-center transition-colors
                    ${isActive ? 'text-orange-600' : isCompleted ? 'text-gray-300' : 'text-gray-500'}
                  `}
                >
                  {step.label}
                </div>
              </div>

              {!isLast && (
                <div
                  className={`
                    h-0.5 w-12 sm:w-20 lg:w-24 mx-2 sm:mx-4 mb-6 transition-all duration-500
                    ${isCompleted ? 'bg-orange-600' : 'bg-stone-700'}
                  `}
                />
              )}
            </React.Fragment>
          );
        })}
      </div>
    </div>
  );
};


============================
FILE: frontend\src\features\tenantOnboarding\components\SubmitSection.tsx
============================
import React from 'react';
import { Send } from 'lucide-react';

import { Button } from '@/shared/ui';

import type { AffiliateApplication } from '../types';

interface SubmitSectionProps {
  isSubmitting: boolean;
  submitError: string | null;
  formData: AffiliateApplication;
  onSubmit: (e: React.FormEvent) => void;
  emergencyCleanup?: () => void;
}

const SubmitSection: React.FC<SubmitSectionProps> = ({
  isSubmitting,
  submitError,
  emergencyCleanup
}) => {
  return (
    <div className="bg-stone-800 border border-stone-700 rounded-lg p-6">
      <div className="flex flex-col sm:flex-row gap-4">
        <Button
          type="submit"
          variant="primary"
          size="lg"
          className="w-full bg-orange-500 hover:bg-orange-600 disabled:bg-orange-700 font-semibold py-3 px-6 rounded-lg"
          loading={isSubmitting}
          disabled={isSubmitting}
          leftIcon={<Send className="w-4 h-4" />}
        >
          Submit Application
        </Button>
      </div>

      {submitError && (
        <div className="mt-4 bg-red-900/20 border border-red-500 rounded-lg p-4">
          <p className="text-red-400 text-sm">{submitError}</p>
        </div>
      )}

      {emergencyCleanup && (
        <div className="mt-4 pt-4 border-t border-stone-600">
          <Button
            type="button"
            onClick={emergencyCleanup}
            variant="ghost"
            size="sm"
            className="text-xs text-gray-400 hover:text-red-400"
            title="Clear all form data and localStorage (use if experiencing issues)"
          >
            Clear All Data (Emergency)
          </Button>
        </div>
      )}
    </div>
  );
};

export default SubmitSection;


============================
FILE: frontend\src\features\tenantOnboarding\components\SuccessPage.tsx
============================
import React, { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { CheckCircle, Settings,Sparkles } from 'lucide-react';

import { useAuth } from '@/shared/hooks';
import { Button } from '@/shared/ui';


const SuccessPage: React.FC = () => {
  const navigate = useNavigate();
  const { login } = useAuth();
  const [tenantSlug, setTenantSlug] = useState<string | null>(null);
  const [websiteUrl, setWebsiteUrl] = useState<string | null>(null);
  const [dashboardUrl, setDashboardUrl] = useState<string | null>(null);
  const [isLoggingIn, setIsLoggingIn] = useState(false);

  useEffect(() => {
    // Retrieve the tenant info from session storage
    const slug = sessionStorage.getItem('newTenantSlug');
    const url = sessionStorage.getItem('newTenantWebsiteUrl');
    const dashboard = sessionStorage.getItem('newTenantDashboardUrl');
    
    if (slug) {
      setTenantSlug(slug);
      setWebsiteUrl(url || `/${slug}`);
      setDashboardUrl(dashboard || `/${slug}/dashboard`);
      
      // Clean up session storage after retrieval
      sessionStorage.removeItem('newTenantSlug');
      sessionStorage.removeItem('newTenantWebsiteUrl');
      sessionStorage.removeItem('newTenantDashboardUrl');
    }
  }, []);


  const handleGoToDashboard = () => {
    // Simply navigate to dashboard - user will need to login with their email-set password
    if (dashboardUrl) {
      void navigate(dashboardUrl);
    }
  };

  return (
    <>
      <div className="min-h-screen bg-stone-900 text-white flex items-center justify-center p-4 pb-32">
        <div className="bg-stone-800 border border-stone-700 rounded-2xl max-w-2xl w-full p-6 sm:p-8">
        <div className="text-center">
          <div className="w-20 h-20 bg-gradient-to-br from-green-500 to-green-600 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg shadow-green-600/50">
            <CheckCircle className="w-10 h-10 text-white" />
          </div>
          <h1 className="text-3xl sm:text-4xl text-white font-bold mb-3">
            Welcome to ThatSmartSite! 🎉
          </h1>
          <p className="text-gray-300 text-lg mb-8">
            Your website has been created and is ready to view!
          </p>
        </div>
        
        {tenantSlug && websiteUrl && (
            <div className="bg-gradient-to-br from-green-900/30 to-green-800/20 border border-green-600/50 rounded-lg p-6 mb-6">
            <h3 className="font-semibold text-white text-lg mb-3 text-center">
              🎉 Your Website is Ready!
            </h3>
            <p className="text-gray-300 text-sm mb-4 text-center">
              Your website is live at: <span className="text-green-400 font-mono text-xs">{websiteUrl}</span>
            </p>
            <p className="text-gray-300 text-sm mb-6 text-center">
              Now let&apos;s customize it to make it perfect for your business!
            </p>
            <Button 
              onClick={handleGoToDashboard}
              variant="primary"
              size="lg"
              className="w-full bg-green-600 hover:bg-green-700 flex items-center justify-center gap-2"
            >
              <Settings className="w-5 h-5" />
              Go to Dashboard
            </Button>
          </div>
        )}

        <div className="bg-gradient-to-br from-orange-900/30 to-orange-800/20 border border-orange-600/50 rounded-lg p-6 mb-6">
          <div className="flex items-start gap-3 mb-4">
            <Sparkles className="w-6 h-6 text-orange-400 flex-shrink-0 mt-1" />
            <div>
              <h3 className="font-semibold text-white text-lg mb-2">What&apos;s Next?</h3>
              <ul className="space-y-2 text-gray-300 text-sm">
                <li className="flex items-start">
                  <span className="text-orange-400 mr-2">•</span>
                  <span>Customize your site content, photos, and business information</span>
                </li>
                <li className="flex items-start">
                  <span className="text-orange-400 mr-2">•</span>
                  <span>Add your services, pricing, and contact information</span>
                </li>
                <li className="flex items-start">
                  <span className="text-orange-400 mr-2">•</span>
                  <span>You&apos;ll receive a welcome email with instructions to set your password</span>
                </li>
                <li className="flex items-start">
                  <span className="text-orange-400 mr-2">•</span>
                  <span>Our team will reach out to help you get started</span>
                </li>
              </ul>
            </div>
          </div>
        </div>

        <div className="bg-stone-700/50 border border-stone-600 rounded-lg p-4 mb-6">
          <p className="text-gray-300 text-sm text-center">
            Check your email inbox for a confirmation message from{' '}
            <span className="text-orange-400 font-semibold">hello@thatsmartsite.com</span>
          </p>
        </div>

        <div className="flex flex-col sm:flex-row gap-3 justify-center">
          <Link to="/" className="w-full sm:w-auto">
            <Button 
              variant="outline"
              size="lg"
              className="w-full border border-stone-600 text-gray-300 hover:bg-stone-700 font-semibold"
            >
              Back to Home
            </Button>
          </Link>
          <Button 
            onClick={() => { void navigate('/contact'); }}
            variant="primary"
            size="lg"
            className="w-full sm:w-auto bg-orange-600 hover:bg-orange-700"
          >
            Contact Support
          </Button>
        </div>

        <div className="mt-8 pt-6 border-t border-stone-700 text-center">
          <p className="text-xs text-gray-500">
            Need help? Call us at <span className="text-orange-400">(555) 123-4567</span> or email{' '}
            <span className="text-orange-400">support@thatsmartsite.com</span>
          </p>
        </div>
        </div>
      </div>

      {/* PWA Add to Home Screen moved to tenant dashboard */}
    </>
  );
};

export default SuccessPage;


============================
FILE: frontend\src\features\tenantOnboarding\components\TenantApplicationPage.tsx
============================
import React, { useEffect, useState } from 'react';
import { useLocation } from 'react-router-dom';
import { Elements } from '@stripe/react-stripe-js';
import { loadStripe } from '@stripe/stripe-js';
import { ChevronLeft } from 'lucide-react';

import { config } from '@/shared/env';
import { useBrowserTab } from '@/shared/hooks';
import { Button } from '@/shared/ui';
import { type IndustrySlug,loadDefaults } from '@/shared/utils/loadDefaults';

import { useAutoSave } from '../hooks/useAutoSave';
import {
  type PreviewState,
  type TenantApplication,
  tenantApplicationDefaultValues,
} from '../types';
import {
  businessInfoSchema,
  personalInfoSchema,
  planSelectionSchema,
} from '../utils/validation';
import {
  ApplicationHeader,
  BusinessInformationSection,
  PersonalInformationSection,
  PlanSelectionSection,
  StepProgress,
  SuccessPage,
} from './index';
import PaymentSection from './PaymentSection';

// Initialize Stripe
const stripePromise = loadStripe(config.stripePublishableKey);

const STEPS = [
  { id: 0, label: 'Plan' },
  { id: 1, label: 'Personal' },
  { id: 2, label: 'Business' },
  { id: 3, label: 'Payment' },
];

const TenantApplicationPage: React.FC = () => {
  const location = useLocation();
  const previewData = location.state as PreviewState | null;

  const [formData, setFormData] = useState<TenantApplication>(tenantApplicationDefaultValues);
  const [currentStep, setCurrentStep] = useState(0);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);

  // Set browser tab title and favicon for onboarding page
  // Automatically uses platform logo (/shared/icons/logo.png) and default title
  useBrowserTab({
    useBusinessName: false, // Platform page, not tenant-specific
  });

  const { loadFromLocalStorage, clearSavedData } = useAutoSave({
    formData,
    enabled: currentStep > 0,
  });

  // Load saved draft or preview data on mount
  useEffect(() => {
    const loadSavedData = () => {
      const localData = loadFromLocalStorage();

      if (localData) {
        // Automatically restore saved draft without confirmation popup
        setFormData(localData);
        setCurrentStep(localData.step);
        return;
      }

      // Pre-fill from preview data if available
      if (previewData?.fromPreview) {
        setFormData((prev) => ({
          ...prev,
          businessName: previewData.businessName || prev.businessName,
          businessPhone: previewData.phone || prev.businessPhone,
          businessAddress: {
            ...prev.businessAddress,
            city: previewData.city || prev.businessAddress.city,
            state: previewData.state || prev.businessAddress.state,
          },
          industry: previewData.industry,
        }));
      }
    };

    loadSavedData();
  }, [loadFromLocalStorage, previewData, clearSavedData]);

  // Warn user before leaving if form is in progress
  useEffect(() => {
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      if (currentStep > 0 && currentStep < STEPS.length - 1) {
        e.preventDefault();
        // Modern browsers will show a generic confirmation dialog
        return '';
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => { window.removeEventListener('beforeunload', handleBeforeUnload); };
  }, [currentStep]);

  const handleFieldChange = (field: string, value: unknown) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
    setErrors((prev) => ({ ...prev, [field]: '' }));
  };

  const handleAddressChange = (
    addressType: 'businessAddress' | 'billingAddress',
    field: string,
    value: string
  ) => {
    setFormData((prev) => ({
      ...prev,
      [addressType]: { ...prev[addressType], [field]: value },
    }));
  };

  const handlePlanSelect = (planId: 'starter' | 'pro' | 'enterprise', price: number) => {
    setFormData((prev) => ({
      ...prev,
      selectedPlan: planId,
      planPrice: price,
    }));
  };

  const handleToggleSameAddress = (value: boolean) => {
    setFormData((prev) => ({
      ...prev,
      useSameAddress: value,
      billingAddress: value ? prev.businessAddress : prev.billingAddress,
    }));
  };

  const validateStep = async (step: number): Promise<boolean> => {
    try {
      switch (step) {
        case 0:
          planSelectionSchema.parse({
            selectedPlan: formData.selectedPlan,
            planPrice: formData.planPrice,
          });
          return true;

        case 1: {
          // First, validate the schema
          personalInfoSchema.parse({
            firstName: formData.firstName,
            lastName: formData.lastName,
            personalPhone: formData.personalPhone,
            personalEmail: formData.personalEmail,
          });

          // Then check if email already exists
          try {
            // Debug API URL configuration
            // console.log('Check-email API URL config:', {
            //   apiUrl: config.apiUrl,
            //   apiBaseUrl: config.apiBaseUrl,
            //   isDevelopment: config.isDevelopment,
            //   fullUrl: `${config.apiUrl || ''}/api/auth/check-email?email=${encodeURIComponent(formData.personalEmail)}`
            // });
            
            // eslint-disable-next-line no-restricted-globals, no-restricted-syntax -- Isolated onboarding check, API client refactor planned
            const response = await fetch(`${config.apiUrl || ''}/api/auth/check-email?email=${encodeURIComponent(formData.personalEmail)}`);
            
            if (!response.ok) {
              throw new Error(`Email check failed: ${response.status} ${response.statusText}`);
            }
            
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Response typing improvement planned
            const result = await response.json();
            
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- Response typing improvement planned
            if (result.exists) {
              setErrors({ personalEmail: 'An account with this email already exists' });
              return false;
            }
          } catch (emailCheckError) {
            console.error('Error checking email:', emailCheckError);
            // Show a warning but allow them to proceed
            setErrors({ personalEmail: 'Unable to verify email availability. You can still proceed - duplicates will be caught during signup.' });
            // Don't block the user, just warn them
          }
          
          return true;
        }

        case 2:
          businessInfoSchema.parse({
            businessName: formData.businessName,
            businessPhone: formData.businessPhone,
            businessEmail: formData.businessEmail,
            businessAddress: formData.businessAddress,
            industry: formData.industry,
          });
          return true;

        case 3:
          return true;

        default:
          return false;
      }
    } catch (error: unknown) {
      const newErrors: Record<string, string> = {};
      if (error && typeof error === 'object' && 'errors' in error) {
        const zodError = error as { errors: Array<{ path: string[]; message: string }> };
        zodError.errors.forEach((err) => {
          const field = err.path.join('.');
          newErrors[field] = err.message;
        });
      }
      setErrors(newErrors);
      return false;
    }
  };

  const goToNextStep = async () => {
    const isValid = await validateStep(currentStep);
    if (isValid) {
      const nextStep = currentStep + 1;
      setFormData((prev) => ({ ...prev, step: nextStep }));
      setCurrentStep(nextStep);
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  };

  const goToPreviousStep = () => {
    if (currentStep > 0) {
      const prevStep = currentStep - 1;
      setFormData((prev) => ({ ...prev, step: prevStep }));
      setCurrentStep(prevStep);
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  };

  const handlePaymentSuccess = (data: { slug: string; websiteUrl: string; dashboardUrl: string }) => {
    // Store the new tenant information for the success page
    sessionStorage.setItem('newTenantSlug', data.slug);
    sessionStorage.setItem('newTenantWebsiteUrl', data.websiteUrl);
    sessionStorage.setItem('newTenantDashboardUrl', data.dashboardUrl);

    clearSavedData();
    setIsSuccess(true);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // For payment step, the payment processing is handled by PaymentSection
    if (currentStep === 3) {
      return; // Payment is handled by the payment component
    }

    const isValid = await validateStep(currentStep);
    if (!isValid) {
      return;
    }

    setIsSubmitting(true);

    try {
      // Load industry-specific defaults for non-payment steps
      if (currentStep === 2) { // Business info step
        const industry = (formData.industry || 'mobile-detailing') as IndustrySlug;
        const defaults = await loadDefaults(industry);
        setFormData(prev => ({ ...prev, defaults }));
      }

      // Move to next step
      const nextStep = currentStep + 1;
      setFormData((prev) => ({ ...prev, step: nextStep }));
      setCurrentStep(nextStep);
      window.scrollTo({ top: 0, behavior: 'smooth' });

    } catch (error) {
      console.error('Step validation error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to proceed. Please try again.';
      alert(errorMessage);
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isSuccess) {
    return <SuccessPage />;
  }

  return (
    <div className="min-h-screen bg-stone-900 text-white">
      <ApplicationHeader />

      <div className="pt-16 sm:pt-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <StepProgress steps={STEPS} currentStep={currentStep} />

          <form onSubmit={(e) => { void handleSubmit(e); }} className="pb-6">
            <div className="min-h-[400px] flex items-center justify-center">
              {currentStep === 0 && (
                <PlanSelectionSection
                  selectedPlan={formData.selectedPlan}
                  onSelectPlan={handlePlanSelect}
                />
              )}

              {currentStep === 1 && (
                <PersonalInformationSection
                  formData={formData}
                  handleInputChange={handleFieldChange}
                  errors={errors}
                />
              )}

              {currentStep === 2 && (
                <BusinessInformationSection
                  formData={formData}
                  handleInputChange={handleFieldChange}
                  handleAddressChange={(field, value) => {
                    handleAddressChange('businessAddress', field, value);
                  }}
                />
              )}

              {currentStep === 3 && (
                <Elements stripe={stripePromise}>
                  <PaymentSection
                    formData={formData}
                    businessAddress={formData.businessAddress}
                    onAddressChange={(field, value) => {
                      handleAddressChange('billingAddress', field, value);
                    }}
                    onToggleSameAddress={handleToggleSameAddress}
                    onPaymentSuccess={handlePaymentSuccess}
                    errors={errors}
                    setErrors={setErrors}
                  />
                </Elements>
              )}
            </div>

            <div className="max-w-2xl mx-auto mt-8 px-4">
              <div className="flex flex-col-reverse sm:flex-row justify-center gap-3 sm:gap-4">
                {currentStep > 0 && (
                  <Button
                    type="button"
                    onClick={goToPreviousStep}
                    variant="outline"
                    size="lg"
                    className="flex items-center justify-center gap-2"
                  >
                    <ChevronLeft className="w-4 h-4" />
                    Back
                  </Button>
                )}

                {currentStep < STEPS.length - 1 ? (
                  <Button
                    type="button"
                    onClick={() => { void goToNextStep(); }}
                    variant="primary"
                    size="lg"
                    className={currentStep === 0 ? 'w-full' : ''}
                    disabled={currentStep === 0 && !formData.selectedPlan}
                  >
                    {currentStep === 0 ? 'Get Started' : 'Continue'}
                  </Button>
                ) : currentStep !== 3 ? (
                  <Button
                    type="submit"
                    variant="primary"
                    size="lg"
                    disabled={isSubmitting}
                    className="min-w-[200px]"
                  >
                    {isSubmitting ? 'Processing...' : 'Complete Purchase'}
                  </Button>
                ) : null}
              </div>

              {currentStep > 0 && (
                <p className="text-center text-xs text-gray-500 mt-4">
                  Your progress is automatically saved
                </p>
              )}
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default TenantApplicationPage;


============================
FILE: frontend\src\features\tenantOnboarding\components\TenantPrivacyModal.tsx
============================
import React from 'react';
import { X } from 'lucide-react';

import { Button } from '@/shared/ui';

interface TenantPrivacyModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const TenantPrivacyModal: React.FC<TenantPrivacyModalProps> = ({ isOpen, onClose }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-stone-800 rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="sticky top-0 bg-stone-800 border-b border-stone-700 p-6 flex justify-between items-center">
          <h2 className="text-white text-2xl font-bold">Tenant Privacy Policy</h2>
          <Button
            onClick={onClose}
            variant="ghost"
            size="sm"
            className="text-gray-400 hover:text-white p-1"
          >
            <X className="w-6 h-6" />
          </Button>
        </div>
        
        <div className="p-6 text-gray-300 space-y-6">
          <div className="text-center mb-6">
            <p className="text-sm text-gray-400">Effective Date: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</p>
          </div>
          
          <div className="space-y-4">
            <p className="leading-relaxed">
              We (&quot;we&quot;, &quot;our&quot;, &quot;the platform&quot;) respect your privacy. This Privacy Policy explains how we collect, use, and protect your personal information as a tenant.
            </p>
            
            <div>
              <h3 className="text-white text-lg font-semibold mb-2">1. Information We Collect</h3>
              <ul className="list-disc list-inside space-y-1 text-sm">
                <li>From your application: business name, contact info, service areas, licenses, proof of work, and social links.</li>
                <li>From your use of the platform: services listed, prices, availability, and customer communications.</li>
                <li>From transactions: payout details, Stripe account info, and invoices.</li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-white text-lg font-semibold mb-2">2. How We Use Your Information</h3>
              <ul className="list-disc list-inside space-y-1 text-sm">
                <li>To review and approve tenant applications.</li>
                <li>To publish your business profile and services on our platform.</li>
                <li>To process transactions, fees, and payouts.</li>
                <li>To communicate with you regarding account updates, payments, or issues.</li>
                <li>To comply with legal obligations (e.g., tax reporting, fraud prevention).</li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-white text-lg font-semibold mb-2">3. Sharing of Information</h3>
              <ul className="list-disc list-inside space-y-1 text-sm">
                <li>With customers: business name, logo, contact info, services, reviews, and availability.</li>
                <li>With service providers: payment processors (Stripe), cloud hosting, and analytics tools.</li>
                <li>For legal reasons: if required by law or to enforce our Terms.</li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-white text-lg font-semibold mb-2">4. Data Security</h3>
              <ul className="list-disc list-inside space-y-1 text-sm">
                <li>We use encryption and secure access controls to protect data.</li>
                <li>No method of storage or transmission is 100% secure; use of the platform is at your own risk.</li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-white text-lg font-semibold mb-2">5. Your Choices</h3>
              <ul className="list-disc list-inside space-y-1 text-sm">
                <li>You may update your business details in the dashboard at any time.</li>
                <li>You may request deletion of your account, subject to legal/financial record retention requirements.</li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-lg font-semibold mb-2 text-white">6. Data Retention</h3>
              <ul className="list-disc list-inside space-y-1 text-sm">
                <li>Application data is retained while your account is active.</li>
                <li>Transaction records are retained for at least 7 years (for accounting and tax compliance).</li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-white text-lg font-semibold mb-2">7. Changes to this Policy</h3>
              <p className="text-sm">
                We may update this Privacy Policy. We will notify you via email or dashboard notice. Continued use of the platform constitutes acceptance.
              </p>
            </div>
          </div>
          
          <div className="text-center pt-6">
            <Button
              onClick={onClose}
              variant="primary"
              size="md"
              className="px-6 py-2 bg-orange-500 hover:bg-orange-600 rounded-lg"
            >
              I Understand
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TenantPrivacyModal;




============================
FILE: frontend\src\features\tenantOnboarding\components\TenantTermsModal.tsx
============================
import React from 'react';
import { X } from 'lucide-react';

import { Button } from '@/shared/ui';

interface TenantTermsModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const TenantTermsModal: React.FC<TenantTermsModalProps> = ({ isOpen, onClose }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-stone-800 rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="sticky top-0 bg-stone-800 border-b border-stone-700 p-6 flex justify-between items-center">
          <h2 className="text-white text-2xl font-bold">Tenant Terms of Service</h2>
          <Button
            onClick={onClose}
            variant="ghost"
            size="sm"
            className="text-gray-400 hover:text-white p-1"
          >
            <X className="w-6 h-6" />
          </Button>
        </div>
        
        <div className="p-6 text-gray-300 space-y-4">
          <div className="text-center mb-4">
            <p className="text-sm text-gray-400">Effective Date: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</p>
          </div>
          
          <div className="space-y-3">
            <p className="leading-relaxed">
              Welcome to our platform. By applying to become a tenant and using our services, you agree to these Terms of Service (&ldquo;Terms&rdquo;). Please read them carefully.
            </p>
            
            <div>
              <h3 className="text-white text-lg font-semibold mb-1">1. Eligibility</h3>
              <ul className="list-disc list-inside space-y-1 text-sm">
                <li>You must be at least 18 years old and legally able to enter into contracts.</li>
                <li>You must provide accurate information in your application and maintain it up to date.</li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-white text-lg font-semibold mb-1">2. Services Provided</h3>
              <ul className="list-disc list-inside space-y-1 text-sm">
                <li>We provide a platform (website and app) that allows tenants to list, market, and sell mobile detailing services to customers.</li>
                <li>We are not the service provider; you remain solely responsible for delivering the services you advertise and accept through the platform.</li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-white text-lg font-semibold mb-1">3. Tenant Responsibilities</h3>
              <ul className="list-disc list-inside space-y-1 text-sm">
                <li>Maintain valid business licenses, insurance, and any required permits in your service area.</li>
                <li>Deliver services in a professional, lawful, and safe manner.</li>
                <li>Keep your availability, pricing, and business information current in the platform.</li>
                <li>You are responsible for your own employees, contractors, tools, products, and vehicles.</li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-white text-lg font-semibold mb-1">4. Payments and Fees</h3>
              <ul className="list-disc list-inside space-y-1 text-sm">
                <li>All transactions are processed through our payment processor (currently Stripe).</li>
                <li>Standard fee: 10% of each transaction (3% payment processing + 7% platform fee).</li>
                <li>Payouts are issued to your designated bank account, less applicable fees.</li>
                <li>You are responsible for taxes associated with your earnings.</li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-white text-lg font-semibold mb-1">5. Termination and Suspension</h3>
              <p className="text-sm mb-1">We may suspend or terminate your account if you:</p>
              <ul className="list-disc list-inside space-y-1 text-sm ml-4">
                <li>Provide false information,</li>
                <li>Engage in fraudulent or harmful activity,</li>
                <li>Fail to deliver services to customers as agreed.</li>
              </ul>
              <p className="text-sm mt-1">You may request account closure at any time by contacting support.</p>
            </div>
            
            <div>
              <h3 className="text-white text-lg font-semibold mb-1">6. Limitation of Liability</h3>
              <ul className="list-disc list-inside space-y-1 text-sm">
                <li>We are not liable for your actions, omissions, or damages arising from your detailing services.</li>
                <li>Our liability is limited to the amount of platform fees you paid to us in the past 6 months.</li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-white text-lg font-semibold mb-1">7. Changes to Terms</h3>
              <p className="text-sm">
                We may update these Terms from time to time. We will notify tenants by email or dashboard notice. Continued use of the platform constitutes acceptance.
              </p>
            </div>
          </div>
          
          <div className="text-center pt-4">
            <Button
              onClick={onClose}
              variant="primary"
              size="md"
              className="px-6 py-2 bg-orange-500 hover:bg-orange-600 rounded-lg"
            >
              I Understand
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TenantTermsModal;




============================
FILE: frontend\src\features\tenantOnboarding\hooks\index.ts
============================
// Re-export onboarding hooks
export { useAutoSave } from './useAutoSave';
export { useFileUpload } from './useFileUpload';
export { useFormHandlers } from './useFormHandlers';
export { useLocalDraft } from './useLocalDraft';

============================
FILE: frontend\src\features\tenantOnboarding\hooks\useAutoSave.ts
============================
import { useCallback, useEffect, useRef } from 'react';

import type { TenantApplication } from '../types';

interface UseAutoSaveOptions {
  formData: TenantApplication;
  enabled?: boolean;
  interval?: number;
}

const STORAGE_KEY = 'tenant_application_draft';

export const useAutoSave = ({
  formData,
  enabled = true,
  interval = 2000,
}: UseAutoSaveOptions) => {
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  const lastSavedRef = useRef<string>('');

  const saveToLocalStorage = useCallback(() => {
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(formData));
    } catch (error) {
      console.error('Failed to save to localStorage:', error);
    }
  }, [formData]);

  const performSave = useCallback(() => {
    const currentData = JSON.stringify(formData);

    if (currentData === lastSavedRef.current) {
      return;
    }

    saveToLocalStorage();
    lastSavedRef.current = currentData;
  }, [formData, saveToLocalStorage]);

  useEffect(() => {
    if (!enabled) return;

    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }

    timeoutRef.current = setTimeout(() => {
      performSave();
    }, interval);

    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, [formData, enabled, interval, performSave]);

  const loadFromLocalStorage = useCallback((): TenantApplication | null => {
    try {
      const saved = localStorage.getItem(STORAGE_KEY);
      return saved ? (JSON.parse(saved) as TenantApplication) : null;
    } catch (error) {
      console.error('Failed to load from localStorage:', error);
      return null;
    }
  }, []);

  const clearSavedData = useCallback(() => {
    try {
      localStorage.removeItem(STORAGE_KEY);
    } catch (error) {
      console.error('Failed to clear saved data:', error);
    }
  }, []);

  return {
    loadFromLocalStorage,
    clearSavedData,
  };
};



============================
FILE: frontend\src\features\tenantOnboarding\hooks\useFileUpload.ts
============================
import React, { useCallback, useState } from 'react';

// Type for uploaded file data
interface UploadedFileData {
  name: string;
  size: number;
  type: string;
  url: string;
}

export const useFileUpload = (handleInputChange: (field: string, value: UploadedFileData[] | File[]) => void) => {
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);

  const handleFileUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    const imageFiles = files.filter(file => file.type.startsWith('image/'));
    
    setUploadedFiles(prevFiles => {
      if (prevFiles.length + imageFiles.length > 3) {
        alert('Maximum 3 images allowed');
        return prevFiles;
      }

      const newFiles = [...prevFiles, ...imageFiles].slice(0, 3);
      
      handleInputChange('uploads', newFiles.map(file => ({
        name: file.name,
        size: file.size,
        type: file.type,
        url: URL.createObjectURL(file)
      })));
      
      return newFiles;
    });
  }, [handleInputChange]);

  const removeFile = useCallback((index: number) => {
    setUploadedFiles(prevFiles => {
      const newFiles = prevFiles.filter((_, i) => i !== index);
      
      handleInputChange('uploads', newFiles.map(file => ({
        name: file.name,
        size: file.size,
        type: file.type,
        url: URL.createObjectURL(file)
      })));
      
      return newFiles;
    });
  }, [handleInputChange]);

  return {
    uploadedFiles,
    handleFileUpload,
    removeFile
  };
};


============================
FILE: frontend\src\features\tenantOnboarding\hooks\useFormHandlers.ts
============================
import React, { useCallback } from 'react';

import type { AffiliateApplication } from '../types';

// Type for form field values
type FormValue = string | number | boolean | string[] | { city: string; state: string; zip: string };

// Type for nested field access
type NestedField = keyof AffiliateApplication;

// Type guard to check if a field is nested
const isNestedField = (field: string): field is `${NestedField}.${string}` => {
  return field.includes('.');
};

export const useFormHandlers = (setFormData: React.Dispatch<React.SetStateAction<AffiliateApplication>>) => {
  const handleInputChange = useCallback((field: string, value: FormValue) => {
    if (isNestedField(field)) {
      const [parent, child] = field.split('.') as [NestedField, string];
      setFormData(prev => {
        const parentValue = prev[parent] as Record<string, FormValue>;
        return {
          ...prev,
          [parent]: {
            ...parentValue,
            [child]: value
          }
        };
      });
    } else {
      setFormData(prev => ({
        ...prev,
        [field]: value
      }));
    }
  }, [setFormData]);

  const handleArrayChange = useCallback((field: string, value: string, checked: boolean) => {
    setFormData(prev => {
      const currentArray = prev[field as keyof AffiliateApplication] as string[];
      if (checked) {
        return {
          ...prev,
          [field]: [...currentArray, value]
        };
      } else {
        return {
          ...prev,
          [field]: currentArray.filter(item => item !== value)
        };
      }
    });
  }, [setFormData]);

  return {
    handleInputChange,
    handleArrayChange
  };
};


============================
FILE: frontend\src\features\tenantOnboarding\hooks\useLocalDraft.ts
============================
// No React hooks needed for this utility

import type { AffiliateApplication } from '../types';

const STORAGE_KEY = 'affiliate-application-draft';

export const useLocalDraft = () => {
  const saveDraft = (data: Partial<AffiliateApplication>) => {
    try {
      // Validate data before saving to prevent corruption
      const validatedData = Object.keys(data).reduce<Partial<AffiliateApplication>>((acc, key) => {
        const value = data[key as keyof AffiliateApplication];
        // Only save valid, non-empty data
        if (typeof value === 'string' && value.trim() !== '') {
          (acc as Record<string, unknown>)[key] = value;
        } else if (Array.isArray(value) && value.length > 0) {
          (acc as Record<string, unknown>)[key] = value;
        } else if (typeof value === 'boolean') {
          (acc as Record<string, unknown>)[key] = value;
        } else if (value && typeof value === 'object' && !Array.isArray(value)) {
          // Handle nested objects like base_location
          const nestedObj = value as unknown as Record<string, unknown>;
          if (Object.values(nestedObj).some(v => typeof v === 'string' && v.trim() !== '')) {
            (acc as Record<string, unknown>)[key] = value as unknown;
          }
        }
        return acc;
      }, {});
      
      localStorage.setItem(STORAGE_KEY, JSON.stringify(validatedData));
    } catch (error) {
      console.error('Failed to save draft:', error);
    }
  };

  const loadDraft = (): Partial<AffiliateApplication> | null => {
    try {
      const stored = localStorage.getItem(STORAGE_KEY);
      return stored ? JSON.parse(stored) as Partial<AffiliateApplication> : null;
    } catch (error) {
      console.error('Failed to load draft:', error);
      return null;
    }
  };

  const clearDraft = () => {
    try {
      localStorage.removeItem(STORAGE_KEY);
    } catch (error) {
      console.error('Failed to clear draft:', error);
    }
  };

  // Emergency cleanup function to clear all potentially corrupted data
  const emergencyCleanup = () => {
    try {
      // Clear the main draft
      localStorage.removeItem(STORAGE_KEY);
      
      // Also clear any other potentially related keys
      const keysToRemove = [];
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && (key.includes('affiliate') || key.includes('draft') || key.includes('form'))) {
          keysToRemove.push(key);
        }
      }
      
      keysToRemove.forEach(key => {
        localStorage.removeItem(key);
        // Removed potentially corrupted key
      });
      
              // Emergency cleanup completed
      
      // Force a page reload to ensure clean state
      window.location.reload();
    } catch (error) {
      console.error('Failed to perform emergency cleanup:', error);
    }
  };

  return {
    saveDraft,
    loadDraft,
    clearDraft,
    emergencyCleanup
  };
};


============================
FILE: frontend\src\features\tenantOnboarding\index.ts
============================
// Re-export tenant onboarding components
export * from './components';



============================
FILE: frontend\src\features\tenantOnboarding\README.md
============================
# Tenant Onboarding

This directory contains the tenant onboarding system for Mobile Detail Hub.

## Structure

```
tenantOnboarding/
├── components/           # Reusable UI components
│   ├── ApplicationHeader.tsx      # Header with back button
│   ├── IdentityContactSection.tsx # Business identity and contact info
│   ├── OperatingBasicsSection.tsx # Service categories selection
│   ├── ProofOfWorkSection.tsx     # Social links or file uploads
│   ├── LegalTermsSection.tsx      # Terms, insurance, and source
│   ├── SuccessPage.tsx            # Success confirmation page
│   ├── SubmitSection.tsx          # Submit and save draft buttons
│   └── index.ts                   # Component exports
├── hooks/               # Custom React hooks
│   ├── useFileUpload.ts           # Handle file uploads and removal
│   ├── useFormHandlers.ts         # Form input change handlers
│   └── index.ts                   # Hook exports
├── api/                 # API functions
│   ├── api.ts           # Legacy API functions
│   └── onboarding.api.ts # New API functions
├── schemas/             # Zod validation schemas
│   └── onboarding.schemas.ts
├── types.ts             # TypeScript interfaces and constants
├── useLocalDraft.ts     # Local storage for draft saving
├── TenantApplicationPage.tsx   # Main page component
└── README.md            # This file
```

## Components

### ApplicationHeader
- Displays back button and title
- Shows saved indicator when draft is available

### IdentityContactSection
- Business name and primary contact
- Phone and email inputs
- Base location (city, state, ZIP)

### OperatingBasicsSection
- Service category checkboxes
- Auto, boat, RV, PPF, ceramic, paint correction

### ProofOfWorkSection
- Toggle between social links and file uploads
- Social media URL inputs
- File upload with drag & drop (max 3 images)

### LegalTermsSection
- Insurance confirmation
- Terms acceptance
- Notification consent
- Source selection
- Optional notes

### SuccessPage
- Application confirmation
- Summary display
- Navigation to dashboard or home

### SubmitSection
- Submit application button
- Save draft button
- Error message display

## Hooks

### useFileUpload
Manages file uploads, validation, and removal with proper state updates.

### useFormHandlers
Provides consistent input change handlers for both simple and nested form fields.

## Types

- `AffiliateApplication`: Main form data interface
- `BaseLocation`: Nested location object
- `UploadFile`: File metadata for uploads
- Constants: US states, service categories, referral sources

## Features

- **Auto-save**: Form data automatically saves to localStorage
- **File uploads**: Support for 2-3 work photos
- **Social links**: Alternative to file uploads for proof of work
- **Responsive design**: Mobile-first approach with Tailwind CSS
- **Type safety**: Full TypeScript coverage
- **Error handling**: Network and validation error display
- **Draft management**: Save and restore incomplete applications

## Usage

The main `TenantApplicationPage` component orchestrates all the pieces:

1. Loads existing draft on mount
2. Auto-saves form changes
3. Handles form submission
4. Shows success page on completion

Each section component receives only the props it needs, making them highly reusable and testable.


============================
FILE: frontend\src\features\tenantOnboarding\schemas\onboarding.schemas.ts
============================
// Affiliate onboarding validation schemas
import { z } from 'zod';

// Base location schema
export const baseLocationSchema = z.object({
  city: z.string().min(1, 'City is required'),
  state: z.string().min(2, 'State is required'),
  zipCode: z.string().min(5, 'ZIP code must be at least 5 digits')
});

// Upload file schema
export const uploadFileSchema = z.object({
  id: z.string(),
  name: z.string(),
  size: z.number(),
  type: z.string(),
  url: z.url()
});

// Affiliate application schema
export const affiliateApplicationSchema = z.object({
  // Business identity
  legal_name: z.string().min(2, 'Legal business name is required'),
  business_name: z.string().min(2, 'Business name is required'),
  business_phone: z.string().min(10, 'Business phone is required'),
  business_email: z.email('Valid business email is required'),
  
  // Location
  base_location: baseLocationSchema,
  
  // Service categories
  service_categories: z.array(z.string()).min(1, 'At least one service category is required'),
  
  // Social media (optional)
  social_media: z.object({
    instagram: z.url().optional().or(z.literal('')),
    facebook: z.url().optional().or(z.literal('')),
    youtube: z.url().optional().or(z.literal('')),
    tiktok: z.url().optional().or(z.literal('')),
    website: z.url().optional().or(z.literal(''))
  }).optional(),
  
  // Proof of work
  proof_of_work_type: z.enum(['social_media', 'file_upload']),
  uploaded_files: z.array(uploadFileSchema).optional(),
  
  // Legal and terms
  has_insurance: z.boolean().refine(val => val, 'Insurance confirmation is required'),
  accepts_terms: z.boolean().refine(val => val, 'Terms acceptance is required'),
  accepts_notifications: z.boolean().refine(val => val, 'Notification consent is required'),
  referral_source: z.string().min(1, 'Referral source is required'),
  notes: z.string().optional()
});

// Draft application schema (partial)
export const draftApplicationSchema = affiliateApplicationSchema.partial();

// File upload schema
export const fileUploadSchema = z.object({
  files: z.array(z.instanceof(File)).min(1, 'At least one file is required').max(3, 'Maximum 3 files allowed'),
  applicationId: z.string().optional()
});

// Business name validation schema
export const businessNameValidationSchema = z.object({
  name: z.string().min(2, 'Business name must be at least 2 characters'),
  isAvailable: z.boolean(),
  suggestions: z.array(z.string()).optional()
});

// Service areas schema
export const serviceAreasSchema = z.object({
  location: baseLocationSchema,
  areas: z.array(z.object({
    name: z.string(),
    radius: z.number(),
    coordinates: z.object({
      lat: z.number(),
      lng: z.number()
    })
  }))
});

// Application status schema
export const applicationStatusSchema = z.object({
  id: z.string(),
  status: z.enum(['pending', 'under_review', 'approved', 'rejected', 'needs_changes']),
  submittedAt: z.string(),
  reviewedAt: z.string().optional(),
  notes: z.string().optional(),
  nextSteps: z.array(z.string()).optional()
});

// Application update schema
export const applicationUpdateSchema = z.object({
  status: z.enum(['pending', 'under_review', 'approved', 'rejected', 'needs_changes']).optional(),
  notes: z.string().optional(),
  reviewerNotes: z.string().optional()
});

// Export types
export type BaseLocation = z.infer<typeof baseLocationSchema>;
export type UploadFile = z.infer<typeof uploadFileSchema>;
export type AffiliateApplication = z.infer<typeof affiliateApplicationSchema>;
export type DraftApplication = z.infer<typeof draftApplicationSchema>;
export type FileUpload = z.infer<typeof fileUploadSchema>;
export type BusinessNameValidation = z.infer<typeof businessNameValidationSchema>;
export type ServiceAreas = z.infer<typeof serviceAreasSchema>;
export type ApplicationStatus = z.infer<typeof applicationStatusSchema>;
export type ApplicationUpdate = z.infer<typeof applicationUpdateSchema>;

// Application status enum
export const ApplicationStatusEnum = {
  PENDING: 'pending',
  UNDER_REVIEW: 'under_review',
  APPROVED: 'approved',
  REJECTED: 'rejected',
  NEEDS_CHANGES: 'needs_changes'
} as const;

export type ApplicationStatusType = typeof ApplicationStatusEnum[keyof typeof ApplicationStatusEnum];

// Service categories enum
export const ServiceCategories = {
  AUTO: 'auto',
  BOAT: 'boat',
  RV: 'rv',
  PPF: 'ppf',
  CERAMIC: 'ceramic',
  PAINT_CORRECTION: 'paint_correction'
} as const;

export type ServiceCategoryType = typeof ServiceCategories[keyof typeof ServiceCategories];

// Proof of work types
export const ProofOfWorkType = {
  SOCIAL_MEDIA: 'social_media',
  FILE_UPLOAD: 'file_upload'
} as const;

export type ProofOfWorkTypeType = typeof ProofOfWorkType[keyof typeof ProofOfWorkType];


============================
FILE: frontend\src\features\tenantOnboarding\types\index.ts
============================
export interface BaseLocation {
  city: string;
  state: string;
  zip: string;
}

export interface ServiceArea {
  city: string;
  state: string;
  zip: number | null;
  primary: boolean;
  minimum: number;
  multiplier: number;
}



export interface UploadFile {
  name: string;
  size: number;
  type: string;
  url: string;
}

// Address interface for reusability
export interface Address {
  address: string;
  city: string;
  state: string;
  zip: string;
}

// Pricing plan interface
export interface PricingPlan {
  id: 'starter' | 'pro' | 'enterprise';
  name: string;
  price: number;
  interval: string;
  features: string[];
  popular?: boolean;
}

// Preview state interface
export interface PreviewState {
  fromPreview?: boolean;
  businessName?: string;
  phone?: string;
  city?: string;
  state?: string;
  industry?: string;
}

// New simplified tenant application interface
export interface TenantApplication {
  id?: string;
  firstName: string;
  lastName: string;
  personalPhone: string;
  personalEmail: string;
  businessName: string;
  businessPhone: string;
  businessEmail: string;
  businessAddress: Address;
  selectedPlan: 'starter' | 'pro' | 'enterprise' | '';
  planPrice: number;
  paymentMethod: string;
  cardNumber: string;
  expiryDate: string;
  cvv: string;
  billingAddress: Address;
  useSameAddress: boolean;
  industry?: string;
  step: number;
  status: 'draft' | 'pending' | 'approved' | 'rejected';
}

// Legacy interface for backward compatibility
export interface AffiliateApplication {
  legal_name: string;
  primary_contact: string;
  phone: string;
  email: string;
  base_location: BaseLocation;
  categories: string[];
  gbp_url?: string;
  instagram_url?: string;
  tiktok_url?: string;
  facebook_url?: string;
  youtube_url?: string;
  website_url?: string;
  uploads?: UploadFile[];
  has_insurance: boolean;
  accept_terms: boolean;
  consent_notifications: boolean;
  source: string;
  notes?: string;
}

export const US_STATES = [
  'AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA',
  'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD',
  'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ',
  'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC',
  'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'
];

export const CATEGORIES = [
  'Auto Detailing',
  'Boat Detailing',
  'RV Detailing',
  'PPF Installation',
  'Ceramic Coating',
  'Paint Correction'
];

export const SOURCES = [
  'Google Search',
  'Social Media',
  'Referral',
  'Direct Mail',
  'Other'
];

// Pricing plans with updated $15/$25/$35 pricing
export const pricingPlans: PricingPlan[] = [
  {
    id: 'starter',
    name: 'Starter',
    price: 15,
    interval: 'month',
    features: [
      'Single location website',
      '5 custom pages',
      'Mobile responsive design',
      'Contact form integration',
      'Basic SEO optimization',
      'SSL certificate included',
      'Email support',
    ],
  },
  {
    id: 'pro',
    name: 'Pro',
    price: 25,
    interval: 'month',
    popular: true,
    features: [
      'Multi-location support',
      'Unlimited pages',
      'Advanced SEO tools',
      'Online booking system',
      'Google Maps integration',
      'Analytics dashboard',
      'Priority support',
      'Custom domain',
    ],
  },
  {
    id: 'enterprise',
    name: 'Enterprise',
    price: 35,
    interval: 'month',
    features: [
      'Everything in Pro',
      'Custom development',
      'API integrations',
      'Dedicated account manager',
      'White-label options',
      'SLA guarantee',
      '24/7 phone support',
    ],
  },
];

// Default values for new simplified tenant application
export const tenantApplicationDefaultValues: TenantApplication = {
  firstName: '',
  lastName: '',
  personalPhone: '',
  personalEmail: '',
  businessName: '',
  businessPhone: '',
  businessEmail: '',
  businessAddress: {
    address: '',
    city: '',
    state: '',
    zip: ''
  },
  selectedPlan: '',
  planPrice: 0,
  paymentMethod: '',
  cardNumber: '',
  expiryDate: '',
  cvv: '',
  billingAddress: {
    address: '',
    city: '',
    state: '',
    zip: ''
  },
  useSameAddress: true,
  industry: 'mobile-detailing',
  step: 0,
  status: 'draft'
};

// Legacy default values for backward compatibility
export const defaultValues: AffiliateApplication = {
  legal_name: '',
  primary_contact: '',
  phone: '',
  email: '',
  base_location: {
    city: '',
    state: '',
    zip: ''
  },
  categories: [],
  gbp_url: '',
  instagram_url: '',
  tiktok_url: '',
  facebook_url: '',
  youtube_url: '',
  website_url: '',
  uploads: [],
  has_insurance: false,
  accept_terms: false,
  consent_notifications: false,
  source: '',
  notes: ''
};


============================
FILE: frontend\src\features\tenantOnboarding\utils\validation.ts
============================
import { z } from 'zod';

const phoneRegex = /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;

export const addressSchema = z.object({
  address: z.string().min(1, 'Address is required'),
  city: z.string().min(1, 'City is required'),
  state: z.string().length(2, 'State must be 2 characters (e.g., CA)').toUpperCase(),
  zip: z.string().regex(/^\d{5}(-\d{4})?$/, 'Invalid ZIP code'),
});

export const personalInfoSchema = z.object({
  firstName: z.string().min(1, 'First name is required').max(50),
  lastName: z.string().min(1, 'Last name is required').max(50),
  personalPhone: z.string().regex(phoneRegex, 'Invalid phone number'),
  personalEmail: z.email('Invalid email address'),
});

export const businessInfoSchema = z.object({
  businessName: z.string().min(1, 'Business name is required').max(100),
  businessPhone: z.string().regex(phoneRegex, 'Invalid phone number'),
  businessEmail: z.email('Invalid email address'),
  businessAddress: addressSchema,
  industry: z.string().optional(),
});

export const planSelectionSchema = z.object({
  selectedPlan: z.enum(['starter', 'pro', 'enterprise'], {
    errorMap: () => ({ message: 'Please select a plan' }),
  }),
  planPrice: z.number().min(0),
});

export const paymentSchema = z.object({
  billingAddress: addressSchema,
  useSameAddress: z.boolean(),
});

/**
 * Formats a phone number as user types: (123) 456-7890
 */
export const formatPhoneNumber = (value: string): string => {
  const cleaned = value.replace(/\D/g, '');
  const match = cleaned.match(/^(\d{0,3})(\d{0,3})(\d{0,4})$/);

  if (!match) return value;

  const parts = [match[1], match[2], match[3]].filter(Boolean);

  if (parts.length === 0) return '';
  if (parts.length === 1) return parts[0];
  if (parts.length === 2) return `(${parts[0]}) ${parts[1]}`;
  return `(${parts[0]}) ${parts[1]}-${parts[2]}`;
};

/**
 * Validates an email address using Zod
 */
export const validateEmail = (email: string): boolean => {
  try {
    z.email().parse(email);
    return true;
  } catch {
    return false;
  }
};

/**
 * Suggests email correction for common typos
 */
export const suggestEmailCorrection = (email: string): string | null => {
  const commonDomains = [
    'gmail.com',
    'yahoo.com',
    'hotmail.com',
    'outlook.com',
    'icloud.com',
  ];

  const parts = email.split('@');
  if (parts.length !== 2) return null;

  const domain = parts[1].toLowerCase();

  for (const commonDomain of commonDomains) {
    if (domain !== commonDomain && isCloseMatch(domain, commonDomain)) {
      return `${parts[0]}@${commonDomain}`;
    }
  }

  return null;
};

function isCloseMatch(str1: string, str2: string): boolean {
  if (Math.abs(str1.length - str2.length) > 2) return false;

  let differences = 0;
  const maxLen = Math.max(str1.length, str2.length);

  for (let i = 0; i < maxLen; i++) {
    if (str1[i] !== str2[i]) differences++;
    if (differences > 2) return false;
  }

  return differences > 0 && differences <= 2;
}



============================
FILE: frontend\src\features\_templates\api-client.template.ts
============================
/**
 * Feature API Client Template
 * Copy this template when creating a new feature's API layer
 * 
 * Location: features/<your-feature>/api/<your-feature>.api.ts
 * 
 * Pattern:
 * - All HTTP calls for this feature go here
 * - Export an object with methods (not a class unless needed)
 * - Use shared apiClient for auth/error handling
 * - Keep functions focused and named clearly
 * - Return typed responses
 * 
 * Components should NEVER import this directly.
 * Components consume hooks, hooks use this API client.
 */

import { apiClient } from '@/shared/api';

/**
 * Response types for this feature
 * Co-locate with API methods or in ../types/ if complex
 */
interface YourFeatureItem {
  id: string | number;
  // Add your item properties here
}

interface YourFeatureResponse {
  success: boolean;
  data?: YourFeatureItem[];
  error?: string;
}

/**
 * API client for YourFeature
 * 
 * Usage (in hooks, NOT components):
 * ```typescript
 * import { yourFeatureApi } from '../api/yourFeature.api';
 * 
 * // In a hook
 * const data = await yourFeatureApi.getItems();
 * ```
 */
export const yourFeatureApi = {
  /**
   * Get items
   */
  getItems: async (params?: { filter?: string }): Promise<YourFeatureResponse> => {
    const queryString = params?.filter ? `?filter=${params.filter}` : '';
    return apiClient.get(`/your-feature/items${queryString}`);
  },
  
  /**
   * Get single item by ID
   */
  getItem: async (id: string | number): Promise<YourFeatureResponse> => {
    return apiClient.get(`/your-feature/items/${String(id)}`);
  },
  
  /**
   * Create new item
   */
  createItem: async (data: Partial<YourFeatureItem>): Promise<YourFeatureResponse> => {
    return apiClient.post('/your-feature/items', data);
  },
  
  /**
   * Update item
   */
  updateItem: async (id: string | number, data: Partial<YourFeatureItem>): Promise<YourFeatureResponse> => {
    return apiClient.patch(`/your-feature/items/${String(id)}`, data);
  },
  
  /**
   * Delete item
   */
  deleteItem: async (id: string | number): Promise<YourFeatureResponse> => {
    return apiClient.delete(`/your-feature/items/${String(id)}`);
  },
};

/**
 * React Query cache keys for this feature
 * Keeps cache keys consistent and typed
 */
interface YourFeatureFilters {
  filter?: string;
  // Add your filter properties here
}

export const yourFeatureKeys = {
  all: ['yourFeature'] as const,
  lists: () => [...yourFeatureKeys.all, 'list'] as const,
  list: (filters?: YourFeatureFilters) => [...yourFeatureKeys.lists(), filters] as const,
  details: () => [...yourFeatureKeys.all, 'detail'] as const,
  detail: (id: string | number) => [...yourFeatureKeys.details(), id] as const,
};



============================
FILE: frontend\src\features\_templates\hook-with-api.template.ts
============================
/**
 * Hook Template - Using API Client
 * 
 * Pattern:
 * - Hooks contain side effects (API calls, subscriptions, etc.)
 * - Hooks use API clients (not fetch directly)
 * - Hooks use React Query for server state
 * - Components consume hooks, never API clients directly
 * 
 * Location: features/<your-feature>/hooks/useYourFeatureData.ts
 * 
 * Instructions:
 * 1. Replace YourFeatureType with your actual feature type
 * 2. Replace YourFeatureInput/UpdateInput with your input types
 * 3. Import your actual API client and query keys
 * 4. Uncomment the import line and customize it
 */

/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, eslint-comments/require-description -- Template file with placeholder types that will be replaced during implementation */

import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';

// Uncomment and customize this import:
// import { yourFeatureApi, yourFeatureKeys } from '../api/yourFeature.api';
// import type { YourFeatureType, YourFeatureInput, YourFeatureUpdateInput } from '../types/yourFeature.types';

/**
 * Hook to load a single feature item
 * 
 * Usage (in components):
 * ```typescript
 * import { useYourFeatureItem } from '../hooks/useYourFeatureData';
 * 
 * function MyComponent({ id }: { id: string }) {
 *   const { data, isLoading, error } = useYourFeatureItem(id);
 *   // ...
 * }
 * ```
 */
export function useYourFeatureItem<TData = unknown>(id: string | number) {
  // Replace with your actual API client and keys
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Template placeholder, replace with actual API client
  const yourFeatureApi = {} as any;
  const yourFeatureKeys = { 
    detail: (id: string | number) => ['yourFeature', id],
  } as const;

  return useQuery({
    queryKey: yourFeatureKeys.detail(id),
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- Template placeholder, replace with actual API method
    queryFn: () => (yourFeatureApi.getItem as (id: string | number) => Promise<TData>)(id),
    enabled: !!id,
    staleTime: 5 * 60 * 1000,  // 5 minutes
    gcTime: 10 * 60 * 1000,     // 10 minutes
  });
}

/**
 * Hook to load all feature items
 * 
 * Usage (in components):
 * ```typescript
 * import { useYourFeatureList } from '../hooks/useYourFeatureData';
 * 
 * function MyComponent() {
 *   const { data, isLoading, error } = useYourFeatureList();
 *   // ...
 * }
 * ```
 */
export function useYourFeatureList<TData = unknown>() {
  // Replace with your actual API client and keys
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Template placeholder, replace with actual API client
  const yourFeatureApi = {} as any;
  const yourFeatureKeys = { 
    all: ['yourFeature'],
  } as const;

  return useQuery({
    queryKey: yourFeatureKeys.all,
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- Template placeholder, replace with actual API method
    queryFn: () => (yourFeatureApi.getItems as () => Promise<TData[]>)(),
    staleTime: 5 * 60 * 1000,  // 5 minutes
    gcTime: 10 * 60 * 1000,     // 10 minutes
  });
}

/**
 * Hook to create feature data
 */
export function useYourFeatureMutation<TInput = unknown, TData = unknown>() {
  const queryClient = useQueryClient();
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Template placeholder, replace with actual API client
  const yourFeatureApi = {} as any;
  const yourFeatureKeys = { all: ['yourFeature'] } as const;
  
  return useMutation({
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- Template placeholder, replace with actual API method
    mutationFn: (data: TInput) => (yourFeatureApi.createItem as (data: TInput) => Promise<TData>)(data),
    onSuccess: () => {
      // Invalidate cache to refetch fresh data
      void queryClient.invalidateQueries({ queryKey: yourFeatureKeys.all });
    },
  });
}

/**
 * Hook to update feature data
 */
export function useUpdateYourFeature<TInput = unknown, TData = unknown>(id: string | number) {
  const queryClient = useQueryClient();
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Template placeholder, replace with actual API client
  const yourFeatureApi = {} as any;
  const yourFeatureKeys = { 
    detail: (id: string | number) => ['yourFeature', id],
    lists: () => ['yourFeature', 'lists'],
  } as const;
  
  return useMutation({
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- Template placeholder, replace with actual API method
    mutationFn: (data: TInput) => (yourFeatureApi.updateItem as (id: string | number, data: TInput) => Promise<TData>)(id, data),
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: yourFeatureKeys.detail(id) });
      void queryClient.invalidateQueries({ queryKey: yourFeatureKeys.lists() });
    },
  });
}

/**
 * Hook to delete feature data
 */
export function useDeleteYourFeature() {
  const queryClient = useQueryClient();
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Template placeholder, replace with actual API client
  const yourFeatureApi = {} as any;
  const yourFeatureKeys = { all: ['yourFeature'] } as const;
  
  return useMutation({
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- Template placeholder, replace with actual API method
    mutationFn: (id: string | number) => (yourFeatureApi.deleteItem as (id: string | number) => Promise<void>)(id),
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: yourFeatureKeys.all });
    },
  });
}

/* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, eslint-comments/require-description -- End of template file */


============================
FILE: frontend\src\features\_templates\README.md
============================
# Feature Templates

## Quick Start

Copy these templates when creating a new feature:

### 1. API Client (`api-client.template.ts`)
→ Copy to `features/<your-feature>/api/<feature>.api.ts`

**Purpose:** All HTTP calls for your feature

**Pattern:**
```typescript
export const yourFeatureApi = {
  getItems: async () => apiClient.get('/endpoint'),
  createItem: async (data) => apiClient.post('/endpoint', data),
};

export const yourFeatureKeys = {
  all: ['yourFeature'] as const,
  detail: (id) => ['yourFeature', id] as const,
};
```

### 2. Hook with API (`hook-with-api.template.ts`)
→ Copy to `features/<your-feature>/hooks/useYourFeature.ts`

**Purpose:** React Query hooks that use the API client

**Pattern:**
```typescript
export function useYourFeatureData() {
  return useQuery({
    queryKey: yourFeatureKeys.all,
    queryFn: () => yourFeatureApi.getItems(),
  });
}
```

### 3. Component Usage

**Pattern:**
```typescript
import { useYourFeatureData } from '../hooks/useYourFeature';

export function YourComponent() {
  const { data, isLoading } = useYourFeatureData();
  // Render UI - no fetch calls!
}
```

---

## ✅ Rules Enforced by ESLint

- ❌ **NO `fetch()` in components/** - ESLint will error
- ❌ **NO `fetch()` in shared/ui/** - Must be pure
- ✅ **YES `fetch()` in api/** - That's what it's for
- ✅ **YES `fetch()` in hooks/** - Via API clients

---

## Architecture

```
Component (pure, no side effects)
   ↓ uses
Hook (side effects allowed)
   ↓ uses
API Client (HTTP calls)
   ↓ calls
Backend
```

**Components stay dumb, hooks stay smart!**



============================
FILE: frontend\src\index.css
============================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* CSS Variables */
:root {
  /* Header height for spacing calculations */
  --header-h: 72px;
}

@media (min-width: 768px) {
  :root {
    --header-h: 88px;
  }
}

/* Smooth scrolling for anchor links only, not snap scrolling */
/* Prevent accidental horizontal scrolling on mobile */
* {
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
  overflow-x: hidden;
  max-width: 100vw;
  width: 100%;
}

body {
  overflow-x: hidden;
  max-width: 100vw;
  width: 100%;
  min-width: 0;
}

#root {
  overflow-x: hidden;
  max-width: 100vw;
  width: 100%;
  min-width: 0;
}


/* Disable smooth scrolling for snap containers */
.snap-container {
  scroll-behavior: auto;
}

/* Hero background base styles */
.hero-background {
  /* Base styles - using default bg-cover behavior */
}

/* Custom transition durations for image rotator */
.transition-opacity {
  transition-property: opacity;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

.duration-600 {
  transition-duration: 600ms;
}

/* Cross-fade animations for image rotation */
@keyframes fadeOut {
  from { opacity: 1; }
  to { opacity: 0; }
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

/* Ensure hero section and ImageRotator fill the screen properly */
.hero-section {
  position: relative;
  width: 100%;
  height: 100vh;
  min-height: 600px;
  overflow: hidden;
}

.image-rotator-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 0;
}

.image-rotator-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center;
}

/* Override autocomplete background colors to maintain dark theme */
input:-webkit-autofill,
input:-webkit-autofill:hover,
input:-webkit-autofill:focus,
input:-webkit-autofill:active,
select:-webkit-autofill,
select:-webkit-autofill:hover,
select:-webkit-autofill:focus,
select:-webkit-autofill:active {
  -webkit-box-shadow: 0 0 0 30px rgb(68 64 60) inset !important;
  -webkit-text-fill-color: white !important;
  background-color: rgb(68 64 60) !important;
}

/* Additional autocomplete overrides for different input types */
input[type="email"]:-webkit-autofill,
input[type="tel"]:-webkit-autofill,
input[type="text"]:-webkit-autofill {
  -webkit-box-shadow: 0 0 0 30px rgb(68 64 60) inset !important;
  -webkit-text-fill-color: white !important;
  background-color: rgb(68 64 60) !important;
}

/* Hide scrollbars while keeping scroll functionality */
.scrollbar-hide {
  -ms-overflow-style: none;  /* Internet Explorer 10+ */
  scrollbar-width: none;  /* Firefox */
}
.scrollbar-hide::-webkit-scrollbar {
  display: none;  /* Safari and Chrome */
}




============================
FILE: frontend\src\main-site\index.html
============================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>That Smart Site - Multi-Tenant Website Platform</title>
    <meta name="description" content="Professional website platform for local service businesses. Mobile detailing, maid service, lawn care, pet grooming, and more." />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main-site/main.tsx"></script>
  </body>
</html>


============================
FILE: frontend\src\main-site\main.tsx
============================
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import { HelmetProvider } from 'react-helmet-async';

import { config } from '@/shared/env';

import MainSiteApp from './MainSiteApp';
import { MainSiteProviders } from './providers';

import '../index.css';

// Register Service Worker for PWA functionality (only in production and when explicitly enabled)
if ('serviceWorker' in navigator && config.serviceWorkerEnabled) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js').catch((err: unknown) => {
      console.warn('SW registration failed:', err);
    });
  });
}

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error('Root element not found');
}

createRoot(rootElement).render(
  <HelmetProvider>
    <BrowserRouter>
      <MainSiteProviders>
        <MainSiteApp />
      </MainSiteProviders>
    </BrowserRouter>
  </HelmetProvider>
);


============================
FILE: frontend\src\main-site\MainSiteApp.tsx
============================
import { lazy, Suspense, useState } from 'react';
import { Navigate, Route, Routes } from 'react-router-dom';
import { useRouterDebug } from '@/shared/useRouterDebug';

import { DashboardPage as AdminDashboard } from '@/features/adminDashboard';
import { DataProvider } from '@/features/header';
import { PreviewGeneratorPage, PreviewPage } from '@/features/preview';
import { LazyRequestQuoteModal } from '@/features/quotes';
import { DashboardPage } from '@/features/tenantDashboard';
import { TenantApplicationPage } from '@/features/tenantOnboarding';
import { env } from '@/shared/env';
import { LoginPage, ProtectedRoute } from '@/shared/ui';

import HomePage from '@main/pages/HomePage';
import ServicePage from '@main/pages/ServicePage';

// Heavy modules are NOT imported here - they stay out of the initial bundle
const Booking = lazy(() => import('../features/booking/BookingApp'));


export default function MainSiteApp() {
  useRouterDebug('MainSiteApp');
  const [isQuoteModalOpen, setIsQuoteModalOpen] = useState(false);

  const handleOpenQuoteModal = () => {
    setIsQuoteModalOpen(true);
  };
  const handleCloseQuoteModal = () => {
    setIsQuoteModalOpen(false);
  };

  return (
    <div className="min-h-screen bg-gray-900">
      <Suspense fallback={<div className="p-8 text-white">Loading…</div>}>
      <Routes>
          {/* Root path - show main site landing page */}
          <Route path="/" element={<HomePage />} />
          
          {/* Login route */}
          <Route path="/login" element={<LoginPage />} />
          
          {/* Admin Dashboard - protected route */}
          <Route path="/admin-dashboard" element={
            <ProtectedRoute requiredRole="admin" fallbackPath="/login">
              <AdminDashboard />
            </ProtectedRoute>
          } />
          
          {/* Tenant Dashboard - protected route */}
          <Route path="/tenant-dashboard" element={
            <ProtectedRoute requiredRole="tenant" fallbackPath="/login">
              <DashboardPage />
            </ProtectedRoute>
          } />
          
          {/* Tenant Application */}
          <Route path="/tenant-onboarding" element={<TenantApplicationPage />} />
          
          {/* Booking route */}
          <Route path="/booking" element={<Booking />} />
          
          {/* Preview routes */}
          <Route path="/preview-generator" element={<PreviewGeneratorPage />} />
          <Route path="/preview/:tenantSlug" element={<PreviewPage />} />
          
          {/* Service routes - must come before generic businessSlug route */}
          <Route path="/:businessSlug/services/:serviceType" element={<ServicePage />} />
          
          <Route path="/:businessSlug/dashboard" element={
            <div style={{ padding: '20px', background: 'red', color: 'white' }}>
              <h1>DASHBOARD ROUTE MATCHED!</h1>
              <p>Business Slug: {window.location.pathname.split('/')[1]}</p>
              <ProtectedRoute requiredRole={['admin', 'tenant']} fallbackPath="/">
                  <DashboardPage />
              </ProtectedRoute>
            </div>
          } />
          <Route path="/:businessSlug/booking" element={<Booking />} />
          
          {/* Tenant-specific routes */}
          <Route path="/:businessSlug" element={<HomePage />} />
          
          {/* Catch all - redirect to root */}
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
        </Suspense>
        
        {/* Quote Modal */}
        <LazyRequestQuoteModal 
          isOpen={isQuoteModalOpen}
          onClose={handleCloseQuoteModal}
        />
      </div>
  );
}


============================
FILE: frontend\src\main-site\pages\HomePage.tsx
============================
import React, { useEffect } from 'react';

import { FAQ } from '@/features/faq';
import { Gallery } from '@/features/gallery';
import { Header } from '@/features/header';
import { Hero } from '@/features/hero';
import { Reviews } from '@/features/reviews';
import { useReviewsAvailability } from '@/features/reviews/hooks/useReviewsAvailability';
import { ServicesGrid } from '@/features/services';
import { useIsDesktop, useScrollSpy, useSEO, useTenantSlug } from '@/shared/hooks';
import type { SectionId } from '@/shared/state/sectionStore';
import { injectAllSchemas } from '@/shared/utils/schemaUtils';
import { defaultSchemas } from '@/shared/seo/defaultSchemas';

interface HomePageProps {
  onRequestQuote?: () => void;
  locationData?: unknown;
}

const HomePage: React.FC<HomePageProps> = ({ onRequestQuote, locationData }) => {
  // Legacy useSiteContext removed - now using tenant-based routing
  
  // Get tenant slug from URL
  const tenantSlug = useTenantSlug();
  
  // Update SEO metadata (title, description, etc.)
  useSEO();
  
  // Check if reviews are available for this site (only for tenant sites)
  const hasReviews = tenantSlug ? useReviewsAvailability() : false;
  
  // Determine which section IDs to track based on screen size
  const isDesktop = useIsDesktop();
  
  // Set up scroll spy to track active section - use correct IDs for mobile vs desktop
  const sectionIds: SectionId[] = isDesktop 
    ? hasReviews 
      ? ['top', 'services-desktop', 'reviews', 'faq', 'gallery-desktop']
      : ['top', 'services-desktop', 'faq', 'gallery-desktop']
    : hasReviews
      ? ['top', 'services', 'reviews', 'faq', 'gallery', 'footer']
      : ['top', 'services', 'faq', 'gallery', 'footer'];
  
  useScrollSpy({ 
    ids: sectionIds, 
    headerPx: isDesktop ? 88 : 72, 
    updateHash: false 
  });

  // Generate and inject Schema.org JSON-LD for tenant site
  useEffect(() => {
    if (locationData) {
      // Use tenant-specific schemas when location data is available
      // This will be handled by the existing schema generation logic
      injectAllSchemas([]);
    } else {
      // Use default platform schemas when no tenant data is available
      injectAllSchemas(defaultSchemas);
    }
  }, [locationData]);

  // If this is the main platform site (no tenant), show platform landing page
  if (!tenantSlug) {
    return (
      <>
        <Header />
        <div className="min-h-screen bg-gray-900 text-white pt-[72px] md:pt-[88px]">
          <div className="container mx-auto px-4 py-16">
            <h1 className="text-4xl md:text-6xl font-bold text-center mb-8">
              That Smart Site
            </h1>
            <p className="text-xl md:text-2xl text-center mb-12 text-gray-300">
              Professional website platform for local service businesses
            </p>
            <div className="text-center">
              <a 
                href="/tenant-onboarding" 
                className="inline-block bg-blue-600 hover:bg-blue-700 text-white font-bold py-4 px-8 rounded-lg text-lg transition-colors"
              >
                Get Started - Create Your Site
              </a>
            </div>
            <div className="mt-16 grid md:grid-cols-3 gap-8">
              <div className="text-center">
                <h3 className="text-2xl font-bold mb-4">Mobile Detailing</h3>
                <p className="text-gray-300">Professional car detailing services</p>
              </div>
              <div className="text-center">
                <h3 className="text-2xl font-bold mb-4">Maid Service</h3>
                <p className="text-gray-300">Residential and commercial cleaning</p>
              </div>
              <div className="text-center">
                <h3 className="text-2xl font-bold mb-4">Lawn Care</h3>
                <p className="text-gray-300">Landscaping and maintenance services</p>
              </div>
            </div>
          </div>
        </div>
      </>
    );
  }

  // If this is a tenant site, show tenant-specific content
  return (
    <>
      <Header />
      <div className="h-screen snap-y snap-mandatory overflow-y-scroll snap-container scrollbar-hide pt-[72px] md:pt-[88px]">
        <h1 className="sr-only">Professional Services</h1>
        <Hero 
          {...(onRequestQuote && { onRequestQuote })}
        />
      
      <ServicesGrid />
      
              {/* Only show reviews if there are reviews available */}
              {hasReviews && (
                <Reviews tenantSlug={tenantSlug} />
              )}
      
      <FAQ />
      
      <Gallery 
        {...(onRequestQuote && { onRequestQuote })}
      />
      </div>
    </>
  );
};

export default HomePage;


============================
FILE: frontend\src\main-site\pages\ServicePage.tsx
============================
import React, { useState } from 'react';
import { useSearchParams } from 'react-router-dom';

import { DataProvider, Header } from '@/features/header';
import { PreviewCTAButton, PreviewDataProvider, usePreviewParams } from '@/features/preview';
import { LazyRequestQuoteModal } from '@/features/quotes';
import { Process, Results, ServiceCTA, ServiceHero, WhatItIs } from '@/features/services';
import { useServicePage } from '@/features/services/hooks/useServicePage';

interface ServicePageProps {
  onRequestQuote?: () => void;
}

const ServicePage: React.FC<ServicePageProps> = ({ onRequestQuote }) => {
  const { serviceData } = useServicePage();
  const [searchParams] = useSearchParams();
  const token = searchParams.get('t');
  
  // If token is present, we're in preview mode
  const { payload } = usePreviewParams();
  
  // Quote modal state for preview mode
  const [isQuoteModalOpen, setIsQuoteModalOpen] = useState(false);

  const handleOpenQuoteModal = () => {
    if (onRequestQuote) {
      onRequestQuote();
    } else {
      setIsQuoteModalOpen(true);
    }
  };
  
  const handleCloseQuoteModal = () => {
    setIsQuoteModalOpen(false);
  };


  if (!serviceData) {
    return (
      <main className="bg-stone-900 text-white min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-white mb-4">Service Not Found</h1>
          <p className="text-slate-300">The requested service could not be found.</p>
        </div>
      </main>
    );
  }

  // Render with preview context if token is present
  if (token && payload) {
    return (
      <PreviewDataProvider payload={payload}>
        {/* Fixed "Get This Site" buttons in both corners */}
        <PreviewCTAButton position="left" />
        <PreviewCTAButton position="right" />
        
        <main className="bg-stone-900 text-white">
          <Header />
          <ServiceHero serviceData={serviceData} onRequestQuote={handleOpenQuoteModal} />
          <WhatItIs serviceData={serviceData} />
          <Process serviceData={serviceData} />
          <Results serviceData={serviceData} />
          <ServiceCTA serviceData={serviceData} onRequestQuote={handleOpenQuoteModal} />
        </main>
        
        {/* Quote Modal */}
        {isQuoteModalOpen && (
          <LazyRequestQuoteModal 
            isOpen={isQuoteModalOpen} 
            onClose={handleCloseQuoteModal} 
          />
        )}
      </PreviewDataProvider>
    );
  }

  // Regular tenant mode
  return (
    <DataProvider>
      <main className="bg-stone-900 text-white">
        <Header />
        <ServiceHero serviceData={serviceData} {...(onRequestQuote && { onRequestQuote })} />
        <WhatItIs serviceData={serviceData} />
        <Process serviceData={serviceData} />
        <Results serviceData={serviceData} />
        <ServiceCTA serviceData={serviceData} {...(onRequestQuote && { onRequestQuote })} />
      </main>
    </DataProvider>
  );
};

export default ServicePage;


============================
FILE: frontend\src\main-site\providers.tsx
============================
import React, { PropsWithChildren } from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
// import { ReactQueryDevtools } from '@tanstack/react-query-devtools';

import { ErrorBoundary } from '@/shared/ui';
import { AuthProvider } from '@/shared/contexts/AuthContext';
import { DataProvider } from '@/shared/contexts/DataContext';
import { TenantConfigProvider } from '@/shared/contexts/TenantConfigContext';
import { WebsiteContentProvider } from '@/shared/contexts/WebsiteContentContext';

// Create a single QueryClient instance for the main site
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      retry: 1,
    },
  },
});

interface MainSiteProvidersProps {
  children: React.ReactNode;
}

export const MainSiteProviders: React.FC<MainSiteProvidersProps> = ({ children }) => {
  return (
    <ErrorBoundary>
      <QueryClientProvider client={queryClient}>
        <AuthProvider>
          <DataProvider>
            <TenantConfigProvider>
              <WebsiteContentProvider>
                {children}
              </WebsiteContentProvider>
            </TenantConfigProvider>
          </DataProvider>
        </AuthProvider>
        {/* <ReactQueryDevtools initialIsOpen={false} /> */}
      </QueryClientProvider>
    </ErrorBoundary>
  );
};


============================
FILE: frontend\src\shared\api\api.ts
============================
// import { config } from '@/../config/env';

// Extend Error interface for custom error codes
interface CustomError extends Error {
  code?: string;
  retryAfterSeconds?: number;
  remainingAttempts?: number;
  resetTime?: number;
}

// API error response interface
interface ApiErrorResponse {
  message?: string;
  error?: string;
  retryAfterSeconds?: number;
  remainingAttempts?: number;
  resetTime?: number;
}

// Generic API response interface for unknown responses
interface UnknownApiResponse {
  success?: boolean;
  message?: string;
  error?: string;
  data?: unknown;
  [key: string]: unknown;
}

const API_BASE_URL = ''; // Always use relative URLs to leverage Vite proxy

export interface QuoteFormData {
  name: string;
  email: string;
  phone?: string;
  vehicle: string;
  services: string[];
  additionalInfo?: string;
  preferredDate?: string;
}

// User interface for admin operations
export interface User {
  id: number;
  name: string;
  email: string;
  role?: 'admin' | 'affiliate' | 'customer' | 'tenant';
  is_admin?: boolean;
  created_at: string;
  business_name?: string;
  application_status?: string;
  slug?: string;
}

// Affiliate application interface
export interface AffiliateApplication {
  id: number;
  slug: string;
  business_name: string;
  owner: string;
  phone: string;
  email: string;
  has_insurance: boolean;
  source: string;
  notes?: string;
  application_date: string;
  created_at: string;
  city?: string;
  state_code?: string;
  postal_code?: string;
}

// Generic API response interface
export interface ApiResponse<T = unknown> {
  success: boolean;
  message?: string;
  data?: T;
}

// Specific response interfaces
export interface UsersResponse extends ApiResponse {
  users: User[];
  count: number;
}

export interface ApplicationsResponse extends ApiResponse {
  applications: AffiliateApplication[];
  count: number;
}

export interface LoginResponse extends ApiResponse {
  accessToken: string;
  refreshToken: string;
  user: {
    id: number;
    email: string;
    role: string;
    name: string;
    phone?: string;
    is_admin?: boolean;
  };
}

export interface AffiliateApprovalResponse extends ApiResponse {
  affiliate: AffiliateApplication & {
    user_id: number;
    temp_password: string;
  };
  note: string;
}

export interface AffiliateRejectionResponse extends ApiResponse {
  affiliate: AffiliateApplication;
}

export interface AffiliateDeletionResponse extends ApiResponse {
  deletedAffiliate?: {
    id: number;
    business_name: string;
    slug: string;
    email: string;
  };
  deletedUser?: {
    id: number;
    name: string;
    email: string;
  };
}

class ApiService {
  private async makeRequest<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const url = `${API_BASE_URL}${endpoint}`;
    
    const defaultOptions: RequestInit = {
      headers: {
        'Content-Type': 'application/json',
      },
      ...options,
    };

    try {
      const response = await fetch(url, defaultOptions);
      const data = await response.json() as UnknownApiResponse;
      
      if (!response.ok) {
        const errorMessage = data.message || data.error || 'Network response was not ok';
        throw new Error(errorMessage);
      }
      
      return data as T;
    } catch (error) {
      console.error('API request failed:', error);
      throw new Error(error instanceof Error ? error.message : 'An error occurred');
    }
  }

  async submitQuoteRequest(data: QuoteFormData): Promise<ApiResponse> {
    return this.makeRequest<ApiResponse>('/api/quote', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async checkHealth(): Promise<ApiResponse> {
    return this.makeRequest<ApiResponse>('/api/health');
  }

  async login(email: string, password: string): Promise<LoginResponse> {
    // Use relative URL to leverage Vite proxy
    const url = '/api/auth/login';
    try {
      // Create an AbortController for timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => { controller.abort(); }, 10000); // 10 second timeout
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      const data = await response.json() as ApiErrorResponse & LoginResponse;
      
      if (!response.ok) {
        // Handle rate limiting specifically
        if (response.status === 429) {
          const error: CustomError = new Error(data.error || 'Rate limited');
          error.code = 'RATE_LIMITED';
          error.retryAfterSeconds = data.retryAfterSeconds;
          error.remainingAttempts = data.remainingAttempts;
          error.resetTime = data.resetTime;
          throw error;
        }
        
        // Handle other error codes
        if (response.status === 401) {
          const error: CustomError = new Error(data.error || 'Invalid credentials');
          error.code = 'INVALID_CREDENTIALS';
          throw error;
        }
        
        if (response.status === 403) {
          const error: CustomError = new Error(data.error || 'Access denied');
          error.code = 'FORBIDDEN';
          throw error;
        }
        
        const errorMessage = data.message || data.error || 'Login failed';
        throw new Error(errorMessage);
      }
      
      return data;
      
    } catch (error) {
      
      // Handle timeout specifically
      if (error instanceof Error && error.name === 'AbortError') {
        const timeoutError: CustomError = new Error('Login request timed out. Please check your connection and try again.');
        timeoutError.code = 'TIMEOUT';
        throw timeoutError;
      }
      
      // Handle network errors
      if (error instanceof TypeError && error.message.includes('fetch')) {
        const networkError: CustomError = new Error('Network error. Please check your connection and try again.');
        networkError.code = 'NETWORK_ERROR';
        throw networkError;
      }
      
      // Re-throw with additional context if it's not already an Error
      if (error instanceof Error) {
        throw error;
      }
      throw new Error(error instanceof Error ? error.message : 'Login failed');
    }
  }

  async register(email: string, password: string, name: string, phone?: string): Promise<LoginResponse> {
    // Use relative URL to leverage Vite proxy
    const url = '/api/auth/register';
    
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password, name, phone }),
      });
      
      const data = await response.json() as ApiErrorResponse & LoginResponse;
      
      if (!response.ok) {
        // Handle rate limiting specifically
        if (response.status === 429) {
          const error: CustomError = new Error(data.error || 'Rate limited');
          error.code = 'RATE_LIMITED';
          error.retryAfterSeconds = data.retryAfterSeconds;
          error.remainingAttempts = data.remainingAttempts;
          error.resetTime = data.resetTime;
          throw error;
        }
        
        // Handle other error codes
        if (response.status === 400) {
          const errorMessage = data.message || data.error || 'Registration failed';
          const error: CustomError = new Error(errorMessage);
          error.code = 'VALIDATION_ERROR';
          throw error;
        }
        
        const errorMessage = data.message || data.error || 'Registration failed';
        throw new Error(errorMessage);
      }
      
      return data;
      
    } catch (error) {
      console.error('Registration failed:', error);
      // Re-throw with additional context if it's not already an Error
      if (error instanceof Error) {
        throw error;
      }
      throw new Error(error instanceof Error ? error.message : 'Registration failed');
    }
  }

  async getUsers(status?: string): Promise<UsersResponse> {
    const endpoint = status && status !== 'all-users' 
      ? `/api/admin/users?status=${status}`
      : '/api/admin/users';
    
    // Get token from localStorage (optional in development mode)
    const token = localStorage.getItem('token');
    
    const headers: HeadersInit = {
      'Content-Type': 'application/json',
    };
    
    // Only add Authorization header if token exists
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }
    
    return this.makeRequest<UsersResponse>(endpoint, {
      headers,
    });
  }

  async getPendingApplications(): Promise<ApplicationsResponse> {
    // Use relative URL to leverage Vite proxy
    const url = '/api/admin/pending-applications';
    
    // Get token from localStorage (optional in development mode)
    const token = localStorage.getItem('token');
    
    try {
      const headers: HeadersInit = {
        'Content-Type': 'application/json',
      };
      
      // Only add Authorization header if token exists
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      
      const response = await fetch(url, {
        headers,
      });
      
      const data = await response.json() as ApplicationsResponse;
      
      if (!response.ok) {
        const errorMessage = data.message || 'Network response was not ok';
        throw new Error(errorMessage);
      }
      
      return data;
      
    } catch (error) {
      console.error('API request failed:', error);
      throw new Error(error instanceof Error ? error.message : 'An error occurred');
    }
  }

  async approveApplication(applicationId: number, approvedSlug: string, adminNotes: string, serviceAreas?: Array<{city: string, state: string, zip?: string}>): Promise<AffiliateApprovalResponse> {
    // Use relative URL to leverage Vite proxy
    const url = `/api/admin/approve-application/${applicationId.toString()}`;
    
    // Get token from localStorage (optional in development mode)
    const token = localStorage.getItem('token');
    
    try {
      const headers: HeadersInit = {
        'Content-Type': 'application/json',
      };
      
      // Only add Authorization header if token exists
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      
      const response = await fetch(url, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          approved_slug: approvedSlug,
          admin_notes: adminNotes,
          ...(serviceAreas && serviceAreas.length > 0 && { service_areas: serviceAreas })
        }),
      });
      
      const data = await response.json() as AffiliateApprovalResponse;
      
      if (!response.ok) {
        const errorMessage = data.message || 'Network response was not ok';
        throw new Error(errorMessage);
      }
      
      return data;
      
    } catch (error) {
      console.error('API request failed:', error);
      throw new Error(error instanceof Error ? error.message : 'An error occurred');
    }
  }

  async rejectApplication(applicationId: number, rejectionReason: string, adminNotes: string): Promise<AffiliateRejectionResponse> {
    // Use relative URL to leverage Vite proxy
    const url = `/api/admin/reject-application/${applicationId.toString()}`;
    
    // Get token from localStorage (optional in development mode)
    const token = localStorage.getItem('token');
    
    try {
      const headers: HeadersInit = {
        'Content-Type': 'application/json',
      };
      
      // Only add Authorization header if token exists
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      
      const response = await fetch(url, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          rejection_reason: rejectionReason,
          admin_notes: adminNotes
        }),
      });
      
      const data = await response.json() as AffiliateRejectionResponse;
      
      if (!response.ok) {
        const errorMessage = data.message || 'Network response was not ok';
        throw new Error(errorMessage);
      }
      
      return data;
      
    } catch (error) {
      console.error('API request failed:', error);
      throw new Error(error instanceof Error ? error.message : 'An error occurred');
    }
  }

  async deleteAffiliate(affiliateId: number): Promise<AffiliateDeletionResponse> {
    // Use relative URL to leverage Vite proxy
    const url = `/api/admin/tenants/${affiliateId.toString()}`;
    
    // Get token from localStorage (optional in development mode)
    const token = localStorage.getItem('token');
    
    try {
      const headers: HeadersInit = {
        'Content-Type': 'application/json',
      };
      
      // Only add Authorization header if token exists
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      
      const response = await fetch(url, {
        method: 'DELETE',
        headers,
      });
      
      const data = await response.json() as AffiliateDeletionResponse;
      
      if (!response.ok) {
        const errorMessage = data.message || 'Network response was not ok';
        throw new Error(errorMessage);
      }
      
      return data;
      
    } catch (error) {
      console.error('API request failed:', error);
      throw new Error(error instanceof Error ? error.message : 'An error occurred');
    }
  }
}

export const apiService = new ApiService(); 

============================
FILE: frontend\src\shared\api\apiClient.ts
============================
import { config } from '@/../config/env';

// Types for the API client
interface ApiResponse<T = unknown> {
  success: boolean;
  data?: T;
  message?: string;
  error?: string;
}

interface RefreshResponse {
  success: boolean;
  accessToken: string;
  refreshToken: string;
  user: unknown;
}

interface ErrorResponse {
  error?: string;
  message?: string;
  retryAfterSeconds?: number;
  remainingAttempts?: number;
  resetTime?: number;
}

// Extend Error interface for custom error codes
interface CustomError extends Error {
  code?: string;
  retryAfterSeconds?: number;
  remainingAttempts?: number;
  resetTime?: number;
}

// One-flight guard for refresh token requests
class RefreshTokenGuard {
  private isRefreshing = false;
  private failedQueue: Array<{
    resolve: (token: string) => void;
    reject: (error: unknown) => void;
  }> = [];

  async executeRefresh(): Promise<string> {
    if (this.isRefreshing) {
      // If already refreshing, queue this request
      return new Promise((resolve, reject) => {
        this.failedQueue.push({ resolve, reject });
      });
    }

    this.isRefreshing = true;

    try {
      const refreshToken = localStorage.getItem('refreshToken');
      if (!refreshToken) {
        throw new Error('No refresh token available');
      }

      const response = await fetch(`${config.apiUrl}/api/auth/refresh`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ refreshToken }),
      });

      if (!response.ok) {
        throw new Error('Refresh token failed');
      }

      const data = await response.json() as RefreshResponse;
      
      // Update tokens in localStorage
      localStorage.setItem('token', data.accessToken);
      localStorage.setItem('refreshToken', data.refreshToken);

      // Process queued requests
      this.processQueue(null, data.accessToken);
      
      return data.accessToken;
    } catch (error: unknown) {
      // Process queued requests with error
      this.processQueue(error, null);
      throw error;
    } finally {
      this.isRefreshing = false;
    }
  }

  private processQueue(error: unknown, token: string | null) {
    this.failedQueue.forEach(({ resolve, reject }) => {
      if (error) {
        reject(error);
      } else if (token) {
        resolve(token);
      }
    });

    this.failedQueue = [];
  }
}

// API Client with token refresh interceptor
class ApiClient {
  private refreshGuard = new RefreshTokenGuard();
  private baseURL: string;

  constructor(baseURL: string) {
    this.baseURL = baseURL;
  }

  // Main request method with automatic token refresh
  async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${this.baseURL}${endpoint}`;
    
    // Add auth header if token exists
    const token = localStorage.getItem('token');
    if (token) {
      options.headers = {
        ...options.headers,
        'Authorization': `Bearer ${token}`,
      };
    }

    try {
      const response = await fetch(url, options);
      
      // If unauthorized and we have a refresh token, try to refresh
      if (response.status === 401 && localStorage.getItem('refreshToken')) {
        try {
          const newToken = await this.refreshGuard.executeRefresh();
          
          // Retry the original request with new token
          const retryOptions = {
            ...options,
            headers: {
              ...options.headers,
              'Authorization': `Bearer ${newToken}`,
            },
          };
          
          const retryResponse = await fetch(url, retryOptions);
          
          if (!retryResponse.ok) {
            throw new Error(`Request failed: ${retryResponse.status.toString()}`);
          }
          
          return await retryResponse.json() as T;
        } catch {
          // Refresh failed, clear auth state and redirect
          this.handleAuthFailure();
          throw new Error('Authentication failed');
        }
      }
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({})) as ErrorResponse;
        
        // Handle rate limiting specifically
        if (response.status === 429) {
          const error: CustomError = new Error(errorData.error ?? 'Rate limited');
          error.code = 'RATE_LIMITED';
          error.retryAfterSeconds = errorData.retryAfterSeconds;
          error.remainingAttempts = errorData.remainingAttempts;
          error.resetTime = errorData.resetTime;
          throw error;
        }
        
        // Handle other error codes
        if (response.status === 401) {
          const error: CustomError = new Error(errorData.error ?? 'Unauthorized');
          error.code = 'UNAUTHORIZED';
          throw error;
        }
        
        if (response.status === 403) {
          const error: CustomError = new Error(errorData.error ?? 'Forbidden');
          error.code = 'FORBIDDEN';
          throw error;
        }
        
        throw new Error(errorData.error ?? errorData.message ?? `Request failed: ${response.status.toString()}`);
      }
      
      return await response.json() as T;
    } catch (error: unknown) {
      console.error('API request failed:', error);
      throw error;
    }
  }

  // Handle authentication failure
  private handleAuthFailure() {
    // Clear all auth data
    localStorage.removeItem('token');
    localStorage.removeItem('refreshToken');
    localStorage.removeItem('user');
    
    // Redirect to login or home page
    if (window.location.pathname !== '/') {
      window.location.href = '/';
    }
  }

  // GET request
  async get<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: 'GET' });
  }

  // POST request
  async post<T>(endpoint: string, data?: unknown): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  // PUT request
  async put<T>(endpoint: string, data?: unknown): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  // DELETE request
  async delete<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: 'DELETE' });
  }

  // PATCH request
  async patch<T>(endpoint: string, data?: unknown): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  // Upload file
  async upload<T>(endpoint: string, formData: FormData): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'POST',
      body: formData,
      // Don't set Content-Type for FormData, let browser set it with boundary
    });
  }
}

// Create and export the API client instance
export const apiClient = new ApiClient(config.apiUrl);

// Export the client class for testing or custom instances
export { ApiClient };

// Export types
export type { ApiResponse, RefreshResponse };


============================
FILE: frontend\src\shared\api\client.ts
============================
import { config } from '@/../config/env';

// Types for the API client
export interface ApiResponse<T = unknown> {
  success: boolean;
  data?: T;
  message?: string;
  error?: string;
}

export interface RefreshResponse {
  success: boolean;
  accessToken: string;
  refreshToken: string;
  user: unknown;
}

export interface ErrorResponse {
  error?: string;
  message?: string;
  retryAfterSeconds?: number;
  remainingAttempts?: number;
  resetTime?: number;
}

// Extend Error interface for custom error codes
export interface CustomError extends Error {
  code?: string;
  retryAfterSeconds?: number;
  remainingAttempts?: number;
  resetTime?: number;
}

// One-flight guard for refresh token requests
class RefreshTokenGuard {
  private isRefreshing = false;
  private failedQueue: Array<{
    resolve: (token: string) => void;
    reject: (error: unknown) => void;
  }> = [];

  async executeRefresh(): Promise<string> {
    if (this.isRefreshing) {
      // If already refreshing, queue this request
      return new Promise((resolve, reject) => {
        this.failedQueue.push({ resolve, reject });
      });
    }

    this.isRefreshing = true;

    try {
      const refreshToken = localStorage.getItem('refreshToken');
      if (!refreshToken) {
        throw new Error('No refresh token available');
      }

      const response = await fetch(`${config.apiUrl}/api/auth/refresh`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ refreshToken }),
      });

      if (!response.ok) {
        throw new Error('Refresh token failed');
      }

      const data = await response.json() as RefreshResponse;
      
      // Update tokens in localStorage
      localStorage.setItem('token', data.accessToken);
      localStorage.setItem('refreshToken', data.refreshToken);

      // Process queued requests
      this.processQueue(null, data.accessToken);
      
      return data.accessToken;
    } catch (error: unknown) {
      // Process queued requests with error
      this.processQueue(error, null);
      throw error;
    } finally {
      this.isRefreshing = false;
    }
  }

  private processQueue(error: unknown, token: string | null) {
    this.failedQueue.forEach(({ resolve, reject }) => {
      if (error) {
        reject(error);
      } else if (token) {
        resolve(token);
      }
    });

    this.failedQueue = [];
  }
}

// API Client with token refresh interceptor
export class ApiClient {
  private refreshGuard = new RefreshTokenGuard();
  private baseURL: string;

  constructor(baseURL: string) {
    this.baseURL = baseURL;
  }

  // Main request method with automatic token refresh
  async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${this.baseURL}${endpoint}`;
    
    // Add auth header if token exists
    const token = localStorage.getItem('token');
    if (token) {
      options.headers = {
        ...options.headers,
        'Authorization': `Bearer ${token}`,
      };
    }

    try {
      const response = await fetch(url, options);
      
      // If unauthorized and we have a refresh token, try to refresh
      if (response.status === 401 && localStorage.getItem('refreshToken')) {
        try {
          const newToken = await this.refreshGuard.executeRefresh();
          
          // Retry the original request with new token
          const retryOptions = {
            ...options,
            headers: {
              ...options.headers,
              'Authorization': `Bearer ${newToken}`,
            },
          };
          
          const retryResponse = await fetch(url, retryOptions);
          
          if (!retryResponse.ok) {
            throw new Error(`Request failed: ${retryResponse.status.toString()}`);
          }
          
          return await retryResponse.json() as T;
        } catch {
          // Refresh failed, clear auth state and redirect
          this.handleAuthFailure();
          throw new Error('Authentication failed');
        }
      }
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({})) as ErrorResponse;
        
        // Handle rate limiting specifically
        if (response.status === 429) {
          const error: CustomError = new Error(errorData.error ?? 'Rate limited');
          error.code = 'RATE_LIMITED';
          error.retryAfterSeconds = errorData.retryAfterSeconds;
          error.remainingAttempts = errorData.remainingAttempts;
          error.resetTime = errorData.resetTime;
          throw error;
        }
        
        // Handle other error codes
        if (response.status === 401) {
          const error: CustomError = new Error(errorData.error ?? 'Unauthorized');
          error.code = 'UNAUTHORIZED';
          throw error;
        }
        
        if (response.status === 403) {
          const error: CustomError = new Error(errorData.error ?? 'Forbidden');
          error.code = 'FORBIDDEN';
          throw error;
        }
        
        throw new Error(errorData.error ?? errorData.message ?? `Request failed: ${response.status.toString()}`);
      }
      
      return await response.json() as T;
    } catch (error: unknown) {
      console.error('API request failed:', error);
      throw error;
    }
  }

  // Handle authentication failure
  private handleAuthFailure() {
    // Clear all auth data
    localStorage.removeItem('token');
    localStorage.removeItem('refreshToken');
    localStorage.removeItem('user');
    
    // Redirect to login or home page
    if (window.location.pathname !== '/') {
      window.location.href = '/';
    }
  }

  // GET request
  async get<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: 'GET' });
  }

  // POST request
  async post<T>(endpoint: string, data?: unknown): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  // PUT request
  async put<T>(endpoint: string, data?: unknown): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  // DELETE request
  async delete<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: 'DELETE' });
  }

  // PATCH request
  async patch<T>(endpoint: string, data?: unknown): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  // Upload file
  async upload<T>(endpoint: string, formData: FormData): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'POST',
      body: formData,
      // Don't set Content-Type for FormData, let browser set it with boundary
    });
  }
}

// Create and export the API client instance
export const apiClient = new ApiClient(config.apiUrl);


============================
FILE: frontend\src\shared\api\errors.ts
============================
// Custom error classes for API operations
export class ApiError extends Error {
  public readonly code: string;
  public readonly status?: number;
  public readonly retryAfterSeconds?: number;
  public readonly remainingAttempts?: number;
  public readonly resetTime?: number;

  constructor(
    message: string,
    code: string,
    status?: number,
    retryAfterSeconds?: number,
    remainingAttempts?: number,
    resetTime?: number
  ) {
    super(message);
    this.name = 'ApiError';
    this.code = code;
    this.status = status;
    this.retryAfterSeconds = retryAfterSeconds;
    this.remainingAttempts = remainingAttempts;
    this.resetTime = resetTime;
  }
}

// Specific error types
export class NetworkError extends ApiError {
  constructor(message: string = 'Network error occurred') {
    super(message, 'NETWORK_ERROR');
    this.name = 'NetworkError';
  }
}

export class TimeoutError extends ApiError {
  constructor(message: string = 'Request timed out') {
    super(message, 'TIMEOUT');
    this.name = 'TimeoutError';
  }
}

export class UnauthorizedError extends ApiError {
  constructor(message: string = 'Unauthorized access') {
    super(message, 'UNAUTHORIZED', 401);
    this.name = 'UnauthorizedError';
  }
}

export class ForbiddenError extends ApiError {
  constructor(message: string = 'Access forbidden') {
    super(message, 'FORBIDDEN', 403);
    this.name = 'ForbiddenError';
  }
}

export class NotFoundError extends ApiError {
  constructor(message: string = 'Resource not found') {
    super(message, 'NOT_FOUND', 404);
    this.name = 'NotFoundError';
  }
}

export class ValidationError extends ApiError {
  constructor(message: string = 'Validation failed') {
    super(message, 'VALIDATION_ERROR', 400);
    this.name = 'ValidationError';
  }
}

export class RateLimitError extends ApiError {
  constructor(
    message: string = 'Rate limit exceeded',
    retryAfterSeconds?: number,
    remainingAttempts?: number,
    resetTime?: number
  ) {
    super(message, 'RATE_LIMITED', 429, retryAfterSeconds, remainingAttempts, resetTime);
    this.name = 'RateLimitError';
  }
}

export class ServerError extends ApiError {
  constructor(message: string = 'Internal server error', status: number = 500) {
    super(message, 'SERVER_ERROR', status);
    this.name = 'ServerError';
  }
}

// Error factory function
export const createApiError = (
  error: unknown,
  defaultMessage: string = 'An error occurred'
): ApiError => {
  if (error instanceof ApiError) {
    return error;
  }

  if (error instanceof Error) {
    // Check for specific error patterns
    if (error.name === 'AbortError') {
      return new TimeoutError('Request was aborted');
    }

    if (error.message.includes('fetch')) {
      return new NetworkError('Network request failed');
    }

    if (error.message.includes('timeout')) {
      return new TimeoutError('Request timed out');
    }

    // Check for HTTP status codes in error message
    const statusMatch = error.message.match(/(\d{3})/);
    if (statusMatch) {
      const status = parseInt(statusMatch[1], 10);
      switch (status) {
        case 401:
          return new UnauthorizedError(error.message);
        case 403:
          return new ForbiddenError(error.message);
        case 404:
          return new NotFoundError(error.message);
        case 429:
          return new RateLimitError(error.message);
        case 400:
          return new ValidationError(error.message);
        case 500:
        case 502:
        case 503:
        case 504:
          return new ServerError(error.message, status);
        default:
          return new ApiError(error.message, 'HTTP_ERROR', status);
      }
    }

    return new ApiError(error.message, 'UNKNOWN_ERROR');
  }

  return new ApiError(defaultMessage, 'UNKNOWN_ERROR');
};

// Error handler utility
export const handleApiError = (error: unknown): ApiError => {
  const apiError = createApiError(error);
  
  // Log error for debugging
  console.error('API Error:', {
    name: apiError.name,
    message: apiError.message,
    code: apiError.code,
    status: apiError.status,
    retryAfterSeconds: apiError.retryAfterSeconds,
    remainingAttempts: apiError.remainingAttempts,
    resetTime: apiError.resetTime,
  });

  return apiError;
};

// Error type guards
export const isApiError = (error: unknown): error is ApiError => {
  return error instanceof ApiError;
};

export const isNetworkError = (error: unknown): error is NetworkError => {
  return error instanceof NetworkError;
};

export const isTimeoutError = (error: unknown): error is TimeoutError => {
  return error instanceof TimeoutError;
};

export const isUnauthorizedError = (error: unknown): error is UnauthorizedError => {
  return error instanceof UnauthorizedError;
};

export const isForbiddenError = (error: unknown): error is ForbiddenError => {
  return error instanceof ForbiddenError;
};

export const isNotFoundError = (error: unknown): error is NotFoundError => {
  return error instanceof NotFoundError;
};

export const isValidationError = (error: unknown): error is ValidationError => {
  return error instanceof ValidationError;
};

export const isRateLimitError = (error: unknown): error is RateLimitError => {
  return error instanceof RateLimitError;
};

export const isServerError = (error: unknown): error is ServerError => {
  return error instanceof ServerError;
};


============================
FILE: frontend\src\shared\api\index.ts
============================
export type { 
  AffiliateApplication,
  AffiliateApprovalResponse,
  AffiliateDeletionResponse,
  AffiliateRejectionResponse,
  ApiResponse, 
  ApplicationsResponse,
  LoginResponse,
  QuoteFormData, 
  RefreshResponse,
  User, 
  UsersResponse
} from './api';
export { apiService } from './api';
export { ApiClient,apiClient } from './apiClient';
export { ApiClient as ApiClientClass, apiClient as apiClientInstance } from './client';
export * from './errors';

// Tenant config API
export {
  fetchTenantConfigById,
  fetchTenantConfigBySlug,
  fetchTenants,
  tenantConfigKeys
} from './tenantConfig.api';

// Tenant API
export type { Business, BusinessResponse, ServiceArea, Tenant, TenantApiResponse, TenantsListResponse } from './tenantApi';
export {
  fetchBusinessBySlug,
  fetchTenantBySlug,
  fetchTenantsByIndustry,
  getIndustryAssetsPath,
  getIndustryDataPath,
  getIndustrySiteConfigPath
} from './tenantApi';

// Industry Config API
export { fetchIndustryConfig } from './industryConfigApi';

============================
FILE: frontend\src\shared\api\industryConfigApi.ts
============================
/**
 * Industry Configuration API
 * 
 * Single responsibility: Load industry-specific site configurations
 * All industries now use modular config approach via index.ts loaders
 */

import type { MainSiteConfig } from '@/shared/types/location';

/**
 * Fetch site configuration for a given industry
 * Uses modular config loaders for all industries
 * 
 * @param industry - Industry identifier (e.g., 'mobile-detailing', 'pet-grooming')
 * @returns MainSiteConfig object or null if not found
 * 
 * @example
 * ```ts
 * const config = await fetchIndustryConfig('mobile-detailing');
 * console.log(config.hero.h1);
 * ```
 */
export async function fetchIndustryConfig(industry: string): Promise<MainSiteConfig | null> {
  try {
    // All industries now use modular config files with index.ts loaders
    switch (industry) {
      case 'mobile-detailing': {
        const { loadMobileDetailingConfig } = await import('@/data/mobile-detailing');
        return loadMobileDetailingConfig();
      }
      
      case 'pet-grooming': {
        const { loadPetGroomingConfig } = await import('@/data/pet-grooming');
        return await loadPetGroomingConfig();
      }
      
      case 'maid-service': {
        const { loadMaidServiceConfig } = await import('@/data/maid-service');
        return await loadMaidServiceConfig();
      }
      
      case 'lawncare': {
        const { loadLawncareConfig } = await import('@/data/lawncare');
        return await loadLawncareConfig();
      }
      
      default:
        console.warn(`Unknown industry: ${industry}`);
        return null;
    }
  } catch (error) {
    console.error(`Failed to load config for industry: ${industry}`, error);
    return null;
  }
}



============================
FILE: frontend\src\shared\api\services.api.ts
============================
/**
 * Services API Layer
 * Handles all service-related API calls
 * Moved to shared layer to allow cross-feature usage
 */

export interface Service {
  id: string;
  name: string;
  description: string;
  price: number;
  duration: number;
  category: string;
  vehicle_type: string;
  tenant_id: string;
  created_at: string;
  updated_at: string;
}

export interface ServiceCategory {
  id: string;
  name: string;
  description: string;
  vehicle_type: string;
}

export interface CreateServiceRequest {
  name: string;
  description: string;
  price: number;
  duration: number;
  category: string;
  vehicle_type: string;
  tenant_id: string;
}

export interface UpdateServiceRequest {
  name?: string;
  description?: string;
  price?: number;
  duration?: number;
  category?: string;
  vehicle_type?: string;
}

export interface ServicesApiResponse {
  success: boolean;
  data: Service | Service[];
  error?: string;
}

export const servicesApi = {
  /**
   * Get services for a tenant and vehicle type
   */
  getServices: async (tenantId: string, vehicleId: string, categoryId: string): Promise<Service[]> => {
    try {
      const response = await fetch(`/api/services/tenant/${tenantId}/vehicle/${vehicleId}/category/${categoryId}`);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch services: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as ServicesApiResponse;
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to fetch services');
      }
      
      return Array.isArray(result.data) ? result.data : [result.data];
    } catch (error) {
      console.error('Services API Error:', error);
      throw new Error(`Failed to load services: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Create a new service
   */
  createService: async (serviceData: CreateServiceRequest): Promise<Service> => {
    try {
      const response = await fetch('/api/services', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(serviceData),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to create service: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as ServicesApiResponse;
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to create service');
      }
      
      return result.data as Service;
    } catch (error) {
      console.error('Services API Error:', error);
      throw new Error(`Failed to create service: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Get a specific service by ID
   */
  getService: async (serviceId: string): Promise<Service> => {
    try {
      const response = await fetch(`/api/services/${serviceId}`);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch service: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as ServicesApiResponse;
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to fetch service');
      }
      
      return result.data as Service;
    } catch (error) {
      console.error('Services API Error:', error);
      throw new Error(`Failed to load service: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Update a service
   */
  updateService: async (serviceId: string, serviceData: UpdateServiceRequest): Promise<Service> => {
    try {
      const response = await fetch(`/api/services/${serviceId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(serviceData),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to update service: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as ServicesApiResponse;
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to update service');
      }
      
      return result.data as Service;
    } catch (error) {
      console.error('Services API Error:', error);
      throw new Error(`Failed to update service: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Delete a service
   */
  deleteService: async (serviceId: string): Promise<void> => {
    try {
      const response = await fetch(`/api/services/${serviceId}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        throw new Error(`Failed to delete service: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as { success: boolean; error?: string };
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to delete service');
      }
    } catch (error) {
      console.error('Services API Error:', error);
      throw new Error(`Failed to delete service: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  },

  /**
   * Get service categories
   */
  getServiceCategories: async (vehicleType: string): Promise<ServiceCategory[]> => {
    try {
      const response = await fetch(`/api/services/categories?vehicle_type=${encodeURIComponent(vehicleType)}`);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch service categories: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json() as { success: boolean; data: ServiceCategory[] };
      
      if (!result.success) {
        throw new Error('Failed to fetch service categories');
      }
      
      return result.data;
    } catch (error) {
      console.error('Services API Error:', error);
      throw new Error(`Failed to load service categories: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
};


============================
FILE: frontend\src\shared\api\tenantApi.ts
============================
/**
 * API utilities for tenant/business data with industry support
 * 
 * Single responsibility: HTTP calls to tenant endpoints
 */

import { env } from '../env';
import type { Vertical } from '../types/tenant.types';
import type { Business, BusinessResponse } from '../types/tenant-business.types';

const API_BASE_URL = env.VITE_API_URL || ''; // Empty string uses relative URLs (Vite proxy)

// Re-export types for convenience
export type { Business, BusinessResponse } from '../types/tenant-business.types';

export interface Tenant {
  id: number;
  slug: string;
  business_name: string;
  owner: string;
  first_name: string;
  last_name: string;
  user_id?: number;
  application_status: 'pending' | 'approved' | 'rejected';
  business_start_date: string;
  business_phone: string;
  personal_phone?: string;
  business_email: string;
  personal_email?: string;
  twilio_phone: string;
  sms_phone: string;
  website: string;
  gbp_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  youtube_url?: string;
  tiktok_url?: string;
  source: string;
  notes?: string;
  service_areas: ServiceArea[];
  application_date: string;
  approved_date?: string;
  last_activity: string;
  created_at: string;
  updated_at: string;
  google_maps_url?: string;
  industry: Vertical;
  logo_url?: string;
}

export interface ServiceArea {
  zip?: string;
  city: string;
  state: string;
  primary?: boolean;
  minimum?: number;
  multiplier?: number;
}

export interface TenantApiResponse {
  success: boolean;
  data?: Tenant;
  error?: string;
}

export interface TenantsListResponse {
  success: boolean;
  data?: Tenant[];
  error?: string;
}

/**
 * Fetch tenant data by slug with industry context
 * Legacy format - returns Tenant type
 */
export async function fetchTenantBySlug(slug: string): Promise<TenantApiResponse> {
  try {
    const response = await fetch(`${API_BASE_URL}/api/tenants/${slug}`);
    
    if (!response.ok) {
      throw new Error(`Failed to fetch tenant: ${response.status}`);
    }
    
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- response.json() returns any
    const data: Tenant = await response.json();
    return { success: true, data };
  } catch (error) {
    console.error('Error fetching tenant:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    };
  }
}

/**
 * Fetch business data by slug
 * Used by DataContext - returns Business type with BusinessResponse wrapper
 */
export async function fetchBusinessBySlug(slug: string): Promise<Business> {
  const response = await fetch(`${API_BASE_URL}/api/tenants/${slug}`);
  
  if (!response.ok) {
    throw new Error('Failed to fetch business data');
  }
  
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- response.json() returns any
  const result: BusinessResponse = await response.json();
  
  if (!result.success) {
    throw new Error('API returned error');
  }
  
  return result.data;
}

/**
 * Fetch all tenants by industry
 */
export async function fetchTenantsByIndustry(industry: Vertical): Promise<TenantsListResponse> {
  try {
    const response = await fetch(`${API_BASE_URL}/api/tenants?industry=${industry}`);
    
    if (!response.ok) {
      throw new Error(`Failed to fetch tenants: ${response.status}`);
    }
    
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- response.json() returns any
    const data: Tenant[] = await response.json();
    return { success: true, data };
  } catch (error) {
    console.error('Error fetching tenants by industry:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    };
  }
}

/**
 * Get industry-specific site configuration path
 */
export function getIndustrySiteConfigPath(industry: Vertical): string {
  return `/src/data/${industry}/site.json`;
}

/**
 * Get industry-specific public assets path
 */
export function getIndustryAssetsPath(industry: Vertical): string {
  return `/${industry}/images`;
}

/**
 * Get industry-specific data path
 */
export function getIndustryDataPath(industry: Vertical): string {
  return `/${industry}/data`;
}



============================
FILE: frontend\src\shared\api\tenantConfig.api.ts
============================
/**
 * Tenant Configuration API
 * Handles fetching and validation of tenant configs
 */

import { validateTenantConfig } from '../schemas';
import { TenantConfig, Vertical } from '../types';
import { apiClient } from './client';

/**
 * Affiliate API response structure
 */
interface AffiliateApiResponse {
  id?: string | number;
  slug?: string;
  business_name: string;
  business_phone?: string;
  phone?: string;
  business_email?: string;
  email?: string;
  facebook_url?: string;
  instagram_url?: string;
  youtube_url?: string;
  tiktok_url?: string;
  service_areas?: Array<{ city: string; state: string; primary?: boolean }>;
  industry?: string;
  logo_url?: string;
}

/**
 * Fetch tenant configuration by slug
 * 
 * @param slug - Tenant slug (e.g., 'jps', 'johns-detailing')
 * @returns Validated TenantConfig
 */
export async function fetchTenantConfigBySlug(slug: string): Promise<TenantConfig> {
  const response = await apiClient.get<{ data?: AffiliateApiResponse }>(`/api/tenants/${slug}`);
  
  // API returns affiliate data, needs conversion
  const { data } = response;
  
  if (!data || !data.business_name) {
    throw new Error(`Tenant not found: ${slug}`);
  }
  
  // Import conversion helper dynamically to avoid circular deps
  const { affiliateToTenantConfig } = await import('../utils/tenantConfigMigration');
  
  // Convert affiliate API response to TenantConfig
  const config = affiliateToTenantConfig({
    id: data.id,
    slug: data.slug,
    business_name: data.business_name,
    business_phone: data.business_phone || data.phone,
    business_email: data.business_email || data.email,
    facebook_url: data.facebook_url,
    instagram_url: data.instagram_url,
    tiktok_url: data.tiktok_url,
    youtube_url: data.youtube_url,
    service_areas: data.service_areas,
    industry: data.industry,
    logo_url: data.logo_url
  });
  
  // Validate
  const result = validateTenantConfig(config);
  
  if (!result.success) {
    console.error('Tenant config validation failed:', result.errors);
    throw new Error('Invalid tenant configuration');
  }
  
  return result.data;
}

/**
 * Fetch tenant configuration by ID
 * 
 * @param tenantId - Tenant ID
 * @returns Validated TenantConfig
 */
export async function fetchTenantConfigById(tenantId: string | number): Promise<TenantConfig> {
  const response = await apiClient.get<{ data?: AffiliateApiResponse }>(`/api/tenants/id/${tenantId}`);
  
  const { data } = response;
  
  if (!data || !data.business_name) {
    throw new Error(`Tenant not found: ${tenantId}`);
  }
  
  const { affiliateToTenantConfig } = await import('../utils/tenantConfigMigration');
  
  const config = affiliateToTenantConfig({
    id: data.id,
    slug: data.slug,
    business_name: data.business_name,
    business_phone: data.business_phone || data.phone,
    business_email: data.business_email || data.email,
    facebook_url: data.facebook_url,
    instagram_url: data.instagram_url,
    tiktok_url: data.tiktok_url,
    youtube_url: data.youtube_url,
    service_areas: data.service_areas,
    industry: data.industry,
    logo_url: data.logo_url
  });
  
  const result = validateTenantConfig(config);
  
  if (!result.success) {
    throw new Error('Invalid tenant configuration');
  }
  
  return result.data;
}

/**
 * List all tenants (optionally filtered by vertical)
 * 
 * @param vertical - Optional vertical filter
 * @returns Array of TenantConfig
 */
export async function fetchTenants(vertical?: Vertical): Promise<TenantConfig[]> {
  const queryParams = vertical ? `?industry=${vertical}` : '';
  const response = await apiClient.get<{ data: AffiliateApiResponse[] }>(`/api/tenants${queryParams}`);
  
  const { data } = response;
  
  if (!Array.isArray(data)) {
    return [];
  }
  
  const { affiliateToTenantConfig } = await import('../utils/tenantConfigMigration');
  
  // Convert and validate each tenant
  const configs = data.map(affiliate => {
    return affiliateToTenantConfig({
      id: affiliate.id,
      slug: affiliate.slug,
      business_name: affiliate.business_name,
      business_phone: affiliate.business_phone || affiliate.phone,
      business_email: affiliate.business_email || affiliate.email,
      facebook_url: affiliate.facebook_url,
      instagram_url: affiliate.instagram_url,
      tiktok_url: affiliate.tiktok_url,
      youtube_url: affiliate.youtube_url,
      service_areas: affiliate.service_areas,
      industry: affiliate.industry,
      logo_url: affiliate.logo_url
    });
  });
  
  return configs;
}

/**
 * Tenant config cache key factory
 * Provides consistent React Query cache keys
 */
export const tenantConfigKeys = {
  all: ['tenant', 'config'] as const,
  lists: () => [...tenantConfigKeys.all, 'list'] as const,
  list: (vertical?: Vertical) => [...tenantConfigKeys.lists(), { vertical }] as const,
  details: () => [...tenantConfigKeys.all, 'detail'] as const,
  detail: (identifier: string | number) => [...tenantConfigKeys.details(), identifier] as const,
  bySlug: (slug: string) => [...tenantConfigKeys.detail(slug), 'slug'] as const,
  byId: (id: string | number) => [...tenantConfigKeys.detail(id), 'id'] as const,
};



============================
FILE: frontend\src\shared\api\websiteContent.api.ts
============================
// Website content API calls

export interface FAQItem {
  question: string;
  answer: string;
  category: string;
}

export interface WebsiteContentData {
  hero_title?: string;
  hero_subtitle?: string;
  reviews_title?: string;
  reviews_subtitle?: string;
  reviews_avg_rating?: number;
  reviews_total_count?: number;
  faq_title?: string;
  faq_subtitle?: string;
  faq_items?: FAQItem[];
  created_at?: string;
  updated_at?: string;
}

export interface WebsiteContentResponse {
  success: boolean;
  content?: WebsiteContentData;
  message?: string;
}

export const websiteContentApi = {
  // Get website content for a specific tenant
  getWebsiteContent: async (tenantSlug: string): Promise<WebsiteContentData> => {
    const response = await fetch(`/api/website-content/${tenantSlug}`, {
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch website content: ${response.statusText}`);
    }

    const data = await response.json() as WebsiteContentResponse;
    
    if (!data.success || !data.content) {
      throw new Error(data.message || 'Failed to fetch website content');
    }

    return data.content;
  },

  // Get website content for the main site (no tenant slug)
  getMainSiteContent: async (): Promise<WebsiteContentData> => {
    const response = await fetch('/api/website-content/main', {
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch main site content: ${response.statusText}`);
    }

    const data = await response.json() as WebsiteContentResponse;
    
    if (!data.success || !data.content) {
      throw new Error(data.message || 'Failed to fetch main site content');
    }

    return data.content;
  }
};


============================
FILE: frontend\src\shared\components\AddToHomeScreen.tsx
============================
/**
 * Add to Home Screen Component
 * Prompts users to install the PWA on mobile devices only
 * Works on iOS and Android mobile devices
 * Desktop and tablet users will not see this prompt
 */

import React, { useEffect, useState } from 'react';
import { Download, Smartphone, X } from 'lucide-react';

import { useMobileDetection } from '@/shared/hooks/useMobileDetection';
import { Button } from '@/shared/ui';

interface AddToHomeScreenProps {
  tenantSlug?: string;
  businessName?: string;
  onClose?: () => void;
  autoShow?: boolean;
}

interface BeforeInstallPromptEvent extends Event {
  prompt: () => Promise<void>;
  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;
}

export const AddToHomeScreen: React.FC<AddToHomeScreenProps> = ({
  tenantSlug,
  businessName = 'Dashboard',
  onClose,
  autoShow = true
}) => {
  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);
  const [showPrompt, setShowPrompt] = useState(false);
  const [isIOS, setIsIOS] = useState(false);
  const [isInstalled, setIsInstalled] = useState(false);
  const [userDismissed, setUserDismissed] = useState(false);
  const [installStatus, setInstallStatus] = useState<string>('');
  const isMobile = useMobileDetection();

  // Debug logging removed for production

  useEffect(() => {
    
    // Check localStorage for previous dismissals
    const iosDismissed = localStorage.getItem('pwa-ios-prompt-dismissed');
    const androidDismissed = localStorage.getItem('pwa-android-prompt-dismissed');
    
    // TEMPORARY: Clear dismissal flags for testing
    if (iosDismissed || androidDismissed) {
      localStorage.removeItem('pwa-ios-prompt-dismissed');
      localStorage.removeItem('pwa-android-prompt-dismissed');
      setUserDismissed(false);
    }
    
    // Check if already installed (both display-mode and navigator.standalone for iOS)
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches || (window.navigator as { standalone?: boolean }).standalone;
    if (isStandalone) {
      setIsInstalled(true);
      return;
    }

    // Only proceed if on mobile device
    if (!isMobile) {
      return;
    }


    // Detect iOS
    const iOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    setIsIOS(iOS);

    // Listen for the beforeinstallprompt event (Android)
    const handleBeforeInstallPrompt = (e: Event) => {
      e.preventDefault();
      setDeferredPrompt(e as BeforeInstallPromptEvent);
      if (autoShow) {
        setShowPrompt(true);
      }
    };

    // Listen for successful installation
    const handleAppInstalled = () => {
      setIsInstalled(true);
      setShowPrompt(false);
      setDeferredPrompt(null);
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('appinstalled', handleAppInstalled);

    // Show iOS prompt if on iOS and auto-show enabled
    if (iOS && autoShow && !isInstalled) {
      // Don't show if they've dismissed it before
      const dismissed = localStorage.getItem('pwa-ios-prompt-dismissed');
      if (!dismissed) {
        setShowPrompt(true);
      }
    }

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
    };
  }, [autoShow, isInstalled, isMobile, tenantSlug, businessName]);

  // Separate effect to handle mobile detection changes
  useEffect(() => {
    
    if (isMobile && !isInstalled && autoShow && !showPrompt && !userDismissed) {
      
      const iOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
      
      // For iOS, always show manual prompt (no beforeinstallprompt event)
      if (iOS) {
        const dismissed = localStorage.getItem('pwa-ios-prompt-dismissed');
        if (!dismissed) {
          setShowPrompt(true);
        }
      }
      // For Android, check if previously dismissed
      else {
        const dismissed = localStorage.getItem('pwa-android-prompt-dismissed');
        if (!dismissed) {
          // Show prompt regardless of deferred prompt availability
          setShowPrompt(true);
        }
      }
    }
  }, [isMobile, deferredPrompt, isInstalled, showPrompt, autoShow, userDismissed]);

  // Update manifest link if tenant-specific
  useEffect(() => {
    if (tenantSlug) {
      const manifestLink = document.querySelector('link[rel="manifest"]');
      if (manifestLink) {
        manifestLink.setAttribute('href', `/api/tenant-manifest/${tenantSlug}/manifest.json`);
      }
    }
  }, [tenantSlug]);

  const handleInstallClick = async () => {
    setInstallStatus('Checking install options...');
    
    if (deferredPrompt) {
      setInstallStatus('Opening install dialog...');
      try {
        // Show the install prompt
        await deferredPrompt.prompt();

        // Wait for the user's response
        const choiceResult = await deferredPrompt.userChoice;

        if (choiceResult.outcome === 'accepted') {
        setInstallStatus('✅ Install accepted! Check your home screen.');
        } else {
        setInstallStatus('Install dialog dismissed');
        }

        // Clear the deferred prompt
        setDeferredPrompt(null);
        setTimeout(() => { setShowPrompt(false); }, 2000);
      } catch {
        setInstallStatus('❌ Install failed. Try manual install.');
      }
    } else {
      setInstallStatus('📱 Use browser menu (⋮) → "Add to Home screen"');
      
      // For manual installation, keep the prompt open so user can see instructions
      setTimeout(() => {
        setInstallStatus('');
      }, 5000);
    }
  };

  const handleClose = () => {
    setShowPrompt(false);
    setUserDismissed(true);
    if (isIOS) {
      // Remember that user dismissed iOS prompt
      localStorage.setItem('pwa-ios-prompt-dismissed', 'true');
    } else {
      // Remember that user dismissed Android prompt
      localStorage.setItem('pwa-android-prompt-dismissed', 'true');
    }
    onClose?.();
  };

  // Log render state (moved to useEffect to avoid race conditions)
  useEffect(() => {
  }, [isMobile, showPrompt, isInstalled]);

  // Don't show if not mobile, already installed, or no prompt available
  if (!isMobile || isInstalled || !showPrompt) {
    return null;
  }

  return (
    <>
      
      <div className="fixed bottom-0 left-0 right-0 z-50 bg-gradient-to-t from-stone-900 via-stone-900 to-stone-900/95 border-t border-stone-700 shadow-2xl">
        <div className="max-w-2xl mx-auto p-4 sm:p-6">
          <div className="flex items-start gap-4">
            <div className="flex-shrink-0 w-12 h-12 bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl flex items-center justify-center shadow-lg">
              <Smartphone className="w-6 h-6 text-white" />
            </div>

            <div className="flex-1 min-w-0">
              <h3 className="text-lg font-semibold text-white mb-1">
                Add {businessName} to Home Screen
              </h3>
              
              {isIOS ? (
                <div className="text-sm text-gray-300 space-y-2">
                  <p>Access your dashboard instantly!</p>
                  <ol className="list-decimal list-inside space-y-1 text-xs text-gray-400">
                    <li>Tap the Share button at the bottom</li>
                    <li>Scroll down and tap &quot;Add to Home Screen&quot;</li>
                    <li>Tap &quot;Add&quot; to confirm</li>
                  </ol>
                </div>
              ) : (
                <div className="text-sm text-gray-300 space-y-2">
                  <p>Install the app for quick access to your dashboard.</p>
                  <ol className="list-decimal list-inside space-y-1 text-xs text-gray-400">
                    <li>Tap the menu button (⋮) in your browser</li>
                    <li>Look for &quot;Add to Home screen&quot; or &quot;Install app&quot;</li>
                    <li>Tap &quot;Add&quot; to confirm</li>
                  </ol>
                  <p className="text-xs text-gray-400 mt-2">
                    Works offline and loads instantly!
                  </p>
                </div>
              )}
            </div>

            <button
              onClick={() => { handleClose(); }}
              className="flex-shrink-0 p-2 text-gray-400 hover:text-white hover:bg-stone-800 rounded-lg transition-colors"
              aria-label="Close"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Status message */}
          {installStatus && (
            <div className="mt-4 p-3 bg-blue-900/50 border border-blue-700 rounded-lg">
              <p className="text-sm text-blue-200 text-center">{installStatus}</p>
            </div>
          )}

          <div className="mt-4 flex flex-col gap-3">
            {!isIOS && (
              <Button
                onClick={() => { void handleInstallClick(); }}
                variant="primary"
                size="lg"
                className="w-full bg-orange-600 hover:bg-orange-700 flex items-center justify-center gap-2"
              >
                <Download className="w-5 h-5" />
                {deferredPrompt ? 'Install App' : 'Install App'}
              </Button>
            )}
            <Button
              onClick={() => { handleClose(); }}
              variant="outline"
              size="lg"
              className="w-full border-stone-600 text-gray-300 hover:bg-stone-800"
            >
              {isIOS ? 'Got it' : 'Maybe Later'}
            </Button>
          </div>
        </div>
      </div>
    </>
  );
};

export default AddToHomeScreen;

============================
FILE: frontend\src\shared\components\ErrorFallback.tsx
============================
import React from 'react';

interface ErrorFallbackProps {
  error?: Error;
  resetError?: () => void;
}

const ErrorFallback: React.FC<ErrorFallbackProps> = ({ error, resetError: _resetError }) => {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center p-8">
        <h1 className="text-2xl font-bold text-gray-900 mb-4">Something went wrong</h1>
        {error && (
          <p className="text-red-600 mb-4">{error.message}</p>
        )}
        <button
          onClick={() => { window.location.reload(); }}
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          Reload Page
        </button>
      </div>
    </div>
  );
};

export default ErrorFallback;


============================
FILE: frontend\src\shared\components\HomePageLayout.tsx
============================
import React from 'react';

interface HomePageLayoutProps {
  children: React.ReactNode;
}

/**
 * Simple layout wrapper for home and location pages
 */
const HomePageLayout: React.FC<HomePageLayoutProps> = ({ children }) => {
  return (
    <div className="h-screen snap-y snap-mandatory overflow-y-scroll snap-container">
      {children}
    </div>
  );
};

export default HomePageLayout;



============================
FILE: frontend\src\shared\components\index.ts
============================
// SEO and meta tag management
export { SeoHead } from './SeoHead';

// PWA functionality
export { AddToHomeScreen } from './AddToHomeScreen';



============================
FILE: frontend\src\shared\components\MergeDemo.tsx
============================
/**
 * Demo component showing deep merge functionality
 * Useful for development and testing merge behavior
 * 
 * NOTE: Temporarily disabled - needs refactoring for modular data structure
 * mobile-detailing no longer uses site.json, uses assets.json + content-defaults.json instead
 */

import React from 'react';

// import { useState } from 'react';

// import bullheadCityData from '@/data/locations/az/bullhead-city.json';
// import lasVegasData from '@/data/locations/nv/las-vegas.json';
// import { useMergedLocationDataDebug } from '@/shared/hooks/useMergedLocationData';
// import type { LocationPage } from '@/shared/types/location';

// Commented-out code below references these - uncomment if re-enabling
// import { ValidationStatus } from '@/shared/ui';

interface MergeDemoProps {
  className?: string;
}

// Type the imported JSON data
// const typedBullheadData = bullheadCityData as LocationPage;
// const typedLasVegasData = lasVegasData as LocationPage;

export const MergeDemo: React.FC<MergeDemoProps> = ({ className = '' }) => {
  // Disabled - needs refactoring for modular data
  return (
    <div className={`p-6 bg-gray-900 text-white ${className}`}>
      <h2 className="text-2xl font-bold mb-4">MergeDemo Component (Deprecated)</h2>
      <p className="text-gray-400">
        This component is disabled and needs refactoring for the new modular data structure.
      </p>
      <p className="text-gray-400 mt-2">
        mobile-detailing now uses: assets.json, content-defaults.json, seo-defaults.json instead of site.json
      </p>
    </div>
  );
};

// Original implementation deleted - referenced location files that no longer exist

export default MergeDemo;


============================
FILE: frontend\src\shared\components\seo\JsonLdSchema.tsx
============================
/**
 * JSON-LD Schema Component
 * Renders structured data for SEO
 */

import React from 'react';
import { Helmet } from 'react-helmet-async';

interface JsonLdSchemaProps {
  schema: any | any[];
  id?: string;
}

export const JsonLdSchema: React.FC<JsonLdSchemaProps> = ({ schema, id }) => {
  const schemas = Array.isArray(schema) ? schema : [schema];
  
  return (
    <Helmet>
      {schemas.map((schemaData, index) => (
        <script
          key={id ? `${id}-${index}` : index}
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify(schemaData, null, 2),
          }}
        />
      ))}
    </Helmet>
  );
};


============================
FILE: frontend\src\shared\components\seo\SeoHead.tsx
============================
import { useEffect } from 'react';

import { useSEO } from '@/shared/hooks/useSEO';

export interface SeoHeadProps {
  /** Custom page title (overrides business name) */
  title?: string;
  /** Custom meta description */
  description?: string;
  /** Custom meta keywords */
  keywords?: string[];
  /** Custom Open Graph image */
  ogImage?: string;
  /** Custom Twitter image (defaults to ogImage if not provided) */
  twitterImage?: string;
  /** Custom canonical path */
  canonicalPath?: string;
  /** Whether this is a preview page (adds noindex) */
  isPreview?: boolean;
  /** Custom robots directive */
  robots?: string;
}

/**
 * Centralized SEO head management component
 * 
 * This component wraps the existing useSEO hook with additional functionality:
 * - Automatic preview detection and noindex handling
 * - Enhanced robots directive management
 * - Integration with existing SEO infrastructure
 * 
 * @example
 * // Use defaults from site config
 * <SeoHead />
 * 
 * @example
 * // Custom title and description
 * <SeoHead 
 *   title="Contact Us - Business Name"
 *   description="Get in touch with our team"
 * />
 * 
 * @example
 * // Preview page (automatically adds noindex)
 * <SeoHead isPreview />
 */
export const SeoHead = ({
  title,
  description,
  keywords,
  ogImage,
  twitterImage,
  canonicalPath,
  isPreview = false,
  robots,
}: SeoHeadProps) => {
  // Use the existing useSEO hook for core functionality
  useSEO({
    title,
    description,
    keywords,
    ogImage,
    twitterImage,
    canonicalPath,
  });

  // Handle preview-specific robots directive
  useEffect(() => {
    if (isPreview) {
      updateElement('meta-robots', 'content', 'noindex,nofollow');
    } else if (robots) {
      updateElement('meta-robots', 'content', robots);
    }
  }, [isPreview, robots]);

  return null; // This component only manages head tags
};

/**
 * Update an element by ID
 */
function updateElement(elementId: string, attribute: string, value: string): void {
  const element = document.getElementById(elementId);
  if (element) {
    if (attribute === 'textContent') {
      element.textContent = value;
    } else {
      element.setAttribute(attribute, value);
    }
  }
}


============================
FILE: frontend\src\shared\components\ValidationStatus.tsx
============================
/**
 * ValidationStatus component for displaying validation results
 * Useful for development and debugging
 */

import React from 'react';

import { useLocationValidation } from '@/shared/hooks/useLocationValidation';
import type { LocationPage } from '@/shared/types/location';

interface ValidationStatusProps {
  locationData: LocationPage | null | undefined;
  showWarnings?: boolean;
  className?: string;
}

export const ValidationStatus: React.FC<ValidationStatusProps> = ({ 
  locationData, 
  showWarnings = true,
  className = ''
}) => {
  const validation = useLocationValidation(locationData);

  // Don't render anything in production
  if (import.meta.env.PROD) {
    return null;
  }

  // Don't render if everything is valid and warnings are hidden
  if (!validation.hasErrors && (!showWarnings || !validation.hasWarnings)) {
    return null;
  }

  return (
    <div className={`p-4 border rounded-lg ${className} ${
      validation.hasErrors 
        ? 'border-red-200 bg-red-50' 
        : 'border-yellow-200 bg-yellow-50'
    }`}>
      <div className="flex items-center gap-2 mb-2">
        {validation.hasErrors ? (
          <>
            <span className="text-red-600">❌</span>
            <span className="font-semibold text-red-800">
              Validation Errors ({validation.errorCount})
            </span>
          </>
        ) : (
          <>
            <span className="text-yellow-600">⚠️</span>
            <span className="font-semibold text-yellow-800">
              Validation Warnings ({validation.warningCount})
            </span>
          </>
        )}
      </div>

      {validation.hasErrors && (
        <div className="mb-3">
          <h4 className="text-sm font-medium text-red-700 mb-1">Errors:</h4>
          <ul className="text-sm text-red-600 space-y-1">
            {validation.errors.map((error, index) => (
              <li key={index} className="flex items-start gap-2">
                <span className="text-red-400 mt-0.5">•</span>
                <span>{error}</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {showWarnings && validation.hasWarnings && (
        <div>
          <h4 className="text-sm font-medium text-yellow-700 mb-1">Warnings:</h4>
          <ul className="text-sm text-yellow-600 space-y-1">
            {validation.warnings.map((warning, index) => (
              <li key={index} className="flex items-start gap-2">
                <span className="text-yellow-400 mt-0.5">•</span>
                <span>{warning}</span>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default ValidationStatus;


============================
FILE: frontend\src\shared\config\api.ts
============================
// API configuration based on environment
const getApiBaseUrl = () => {
  // In production, use relative URLs (same domain)
  if (import.meta.env.PROD) {
    return '';
  }
  
  // In development, use dynamic backend port from Vite env
  return import.meta.env.VITE_BACKEND_URL || 'http://localhost:3001';
};

export const API_BASE_URL = getApiBaseUrl();

export const API_ENDPOINTS = {
  AUTH: {
    LOGIN: `${API_BASE_URL}/api/auth/login`,
    ME: `${API_BASE_URL}/api/auth/me`,
    LOGOUT: `${API_BASE_URL}/api/auth/logout`,
  },
  HEALTH: `${API_BASE_URL}/api/health`,
} as const;


============================
FILE: frontend\src\shared\constants\externalUrls.ts
============================
/**
 * External URLs configuration
 * Centralized external links to avoid hardcoding and enable environment switching
 */

export const EXTERNAL_URLS = {
  // Trust and review platforms
  googleReviews: 'https://www.google.com/search?q=site:google.com+reviews+MDH+auto+detailing',
  stripe: 'https://stripe.com',
  
  // Social media platforms
  facebook: 'https://facebook.com',
  instagram: 'https://instagram.com',
  twitter: 'https://twitter.com',
  linkedin: 'https://linkedin.com',
  
  // Business platforms
  yelp: 'https://yelp.com',
  googleMaps: 'https://maps.google.com',
  
  // Payment processors
  paypal: 'https://paypal.com',
  square: 'https://squareup.com',
  
  // Analytics and tracking
  googleAnalytics: 'https://analytics.google.com',
  googleTagManager: 'https://tagmanager.google.com',
  
  // Support and help
  support: 'https://support.example.com',
  help: 'https://help.example.com',
  privacy: 'https://example.com/privacy',
  terms: 'https://example.com/terms'
} as const;

export type ExternalUrlKey = keyof typeof EXTERNAL_URLS;

/**
 * Get external URL by key
 */
export const getExternalUrl = (key: ExternalUrlKey): string => {
  return EXTERNAL_URLS[key];
};

/**
 * Check if URL is external
 */
export const isExternalUrl = (url: string): boolean => {
  try {
    const urlObj = new URL(url);
    return urlObj.origin !== window.location.origin;
  } catch {
    return false;
  }
};

/**
 * Open external URL in new tab
 */
export const openExternalUrl = (key: ExternalUrlKey): void => {
  const url = getExternalUrl(key);
  window.open(url, '_blank', 'noopener,noreferrer');
};


============================
FILE: frontend\src\shared\constants\index.ts
============================
// Export all constants
export * from './externalUrls';
export * from './vehicleMapping';


============================
FILE: frontend\src\shared\constants\vehicleMapping.ts
============================
/**
 * Vehicle mapping constants and utilities
 * Centralized mapping between vehicle types and folder names
 */

export const VEHICLE_FOLDER_MAP: Record<string, string> = {
  'car': 'cars',
  'truck': 'trucks',
  'suv': 'suvs',
  'boat': 'boats',
  'rv': 'rvs'
} as const;

export type VehicleType = keyof typeof VEHICLE_FOLDER_MAP;

/**
 * Convert vehicle type to folder name
 */
export const toFolderName = (vehicleType: string): string | null => {
  return VEHICLE_FOLDER_MAP[vehicleType] || null;
};

/**
 * Check if vehicle type is valid
 */
export const isValidVehicleType = (vehicleType: string): vehicleType is VehicleType => {
  return vehicleType in VEHICLE_FOLDER_MAP;
};

/**
 * Get all available vehicle types
 */
export const getAvailableVehicleTypes = (): VehicleType[] => {
  return Object.keys(VEHICLE_FOLDER_MAP);
};

/**
 * Get all available folder names
 */
export const getAvailableFolderNames = (): string[] => {
  return Object.values(VEHICLE_FOLDER_MAP);
};


============================
FILE: frontend\src\shared\contexts\AuthContext.tsx
============================
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { API_ENDPOINTS } from '../config/api';

interface User {
  id: number;
  email: string;
  name: string;
  is_admin: boolean;
  created_at: string;
}

interface LoginCredentials {
  email: string;
  password: string;
}

interface AuthResponse {
  success: boolean;
  user: User;
  accessToken: string;
  refreshToken: string;
  expiresIn: string;
  refreshExpiresIn: string;
}

export interface AuthContextType {
  user: User | null;
  loading: boolean;
  error: string | null;
  login: (credentials: LoginCredentials) => Promise<boolean>;
  logout: () => void;
  isAuthenticated: boolean;
  isAdmin: boolean;
}

export const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Check if user is logged in on mount
  useEffect(() => {
    const token = localStorage.getItem('accessToken');
    if (token) {
      // Verify token with backend
      fetch(API_ENDPOINTS.AUTH.ME, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          setUser(data);
        } else {
          localStorage.removeItem('accessToken');
          localStorage.removeItem('refreshToken');
        }
      })
      .catch(() => {
        localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');
      })
      .finally(() => {
        setLoading(false);
      });
    } else {
      setLoading(false);
    }
  }, []);

  const login = async (credentials: LoginCredentials): Promise<boolean> => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch(API_ENDPOINTS.AUTH.LOGIN, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(credentials),
      });

      const data: AuthResponse = await response.json();

      if (data.success) {
        // Store tokens
        localStorage.setItem('accessToken', data.accessToken);
        localStorage.setItem('refreshToken', data.refreshToken);
        
        // Set user
        setUser(data.user);
        
        return true;
      } else {
        setError(data.error || 'Login failed');
        return false;
      }
    } catch (err) {
      setError('Network error. Please try again.');
      return false;
    } finally {
      setLoading(false);
    }
  };

  const logout = () => {
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    setUser(null);
  };

  const value: AuthContextType = {
    user,
    loading,
    error,
    login,
    logout,
    isAuthenticated: !!user,
    isAdmin: user?.is_admin || false,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

============================
FILE: frontend\src\shared\contexts\DataContext.tsx
============================
/**
 * Data Context
 * 
 * Central data provider for tenant-based applications
 * 
 * Single responsibility: Orchestrate and provide tenant + industry config data
 * Business logic is delegated to hooks, API clients, and utility functions
 */

import React, { createContext } from 'react';
import { useQuery } from '@tanstack/react-query';

import { fetchIndustryConfig } from '@/shared/api/industryConfigApi';
import { useTenantData } from '@/shared/hooks/useTenantData';
import { useTenantSlug } from '@/shared/hooks/useTenantSlug';
import type { MainSiteConfig } from '@/shared/types/location';
import {
  getBusinessEmail,
  getPrimaryLocation,
  type SocialMediaLinks,
  transformSocialMedia,
} from '@/shared/utils/tenantDataTransform';

/**
 * Data context type definition
 */
export interface DataContextType {
  // Tenant data (from API)
  businessName: string;
  phone: string;
  email: string;
  owner: string;
  location: string;
  industry: string;
  serviceAreas: Array<{
    city: string;
    state: string;
    zip?: string;
    primary?: boolean;
    minimum?: number;
    multiplier?: number;
  }>;
  socialMedia: SocialMediaLinks;
  
  // Industry config (from data files)
  siteConfig: MainSiteConfig | null;
  
  // Status flags
  isLoading: boolean;
  isTenant: boolean;
  isPreview?: boolean;
}

export const DataContext = createContext<DataContextType | null>(null);

interface DataProviderProps {
  children: React.ReactNode;
}

/**
 * Data Provider Component
 * 
 * Provides centralized access to tenant and industry configuration data
 * Uses composition of hooks and utilities for clean separation of concerns
 */
export const DataProvider: React.FC<DataProviderProps> = ({ children }) => {
  // Step 1: Get tenant slug from URL or domain
  const slug = useTenantSlug();
  
  // Step 2: Fetch tenant/business data
  const { data: businessData, isLoading: isLoadingBusiness } = useTenantData({ 
    slug: slug 
  });
  
  // Step 3: Fetch industry config based on tenant's industry
  const industry = businessData?.industry || 'mobile-detailing';
  const { data: siteConfig, isLoading: isLoadingSiteConfig } = useQuery({
    queryKey: ['shared','siteConfig', industry],
    queryFn: () => fetchIndustryConfig(industry),
    enabled: !!businessData?.industry,
    staleTime: 10 * 60 * 1000, // 10 minutes
    retry: 2
  });
  
  // Step 4: Compute derived state
  const isLoading = isLoadingBusiness || isLoadingSiteConfig;
  
  // Step 5: Transform and assemble context value
  const transformedSocialMedia = businessData ? transformSocialMedia(businessData) : {};
  
  const contextValue: DataContextType = {
    // Tenant data with fallbacks
    businessName: businessData?.business_name || 'Loading...',
    phone: businessData?.business_phone || '',
    email: businessData ? getBusinessEmail(businessData) : 'service@thatsmartsite.com',
    owner: businessData?.owner || '',
    location: businessData ? getPrimaryLocation(businessData) : '',
    industry: businessData?.industry || 'mobile-detailing',
    serviceAreas: businessData?.service_areas || [],
    
    // Social media (filtered and transformed)
    socialMedia: transformedSocialMedia,
    
    // Industry config
    siteConfig: siteConfig || null,
    
    // Status
    isLoading,
    isTenant: true, // Always a tenant page
    isPreview: false // Regular tenant page, not preview
  };

  return (
    <DataContext.Provider value={contextValue}>
      {children}
    </DataContext.Provider>
  );
};

// Note: useData and useDataOptional hooks have been moved to @/shared/hooks/useData
// This keeps this file focused on the component provider (for Fast Refresh compatibility)


============================
FILE: frontend\src\shared\contexts\index.ts
============================
// Context providers and types
export { AuthContext, AuthProvider } from './AuthContext';
export type { AuthContextType } from './AuthContext';
export { DataContext, type DataContextType, DataProvider } from './DataContext';
export { SiteProvider, useSiteState } from './SiteContext';
export { TenantConfigContext, type TenantConfigContextType, TenantConfigProvider } from './TenantConfigContext';

// Note: useData and useDataOptional hooks are exported from @/shared/hooks/useData


============================
FILE: frontend\src\shared\contexts\SiteContext.tsx
============================
import React, { createContext, useContext } from 'react';

import { SiteActions,SiteContextType } from '@/shared/types/site';

// Simplified context for tenant-based sites
// All sites are now tenant-based, so we don't need complex location detection
const initialState: SiteContextType = {
  siteState: 'tenant', // Changed from 'mdh' to 'tenant'
  currentLocation: null,
  businessData: null,
  isLoading: false,
  hasError: false,
};

// Context
const SiteContext = createContext<(SiteContextType & SiteActions) | null>(null);

// Provider component
export const SiteProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  // All routes are now tenant-based, so we're always in tenant mode
  const contextValue: SiteContextType & SiteActions = {
    ...initialState,
    // Legacy actions that are no longer needed but kept for compatibility
    setLocation: () => {},
    clearLocation: () => {},
    setLoading: () => {},
    setError: () => {},
  };

  return (
    <SiteContext.Provider value={contextValue}>
      {children}
    </SiteContext.Provider>
  );
};

// Hook to use the context
// eslint-disable-next-line react-refresh/only-export-components -- Standard context pattern: hook and provider together
export const useSiteState = () => {
  const context = useContext(SiteContext);
  if (!context) {
    console.error('useSiteState must be used within a SiteProvider');
    // Return a safe fallback instead of throwing
    return {
      siteState: 'mdh' as const,
      currentLocation: null,
      businessData: null,
      isLoading: false,
      hasError: false,
      setLocation: () => {},
      clearLocation: () => {},
      setLoading: () => {},
      setError: () => {},
    };
  }
  return context;
};


============================
FILE: frontend\src\shared\contexts\TenantConfigContext.tsx
============================
import type { ReactNode } from 'react';
import React, { createContext, useCallback, useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';

import { fetchTenantBySlug } from '../api/tenantApi';
import { TenantConfig } from '../types';
import { affiliateToTenantConfig, tenantConfigToLegacy } from '../utils/tenantConfigMigration';

// Local type for backward compatibility (avoids importing deprecated type)
interface LegacyTenantConfig {
  branding?: {
    businessName?: string;
    logo?: string;
  };
  contact?: {
    phone?: string;
    email?: string;
  };
  social?: {
    facebook?: string;
    instagram?: string;
    tiktok?: string;
    youtube?: string;
  };
  serviceAreas?: Array<{
    id: number;
    city: string;
    state_code: string;
    postal_codes: string[];
    is_primary: boolean;
  }>;
}

/**
 * Tenant Config Context Type
 * Provides both new (centralized) and legacy formats for backward compatibility
 */
export interface TenantConfigContextType {
  // New centralized format
  tenantConfig: TenantConfig | null;
  
  // Legacy format (for backward compatibility)
  legacyConfig: LegacyTenantConfig | null;
  
  // Status
  isLoading: boolean;
  error: string | null;
  
  // Actions
  refreshTenantConfig: () => Promise<void>;
}

export const TenantConfigContext = createContext<TenantConfigContextType | null>(null);

interface TenantConfigProviderProps {
  children: ReactNode;
}

/**
 * Tenant Config Provider
 * 
 * Provides tenant configuration in both:
 * - New centralized format (TenantConfig)
 * - Legacy format (LegacyTenantConfig) for backward compatibility
 * 
 * Data source: Tenant API (fetchTenantBySlug)
 */
export const TenantConfigProvider: React.FC<TenantConfigProviderProps> = ({ children }) => {
  const [tenantConfigState, setTenantConfigState] = useState<TenantConfig | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { slug } = useParams<{ slug: string }>();

  // Skip fetching for non-tenant routes (admin, onboarding, login, etc.)
  const currentPath = window.location.pathname;
  const isNonTenantRoute = 
    currentPath.startsWith('/admin-dashboard') ||
    currentPath.startsWith('/tenant-dashboard') ||
    currentPath.startsWith('/tenant-onboarding') ||
    currentPath.startsWith('/login') ||
    currentPath.startsWith('/booking') ||
    currentPath.startsWith('/preview-generator') ||
    currentPath.startsWith('/preview');

  const refreshTenantConfig = useCallback(async () => {
    // Skip if no slug or on non-tenant route
    if (!slug || isNonTenantRoute) {
      setTenantConfigState(null);
      setIsLoading(false);
      return;
    }

    try {
      setIsLoading(true);
      setError(null);
      
      const result = await fetchTenantBySlug(slug);
      
      if (result.success && result.data) {
        // Convert tenant data to new centralized format
        const config = affiliateToTenantConfig({
          id: result.data.id,
          slug: result.data.slug,
          business_name: result.data.business_name,
          business_phone: result.data.business_phone,
          business_email: result.data.business_email,
          facebook_url: result.data.facebook_url,
          instagram_url: result.data.instagram_url,
          tiktok_url: result.data.tiktok_url,
          youtube_url: result.data.youtube_url,
          service_areas: result.data.service_areas,
          industry: result.data.industry,
          logo_url: result.data.logo_url
        });
        
        setTenantConfigState(config);
      } else {
        setError(result.error || 'Failed to load tenant data');
        setTenantConfigState(null);
      }
    } catch (err) {
      console.error('Error refreshing tenant config:', err);
      setError(err instanceof Error ? err.message : 'Failed to refresh tenant config');
      setTenantConfigState(null);
    } finally {
      setIsLoading(false);
    }
  }, [slug, isNonTenantRoute]);

  useEffect(() => {
    void refreshTenantConfig();
  }, [refreshTenantConfig]);

  // Create legacy format for backward compatibility
  const legacyConfig = tenantConfigState ? tenantConfigToLegacy(tenantConfigState) : null;

  const value: TenantConfigContextType = {
    tenantConfig: tenantConfigState,
    legacyConfig,
    isLoading,
    error,
    refreshTenantConfig,
  };

  return (
    <TenantConfigContext.Provider value={value}>
      {children}
    </TenantConfigContext.Provider>
  );
};


============================
FILE: frontend\src\shared\contexts\WebsiteContentContext.tsx
============================
// Website Content Context
// Loads website content from database once on page load

import React, { createContext, ReactNode, useContext } from 'react';
import { useParams } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';

import { websiteContentApi, WebsiteContentData } from '../api/websiteContent.api';

interface WebsiteContentContextType {
  content: WebsiteContentData | null;
  isLoading: boolean;
  error: string | null;
  refetch: () => void;
}

const WebsiteContentContext = createContext<WebsiteContentContextType | null>(null);

interface WebsiteContentProviderProps {
  children: ReactNode;
}

export const WebsiteContentProvider: React.FC<WebsiteContentProviderProps> = ({ children }) => {
  // Get tenant slug from URL params (same logic as DataProvider)
  const params = useParams();
  const slug = params.businessSlug || params.tenantSlug || params.slug;

  // Skip fetching for non-tenant routes (admin, onboarding, login, etc.)
  const currentPath = window.location.pathname;
  const isNonTenantRoute = 
    currentPath.startsWith('/admin-dashboard') ||
    currentPath.startsWith('/tenant-dashboard') ||
    currentPath.startsWith('/tenant-onboarding') ||
    currentPath.startsWith('/login') ||
    currentPath.startsWith('/booking') ||
    currentPath.startsWith('/preview-generator') ||
    currentPath.startsWith('/preview');

  const {
    data: content,
    isLoading,
    error,
    refetch,
  } = useQuery({
    queryKey: ['shared','websiteContent', slug],
    queryFn: async () => {
      // Only fetch if we have a valid slug
      if (!slug) {
        return null;
      }
      const result = await websiteContentApi.getWebsiteContent(slug);
      return result;
    },
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 10 * 60 * 1000, // 10 minutes
    retry: 2,
    enabled: !!slug && !isNonTenantRoute,
  });

  const contextValue: WebsiteContentContextType = {
    content: content || null,
    isLoading,
    error: error?.message ?? null,
    refetch: () => { void refetch(); },
  };

  return (
    <WebsiteContentContext.Provider value={contextValue}>
      {children}
    </WebsiteContentContext.Provider>
  );
};

// eslint-disable-next-line react-refresh/only-export-components -- Standard context pattern: hook and provider together
export const useWebsiteContent = (): WebsiteContentContextType => {
  const context = useContext(WebsiteContentContext);
  if (!context) {
    throw new Error('useWebsiteContent must be used within a WebsiteContentProvider');
  }
  return context;
};


============================
FILE: frontend\src\shared\data\states.ts
============================
/**
 * US States and Territories
 * Static data for dropdowns, validation, and display
 */

export const STATES = {
  // 50 US States
  'AL': 'Alabama',
  'AK': 'Alaska',
  'AZ': 'Arizona',
  'AR': 'Arkansas',
  'CA': 'California',
  'CO': 'Colorado',
  'CT': 'Connecticut',
  'DE': 'Delaware',
  'FL': 'Florida',
  'GA': 'Georgia',
  'HI': 'Hawaii',
  'ID': 'Idaho',
  'IL': 'Illinois',
  'IN': 'Indiana',
  'IA': 'Iowa',
  'KS': 'Kansas',
  'KY': 'Kentucky',
  'LA': 'Louisiana',
  'ME': 'Maine',
  'MD': 'Maryland',
  'MA': 'Massachusetts',
  'MI': 'Michigan',
  'MN': 'Minnesota',
  'MS': 'Mississippi',
  'MO': 'Missouri',
  'MT': 'Montana',
  'NE': 'Nebraska',
  'NV': 'Nevada',
  'NH': 'New Hampshire',
  'NJ': 'New Jersey',
  'NM': 'New Mexico',
  'NY': 'New York',
  'NC': 'North Carolina',
  'ND': 'North Dakota',
  'OH': 'Ohio',
  'OK': 'Oklahoma',
  'OR': 'Oregon',
  'PA': 'Pennsylvania',
  'RI': 'Rhode Island',
  'SC': 'South Carolina',
  'SD': 'South Dakota',
  'TN': 'Tennessee',
  'TX': 'Texas',
  'UT': 'Utah',
  'VT': 'Vermont',
  'VA': 'Virginia',
  'WA': 'Washington',
  'WV': 'West Virginia',
  'WI': 'Wisconsin',
  'WY': 'Wyoming',
  
  // US Territories
  'DC': 'District of Columbia',
  'AS': 'American Samoa',
  'GU': 'Guam',
  'MP': 'Northern Mariana Islands',
  'PR': 'Puerto Rico',
  'VI': 'U.S. Virgin Islands',
  
  // Military/Diplomatic
  'AA': 'Armed Forces Americas',
  'AE': 'Armed Forces Europe',
  'AP': 'Armed Forces Pacific'
} as const;

export type StateCode = keyof typeof STATES;

export type StateName = typeof STATES[StateCode];

/**
 * Get state name from code
 */
export function getStateName(code: string): string | undefined {
  return STATES[code.toUpperCase() as StateCode];
}

/**
 * Get state code from name
 */
export function getStateCode(name: string): string | undefined {
  const normalizedName = name.toLowerCase();
  const entry = Object.entries(STATES).find(([, stateName]) => 
    stateName.toLowerCase() === normalizedName
  );
  return entry?.[0];
}

/**
 * Get all state codes as array
 */
export function getStateCodes(): StateCode[] {
  return Object.keys(STATES) as StateCode[];
}

/**
 * Get all state names as array
 */
export function getStateNames(): StateName[] {
  return Object.values(STATES);
}

/**
 * Check if a string is a valid state code
 */
export function isValidStateCode(code: string): code is StateCode {
  return code.toUpperCase() in STATES;
}

/**
 * Check if a string is a valid state name
 */
export function isValidStateName(name: string): boolean {
  return getStateCode(name) !== undefined;
}

/**
 * Format state for display (e.g., "AZ - Arizona")
 */
export function formatState(code: StateCode): string {
  return `${code} - ${STATES[code]}`;
}

/**
 * Get states grouped by region (optional, for advanced UI)
 */
export const STATES_BY_REGION = {
  'Northeast': ['CT', 'ME', 'MA', 'NH', 'RI', 'VT', 'NJ', 'NY', 'PA'],
  'Midwest': ['IL', 'IN', 'MI', 'OH', 'WI', 'IA', 'KS', 'MN', 'MO', 'NE', 'ND', 'SD'],
  'South': ['DE', 'FL', 'GA', 'MD', 'NC', 'SC', 'VA', 'WV', 'AL', 'KY', 'MS', 'TN', 'AR', 'LA', 'OK', 'TX'],
  'West': ['AZ', 'CO', 'ID', 'MT', 'NV', 'NM', 'UT', 'WY', 'AK', 'CA', 'HI', 'OR', 'WA']
} as const;

export type Region = keyof typeof STATES_BY_REGION;


============================
FILE: frontend\src\shared\env.ts
============================
/**
 * Centralized Environment Configuration
 * 
 * This module validates and exports all environment variables used in the application.
 * Always import from this module instead of using import.meta.env directly.
 * 
 * @example
 * ```ts
 * import { env, config } from '@/shared/env';
 * 
 * // Use env for raw values
 * if (env.DEV) { ... }
 * 
 * // Use config for computed/derived values
 * const apiUrl = config.apiBaseUrl;
 * ```
 */

import { z } from "zod";

const EnvSchema = z.object({
  // Vite built-in variables
  MODE: z.enum(["development", "production", "test"]),
  DEV: z.boolean(),
  PROD: z.boolean(),
  
  // API Configuration
  VITE_API_URL: z.string().optional(),
  VITE_API_URL_LOCAL: z.string().optional(),
  VITE_API_URL_LIVE: z.string().optional(),
  VITE_API_BASE_URL: z.string().optional(),
  
  // Third-party API Keys
  VITE_GOOGLE_MAPS_API_KEY: z.string().optional(),
  VITE_STRIPE_PUBLISHABLE_KEY: z.string().optional(),
  
  // Feature Flags
  VITE_ENABLE_SW: z.string().optional(), // Service worker flag ('1' or '0')
});

/**
 * Validated environment variables
 * Raw access to env vars - prefer using `config` for derived values
 */
export const env = EnvSchema.parse(import.meta.env);

/**
 * Computed configuration derived from environment variables
 * This provides cleaner access patterns and type-safe defaults
 */
export const config = {
  // Environment
  isDevelopment: env.DEV,
  isProduction: env.PROD,
  mode: env.MODE,
  
  // API Configuration
  apiBaseUrl: env.VITE_API_BASE_URL || '/api', // Use relative path for Vite proxy
  apiUrl: env.PROD ? (env.VITE_API_URL_LIVE || '') : '', // Force empty in dev to use Vite proxy
  apiUrls: {
    local: env.VITE_API_URL_LOCAL || env.VITE_BACKEND_URL || 'http://localhost:3001',
    live: env.VITE_API_URL_LIVE || '',
  },
  
  // Third-party Services
  googleMapsApiKey: env.VITE_GOOGLE_MAPS_API_KEY,
  stripePublishableKey: env.VITE_STRIPE_PUBLISHABLE_KEY || 'pk_test_placeholder',
  
  // Feature Flags
  serviceWorkerEnabled: env.VITE_ENABLE_SW === '1' && env.PROD,
} as const;

============================
FILE: frontend\src\shared\hooks\CONFIG_ACCESS_GUIDE.md
============================
# Configuration Access Guide

This guide explains how to access tenant and industry configuration data in the application.

## Overview

The application has **two main configuration sources**:

1. **Tenant Config** - Business-specific data from the database (API)
2. **Industry Config** - Industry-specific defaults from `/data/{industry}/` (modular files or site.json)

## Quick Reference

```tsx
// ✅ RECOMMENDED: Use DataContext for most components
import { useData } from '@/shared/hooks';

function MyComponent() {
  const { 
    businessName,    // tenant data
    phone,           // tenant data
    industry,        // tenant data
    siteConfig,      // industry config (merged)
    isLoading 
  } = useData();
  
  return <div>{businessName}</div>;
}
```

```tsx
// For industry config only (advanced use)
import { useIndustryConfig } from '@/shared/hooks';

function IndustrySpecificComponent() {
  const { siteConfig, isLoading } = useIndustryConfig('mobile-detailing');
  return <div>{siteConfig?.hero.h1}</div>;
}
```

---

## Configuration Hooks

### 1. `useData()` - Primary Hook ✅

**Use this for 95% of cases.** Provides both tenant + industry config.

```tsx
import { useData } from '@/shared/hooks';

function MyComponent() {
  const data = useData();
  
  // Tenant data (from API /api/tenants/{slug})
  data.businessName;     // "JP's Mobile Detailing"
  data.phone;            // "(928) 555-1234"
  data.email;            // "info@jpsdetailing.com"
  data.owner;            // "John Smith"
  data.location;         // "Bullhead City, AZ"
  data.industry;         // "mobile-detailing"
  data.serviceAreas;     // [{ city, state, zip, primary }]
  data.socialMedia;      // { facebook, instagram, youtube, tiktok }
  
  // Industry config (from /data/{industry}/ - modular or site.json)
  data.siteConfig?.hero.h1;        // "Professional Mobile Detailing"
  data.siteConfig?.hero.sub;       // "We come to you!"
  data.siteConfig?.seo.title;      // SEO title
  
  // Status
  data.isLoading;        // true during fetch
  data.isTenant;         // true (always for tenant pages)
}
```

**When to use:**
- ✅ Any component that needs business info
- ✅ Components that need both tenant + industry data
- ✅ Page-level components
- ✅ Navigation, footer, header components

---

### 2. `useIndustryConfig()` - Industry Defaults

Load industry-specific site config independently.

```tsx
import { useIndustryConfig } from '@/shared/hooks';

function IndustryPreview() {
  const { siteConfig, isLoading, error } = useIndustryConfig('mobile-detailing');
  
  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error loading config</div>;
  
  return (
    <div>
      <h1>{siteConfig?.hero.h1}</h1>
      <p>{siteConfig?.hero.subTitle}</p>
    </div>
  );
}
```

**When to use:**
- Industry comparison pages
- Admin previews of industry templates
- Components that don't need tenant-specific data
- Non-tenant context (platform pages)

**Returns:**
```tsx
{
  siteConfig: MainSiteConfig | null;
  isLoading: boolean;
  error: Error | null;
  industry: string | null;
}
```

---

### 3. `useTenantConfigLoader()` - Advanced Tenant Config

Lower-level hook with more granular control. Uses the new `TenantConfig` type structure.

```tsx
import { useTenantConfigLoader } from '@/shared/hooks';

function AdminPanel() {
  const { data: config, isLoading } = useTenantConfigLoader({ 
    slug: 'jps-detailing' 
  });
  
  // Structured config
  config?.id;                           // tenant ID
  config?.slug;                         // URL slug
  config?.vertical;                     // industry type
  config?.branding.businessName;        // business name
  config?.branding.logo.url;            // logo URL
  config?.contact.phones.main;          // main phone
  config?.contact.emails.primary;       // primary email
  config?.contact.socials.facebook;     // social links
  config?.contact.baseLocation.city;    // primary city
}
```

**When to use:**
- Admin dashboards needing structured data
- API integrations
- Type-safe access to nested config
- When you need the full `TenantConfig` type

---

## Migration Patterns

### Migrating from Direct API Calls

**Before:**
```tsx
// ❌ Don't do this
const [businessData, setBusinessData] = useState(null);

useEffect(() => {
  fetch(`/api/tenants/${slug}`)
    .then(res => res.json())
    .then(data => setBusinessData(data));
}, [slug]);
```

**After:**
```tsx
// ✅ Use centralized hook
import { useData } from '@/shared/hooks';

const { businessName, phone, isLoading } = useData();
```

---

### Migrating from Direct Imports

**Before:**
```tsx
// ❌ Don't do this - some industries don't have site.json
import siteData from '@/data/mobile-detailing/site.json';

function Hero() {
  return <h1>{siteData.hero.h1}</h1>;
}
```

**After:**
```tsx
// ✅ Use centralized hook - works with both modular and site.json
import { useData } from '@/shared/hooks';

function Hero() {
  const { siteConfig } = useData();
  return <h1>{siteConfig?.hero.h1}</h1>;
}
```

**Note:** Mobile-detailing uses modular config files (assets.json, content-defaults.json, etc.) instead of a monolithic site.json. The hooks handle this automatically.

---

## Best Practices

### ✅ DO

1. **Use `useData()` as default** - Covers 95% of use cases
2. **Check `isLoading`** - Always handle loading states
3. **Use optional chaining** - `siteConfig?.hero.h1` prevents errors
4. **Prefetch on hover** - Use `prefetchIndustryConfig` for performance

```tsx
import { useQueryClient } from '@tanstack/react-query';
import { prefetchIndustryConfig } from '@/shared/hooks';

function IndustryLink({ industry }: { industry: string }) {
  const queryClient = useQueryClient();
  
  return (
    <Link 
      to={`/${industry}`}
      onMouseEnter={() => prefetchIndustryConfig(queryClient, industry)}
    >
      {industry}
    </Link>
  );
}
```

### ❌ DON'T

1. **Don't fetch directly** - Always use the hooks
2. **Don't import JSON directly** - Use hooks for caching
3. **Don't duplicate config logic** - Centralize in hooks
4. **Don't ignore loading states** - Handle gracefully

---

## Caching Strategy

All hooks use React Query for intelligent caching:

| Hook | Stale Time | Cache Time | Purpose |
|------|-----------|------------|---------|
| `useData()` | 10 min | 10 min | Fast access, rare updates |
| `useIndustryConfig()` | 10 min | 30 min | Configs rarely change |
| `useTenantConfigLoader()` | 5 min | 10 min | More frequent updates |

**What this means:**
- Data is cached across component remounts
- Automatic background refetching when stale
- No duplicate requests for same data
- Offline-first with cache fallback

---

## Type Definitions

### TenantConfig (Structured)
```typescript
interface TenantConfig {
  id: string | number;
  slug: string;
  vertical: 'mobile-detailing' | 'pet-grooming' | ...;
  status: 'pending' | 'approved' | 'active' | ...;
  branding: {
    businessName: string;
    logo: { url: string; ... };
  };
  contact: {
    phones: { main: string; ... };
    emails: { primary: string; ... };
    socials: { facebook: string; ... };
    baseLocation: { city: string; state: string };
  };
}
```

### Business (Flat - from DataContext)
```typescript
interface Business {
  id: number;
  slug: string;
  business_name: string;
  business_phone: string;
  business_email: string;
  industry: string;
  service_areas: ServiceArea[];
  facebook_url?: string;
  instagram_url?: string;
  // ... more flat fields
}
```

### MainSiteConfig (Industry)
```typescript
interface MainSiteConfig {
  slug: string;
  hero: {
    h1: string;
    subTitle: string;
    Images: Array<{ url: string; alt: string; ... }>;
  };
  seo: {
    Title: string;
    subTitle: string;
    // ... more SEO fields
  };
  // ... more sections
}
```

---

## Examples

### Example 1: Header Component

```tsx
import { useData } from '@/shared/hooks';

function Header() {
  const { businessName, phone, siteConfig, isLoading } = useData();
  
  if (isLoading) {
    return <HeaderSkeleton />;
  }
  
  return (
    <header>
      <Logo src={siteConfig?.logo.url} alt={businessName} />
      <nav>{/* ... */}</nav>
      <PhoneLink phone={phone} />
    </header>
  );
}
```

### Example 2: Hero Component

```tsx
import { useData } from '@/shared/hooks';

function Hero() {
  const { siteConfig } = useData();
  
  return (
    <section>
      <h1>{siteConfig?.hero.h1}</h1>
      <p>{siteConfig?.hero.subTitle}</p>
      <ImageCarousel images={siteConfig?.hero.Images} />
    </section>
  );
}
```

### Example 3: Contact Form

```tsx
import { useData } from '@/shared/hooks';

function ContactForm() {
  const { businessName, email, phone } = useData();
  
  return (
    <form>
      <p>Contact {businessName}</p>
      <p>Email: {email}</p>
      <p>Phone: {phone}</p>
      {/* form fields */}
    </form>
  );
}
```

---

## Troubleshooting

### "useData must be used within a DataProvider"

**Solution:** Wrap your app with `DataProvider`:

```tsx
// src/main.tsx or App.tsx
import { DataProvider } from '@/shared/hooks';

function App() {
  return (
    <DataProvider>
      <YourApp />
    </DataProvider>
  );
}
```

### "Failed to load industry config"

**Cause:** Industry slug doesn't match folder name in `/data/`

**Solution:** Check that industry value matches folder:
- ✅ `'mobile-detailing'` → `/data/mobile-detailing/` (modular files)
- ✅ `'pet-grooming'` → `/data/pet-grooming/site.json`
- ❌ `'mobileDetailing'` → won't work

### Loading state never resolves

**Cause:** API endpoint or data file not found

**Solution:** Check network tab for 404s, verify:
1. API `/api/tenants/{slug}` returns data
2. Industry config exists:
   - For mobile-detailing: `/data/mobile-detailing/index.ts` + modular files
   - For other industries: `/data/{industry}/site.json`

---

## Summary

| Need | Use This | Example |
|------|----------|---------|
| Tenant + Industry data | `useData()` | `const { businessName, siteConfig } = useData();` |
| Industry config only | `useIndustryConfig()` | `const { siteConfig } = useIndustryConfig('mobile-detailing');` |
| Structured tenant config | `useTenantConfigLoader()` | `const { data: config } = useTenantConfigLoader();` |

**Default choice: `useData()`** — It's cached, simple, and covers most use cases.



============================
FILE: frontend\src\shared\hooks\index.ts
============================
// Context hooks
export { useAuth } from './useAuth';

// SEO & Browser Tab Management
export { setBrowserTab, setBrowserTitle, setFavicon, useBrowserTab } from './useBrowserTab';
export { setMetaDescription, setOgImage, useMetaTags } from './useMetaTags';
export { useSEO } from './useSEO';
export {
  prefetchTenantConfig,
  useTenantConfigLoader,
  useTenantsList} from './useTenantConfigLoader';
// Legacy useSiteContext removed - use DataProvider instead for tenant-based sites
export { useToast } from './useToast';

// Error boundary hooks
export { useErrorBoundary } from './useErrorBoundary';
export { withAsyncErrorBoundary, withErrorBoundary } from './withErrorBoundary';

// Generic utility hooks
export { useDebouncedValue } from './useDebouncedValue';
export { useEventListener } from './useEventListener';
export { useLocalStorage } from './useLocalStorage';
export { 
  BREAKPOINTS,
  useBreakpoint,
  useIsDesktop,
  useIsLargeDesktop,
  useIsMobile,
  useIsTablet,
  useMediaQuery
} from './useMediaQuery';
export { useMobileDetection } from './useMobileDetection';
export { usePerformanceMonitor } from './usePerformanceMonitor';
export { useModalPrefetch, usePrefetch } from './usePrefetch';
export { usePWAStatus } from './usePWAStatus';
export { useScrollSpy } from './useScrollSpy';
export { useScrollToTop } from './useScrollToTop';

// Image rotation hooks
export { useImageRotation, useImageRotationHover } from './useImageRotation';

// Industry-specific site data hook
export { useIndustrySiteData } from './useIndustrySiteData';

// Config loaders (centralized tenant + industry configuration)
// NOTE: DataContext and DataProvider moved to direct import to avoid circular dependency
// import { DataContext, DataProvider } from '../contexts/DataContext';
export { useData, useDataOptional } from './useData';
export { prefetchIndustryConfig,useIndustryConfig } from './useIndustryConfig';

// Tenant data hooks
export { useTenantData } from './useTenantData';
export { useTenantSlug } from './useTenantSlug';

// Vehicle data hook
export { useVehicleData } from './useVehicleData';

// Reviews availability hook
export { useReviewsAvailability } from './useReviewsAvailability';

// Legacy business data hooks removed - now using DataProvider for tenant-based routing

============================
FILE: frontend\src\shared\hooks\README_BROWSER_TAB.md
============================
# Browser Tab Management - Standard Practice

## 🚨 IMPORTANT: Every Page Component Must Use This

**All page-level components MUST use either `useBrowserTab()` or `useSEO()` to ensure proper browser tab title and favicon.**

## Why This Matters

Without these hooks, pages will show:
- ❌ Generic "Vite + React" title
- ❌ Default Vite favicon
- ❌ Unprofessional appearance
- ❌ Poor SEO

With these hooks, pages will show:
- ✅ Business name or custom title
- ✅ Tenant-specific logo/favicon
- ✅ Professional branding
- ✅ Better SEO

---

## Standard Solutions

### Option 1: `useBrowserTab()` (Simple - Title + Favicon Only)

Use for pages that don't need meta tags (dashboards, internal tools, etc.)

```tsx
import { useBrowserTab } from '@/shared/hooks';

const MyPage: React.FC = () => {
  // Default: Uses business name + tenant logo
  useBrowserTab();
  
  // Or custom title
  useBrowserTab({ 
    title: 'Dashboard - Business Name' 
  });
  
  // Or platform page (no tenant)
  useBrowserTab({ 
    title: 'Admin Dashboard',
    useBusinessName: false 
  });
  
  return <div>...</div>;
};
```

### Option 2: `useSEO()` (Complete - Title + Favicon + Meta Tags)

Use for public-facing pages that need SEO (home, services, locations, etc.)

```tsx
import { useSEO } from '@/shared/hooks';

const MyPage: React.FC = () => {
  // Default: Uses site config + tenant data for everything
  useSEO();
  
  // Or with custom values
  useSEO({
    title: 'Services - Business Name',
    description: 'Custom meta description',
    keywords: ['keyword1', 'keyword2']
  });
  
  return <div>...</div>;
};
```

---

## How It Works

### Automatic Fallback Chain

Both hooks use this priority:

1. **Custom values** (if provided)
2. **Tenant data** (business name, logo from DataContext)
3. **Industry defaults** (vertical-specific assets)
4. **Platform defaults** ("That Smart Site" + platform logo)

### Smart Updates

- Updates automatically when tenant data loads
- Prevents flashing of incorrect values
- Works in preview mode
- Works for multi-tenant pages

---

## Examples by Page Type

### ✅ Tenant Home Page
```tsx
// Uses tenant business name + logo automatically
useSEO(); 
```

### ✅ Tenant Dashboard
```tsx
useBrowserTab({
  title: `${businessName} - Dashboard`
});
```

### ✅ Platform Pages (Onboarding, Admin)
```tsx
useBrowserTab({
  title: 'Tenant Onboarding - That Smart Site',
  useBusinessName: false
});
```

### ✅ Preview Generator
```tsx
useBrowserTab({
  title: 'Preview Generator - That Smart Site',
  useBusinessName: false
});
```

### ✅ Service Pages
```tsx
useSEO({
  title: `${serviceName} - ${businessName}`,
  description: 'Custom description for this service'
});
```

---

## Checklist for New Pages

When creating a new page component:

- [ ] Import `useBrowserTab` or `useSEO` from `@/shared/hooks`
- [ ] Call the hook at the top of your component
- [ ] Choose appropriate options:
  - Use `useBusinessName: false` for platform pages
  - Provide custom `title` for specific pages
  - Use `useSEO()` for public pages needing meta tags
- [ ] Test in browser - check tab title and favicon
- [ ] Test with different tenants to ensure branding updates

---

## Common Mistakes to Avoid

### ❌ DON'T: Manually set document.title
```tsx
// BAD - bypasses our fallback system
useEffect(() => {
  document.title = 'My Page';
}, []);
```

### ✅ DO: Use the hook
```tsx
// GOOD - handles all edge cases
useBrowserTab({ title: 'My Page' });
```

### ❌ DON'T: Skip the hook entirely
```tsx
// BAD - will show "Vite + React"
const MyPage = () => {
  return <div>...</div>;
};
```

### ✅ DO: Always use it
```tsx
// GOOD - professional branding
const MyPage = () => {
  useBrowserTab();
  return <div>...</div>;
};
```

---

## Current Implementation Status

### ✅ Implemented
- ✅ `HomePage` - uses `useSEO()`
- ✅ `LocationPage` - uses `useSEO()`
- ✅ `PreviewPage` - uses `useBrowserTab()`
- ✅ `TenantApplicationPage` - uses `useBrowserTab()`
- ✅ `PreviewGeneratorPage` - uses `useBrowserTab()`
- ✅ `TenantDashboard` - uses `useBrowserTab()`
- ✅ `AdminDashboard` - uses `useBrowserTab()`

### Need to Check
- Review all page components in `/features/**/pages/`
- Review all page components in `/app/pages/`
- Add to any new pages being created

---

## Questions?

See the hook implementations:
- `frontend/src/shared/hooks/useBrowserTab.ts`
- `frontend/src/shared/hooks/useSEO.ts`

Or ask in the dev chat!



============================
FILE: frontend\src\shared\hooks\useAnalytics.ts
============================
/**
 * useAnalytics - lightweight analytics wrapper
 * Falls back gracefully if GA4 is not available.
 */
import { useCallback } from 'react';

type AnalyticsEventParams = Record<string, string | number | boolean | null | undefined>;

declare global {
  interface Window {
    gtag?: (...args: unknown[]) => void;
    dataLayer?: unknown[];
  }
}

export const useAnalytics = () => {
  const isGAAvailable = typeof window !== 'undefined' && typeof window.gtag === 'function';

  const logEvent = useCallback((eventName: string, params: AnalyticsEventParams = {}) => {
    if (isGAAvailable) {
      try {
        if (window.gtag) {
          window.gtag('event', eventName, params);
        }
        return;
      } catch {
        // fallthrough to console
      }
    }
    // Dev fallback
    // eslint-disable-next-line no-console -- Dev fallback for analytics
    console.debug('[analytics:event]', eventName, params);
  }, [isGAAvailable]);

  const identify = useCallback((userId: string | number, params: AnalyticsEventParams = {}) => {
    if (isGAAvailable) {
      try {
        if (window.gtag) {
          window.gtag('set', { user_id: String(userId), ...params });
        }
        return;
      } catch {
        // fallthrough
      }
    }
    // eslint-disable-next-line no-console -- Dev fallback for analytics
    console.debug('[analytics:identify]', userId, params);
  }, [isGAAvailable]);

  const setUserProperties = useCallback((params: AnalyticsEventParams) => {
    if (isGAAvailable) {
      try {
        if (window.gtag) {
          window.gtag('set', 'user_properties', params);
        }
        return;
      } catch {
        // fallthrough
      }
    }
    // eslint-disable-next-line no-console -- Dev fallback for analytics
    console.debug('[analytics:user_properties]', params);
  }, [isGAAvailable]);

  return { logEvent, identify, setUserProperties };
};


============================
FILE: frontend\src\shared\hooks\useAuth.ts
============================
// Re-export the useAuth hook from the context
export { useAuth } from '../contexts/AuthContext';

============================
FILE: frontend\src\shared\hooks\useAutoSave.ts
============================
import { useEffect, useRef, useState } from 'react';

interface UseAutoSaveOptions {
  debounce?: number;
}

export function useAutoSave<T>(
  initialValue: T,
  saveFn: (value: T) => Promise<unknown>,
  options: UseAutoSaveOptions = {}
) {
  const { debounce = 800 } = options;
  const [value, setValue] = useState<T>(initialValue);
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const timeoutRef = useRef<number | null>(null);
  const isFirstRender = useRef(true);
  const previousInitialValue = useRef<T>(initialValue);

  // Reset value and first run flag if initialValue changes (e.g., after async load)
  // Only reset if the initialValue is actually different to prevent infinite loops
  useEffect(() => {
    if (previousInitialValue.current !== initialValue) {
      setValue(initialValue);
      isFirstRender.current = true;
      previousInitialValue.current = initialValue;
    }
  }, [initialValue]);

  useEffect(() => {
    // Only trigger saveFn if this is not the initial mount or after initialValue changes.
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    setIsSaving(true);
    setError(null);
    if (timeoutRef.current) clearTimeout(timeoutRef.current);
    timeoutRef.current = window.setTimeout(() => {
      void (async () => {
        try {
          await saveFn(value);
          setIsSaving(false);
        } catch (err: unknown) {
          const errorMessage = err instanceof Error ? err.message : 'Failed to save';
          setError(errorMessage);
          setIsSaving(false);
        }
      })();
    }, debounce);
    return () => {
      if (timeoutRef.current) clearTimeout(timeoutRef.current);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps -- Only re-run when value changes, not when saveFunction changes
  }, [value]);

  return { value, setValue, isSaving, error };
}


============================
FILE: frontend\src\shared\hooks\useBrowserTab.ts
============================
import { useEffect } from 'react';

import { useTenantConfigLoader } from '@/shared/hooks';
import { useDataOptional } from '@/shared/hooks/useData';
import type { Vertical } from '@/shared/types';
import { getTenantAssetUrl } from '@/shared/utils';

export interface UseBrowserTabOptions {
  /** Custom page title (overrides default business name) */
  title?: string;
  /** Custom favicon URL (overrides tenant logo) */
  favicon?: string;
  /** Whether to use business name as title (default: true) */
  useBusinessName?: boolean;
  /** Fallback title if no business name available */
  fallbackTitle?: string;
}

/**
 * Hook to manage browser tab title and favicon
 * 
 * Automatically sets:
 * - Browser tab title (uses business name by default)
 * - Favicon (uses tenant logo by default)
 * - Apple touch icon
 * 
 * @example
 * // Use defaults (business name + tenant logo)
 * useBrowserTab();
 * 
 * @example
 * // Custom title
 * useBrowserTab({ title: 'Contact Us - My Business' });
 * 
 * @example
 * // Custom favicon
 * useBrowserTab({ favicon: '/custom-icon.png' });
 * 
 * @example
 * // Preview mode with custom title
 * useBrowserTab({ 
 *   title: `${businessName} - Preview`,
 *   useBusinessName: false 
 * });
 */
export const useBrowserTab = (options: UseBrowserTabOptions = {}) => {
  const {
    title: customTitle,
    favicon: customFavicon,
    useBusinessName = true,
    fallbackTitle = 'That Smart Site',
  } = options;

  // Try to get tenant context (may not exist for platform pages)
  // useDataOptional returns null instead of throwing if not in context
  const data = useDataOptional();
  const businessName = data?.businessName || '';
  const industry = data?.industry || '';
  const isDataLoading = data?.isLoading || false;

  // Tenant config hook - safe to call, will return defaults if no tenant
  const { data: tenantConfig, isLoading: isConfigLoading } = useTenantConfigLoader();
  const logoUrl = tenantConfig?.branding.logo.url;

  // Determine the page title
  const pageTitle = customTitle || (
    useBusinessName && businessName && businessName !== 'Loading...' && businessName !== 'undefined'
      ? businessName
      : fallbackTitle
  );

  // Determine the favicon URL with proper fallbacks
  const faviconUrl = customFavicon 
    || logoUrl 
    || (industry ? getTenantAssetUrl({ vertical: industry as Vertical, type: 'logo' }) : null)
    || '/shared/icons/logo-white.svg'; // Platform logo fallback (white for clean favicon)

  // Determine the manifest URL - use tenant-specific manifest if we're in a tenant context
  const manifestUrl = data?.slug ? `/${data.slug}/manifest.json` : '/manifest.webmanifest';

  useEffect(() => {
    // Don't update if data is still loading (unless custom values provided)
    if (!customTitle && !customFavicon && (isDataLoading || isConfigLoading)) {
      return;
    }

    // Update page title
    updateTitle(pageTitle);

    // Update favicon
    if (faviconUrl) {
      updateFavicon(faviconUrl);
    }

    // Update manifest URL
    updateManifest(manifestUrl);
  }, [pageTitle, faviconUrl, manifestUrl, customTitle, customFavicon, isDataLoading, isConfigLoading]);

  return {
    title: pageTitle,
    favicon: faviconUrl,
    manifest: manifestUrl,
  };
};

/**
 * Update the browser tab title
 */
function updateTitle(title: string): void {
  // Update <title> element text content
  const titleElement = document.getElementById('meta-title');
  if (titleElement) {
    titleElement.textContent = title;
  }

  // Update document.title for better compatibility
  document.title = title;
}

/**
 * Update the favicon
 */
function updateFavicon(url: string): void {
  // Update main favicon
  const faviconElement = document.getElementById('favicon') as HTMLLinkElement | null;
  if (faviconElement) {
    faviconElement.href = url;

    // Update the MIME type based on file extension
    if (url.endsWith('.svg')) {
      faviconElement.type = 'image/svg+xml';
    } else if (url.endsWith('.png')) {
      faviconElement.type = 'image/png';
    } else if (url.endsWith('.ico')) {
      faviconElement.type = 'image/x-icon';
    } else if (url.endsWith('.webp')) {
      faviconElement.type = 'image/webp';
    }
  }

  // Update Apple touch icon
  const appleTouchIcon = document.getElementById('apple-touch-icon') as HTMLLinkElement | null;
  if (appleTouchIcon) {
    appleTouchIcon.href = url;
  }
}

/**
 * Update the PWA manifest URL
 */
function updateManifest(url: string): void {
  // Find existing manifest link or create new one
  let manifestElement = document.querySelector('link[rel="manifest"]');
  
  if (!manifestElement) {
    // Create new manifest link if none exists
    manifestElement = document.createElement('link');
    manifestElement.rel = 'manifest';
    document.head.appendChild(manifestElement);
  }
  
  // Update the manifest URL
  manifestElement.href = url;
}

/**
 * Utility function to manually set browser tab title
 * Use this for one-off updates outside of React components
 */
export const setBrowserTitle = (title: string): void => {
  updateTitle(title);
};

/**
 * Utility function to manually set favicon
 * Use this for one-off updates outside of React components
 */
export const setFavicon = (url: string): void => {
  updateFavicon(url);
};

/**
 * Utility function to set both title and favicon
 * Use this for one-off updates outside of React components
 */
export const setBrowserTab = (title: string, favicon?: string): void => {
  updateTitle(title);
  if (favicon) {
    updateFavicon(favicon);
  }
};



============================
FILE: frontend\src\shared\hooks\useData.ts
============================
/**
 * Data Context Hooks
 * 
 * Hooks for accessing DataContext from anywhere in the app
 */

import { useContext } from 'react';

import { DataContext, type DataContextType } from '@/shared/contexts/DataContext';

/**
 * Hook to access tenant/business data from DataContext
 * Throws error if used outside DataProvider
 * 
 * @example
 * ```tsx
 * function MyComponent() {
 *   const { businessName, industry, slug } = useData();
 *   return <div>{businessName}</div>;
 * }
 * ```
 */
export const useData = (): DataContextType => {
  const context = useContext(DataContext);
  if (!context) {
    throw new Error('useData must be used within a DataProvider');
  }
  return context;
};

/**
 * Optional version of useData that returns null if not in a provider
 * Useful for components that may or may not be wrapped in DataProvider
 * 
 * @example
 * ```tsx
 * function OptionalComponent() {
 *   const data = useDataOptional();
 *   if (!data) return <div>No tenant data available</div>;
 *   return <div>{data.businessName}</div>;
 * }
 * ```
 */
export const useDataOptional = (): DataContextType | null => {
  const context = useContext(DataContext);
  return context;
};



============================
FILE: frontend\src\shared\hooks\useDebouncedValue.ts
============================
import { useEffect, useState } from 'react';

/**
 * Hook that debounces a value by the specified delay
 * @param value - The value to debounce
 * @param delay - The delay in milliseconds
 * @returns The debounced value
 */
export const useDebouncedValue = <T>(value: T, delay: number): T => {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
};


============================
FILE: frontend\src\shared\hooks\useErrorBoundary.tsx
============================
import { useCallback, useEffect,useState } from 'react';

import { env } from '@/shared/env';

interface ErrorBoundaryState {
  hasError: boolean;
  error?: Error;
}

export const useErrorBoundary = () => {
  const [errorState, setErrorState] = useState<ErrorBoundaryState>({ hasError: false });

  const handleError = useCallback((error: Error, errorInfo?: { componentStack?: string; errorBoundary?: string }) => {
    console.error('useErrorBoundary caught an error:', error, errorInfo);
    
    setErrorState({
      hasError: true,
      error
    });

    // Log to external service in production
    if (env.PROD) {
      console.error('Production error:', { error, errorInfo });
    }
  }, []);

  const resetError = useCallback(() => {
    setErrorState({ hasError: false, error: undefined });
  }, []);

  // Global error handler
  useEffect(() => {
    const handleGlobalError = (event: ErrorEvent) => {
      const error = event.error instanceof Error ? event.error : new Error(event.message);
      handleError(error);
    };

    const handleUnhandledRejection = (event: PromiseRejectionEvent) => {
      const reason = typeof event.reason === 'string' ? event.reason : String(event.reason);
      handleError(new Error(reason));
    };

    window.addEventListener('error', handleGlobalError);
    window.addEventListener('unhandledrejection', handleUnhandledRejection);

    return () => {
      window.removeEventListener('error', handleGlobalError);
      window.removeEventListener('unhandledrejection', handleUnhandledRejection);
    };
  }, [handleError]);

  return {
    ...errorState,
    handleError,
    resetError
  };
};


============================
FILE: frontend\src\shared\hooks\useEventListener.ts
============================
import { useEffect, useRef } from 'react';

/**
 * Hook for adding event listeners with automatic cleanup
 * @param eventName - The event name to listen for
 * @param handler - The event handler function
 * @param element - The element to attach the listener to (defaults to window)
 * @param options - Event listener options
 */
export const useEventListener = <T extends keyof WindowEventMap>(
  eventName: T,
  handler: (event: WindowEventMap[T]) => void,
  element: Window | Document | HTMLElement | null = typeof window !== 'undefined' ? window : null,
  options?: boolean | AddEventListenerOptions
) => {
  // Create a ref that stores handler
  const savedHandler = useRef<(event: WindowEventMap[T]) => void>();

  // Update ref.current value if handler changes
  useEffect(() => {
    savedHandler.current = handler;
  }, [handler]);

  useEffect(() => {
    // Make sure element supports addEventListener
    const isSupported = element && element.addEventListener;
    if (!isSupported) return;

    // Create event listener that calls handler function stored in ref
    const eventListener = (event: Event) => {
      if (savedHandler.current) {
        savedHandler.current(event as WindowEventMap[T]);
      }
    };

    // Add event listener
    element.addEventListener(eventName, eventListener, options);

    // Remove event listener on cleanup
    return () => {
      element.removeEventListener(eventName, eventListener, options);
    };
  }, [eventName, element, options]);
};


============================
FILE: frontend\src\shared\hooks\useFAQSchema.ts
============================
/**
 * React hook for FAQ schema management
 * Provides both runtime generation and pre-built schema loading
 */

import { useMemo } from 'react';

import type { FAQItem } from '@/features/faq/types';
import { generateFAQSchema } from '@/shared/utils/schemaUtils';

interface UseFAQSchemaResult {
  /** Generated FAQ schema */
  schema: Record<string, unknown> | null;
  /** Whether schema was generated */
  hasSchema: boolean;
  /** Number of FAQs */
  faqCount: number;
  /** Generation method used */
  method: 'runtime' | 'prebuilt' | 'none';
}

/**
 * Hook to generate FAQ schema from FAQ items
 */
export function useFAQSchema(faqs: FAQItem[]): UseFAQSchemaResult {
  return useMemo(() => {
    if (faqs.length === 0) {
      return {
        schema: null,
        hasSchema: false,
        faqCount: 0,
        method: 'none'
      };
    }

    // Convert FAQItem format to schema format
    const convertedFAQs = faqs.map(faq => ({
      id: faq.id,
      q: faq.question,
      a: faq.answer
    }));

    const schema = generateFAQSchema(convertedFAQs);

    return {
      schema,
      hasSchema: true,
      faqCount: faqs.length,
      method: 'runtime'
    };
  }, [faqs]);
}

/**
 * Hook to load pre-built FAQ schema for a location
 */
export function usePrebuiltFAQSchema(locationSlug: string): UseFAQSchemaResult {
  return useMemo(() => {
    if (!locationSlug) {
      return {
        schema: null,
        hasSchema: false,
        faqCount: 0,
        method: 'none'
      };
    }

    // In a real implementation, you would fetch the pre-built schema
    // For now, we'll simulate this with a dynamic import
    // const schemaPath = `/schemas/locations/${locationSlug}-faq.json`;
    
    // This would be replaced with actual fetching in production
    // const schema = await fetch(schemaPath).then(r => r.json());
    
    return {
      schema: null, // Would be the actual schema
      hasSchema: false, // Would be true if schema exists
      faqCount: 0, // Would be parsed from schema
      method: 'prebuilt'
    };
  }, [locationSlug]);
}

/**
 * Hook that tries pre-built schema first, falls back to runtime generation
 */
export function useOptimizedFAQSchema(
  faqs: FAQItem[], 
  locationSlug?: string
): UseFAQSchemaResult {
  const prebuiltResult = usePrebuiltFAQSchema(locationSlug || '');
  const runtimeResult = useFAQSchema(faqs);

  return useMemo(() => {
    // Prefer pre-built schema if available
    if (prebuiltResult.hasSchema) {
      return prebuiltResult;
    }

    // Fall back to runtime generation
    return runtimeResult;
  }, [prebuiltResult, runtimeResult]);
}

/**
 * Hook for FAQ schema statistics
 */
export function useFAQSchemaStats(faqs: FAQItem[]): {
  totalFAQs: number;
  faqsWithIds: number;
  faqsWithoutIds: number;
  averageAnswerLength: number;
  shortAnswers: number;
  longAnswers: number;
  categories: string[];
  recommendations: string[];
} {
  return useMemo(() => {
    if (faqs.length === 0) {
      return {
        totalFAQs: 0,
        faqsWithIds: 0,
        faqsWithoutIds: 0,
        averageAnswerLength: 0,
        shortAnswers: 0,
        longAnswers: 0,
        categories: [],
        recommendations: []
      };
    }

    const faqsWithIds = faqs.filter(faq => faq.id).length;
    const faqsWithoutIds = faqs.length - faqsWithIds;
    
    const answerLengths = faqs.map(faq => faq.answer.length);
    const averageAnswerLength = answerLengths.reduce((sum, len) => sum + len, 0) / faqs.length;
    
    const shortAnswers = answerLengths.filter(len => len < 50).length;
    const longAnswers = answerLengths.filter(len => len > 200).length;
    
    const categories = [...new Set(faqs.map(faq => faq.category).filter(Boolean))];
    
    const recommendations: string[] = [];
    if (faqsWithoutIds > 0) {
      recommendations.push(`Add IDs to ${faqsWithoutIds} FAQs for better analytics`);
    }
    if (shortAnswers > 0) {
      recommendations.push(`${shortAnswers} FAQs have short answers - consider expanding for SEO`);
    }
    if (categories.length === 0) {
      recommendations.push('Consider categorizing FAQs for better organization');
    }

    return {
      totalFAQs: faqs.length,
      faqsWithIds,
      faqsWithoutIds,
      averageAnswerLength: Math.round(averageAnswerLength),
      shortAnswers,
      longAnswers,
      categories,
      recommendations
    };
  }, [faqs]);
}


============================
FILE: frontend\src\shared\hooks\useImageRotation.ts
============================
import { useCallback,useEffect, useRef, useState } from 'react';

import { 
  getNextImageIndex,
  getPreviousImageIndex,
  type ImageRotationActions,
  type ImageRotationConfig, 
  type ImageRotationState, 
  preloadImages,
  validateImageRotationConfig
} from '@/shared/utils/imageRotation';

export interface UseImageRotationReturn extends ImageRotationState, ImageRotationActions {
  /** Whether the carousel has multiple images */
  hasMultipleImages: boolean;
  /** Total number of images */
  totalImages: number;
  /** Whether the configuration is valid */
  isValid: boolean;
  /** Validation errors if any */
  errors: string[];
}

/**
 * Hook for managing image rotation with automatic transitions
 */
export const useImageRotation = (config: ImageRotationConfig): UseImageRotationReturn => {
  const { images, autoRotate, interval, preloadNext } = config;

  // Validate config
  const { isValid, errors } = validateImageRotationConfig(config);
  const totalImages = images.length;
  const hasMultipleImages = totalImages > 1;

  // State
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isPaused, setIsPaused] = useState(false);
  const [_prefersReducedMotion, setPrefersReducedMotion] = useState(false);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  // Check if user prefers reduced motion
  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
    setPrefersReducedMotion(mediaQuery.matches);
    
    const handleChange = (e: MediaQueryListEvent) => {
      setPrefersReducedMotion(e.matches);
    };
    
    mediaQuery.addEventListener('change', handleChange);
    return () => { mediaQuery.removeEventListener('change', handleChange); };
  }, []);

  // Preload images
  useEffect(() => {
    if (preloadNext && totalImages > 1) {
      void preloadImages(images);
    }
  }, [images, preloadNext, totalImages]);

  // Auto-rotation effect
  useEffect(() => {
    // Disable auto-rotation if invalid or paused
    // NOTE: prefersReducedMotion check disabled for development
    // Re-enable in production by uncommenting: || prefersReducedMotion
    if (!isValid || !autoRotate || !hasMultipleImages || isPaused) {
      return;
    }

    intervalRef.current = setInterval(() => {
      setCurrentIndex(prevIndex => getNextImageIndex(prevIndex, totalImages));
    }, interval);

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    };
  }, [isValid, autoRotate, hasMultipleImages, isPaused, interval, totalImages]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, []);

  // Navigation functions
  const next = useCallback(() => {
    if (!isValid || !hasMultipleImages) return;
    setCurrentIndex(prevIndex => getNextImageIndex(prevIndex, totalImages));
  }, [isValid, hasMultipleImages, totalImages]);

  const previous = useCallback(() => {
    if (!isValid || !hasMultipleImages) return;
    setCurrentIndex(prevIndex => getPreviousImageIndex(prevIndex, totalImages));
  }, [isValid, hasMultipleImages, totalImages]);

  const goTo = useCallback((index: number) => {
    if (!isValid || !hasMultipleImages || index < 0 || index >= totalImages) return;
    setCurrentIndex(index);
  }, [isValid, hasMultipleImages, totalImages]);

  const togglePause = useCallback(() => {
    setIsPaused(prev => !prev);
  }, []);

  const setPaused = useCallback((paused: boolean) => {
    setIsPaused(paused);
  }, []);

  return {
    currentIndex,
    nextIndex: getNextImageIndex(currentIndex, totalImages),
    isPaused,
    hasMultipleImages,
    totalImages,
    isValid,
    errors,
    next,
    previous,
    goTo,
    togglePause,
    setPaused
  };
};

/**
 * Hook for handling hover pause functionality
 */
export const useImageRotationHover = (rotation: UseImageRotationReturn) => {
  const [isHovered, setIsHovered] = useState(false);

  const handleMouseEnter = useCallback(() => {
    setIsHovered(true);
  }, []);

  const handleMouseLeave = useCallback(() => {
    setIsHovered(false);
  }, []);

  // Pause rotation on hover
  useEffect(() => {
    if (isHovered && rotation.isValid) {
      rotation.setPaused(true);
    } else {
      rotation.setPaused(false);
    }
  }, [isHovered, rotation]);

  return {
    isHovered,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  };
};

============================
FILE: frontend\src\shared\hooks\useIndustryConfig.ts
============================
/**
 * Industry Configuration Hook
 * Centralized loader for industry-specific site configs
 * 
 * Usage:
 *   const { siteConfig, isLoading } = useIndustryConfig('mobile-detailing');
 *   console.log(siteConfig.hero.h1);
 * 
 * This hook is for direct industry config access. Most components should use
 * the DataContext (via useData) which automatically loads both tenant + industry config.
 */

import { type QueryClient, useQuery } from '@tanstack/react-query';

import { fetchIndustryConfig } from '@/shared/api/industryConfigApi';

/**
 * Hook to access industry-specific site configuration
 * 
 * @param industry - Industry identifier (e.g., 'mobile-detailing', 'maid-service', 'pet-grooming')
 * @param options - React Query options
 * @returns Site config with loading/error states
 * 
 * @example
 * ```tsx
 * // Direct usage
 * const { siteConfig, isLoading } = useIndustryConfig('mobile-detailing');
 * 
 * // With tenant data
 * const tenantData = useData(); // From DataContext
 * const { siteConfig } = useIndustryConfig(tenantData.industry);
 * ```
 */
export function useIndustryConfig(
  industry: string | null | undefined,
  options?: {
    enabled?: boolean;
  }
) {
  const { data: siteConfig, isLoading, error } = useQuery({
    queryKey: ['shared','industryConfig', industry],
    queryFn: () => {
      if (!industry) throw new Error('Industry is required');
      return fetchIndustryConfig(industry);
    },
    enabled: options?.enabled !== false && !!industry,
    staleTime: 10 * 60 * 1000, // 10 minutes - configs rarely change
    gcTime: 30 * 60 * 1000, // 30 minutes cache
    retry: 2,
  });
  
  return {
    siteConfig: siteConfig || null,
    isLoading,
    error: error || null,
    industry: industry || null,
  };
}

/**
 * Prefetch industry config for performance optimization
 * Useful for hover states or route prefetching
 * 
 * @example
 * ```tsx
 * import { useQueryClient } from '@tanstack/react-query';
 * import { prefetchIndustryConfig } from '@/shared/hooks';
 * 
 * function IndustryLink({ industry }: { industry: string }) {
 *   const queryClient = useQueryClient();
 *   
 *   return (
 *     <Link 
 *       to={`/${industry}`}
 *       onMouseEnter={() => prefetchIndustryConfig(queryClient, industry)}
 *     >
 *       {industry}
 *     </Link>
 *   );
 * }
 * ```
 */
export async function prefetchIndustryConfig(
  queryClient: QueryClient,
  industry: string
): Promise<void> {
  await queryClient.prefetchQuery({
    queryKey: ['industryConfig', industry],
    queryFn: () => fetchIndustryConfig(industry),
    staleTime: 10 * 60 * 1000,
  });
}



============================
FILE: frontend\src\shared\hooks\useIndustrySiteData.ts
============================
import { useData } from '@/features/header/contexts/DataProvider';
import type { MainSiteConfig } from '@/shared/types/location';

/**
 * Hook to access the correct site.json based on the tenant's industry
 * Site data is now centrally loaded and cached in DataProvider
 * 
 * This hook provides a convenient interface for components that need site config
 */
export const useIndustrySiteData = (): {
  siteData: MainSiteConfig | null;
  industry: string;
  isLoading: boolean;
} => {
  const { industry, siteConfig, isLoading } = useData();

  return {
    siteData: siteConfig,
    industry,
    isLoading
  };
};


============================
FILE: frontend\src\shared\hooks\useLocalStorage.ts
============================
import { useEffect, useState } from 'react';

/**
 * Hook for managing localStorage with type safety and SSR support
 * @param key - The localStorage key
 * @param initialValue - The initial value if key doesn't exist
 * @returns A tuple with the current value and setter function
 */
export const useLocalStorage = <T>(
  key: string,
  initialValue: T
): [T, (value: T | ((val: T) => T)) => void] => {
  // State to store our value
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue;
    }
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) as T : initialValue;
    } catch (error) {
      console.warn(`Error reading localStorage key "${key}":`, error);
      return initialValue;
    }
  });

  // Return a wrapped version of useState's setter function that persists the new value to localStorage
  const setValue = (value: T | ((val: T) => T)) => {
    try {
      // Allow value to be a function so we have the same API as useState
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      
      // Save to localStorage
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      console.warn(`Error setting localStorage key "${key}":`, error);
    }
  };

  // Listen for changes to this localStorage key from other tabs/windows
  useEffect(() => {
    if (typeof window === 'undefined') return;

    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === key && e.newValue !== null) {
        try {
          setStoredValue(JSON.parse(e.newValue) as T);
        } catch (error) {
          console.warn(`Error parsing localStorage value for key "${key}":`, error);
        }
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => { window.removeEventListener('storage', handleStorageChange); };
  }, [key]);

  return [storedValue, setValue];
};


============================
FILE: frontend\src\shared\hooks\useLocationValidation.ts
============================
/**
 * React hook for validating location data
 * Provides validation state and error handling for location data
 */

import { useMemo } from 'react';

import type { LocationPage } from '@/shared/types/location';
import { validateLocationWithDetails } from '@/shared/utils/validateLocationData';

interface UseLocationValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
  hasErrors: boolean;
  hasWarnings: boolean;
  errorCount: number;
  warningCount: number;
  formattedErrors: string;
  formattedWarnings: string;
}

/**
 * Hook to validate location data and provide validation results
 */
export function useLocationValidation(locationData: LocationPage | null | undefined): UseLocationValidationResult {
  return useMemo(() => {
    if (!locationData) {
      return {
        isValid: true,
        errors: [],
        warnings: [],
        hasErrors: false,
        hasWarnings: false,
        errorCount: 0,
        warningCount: 0,
        formattedErrors: '',
        formattedWarnings: ''
      };
    }

    const validation = validateLocationWithDetails(locationData);
    
    return {
      isValid: validation.isValid,
      errors: validation.errors,
      warnings: validation.warnings,
      hasErrors: validation.errors.length > 0,
      hasWarnings: validation.warnings.length > 0,
      errorCount: validation.errors.length,
      warningCount: validation.warnings.length,
      formattedErrors: validation.errors.join('\n'),
      formattedWarnings: validation.warnings.join('\n')
    };
  }, [locationData]);
}

/**
 * Hook to validate multiple location data objects
 */
export function useMultipleLocationValidation(locationDataArray: (LocationPage | null | undefined)[]): {
  overallValid: boolean;
  totalErrors: number;
  totalWarnings: number;
  results: UseLocationValidationResult[];
  summary: string;
} {
  // Validate each location individually - hooks must be called unconditionally
  const results = locationDataArray.map(data => 
    // eslint-disable-next-line react-hooks/rules-of-hooks -- This is called in a loop at the same level, safe for React
    useLocationValidation(data)
  );
  
  return useMemo(() => {
    const totalErrors = results.reduce((sum, result) => sum + result.errorCount, 0);
    const totalWarnings = results.reduce((sum, result) => sum + result.warningCount, 0);
    const overallValid = totalErrors === 0;
    
    const validCount = results.filter(r => r.isValid).length;
    const totalCount = results.length;
    
    let summary: string;
    if (overallValid) {
      if (totalWarnings > 0) {
        summary = `✅ All ${totalCount} locations valid (${totalWarnings} warnings)`;
      } else {
        summary = `✅ All ${totalCount} locations valid`;
      }
    } else {
      summary = `❌ ${totalCount - validCount}/${totalCount} locations have errors (${totalErrors} total errors, ${totalWarnings} warnings)`;
    }
    
    return {
      overallValid,
      totalErrors,
      totalWarnings,
      results,
      summary
    };
  }, [results]);
}

/**
 * Hook for development/debugging - logs validation results to console
 */
export function useLocationValidationDebug(locationData: LocationPage | null | undefined, label?: string): UseLocationValidationResult {
  const validation = useLocationValidation(locationData);
  
  useMemo(() => {
    if (import.meta.env.DEV) {
      const prefix = label ? `[${label}] ` : '';
      
      if (!validation.isValid) {
        console.error(`${prefix}Location validation failed:`, validation.errors);
      }
      
      if (validation.hasWarnings) {
        console.warn(`${prefix}Location validation warnings:`, validation.warnings);
      }
    }
  }, [validation, label]);
  
  return validation;
}


============================
FILE: frontend\src\shared\hooks\useMediaQuery.ts
============================
import { useEffect, useState } from 'react';

/**
 * Responsive breakpoints matching Tailwind's default configuration
 */
export const BREAKPOINTS = {
  sm: 640,
  md: 768,
  lg: 1024,
  xl: 1280,
  '2xl': 1536,
} as const;

/**
 * Hook for responsive media queries
 * @param query - Media query string (e.g., '(min-width: 768px)')
 * @returns boolean indicating if the media query matches
 * 
 * @example
 * const isDesktop = useMediaQuery('(min-width: 768px)');
 * const prefersDark = useMediaQuery('(prefers-color-scheme: dark)');
 */
export const useMediaQuery = (query: string): boolean => {
  const [matches, setMatches] = useState<boolean>(() => {
    // SSR-safe initialization
    if (typeof window === 'undefined') return false;
    return window.matchMedia(query).matches;
  });

  useEffect(() => {
    if (typeof window === 'undefined') return;

    const mediaQuery = window.matchMedia(query);
    
    // Update state if initial value differs from current
    if (mediaQuery.matches !== matches) {
      setMatches(mediaQuery.matches);
    }

    // Event handler for media query changes
    const handleChange = (event: MediaQueryListEvent) => {
      setMatches(event.matches);
    };

    // Modern browsers support addEventListener
    mediaQuery.addEventListener('change', handleChange);

    return () => {
      mediaQuery.removeEventListener('change', handleChange);
    };
  }, [query, matches]);

  return matches;
};

/**
 * Hook to detect if viewport is mobile size (< 768px)
 * @returns boolean indicating if viewport is mobile
 * 
 * @example
 * const isMobile = useIsMobile();
 * return isMobile ? <MobileMenu /> : <DesktopMenu />;
 */
export const useIsMobile = (): boolean => {
  return useMediaQuery(`(max-width: ${BREAKPOINTS.md - 1}px)`);
};

/**
 * Hook to detect if viewport is tablet size (>= 768px and < 1024px)
 * @returns boolean indicating if viewport is tablet
 * 
 * @example
 * const isTablet = useIsTablet();
 */
export const useIsTablet = (): boolean => {
  const isAboveMobile = useMediaQuery(`(min-width: ${BREAKPOINTS.md}px)`);
  const isBelowDesktop = useMediaQuery(`(max-width: ${BREAKPOINTS.lg - 1}px)`);
  return isAboveMobile && isBelowDesktop;
};

/**
 * Hook to detect if viewport is desktop size (>= 768px)
 * @returns boolean indicating if viewport is desktop
 * 
 * @example
 * const isDesktop = useIsDesktop();
 */
export const useIsDesktop = (): boolean => {
  return useMediaQuery(`(min-width: ${BREAKPOINTS.md}px)`);
};

/**
 * Hook to detect if viewport is large desktop size (>= 1024px)
 * @returns boolean indicating if viewport is large desktop
 * 
 * @example
 * const isLargeDesktop = useIsLargeDesktop();
 */
export const useIsLargeDesktop = (): boolean => {
  return useMediaQuery(`(min-width: ${BREAKPOINTS.lg}px)`);
};

/**
 * Hook that returns current breakpoint name
 * @returns Current breakpoint ('sm' | 'md' | 'lg' | 'xl' | '2xl')
 * 
 * @example
 * const breakpoint = useBreakpoint();
 * if (breakpoint === 'sm') { ... }
 */
export const useBreakpoint = (): keyof typeof BREAKPOINTS => {
  const is2xl = useMediaQuery(`(min-width: ${BREAKPOINTS['2xl']}px)`);
  const isXl = useMediaQuery(`(min-width: ${BREAKPOINTS.xl}px)`);
  const isLg = useMediaQuery(`(min-width: ${BREAKPOINTS.lg}px)`);
  const isMd = useMediaQuery(`(min-width: ${BREAKPOINTS.md}px)`);

  if (is2xl) return '2xl';
  if (isXl) return 'xl';
  if (isLg) return 'lg';
  if (isMd) return 'md';
  return 'sm';
};



============================
FILE: frontend\src\shared\hooks\useMergedLocationData.ts
============================
/**
 * React hook for merging location data with main site config
 * Provides merged location data with smart defaults and validation
 */

import { useMemo } from 'react';

import { env } from '@/shared/env';
import type { LocationPage, MainSiteConfig } from '@/shared/types/location';
import { 
  createMergedLocationData, 
  type DeepMergeOptions, 
  getMergeStatistics,
  type MergeStatistics,
  validateMergedData} from '@/shared/utils/deepMerge';

interface UseMergedLocationDataResult {
  /** Merged location data */
  mergedData: LocationPage;
  /** Validation results */
  validation: {
    isValid: boolean;
    errors: string[];
    warnings: string[];
  };
  /** Merge statistics */
  statistics: MergeStatistics;
  /** Whether data was actually merged */
  wasMerged: boolean;
}

/**
 * Hook to merge location data with main site config
 */
export function useMergedLocationData(
  mainConfig: MainSiteConfig | null | undefined,
  locationData: LocationPage | null | undefined,
  customOptions?: Partial<DeepMergeOptions>
): UseMergedLocationDataResult {
  return useMemo(() => {
    // If no data provided, return empty result
    if (!mainConfig || !locationData) {
      const emptyData = locationData || {} as LocationPage;
      return {
        mergedData: emptyData,
        validation: { isValid: false, errors: ['Missing main config or location data'], warnings: [] },
        statistics: {
          fieldsFromMain: [],
          fieldsFromLocation: [],
          fieldsMerged: [],
          arraysConcatenated: [],
          arraysDeduplicated: []
        },
        wasMerged: false
      };
    }

    // Create merged data
    const mergedData = createMergedLocationData(mainConfig, locationData, customOptions);
    
    // Validate merged data
    const validation = validateMergedData(mergedData);
    
    // Get merge statistics
    const statistics = getMergeStatistics(mainConfig, locationData, mergedData);
    
    return {
      mergedData,
      validation,
      statistics,
      wasMerged: true
    };
  }, [mainConfig, locationData, customOptions]);
}

/**
 * Hook for multiple location data merging
 */
export function useMultipleMergedLocations(
  mainConfig: MainSiteConfig | null | undefined,
  locationDataArray: (LocationPage | null | undefined)[],
  customOptions?: Partial<DeepMergeOptions>
): {
  mergedLocations: UseMergedLocationDataResult[];
  overallValid: boolean;
  totalErrors: number;
  totalWarnings: number;
  summary: string;
} {
  // Merge each location individually - hooks must be called unconditionally
  const mergedLocations = locationDataArray.map(locationData => 
    // eslint-disable-next-line react-hooks/rules-of-hooks -- This is called in a loop at the same level, safe for React
    useMergedLocationData(mainConfig, locationData, customOptions)
  );
  
  return useMemo(() => {
    const totalErrors = mergedLocations.reduce((sum, result) => sum + result.validation.errors.length, 0);
    const totalWarnings = mergedLocations.reduce((sum, result) => sum + result.validation.warnings.length, 0);
    const overallValid = totalErrors === 0;
    
    const validCount = mergedLocations.filter(r => r.validation.isValid).length;
    const totalCount = mergedLocations.length;
    
    let summary: string;
    if (overallValid) {
      if (totalWarnings > 0) {
        summary = `✅ All ${totalCount} locations merged successfully (${totalWarnings} warnings)`;
      } else {
        summary = `✅ All ${totalCount} locations merged successfully`;
      }
    } else {
      summary = `❌ ${totalCount - validCount}/${totalCount} locations have merge errors (${totalErrors} total errors, ${totalWarnings} warnings)`;
    }
    
    return {
      mergedLocations,
      overallValid,
      totalErrors,
      totalWarnings,
      summary
    };
  }, [mergedLocations]);
}

/**
 * Hook for development/debugging - logs merge results
 */
export function useMergedLocationDataDebug(
  mainConfig: MainSiteConfig | null | undefined,
  locationData: LocationPage | null | undefined,
  label?: string,
  customOptions?: Partial<DeepMergeOptions>
): UseMergedLocationDataResult {
  const result = useMergedLocationData(mainConfig, locationData, customOptions);
  
  useMemo(() => {
    if (process.env.NODE_ENV === 'development') {
      const prefix = label ? `[${label}] ` : '';
      
      if (!result.validation.isValid) {
        console.error(`${prefix}Location merge validation failed:`, result.validation.errors);
      }
      
      if (result.validation.warnings.length > 0) {
        console.warn(`${prefix}Location merge warnings:`, result.validation.warnings);
      }
      
      if (result.wasMerged && env.DEV) {
        // eslint-disable-next-line no-console -- Debug logging in development only
        console.log(`${prefix}Merge statistics:`, {
          fieldsFromMain: result.statistics.fieldsFromMain.length,
          fieldsFromLocation: result.statistics.fieldsFromLocation.length,
          fieldsMerged: result.statistics.fieldsMerged.length,
          arraysConcatenated: result.statistics.arraysConcatenated.length,
          arraysDeduplicated: result.statistics.arraysDeduplicated.length
        });
      }
    }
  }, [result, label]);
  
  return result;
}

/**
 * Hook for getting merge preview (what would be merged without actually merging)
 */
export function useMergePreview(
  mainConfig: MainSiteConfig | null | undefined,
  locationData: LocationPage | null | undefined,
  _customOptions?: Partial<DeepMergeOptions>
): {
  preview: Partial<LocationPage>;
  conflicts: string[];
  additions: string[];
  modifications: string[];
} {
  return useMemo(() => {
    if (!mainConfig || !locationData) {
      return {
        preview: {},
        conflicts: [],
        additions: [],
        modifications: []
      };
    }

    const preview: Partial<LocationPage> = {};
    const conflicts: string[] = [];
    const additions: string[] = [];
    const modifications: string[] = [];

    // Analyze what would change
    Object.keys(locationData).forEach(key => {
      const mainValue = mainConfig[key as keyof MainSiteConfig];
      const locationValue = locationData[key as keyof LocationPage];
      
      if (mainValue !== undefined && locationValue !== undefined) {
        if (JSON.stringify(mainValue) !== JSON.stringify(locationValue)) {
          modifications.push(key);
          conflicts.push(`${key}: main vs location`);
        }
        preview[key as keyof LocationPage] = locationValue;
      } else if (locationValue !== undefined) {
        additions.push(key);
        preview[key as keyof LocationPage] = locationValue;
      } else if (mainValue !== undefined) {
        preview[key as keyof LocationPage] = mainValue as LocationPage[keyof LocationPage];
      }
    });

    return {
      preview,
      conflicts,
      additions,
      modifications
    };
  }, [mainConfig, locationData]);
}


============================
FILE: frontend\src\shared\hooks\useMetaTags.ts
============================
import { useEffect } from 'react';

import { useData } from '@/shared/hooks/useData';
import { useIndustrySiteData } from '@/shared/hooks/useIndustrySiteData';
import { getAbsoluteUrl } from '@/shared/utils';

export interface UseMetaTagsOptions {
  /** Custom page title (for OG/Twitter tags) */
  title?: string;
  /** Custom meta description */
  description?: string;
  /** Custom meta keywords */
  keywords?: string[];
  /** Custom Open Graph image */
  ogImage?: string;
  /** Custom Twitter image (defaults to ogImage if not provided) */
  twitterImage?: string;
  /** Custom canonical path */
  canonicalPath?: string;
}

/**
 * Hook to manage SEO meta tags
 * 
 * Automatically sets:
 * - Meta description
 * - Meta keywords
 * - Open Graph tags (title, description, image)
 * - Twitter Card tags (title, description, image)
 * - Canonical URL
 * 
 * @example
 * // Use defaults from site config
 * useMetaTags();
 * 
 * @example
 * // Custom description
 * useMetaTags({ 
 *   description: 'Custom page description for this specific page' 
 * });
 * 
 * @example
 * // Full customization for a specific page
 * useMetaTags({
 *   title: 'Contact Us - Business Name',
 *   description: 'Get in touch with our team',
 *   ogImage: '/images/contact-hero.jpg',
 *   canonicalPath: '/contact'
 * });
 */
export const useMetaTags = (options: UseMetaTagsOptions = {}) => {
  const { siteData } = useIndustrySiteData();
  const { businessName } = useData();

  const {
    title: customTitle,
    description: customDescription,
    keywords: customKeywords,
    ogImage: customOgImage,
    twitterImage: customTwitterImage,
    canonicalPath: customCanonicalPath,
  } = options;

  useEffect(() => {
    if (!siteData) return;

    // Determine the page title (for OG/Twitter, not browser tab)
    const pageTitle = customTitle || businessName || siteData.seo.title;
    const description = customDescription || siteData.seo.description;
    const keywords = customKeywords || siteData.seo.keywords;
    const ogImage = customOgImage || siteData.seo.ogImage;
    const twitterImage = customTwitterImage || siteData.seo.twitterImage || ogImage;
    const canonicalPath = customCanonicalPath || siteData.seo.canonicalPath;

    // Update meta description
    updateMetaTag('meta-desc', 'content', description);

    // Update meta keywords
    if (keywords && keywords.length > 0) {
      updateMetaTag('meta-keywords', 'content', keywords.join(', '));
    }

    // Update Open Graph tags
    updateMetaTag('og-title', 'content', pageTitle);
    updateMetaTag('og-desc', 'content', description);
    
    if (ogImage) {
      const absoluteImageUrl = getAbsoluteUrl(ogImage);
      updateMetaTag('og-image', 'content', absoluteImageUrl);
    }

    // Update Twitter Card tags
    updateMetaTag('tw-title', 'content', pageTitle);
    updateMetaTag('tw-desc', 'content', description);
    
    if (twitterImage) {
      const absoluteImageUrl = getAbsoluteUrl(twitterImage);
      updateMetaTag('tw-image', 'content', absoluteImageUrl);
    }

    // Update canonical URL
    if (canonicalPath) {
      const canonicalElement = document.getElementById('canonical-link');
      if (canonicalElement) {
        const domain = window.location.host;
        canonicalElement.setAttribute('href', `https://${domain}${canonicalPath}`);
      }
    }

  }, [
    siteData,
    businessName,
    customTitle,
    customDescription,
    customKeywords,
    customOgImage,
    customTwitterImage,
    customCanonicalPath,
  ]);

  return {
    title: customTitle || businessName || siteData?.seo.title,
    description: customDescription || siteData?.seo.description,
    keywords: customKeywords || siteData?.seo.keywords,
  };
};

/**
 * Update a meta tag by element ID
 */
function updateMetaTag(elementId: string, attribute: string, value: string): void {
  const element = document.getElementById(elementId);
  if (element) {
    element.setAttribute(attribute, value);
  }
}

/**
 * Utility function to manually update meta description
 * Use this for one-off updates outside of React components
 */
export const setMetaDescription = (description: string): void => {
  updateMetaTag('meta-desc', 'content', description);
};

/**
 * Utility function to manually update Open Graph image
 * Use this for one-off updates outside of React components
 */
export const setOgImage = (imageUrl: string): void => {
  const absoluteUrl = getAbsoluteUrl(imageUrl);
  updateMetaTag('og-image', 'content', absoluteUrl);
};



============================
FILE: frontend\src\shared\hooks\useMobileDetection.ts
============================
import { useEffect, useState } from 'react';

/**
 * Hook to detect if the user is on a mobile device
 * Returns true for phones and small tablets, false for desktop/large tablets
 */
export function useMobileDetection(): boolean {
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkMobile = () => {
      // Check user agent for mobile indicators
      const userAgent = navigator.userAgent.toLowerCase();
      const isMobileUA = /android|webos|iphone|ipod|blackberry|iemobile|opera mini/i.test(userAgent);
      
      // Check screen size - consider devices with width <= 768px as mobile
      const isSmallScreen = window.innerWidth <= 768;
      
      // Check if device has touch capability (but not desktop with touch)
      const hasTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
      
      // Mobile if: (mobile user agent AND small screen) OR (small screen AND touch)
      const mobile = (isMobileUA && isSmallScreen) || (isSmallScreen && hasTouch && window.innerWidth <= 1024);
      
      setIsMobile(mobile);
    };

    // Check on mount
    checkMobile();

    // Check on resize (in case of orientation change)
    window.addEventListener('resize', checkMobile);

    return () => {
      window.removeEventListener('resize', checkMobile);
    };
  }, []);

  return isMobile;
}


============================
FILE: frontend\src\shared\hooks\usePerformanceMonitor.ts
============================
import { useCallback } from 'react';

import { performanceMonitor } from '@/shared/utils';

/**
 * Hook for monitoring component performance
 */
export const usePerformanceMonitor = (componentName: string) => {
  const startLoad = useCallback(() => {
    performanceMonitor.startTiming(componentName);
  }, [componentName]);

  const endLoad = useCallback(() => {
    performanceMonitor.endTiming(componentName, 'load');
  }, [componentName]);

  const startPrefetch = useCallback(() => {
    performanceMonitor.startTiming(componentName);
  }, [componentName]);

  const endPrefetch = useCallback(() => {
    performanceMonitor.endTiming(componentName, 'prefetch');
  }, [componentName]);

  return {
    startLoad,
    endLoad,
    startPrefetch,
    endPrefetch
  };
};


============================
FILE: frontend\src\shared\hooks\usePrefetch.ts
============================
import { useCallback, useRef } from 'react';

/**
 * Custom hook for prefetching lazy-loaded components
 * Provides prefetch functions that can be used on hover, focus, or other events
 */
export const usePrefetch = () => {
  const prefetchedRef = useRef<Set<string>>(new Set());

  const prefetch = useCallback((prefetchFn: () => void | Promise<void>, key: string) => {
    if (!prefetchedRef.current.has(key)) {
      prefetchedRef.current.add(key);
      void prefetchFn();
    }
  }, []);

  const isPrefetched = useCallback((key: string) => {
    return prefetchedRef.current.has(key);
  }, []);

  const clearPrefetched = useCallback(() => {
    prefetchedRef.current.clear();
  }, []);

  return {
    prefetch,
    isPrefetched,
    clearPrefetched
  };
};

/**
 * Hook specifically for prefetching modals with enhanced caching
 */
export const useModalPrefetch = () => {
  const { prefetch } = usePrefetch();

  const prefetchQuoteModal = useCallback(() => {
    prefetch(() => {
      void import('@/features/quotes/components/RequestQuoteModal');
    }, 'quoteModal');
  }, [prefetch]);

  const prefetchLoginModal = useCallback(() => {
    prefetch(() => {
      void import('@/features/auth/components/LoginModal');
    }, 'loginModal');
  }, [prefetch]);

  // Enhanced prefetch with intersection observer for viewport-based loading
  const prefetchOnViewport = useCallback((target: HTMLElement, modalType: 'quote' | 'login') => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            if (modalType === 'quote') {
              prefetchQuoteModal();
            } else {
              prefetchLoginModal();
            }
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.1, rootMargin: '50px' }
    );

    observer.observe(target);
    return () => { observer.disconnect(); };
  }, [prefetchQuoteModal, prefetchLoginModal]);

  return {
    prefetchQuoteModal,
    prefetchLoginModal,
    prefetchOnViewport
  };
};


============================
FILE: frontend\src\shared\hooks\usePWAStatus.ts
============================
import { useEffect, useState } from 'react';

interface PWAStatus {
  isInstalled: boolean;
  isStandalone: boolean;
  canInstall: boolean;
  displayMode: 'standalone' | 'fullscreen' | 'minimal-ui' | 'browser';
}

export const usePWAStatus = (): PWAStatus => {
  const [status, setStatus] = useState<PWAStatus>({
    isInstalled: false,
    isStandalone: false,
    canInstall: false,
    displayMode: 'browser',
  });

  useEffect(() => {
    const detectDisplayMode = () => {
      const modes = ['standalone', 'fullscreen', 'minimal-ui'] as const;
      const active = modes.find((mode) =>
        window.matchMedia(`(display-mode: ${mode})`).matches
      );
      const displayMode = active ?? 'browser';
      const isStandaloneIOS =
        'standalone' in navigator && (navigator as { standalone?: boolean }).standalone;
      const isStandalone = displayMode !== 'browser' || !!isStandaloneIOS;

      // Additional detection methods
      const hasAppBanner = 'standalone' in window && window.standalone === true;
      const isInStandaloneMode = window.matchMedia('(display-mode: standalone)').matches;
      const isPWAInstalled = isStandalone || hasAppBanner || isInStandaloneMode;

      // Debug logging removed for production

      setStatus((prev) => ({
        ...prev,
        isStandalone,
        isInstalled: isPWAInstalled,
        displayMode,
      }));
    };

    detectDisplayMode();

    // Detect when app becomes installable
    const handleBeforeInstallPrompt = (e: Event) => {
      e.preventDefault();
      setStatus((prev) => ({ ...prev, canInstall: true }));
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.matchMedia('(display-mode: standalone)').addEventListener('change', detectDisplayMode);

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    };
  }, []);

  return status;
};


============================
FILE: frontend\src\shared\hooks\useReviewsAvailability.ts
============================
import { useReviews } from '@/features/reviews/hooks/useReviews';
import type { ReviewQueryParams } from '@/features/reviews/types';
import { useDataOptional } from '@/shared/hooks/useData';

/**
 * Hook to check if reviews are available for the current site
 * Returns true if there are reviews, false otherwise
 */
export const useReviewsAvailability = (): boolean => {
  const data = useDataOptional();
  const isTenant = data?.isTenant || false;
  
  // Build query parameters for availability check only
  const queryParams: ReviewQueryParams = {
    limit: 1
  };
  
  // For tenant sites, get the tenant slug from the URL
  if (isTenant) {
    const urlSlug = window.location.pathname.split('/')[1];
    if (urlSlug) {
      queryParams.tenant_slug = urlSlug;
    }
  }
  
  // Fetch reviews with tenant-specific filtering
  const { reviews, loading } = useReviews(queryParams);
  
  // Only return true if we have reviews and are not loading
  return !loading && reviews.length > 0;
};



============================
FILE: frontend\src\shared\hooks\useScrollSpy.ts
============================
import { useEffect } from 'react';

import { type SectionId,useSectionStore } from '@/shared/state/sectionStore';

type Opts = {
  ids: SectionId[];
  headerPx?: number;       // sticky header height
  threshold?: number;      // how much must be visible
  updateHash?: boolean;    // keep URL hash in sync
};

export function useScrollSpy({
  ids,
  headerPx = 88,
  threshold = 0.55,
  updateHash = false,
}: Opts) {
  const setCurrent = useSectionStore((s) => s.setCurrent);

  useEffect(() => {
    const els = ids
      .map((id) => document.getElementById(id))
      .filter((el): el is HTMLElement => !!el);
    if (!els.length) return;

    // Use multiple thresholds for more granular detection
    const thresholds = Array.from({ length: 21 }, (_, i) => i * 0.05);

    const io = new IntersectionObserver(
      (entries) => {
        // Only process if we have intersecting entries
        const intersecting = entries.filter((e) => e.isIntersecting);
        
        if (intersecting.length === 0) return;

        // Find the MOST visible section (highest intersection ratio)
        const mostVisible = intersecting.reduce((best, current) => {
          return current.intersectionRatio > best.intersectionRatio ? current : best;
        });

        // Only update if intersection ratio is significant (avoid brief overlaps during scroll)
        if (mostVisible.intersectionRatio > 0.3) {
          const id = mostVisible.target.id as SectionId | null;
          setCurrent(id);

          if (updateHash && id) {
            const hash = `#${id}`;
            if (location.hash !== hash) history.replaceState(null, '', hash);
          }
        }
      },
      {
        root: null,
        rootMargin: `-${headerPx}px 0px -20% 0px`, // Account for header and bottom
        threshold: thresholds,
      }
    );

    els.forEach((el) => { io.observe(el); });
    return () => { io.disconnect(); };
  }, [ids, headerPx, threshold, updateHash, setCurrent]);
}



============================
FILE: frontend\src\shared\hooks\useScrollToTop.ts
============================
import { useEffect, useRef } from 'react';
import { useLocation } from 'react-router-dom';

import { scrollRestoration } from '@/shared/utils';

/**
 * Enhanced scroll restoration hook that handles both scroll-to-top
 * and scroll position restoration for better user experience.
 * Uses the advanced ScrollRestorationManager for better control.
 */
export const useScrollToTop = (): void => {
  const { pathname } = useLocation();
  const prevPathRef = useRef<string>('');

  useEffect(() => {
    // Save current scroll position before navigation
    if (prevPathRef.current) {
      scrollRestoration.saveScrollPosition(prevPathRef.current);
    }

    // Restore scroll position or scroll to top
    scrollRestoration.restoreScrollPosition(pathname);

    // Update previous path
    prevPathRef.current = pathname;
  }, [pathname]);
};


============================
FILE: frontend\src\shared\hooks\useSectionAsync.ts
============================
/**
 * Section Async Operations Hook
 * Handles all async operations for section functionality
 * Separated from Zustand store to maintain clean separation of concerns
 */

import { useCallback, useEffect, useRef,useState } from 'react';

import { type SectionId,useSectionStore } from '../state/sectionStore';

export interface SectionIntersectionOptions {
  rootMargin?: string;
  threshold?: number | number[];
  root?: Element | null;
}

export interface SectionScrollOptions {
  behavior?: ScrollBehavior;
  block?: ScrollLogicalPosition;
  inline?: ScrollLogicalPosition;
}

export const useSectionAsync = () => {
  const [isScrolling, setIsScrolling] = useState(false);
  const [scrollProgress, setScrollProgress] = useState(0);
  const [isIntersecting, setIsIntersecting] = useState(false);
  
  const scrollTimeoutRef = useRef<number | null>(null);
  const intersectionObserverRef = useRef<IntersectionObserver | null>(null);

  // Get store actions
  const { current, setCurrent } = useSectionStore();

  /**
   * Scroll to a specific section
   */
  const scrollToSection = useCallback((
    sectionId: SectionId, 
    options: SectionScrollOptions = {}
  ): void => {
    const element = document.getElementById(sectionId);
    if (!element) {
      console.warn(`Section with id "${sectionId}" not found`);
      return;
    }

    setIsScrolling(true);
    
    try {
      element.scrollIntoView({
        behavior: options.behavior || 'smooth',
        block: options.block || 'start',
        inline: options.inline || 'nearest'
      });

      // Update current section after scroll
      setCurrent(sectionId);
      
    } catch (error) {
      console.error('Error scrolling to section:', error);
    } finally {
      // Reset scrolling state after a delay
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current);
      }
      scrollTimeoutRef.current = window.setTimeout(() => {
        setIsScrolling(false);
      }, 500);
    }
  }, [setCurrent]);

  /**
   * Scroll to next section
   */
  const scrollToNext = useCallback((): void => {
    const sections: SectionId[] = ['top', 'services', 'reviews', 'faq', 'gallery', 'footer'];
    const currentIndex = sections.indexOf(current || 'top');
    
    if (currentIndex < sections.length - 1) {
      const nextSection = sections[currentIndex + 1];
      if (nextSection) {
        scrollToSection(nextSection);
      }
    }
  }, [current, scrollToSection]);

  /**
   * Scroll to previous section
   */
  const scrollToPrevious = useCallback((): void => {
    const sections: SectionId[] = ['top', 'services', 'reviews', 'faq', 'gallery', 'footer'];
    const currentIndex = sections.indexOf(current || 'top');
    
    if (currentIndex > 0) {
      const prevSection = sections[currentIndex - 1];
      if (prevSection) {
        scrollToSection(prevSection);
      }
    }
  }, [current, scrollToSection]);

  /**
   * Set up intersection observer for automatic section detection
   */
  const setupIntersectionObserver = useCallback((
    options: SectionIntersectionOptions = {}
  ) => {
    // Clean up existing observer
    if (intersectionObserverRef.current) {
      intersectionObserverRef.current.disconnect();
    }

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const sectionId = entry.target.id as SectionId;
            setCurrent(sectionId);
            setIsIntersecting(true);
          } else {
            setIsIntersecting(false);
          }
        });
      },
      {
        rootMargin: options.rootMargin || '-20% 0px -20% 0px',
        threshold: options.threshold || 0.1,
        root: options.root || null,
      }
    );

    intersectionObserverRef.current = observer;

    // Observe all section elements
    const sections: SectionId[] = ['top', 'services', 'reviews', 'faq', 'gallery', 'footer'];
    sections.forEach((sectionId) => {
      const element = document.getElementById(sectionId);
      if (element) {
        observer.observe(element);
      }
    });

    return observer;
  }, [setCurrent]);

  /**
   * Calculate scroll progress for current section
   */
  const calculateScrollProgress = useCallback(() => {
    if (!current) return 0;

    const element = document.getElementById(current);
    if (!element) return 0;

    const rect = element.getBoundingClientRect();
    const windowHeight = window.innerHeight;
    const elementHeight = rect.height;
    
    // Calculate progress based on how much of the element is visible
    const visibleTop = Math.max(0, -rect.top);
    const visibleBottom = Math.min(elementHeight, windowHeight - rect.top);
    const visibleHeight = Math.max(0, visibleBottom - visibleTop);
    
    return Math.min(1, Math.max(0, visibleHeight / elementHeight));
  }, [current]);

  /**
   * Handle scroll events
   */
  const handleScroll = useCallback(() => {
    const progress = calculateScrollProgress();
    setScrollProgress(progress);
  }, [calculateScrollProgress]);

  /**
   * Get section navigation data
   */
  const getSectionNavigation = useCallback(() => {
    const sections: SectionId[] = ['top', 'services', 'reviews', 'faq', 'gallery', 'footer'];
    const currentIndex = sections.indexOf(current || 'top');
    
    return {
      currentIndex,
      totalSections: sections.length,
      hasNext: currentIndex < sections.length - 1,
      hasPrevious: currentIndex > 0,
      nextSection: currentIndex < sections.length - 1 ? sections[currentIndex + 1] : null,
      previousSection: currentIndex > 0 ? sections[currentIndex - 1] : null,
    };
  }, [current]);

  // Set up scroll listener
  useEffect(() => {
    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => { 
      window.removeEventListener('scroll', handleScroll); 
    };
  }, [handleScroll]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (intersectionObserverRef.current) {
        intersectionObserverRef.current.disconnect();
      }
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current);
      }
    };
  }, []);

  return {
    // State
    isScrolling,
    scrollProgress,
    isIntersecting,
    
    // Computed values
    navigation: getSectionNavigation(),
    
    // Actions
    scrollToSection,
    scrollToNext,
    scrollToPrevious,
    setupIntersectionObserver,
    calculateScrollProgress,
  };
};

/**
 * Hook for section persistence
 */
export const useSectionPersistence = () => {
  const { current } = useSectionStore();
  const { setupIntersectionObserver } = useSectionAsync();

  // Set up intersection observer on mount
  useEffect(() => {
    const observer = setupIntersectionObserver();
    return () => { 
      observer.disconnect(); 
    };
  }, [setupIntersectionObserver]);

  return {
    currentSection: current,
  };
};


============================
FILE: frontend\src\shared\hooks\useSEO.ts
============================
import { useBrowserTab } from './useBrowserTab';
import { useMetaTags } from './useMetaTags';

export interface UseSEOOptions {
  /** Custom page title (overrides business name) */
  title?: string;
  /** Custom favicon URL */
  favicon?: string;
  /** Custom meta description */
  description?: string;
  /** Custom meta keywords */
  keywords?: string[];
  /** Custom Open Graph image */
  ogImage?: string;
  /** Custom Twitter image */
  twitterImage?: string;
  /** Custom canonical path */
  canonicalPath?: string;
  /** Skip browser tab updates (title + favicon) */
  skipBrowserTab?: boolean;
  /** Skip meta tag updates */
  skipMetaTags?: boolean;
}

/**
 * Convenience hook that manages all SEO metadata
 * 
 * This is a wrapper around useBrowserTab + useMetaTags for convenience.
 * For more granular control, use those hooks directly.
 * 
 * Manages:
 * - Browser tab title and favicon
 * - Meta description, keywords
 * - Open Graph tags
 * - Twitter Card tags
 * - Canonical URL
 * 
 * @example
 * // Use defaults (loads from site config + tenant data)
 * useSEO();
 * 
 * @example
 * // Custom title and description
 * useSEO({
 *   title: 'Contact Us - Business Name',
 *   description: 'Get in touch with our team'
 * });
 * 
 * @example
 * // Only update meta tags, skip browser tab
 * useSEO({
 *   description: 'Custom description',
 *   skipBrowserTab: true
 * });
 */
export const useSEO = (options: UseSEOOptions = {}) => {
  const {
    title,
    favicon,
    description,
    keywords,
    ogImage,
    twitterImage,
    canonicalPath,
    skipBrowserTab = false,
    skipMetaTags = false,
  } = options;

  // Update browser tab (title + favicon)
  const browserTab = useBrowserTab(
    skipBrowserTab
      ? { useBusinessName: false }
      : { title, favicon }
  );

  // Update meta tags (description, OG, Twitter, etc.)
  const metaTags = useMetaTags(
    skipMetaTags
      ? {}
      : {
          title,
          description,
          keywords,
          ogImage,
          twitterImage,
          canonicalPath,
        }
  );

  return {
    ...browserTab,
    ...metaTags,
  };
};


============================
FILE: frontend\src\shared\hooks\useServiceAreasModal.ts
============================
import { useState } from 'react';

export const useServiceAreasModal = () => {
  const [isOpen, setIsOpen] = useState(false);

  const openModal = () => { setIsOpen(true); };
  const closeModal = () => { setIsOpen(false); };

  return {
    isOpen,
    openModal,
    closeModal,
  };
};



============================
FILE: frontend\src\shared\hooks\useTenantConfigLoader.ts
============================
/**
 * Tenant Config Loader Hook
 * Centralized, DRY way to fetch and cache tenant configurations
 * 
 * Uses React Query for caching, deduplication, and state management
 * Validates all configs with Zod schemas at the API boundary
 */

import { useParams } from 'react-router-dom';
import { QueryClient, useQuery } from '@tanstack/react-query';

import { 
  fetchTenantConfigById,
  fetchTenantConfigBySlug, 
  fetchTenants,
  tenantConfigKeys 
} from '../api/tenantConfig.api';
import type { Vertical } from '../types';
import { useTenantSlug } from './useTenantSlug';

/**
 * Options for tenant config loader
 */
export interface UseTenantConfigLoaderOptions {
  tenantId?: string | number;
  slug?: string;
  vertical?: Vertical;
  enabled?: boolean;  // Conditional fetching
}

/**
 * Load tenant configuration with React Query
 * 
 * Automatically:
 * - Fetches from API
 * - Validates with Zod
 * - Caches with React Query
 * - Deduplicates requests
 * - Handles loading/error states
 * 
 * @param options - Loader options
 * @returns React Query result with typed TenantConfig
 * 
 * @example
 * ```tsx
 * // By slug (from URL params)
 * const { data: config, isLoading } = useTenantConfigLoader();
 * 
 * // By specific slug
 * const { data: config } = useTenantConfigLoader({ slug: 'johns-detailing' });
 * 
 * // By tenant ID
 * const { data: config } = useTenantConfigLoader({ tenantId: 123 });
 * ```
 */
export function useTenantConfigLoader(options: UseTenantConfigLoaderOptions = {}) {
  // Get slug from URL params if not provided
  const params = useParams<{ slug?: string; tenantSlug?: string; businessSlug?: string }>();
  const urlSlug = params.slug || params.tenantSlug || params.businessSlug;
  
  // Use the proper tenant slug hook for domain-based resolution
  const domainTenantSlug = useTenantSlug();
  
  const { 
    tenantId, 
    slug = domainTenantSlug || urlSlug, // Prioritize domain-based slug
    enabled = true 
  } = options;
  
  // Determine which fetch method to use
  const fetchFn = async () => {
    if (tenantId) {
      return fetchTenantConfigById(tenantId);
    } else if (slug) {
      return fetchTenantConfigBySlug(slug);
    }
    throw new Error('Either tenantId or slug must be provided');
  };
  
  // Generate cache key
  const queryKey = tenantId 
    ? tenantConfigKeys.byId(tenantId)
    : slug 
    ? tenantConfigKeys.bySlug(slug)
    : tenantConfigKeys.all;
  
  return useQuery({
    queryKey,
    queryFn: fetchFn,
    enabled: enabled && (!!tenantId || !!slug),
    staleTime: 5 * 60 * 1000,  // 5 minutes
    gcTime: 10 * 60 * 1000,     // 10 minutes (cache time)
    retry: 2,
    refetchOnWindowFocus: false,
  });
}

/**
 * Load list of tenants (optionally filtered by vertical)
 * 
 * @param vertical - Optional vertical filter
 * @returns React Query result with array of TenantConfig
 * 
 * @example
 * ```tsx
 * // All tenants
 * const { data: tenants } = useTenantsList();
 * 
 * // Only detailing tenants
 * const { data: detailers } = useTenantsList('mobile-detailing');
 * ```
 */
export function useTenantsList(vertical?: Vertical) {
  return useQuery({
    queryKey: tenantConfigKeys.list(vertical),
    queryFn: () => fetchTenants(vertical),
    staleTime: 5 * 60 * 1000,
    gcTime: 10 * 60 * 1000,
  });
}

/**
 * Prefetch a tenant config (for performance optimization)
 * 
 * @param slug - Tenant slug to prefetch
 * 
 * @example
 * ```tsx
 * import { useQueryClient } from '@tanstack/react-query';
 * import { prefetchTenantConfig } from '@/shared/hooks';
 * 
 * function TenantLink({ slug }: { slug: string }) {
 *   const queryClient = useQueryClient();
 *   
 *   return (
 *     <Link 
 *       to={`/${slug}`}
 *       onMouseEnter={() => prefetchTenantConfig(queryClient, slug)}
 *     >
 *       {slug}
 *     </Link>
 *   );
 * }
 * ```
 */
export async function prefetchTenantConfig(
  queryClient: QueryClient,
  slug: string
): Promise<void> {
  await queryClient.prefetchQuery({
    queryKey: tenantConfigKeys.bySlug(slug),
    queryFn: () => fetchTenantConfigBySlug(slug),
    staleTime: 5 * 60 * 1000,
  });
}



============================
FILE: frontend\src\shared\hooks\useTenantData.ts
============================
/**
 * Tenant Data Hook
 * 
 * Single responsibility: Fetch and cache tenant/business data
 * Wraps React Query with proper query keys and options
 */

import { useQuery } from '@tanstack/react-query';

import { fetchBusinessBySlug } from '@/shared/api/tenantApi';
import type { Business } from '@/shared/types/tenant-business.types';

interface UseTenantDataOptions {
  /**
   * Tenant slug to fetch data for
   */
  slug: string | undefined;
  
  /**
   * Enable/disable the query
   * @default true if slug is provided
   */
  enabled?: boolean;
  
  /**
   * Stale time in milliseconds
   * @default 10 minutes
   */
  staleTime?: number;
  
  /**
   * Number of retry attempts
   * @default 2
   */
  retry?: number;
}

interface UseTenantDataReturn {
  /**
   * Business data from API
   */
  data: Business | undefined;
  
  /**
   * Loading state
   */
  isLoading: boolean;
  
  /**
   * Error state
   */
  error: Error | null;
  
  /**
   * Refetch function
   */
  refetch: () => void;
}

/**
 * Fetch tenant/business data by slug with React Query caching
 * 
 * @param options - Query options
 * @returns Business data with loading/error states
 * 
 * @example
 * ```tsx
 * function TenantInfo() {
 *   const { data: business, isLoading } = useTenantData({ slug: 'jps' });
 *   
 *   if (isLoading) return <Spinner />;
 *   
 *   return <div>{business?.business_name}</div>;
 * }
 * ```
 */
export function useTenantData(options: UseTenantDataOptions): UseTenantDataReturn {
  const {
    slug,
    enabled = true,
    staleTime = 10 * 60 * 1000, // 10 minutes
    retry = 2
  } = options;
  
  const { data, isLoading, error, refetch } = useQuery({
    queryKey: ['shared','business', slug],
    queryFn: () => {
      if (!slug) {
        throw new Error('Slug is required to fetch business data');
      }
      return fetchBusinessBySlug(slug);
    },
    enabled: enabled && !!slug,
    staleTime,
    retry
  });
  
  return {
    data,
    isLoading,
    error: error || null,
    refetch: () => {
      void refetch();
    }
  };
}



============================
FILE: frontend\src\shared\hooks\useTenantSlug.ts
============================
/**
 * Tenant Slug Hook
 * 
 * Single responsibility: Resolve tenant slug from URL params or domain
 * Encapsulates routing logic and domain resolution
 */

import { useParams } from 'react-router-dom';

import { env } from '@/shared/env';
import { getTenantFromDomain } from '@/shared/utils/domainUtils';

/**
 * Get tenant slug from URL params (dev) or domain (production)
 * 
 * @returns Tenant slug string or undefined
 * 
 * @example
 * ```tsx
 * function MyComponent() {
 *   const slug = useTenantSlug();
 *   // In dev: slug from URL params (/jps -> 'jps')
 *   // In prod: slug from domain (jps.example.com -> 'jps')
 * }
 * ```
 */
export function useTenantSlug(): string | undefined {
  const params = useParams();
  
  // First, try to get tenant from domain/subdomain (works in both dev and prod)
  const domainSlug = getTenantFromDomain();
  
  
  if (domainSlug && domainSlug !== 'main-site') {
    return domainSlug;
  }
  
  // Fallback: In development, get tenant from URL slug parameter
  // Check multiple param names for flexibility across different routes
  if (env.DEV) {
    return params['businessSlug'] || params['tenantSlug'] || params['slug'];
  }
  
  // No tenant found
  return undefined;
}



============================
FILE: frontend\src\shared\hooks\useToast.ts
============================
import { useContext } from 'react';

import { ToastContext } from '@/shared/ui/utility/toast';

export const useToast = () => {
  const context = useContext(ToastContext);
  if (context === undefined) {
    throw new Error('useToast must be used within a ToastProvider');
  }
  return context;
};


============================
FILE: frontend\src\shared\hooks\useVehicleData.ts
============================
import { useCallback, useState } from 'react';

// Basic vehicle types
const vehicleTypes = [
  { id: 'cars', name: 'Cars' },
  { id: 'trucks', name: 'Trucks' },
  { id: 'suvs', name: 'SUVs' },
  { id: 'vans', name: 'Vans' },
  { id: 'motorcycles', name: 'Motorcycles' }
];

// Basic makes
const vehicleMakes = [
  'Honda', 'Toyota', 'Ford', 'Chevrolet', 'BMW', 'Mercedes-Benz', 
  'Audi', 'Nissan', 'Hyundai', 'Kia', 'Mazda', 'Subaru'
];

export const useVehicleData = () => {
  const [selectedVehicleType, setSelectedVehicleType] = useState<string>('');

  const getMakes = useCallback(() => {
    // Return all makes for any vehicle type (simplified)
    return vehicleMakes;
  }, []);

  const getModels = useCallback(() => {
    // Return some common models (simplified)
    const commonModels = ['Sedan', 'SUV', 'Truck', 'Hatchback', 'Coupe'];
    return commonModels;
  }, []);

  return {
    vehicleTypes,
    getMakes,
    getModels,
    selectedVehicleType,
    setSelectedVehicleType
  };
};



============================
FILE: frontend\src\shared\hooks\withErrorBoundary.tsx
============================
import React from 'react';

import { ErrorBoundary } from '@/shared/ui';

interface WithErrorBoundaryOptions {
  fallback?: React.ReactNode;
  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;
}

export function withErrorBoundary<P extends object>(
  Component: React.ComponentType<P>,
  options: WithErrorBoundaryOptions = {}
) {
  const WrappedComponent = (props: P) => (
    <ErrorBoundary
      fallback={options.fallback}
      onError={options.onError}
    >
      <Component {...props} />
    </ErrorBoundary>
  );

  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;

  return WrappedComponent;
}

// Specialized error boundary for async operations
export function withAsyncErrorBoundary<P extends object>(
  Component: React.ComponentType<P>,
  options: WithErrorBoundaryOptions = {}
) {
  const WrappedComponent = (props: P) => {
    const [error, setError] = React.useState<Error | null>(null);

    if (error) {
      return (
        <div className="p-4 bg-red-50 border border-red-200 rounded-md">
          <div className="flex items-center">
            <svg className="w-5 h-5 text-red-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
            </svg>
            <span className="text-red-800">Failed to load component</span>
          </div>
          <button
            onClick={() => { setError(null); }}
            className="mt-2 text-sm text-red-600 hover:text-red-800 underline"
          >
            Try again
          </button>
        </div>
      );
    }

    return (
      <ErrorBoundary
        fallback={options.fallback}
        onError={(error, errorInfo) => {
          setError(error);
          if (options.onError) {
            options.onError(error, errorInfo);
          }
        }}
      >
        <Component {...props} />
      </ErrorBoundary>
    );
  };

  WrappedComponent.displayName = `withAsyncErrorBoundary(${Component.displayName || Component.name})`;

  return WrappedComponent;
}


============================
FILE: frontend\src\shared\hooks\__tests__\useSEO.test.tsx
============================
/**
 * Tests for useSEO hook - SEO metadata management
 */

import { renderHook } from '@testing-library/react';
import { afterEach,beforeEach, describe, expect, it, vi } from 'vitest';

import { useSEO } from '../useSEO';

// Mock the dependencies
vi.mock('../useBrowserTab', () => ({
  useBrowserTab: vi.fn()
}));

vi.mock('../useMetaTags', () => ({
  useMetaTags: vi.fn()
}));

import { useBrowserTab } from '../useBrowserTab';
import { useMetaTags } from '../useMetaTags';

const mockUseBrowserTab = vi.mocked(useBrowserTab);
const mockUseMetaTags = vi.mocked(useMetaTags);

describe('useSEO', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    
    // Default mock implementations
    mockUseBrowserTab.mockReturnValue(undefined);
    mockUseMetaTags.mockReturnValue(undefined);
  });

  afterEach(() => {
    vi.resetAllMocks();
  });

  it('should call useBrowserTab and useMetaTags with default options', () => {
    renderHook(() => useSEO());

    expect(mockUseBrowserTab).toHaveBeenCalledWith({
      title: undefined,
      favicon: undefined
    });
    
    expect(mockUseMetaTags).toHaveBeenCalledWith({
      title: undefined,
      description: undefined,
      keywords: undefined,
      ogImage: undefined,
      twitterImage: undefined,
      canonicalPath: undefined
    });
  });

  it('should pass custom options to both hooks', () => {
    const options = {
      title: 'Custom Title',
      favicon: '/custom-favicon.ico',
      description: 'Custom description',
      keywords: ['keyword1', 'keyword2'],
      ogImage: '/custom-og.jpg',
      twitterImage: '/custom-twitter.jpg',
      canonicalPath: '/custom-path'
    };

    renderHook(() => useSEO(options));

    expect(mockUseBrowserTab).toHaveBeenCalledWith({
      title: 'Custom Title',
      favicon: '/custom-favicon.ico'
    });
    
    expect(mockUseMetaTags).toHaveBeenCalledWith({
      title: 'Custom Title',
      description: 'Custom description',
      keywords: ['keyword1', 'keyword2'],
      ogImage: '/custom-og.jpg',
      twitterImage: '/custom-twitter.jpg',
      canonicalPath: '/custom-path'
    });
  });

  it('should skip browser tab updates when skipBrowserTab is true', () => {
    renderHook(() => useSEO({ 
      title: 'Custom Title',
      skipBrowserTab: true 
    }));

    expect(mockUseBrowserTab).not.toHaveBeenCalled();
    expect(mockUseMetaTags).toHaveBeenCalledWith({
      title: 'Custom Title',
      description: undefined,
      keywords: undefined,
      ogImage: undefined,
      twitterImage: undefined,
      canonicalPath: undefined
    });
  });

  it('should skip meta tag updates when skipMetaTags is true', () => {
    renderHook(() => useSEO({ 
      description: 'Custom description',
      skipMetaTags: true 
    }));

    expect(mockUseBrowserTab).toHaveBeenCalledWith({
      title: undefined,
      favicon: undefined
    });
    expect(mockUseMetaTags).not.toHaveBeenCalled();
  });

  it('should skip both when both skip flags are true', () => {
    renderHook(() => useSEO({ 
      title: 'Custom Title',
      description: 'Custom description',
      skipBrowserTab: true,
      skipMetaTags: true
    }));

    expect(mockUseBrowserTab).not.toHaveBeenCalled();
    expect(mockUseMetaTags).not.toHaveBeenCalled();
  });

  it('should handle empty options object', () => {
    renderHook(() => useSEO({}));

    expect(mockUseBrowserTab).toHaveBeenCalledWith({
      title: undefined,
      favicon: undefined
    });
    
    expect(mockUseMetaTags).toHaveBeenCalledWith({
      title: undefined,
      description: undefined,
      keywords: undefined,
      ogImage: undefined,
      twitterImage: undefined,
      canonicalPath: undefined
    });
  });

  it('should handle partial options', () => {
    const options = {
      title: 'Only Title',
      description: 'Only Description'
    };

    renderHook(() => useSEO(options));

    expect(mockUseBrowserTab).toHaveBeenCalledWith({
      title: 'Only Title',
      favicon: undefined
    });
    
    expect(mockUseMetaTags).toHaveBeenCalledWith({
      title: 'Only Title',
      description: 'Only Description',
      keywords: undefined,
      ogImage: undefined,
      twitterImage: undefined,
      canonicalPath: undefined
    });
  });

  it('should return undefined (no return value)', () => {
    const { result } = renderHook(() => useSEO());
    expect(result.current).toBeUndefined();
  });
});


============================
FILE: frontend\src\shared\index.ts
============================
// Environment utilities
export * from './env';

// Type guards
export * from './types/guards';

// API services
export * from './api';

// UI Components
export * from './ui';

// Shared hooks
export * from './hooks';

// Shared utilities
export * from './utils';

// Shared data
export * from './data/states';

// Google Maps utilities and types
export * from './types/googlePlaces.types';
export * from './utils/googleMaps.helpers';

============================
FILE: frontend\src\shared\schemas\booking.ts
============================
import { z } from 'zod';

/**
 * Zod schemas for booking data validation
 */

// Feature schema
export const FeatureSchema = z.object({
  name: z.string(),
  description: z.string(),
  explanation: z.string(),
  image: z.string(),
  duration: z.number(),
  features: z.array(z.string())
});

// Service schema
export const ServiceSchema = z.object({
  cost: z.number(),
  features: z.array(z.string()),
  popular: z.boolean().optional(),
  description: z.string().optional()
});

// Service tier schema
export const ServiceTierSchema = z.object({
  id: z.string(),
  name: z.string(),
  price: z.number(),
  description: z.string(),
  features: z.array(z.string()),
  featureIds: z.array(z.string()),
  popular: z.boolean().optional()
});

// Addon schema
export const AddonSchema = z.object({
  id: z.string(),
  name: z.string(),
  price: z.number(),
  description: z.string(),
  features: z.array(z.string()),
  featureIds: z.array(z.string()),
  popular: z.boolean().optional()
});

// Vehicle details schema
export const VehicleDetailsSchema = z.object({
  make: z.string(),
  model: z.string(),
  year: z.string(),
  color: z.string(),
  length: z.string()
});

// Schedule schema
export const ScheduleSchema = z.object({
  date: z.string(),
  time: z.string()
});

// Booking data schema
export const BookingDataSchema = z.object({
  vehicle: z.string(),
  vehicleDetails: VehicleDetailsSchema,
  serviceTier: z.string(),
  addons: z.array(z.string()),
  schedule: ScheduleSchema,
  paymentMethod: z.string()
});

// Booking state schema
export const BookingStateSchema = z.object({
  currentStep: z.enum(['vehicle-selection', 'service-tier', 'addons', 'schedule', 'payment']),
  bookingData: BookingDataSchema,
  completedSteps: z.array(z.string()),
  isLoading: z.boolean(),
  errors: z.array(z.string())
});

// Type exports
export type Feature = z.infer<typeof FeatureSchema>;
export type Service = z.infer<typeof ServiceSchema>;
export type ServiceTier = z.infer<typeof ServiceTierSchema>;
export type Addon = z.infer<typeof AddonSchema>;
export type VehicleDetails = z.infer<typeof VehicleDetailsSchema>;
export type Schedule = z.infer<typeof ScheduleSchema>;
export type BookingData = z.infer<typeof BookingDataSchema>;
export type BookingState = z.infer<typeof BookingStateSchema>;

// Validation helpers
export const validateServiceTier = (data: unknown): ServiceTier => {
  return ServiceTierSchema.parse(data);
};

export const validateAddon = (data: unknown): Addon => {
  return AddonSchema.parse(data);
};

export const validateBookingData = (data: unknown): BookingData => {
  return BookingDataSchema.parse(data);
};

export const validateServiceTiers = (data: unknown[]): ServiceTier[] => {
  return z.array(ServiceTierSchema).parse(data);
};

export const validateAddons = (data: unknown[]): Addon[] => {
  return z.array(AddonSchema).parse(data);
};


============================
FILE: frontend\src\shared\schemas\index.ts
============================
/**
 * Centralized Zod Schemas
 * Export all validation schemas for use across the application
 */

// Tenant schemas
export {
  // Integration schemas (future)
  AnalyticsConfigSchema,
  BaseLocationSchema,
  // Branding schemas
  BrandColorsSchema,
  ContactInfoSchema,
  EmailAddressesSchema,
  FAQItemSchema,
  FeatureFlagsSchema,
  HeroContentSchema,
  IndustryTypeSchema,
  LocationPageSchema,
  LogoSchema,
  PaymentConfigSchema,
  // Contact schemas
  PhoneNumbersSchema,
  PricingUnitSchema,
  safeParseTenantConfig,
  // SEO & content schemas (future)
  SEOMetadataSchema,
  ServiceAreaConfigSchema,
  // Geographic schemas (future)
  ServiceAreaSchema,
  ServiceCatalogSchema,
  // Service schemas (future)
  ServiceCategorySchema,
  ServiceSchema,
  ServiceTierSchema,
  SizeBucketSchema,
  SocialMediaLinksSchema,
  TenantBrandingSchema,
  // Main config schemas
  TenantConfigSchema,
  TenantConfigUpdateSchema,
  TenantCreatePayloadSchema,
  TenantStatusSchema,
  TenantSummarySchema,
  TenantUserRoleSchema,
  validateLocationPage,
  validateServiceCatalog,
  // Validation helpers
  validateTenantConfig,
  VehicleTypeSchema,
  // Core schemas
  VerticalSchema} from './tenant.schema';

// Booking schemas
export * from './booking';


============================
FILE: frontend\src\shared\schemas\tenant.schema.ts
============================
/**
 * Tenant Configuration Zod Schemas
 * Runtime validation for tenant configs loaded from API/files
 * 
 * Philosophy: Match the minimal TypeScript types
 * - Only 10 core fields are required
 * - Everything else is optional (for future features)
 * - Provides runtime safety at API boundaries
 */

import { z } from 'zod';

// ============================================================================
// Core Identification Schemas
// ============================================================================

/**
 * Vertical schema - uses kebab-case to match database and file paths
 */
export const VerticalSchema = z.enum([
  'mobile-detailing',
  'pet-grooming',
  'lawn-care',
  'maid-service',
  'hvac',
  'plumbing',
  'electrical'
]);

/**
 * Legacy alias for backward compatibility
 * @deprecated Use VerticalSchema instead
 */
export const IndustryTypeSchema = VerticalSchema;

export const TenantStatusSchema = z.enum([
  'pending',
  'approved',
  'active',
  'suspended',
  'rejected'
]);

export const TenantUserRoleSchema = z.enum([
  'owner',
  'manager',
  'tech',
  'viewer'
]);

// ============================================================================
// Service Catalog Schemas
// ============================================================================

export const ServiceCategorySchema = z.enum([
  'interior',
  'exterior',
  'service-packages',
  'addons',
  'ceramic-coating',
  'paint-correction',
  'paint-protection-film',
  'auto',
  'boat',
  'rv',
  'ppf',
  'ceramic'
]);

export const VehicleTypeSchema = z.enum([
  'auto',
  'boat',
  'rv',
  'truck',
  'motorcycle',
  'off-road'
]);

export const SizeBucketSchema = z.enum(['xs', 's', 'm', 'l', 'xl']);

export const PricingUnitSchema = z.enum(['flat', 'hour']);

export const ServiceTierSchema = z.object({
  id: z.union([z.string(), z.number()]),
  name: z.string().min(1, 'Tier name is required'),
  priceCents: z.number().int().nonnegative('Price must be non-negative'),
  durationMinutes: z.number().int().positive('Duration must be positive'),
  description: z.string(),
  features: z.array(z.string()),
  popular: z.boolean().optional(),
  enabled: z.boolean().optional().default(true),
  sortOrder: z.number().int().optional()
});

export const ServiceSchema = z.object({
  id: z.union([z.string(), z.number()]),
  name: z.string().min(1, 'Service name is required'),
  slug: z.string().optional(),
  category: ServiceCategorySchema,
  description: z.string().optional(),
  vehicleTypes: z.array(VehicleTypeSchema).optional(),
  basePriceCents: z.number().int().nonnegative().optional(),
  pricingUnit: PricingUnitSchema.optional(),
  minDurationMinutes: z.number().int().positive().optional(),
  tiers: z.array(ServiceTierSchema).optional(),
  active: z.boolean().optional().default(true),
  featured: z.boolean().optional().default(false),
  metadata: z.record(z.unknown()).optional()
});

export const ServiceCatalogSchema = z.record(
  z.string(),
  z.array(ServiceSchema)
);

// ============================================================================
// Branding Schemas
// ============================================================================

const HexColorSchema = z.string().regex(/^#[0-9A-Fa-f]{6}$/, 'Must be a valid hex color');

export const BrandColorsSchema = z.object({
  primary: HexColorSchema.optional(),
  secondary: HexColorSchema.optional(),
  accent: HexColorSchema.optional(),
  background: HexColorSchema.optional(),
  text: HexColorSchema.optional(),
  textLight: HexColorSchema.optional()
}).optional();

// Logo Schema - REQUIRED: url
export const LogoSchema = z.object({
  url: z.string().min(1, 'Logo URL is required'),  // ✓ REQUIRED
  alt: z.string().optional(),
  darkUrl: z.string().optional(),
  lightUrl: z.string().optional(),
  width: z.number().int().positive().optional(),
  height: z.number().int().positive().optional()
});

// Branding Schema - REQUIRED: businessName, logo
export const TenantBrandingSchema = z.object({
  businessName: z.string().min(1, 'Business name is required'),  // ✓ REQUIRED
  logo: LogoSchema,  // ✓ REQUIRED (at least logo.url)
  tagline: z.string().optional(),
  favicon: z.string().optional(),
  colors: z.object({
    primary: z.string().optional(),
    secondary: z.string().optional(),
    accent: z.string().optional()
  }).optional(),
  theme: z.enum(['default', 'southwest', 'coastal', 'modern', 'classic']).optional()
});

// ============================================================================
// Contact & Social Schemas
// ============================================================================

// Helper schemas for validation
const PhoneSchema = z.string().min(1, 'Phone number is required');
// eslint-disable-next-line @typescript-eslint/no-deprecated -- z.string().email() is the correct modern Zod syntax despite deprecation warning
const EmailSchema = z.string().email('Must be a valid email address');
// eslint-disable-next-line @typescript-eslint/no-deprecated -- z.string().url() is the correct modern Zod syntax despite deprecation warning
const URLSchema = z.string().url('Must be a valid URL');

export const PhoneNumbersSchema = z.object({
  main: PhoneSchema,  // ✓ REQUIRED
  sms: z.string().optional(),
  twilio: z.string().optional()
});

export const EmailAddressesSchema = z.object({
  primary: EmailSchema,  // ✓ REQUIRED
  support: EmailSchema.optional(),
  billing: EmailSchema.optional()
});

export const SocialMediaLinksSchema = z.object({
  facebook: z.string(),  // ✓ REQUIRED (can be empty string)
  instagram: z.string(),  // ✓ REQUIRED (can be empty string)
  tiktok: z.string(),  // ✓ REQUIRED (can be empty string)
  youtube: z.string(),  // ✓ REQUIRED (can be empty string)
  twitter: z.string().optional(),
  linkedin: z.string().optional(),
  yelp: z.string().optional(),
  gbp: z.string().optional()
});

export const BaseLocationSchema = z.object({
  city: z.string().min(1, 'City is required'),  // ✓ REQUIRED
  state: z.string().min(1, 'State is required')  // ✓ REQUIRED
});

export const ContactInfoSchema = z.object({
  phones: PhoneNumbersSchema,  // ✓ REQUIRED
  emails: EmailAddressesSchema,  // ✓ REQUIRED
  socials: SocialMediaLinksSchema,  // ✓ REQUIRED
  baseLocation: BaseLocationSchema,  // ✓ REQUIRED
  address: z.object({
    street: z.string().optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    zip: z.string().optional(),
    country: z.string().optional()
  }).optional()
});

// ============================================================================
// Service Area Schemas
// ============================================================================

export const ServiceAreaSchema = z.object({
  id: z.union([z.string(), z.number()]).optional(),
  city: z.string().min(1, 'City is required'),
  citySlug: z.string().min(1, 'City slug is required'),
  stateCode: z.string().length(2, 'State code must be 2 characters'),
  stateName: z.string().min(1, 'State name is required'),
  zipCodes: z.array(z.string()).optional(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  radiusMiles: z.number().int().positive().optional()
});

export const ServiceAreaConfigSchema = z.record(
  z.string().length(2), // State code
  z.array(ServiceAreaSchema)
);

// ============================================================================
// SEO & Page Configuration Schemas
// ============================================================================

export const SEOMetadataSchema = z.object({
  title: z.string().min(1, 'SEO title is required').max(60, 'SEO title should be under 60 characters'),
  description: z.string().min(1, 'SEO description is required').max(160, 'SEO description should be under 160 characters'),
  keywords: z.array(z.string()).optional(),
  canonicalPath: z.string().optional(),
  ogImage: URLSchema.optional(),
  twitterImage: URLSchema.optional(),
  robots: z.enum(['index,follow', 'noindex,nofollow']).optional()
});

export const HeroContentSchema = z.object({
  h1: z.string().min(1, 'Hero headline is required'),
  subtitle: z.string().optional(),
  ctas: z.array(z.object({
    label: z.string().min(1),
    href: z.string(),
    variant: z.enum(['primary', 'secondary']).optional()
  })).optional()
});

export const FAQItemSchema = z.object({
  question: z.string().min(1, 'Question is required'),
  answer: z.string().min(1, 'Answer is required'),
  category: z.string().optional()
});

export const LocationPageSchema = z.object({
  slug: z.string().min(1, 'Location slug is required'),
  city: z.string().min(1, 'City is required'),
  stateCode: z.string().length(2),
  state: z.string().min(1),
  postalCode: z.string().optional(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  urlPath: z.string().min(1, 'URL path is required'),
  affiliateRef: z.string().optional(),
  seo: SEOMetadataSchema,
  hero: HeroContentSchema,
  faqIntro: z.string().optional(),
  faqs: z.array(FAQItemSchema).optional(),
  neighborhoods: z.array(z.string()).optional(),
  landmarks: z.array(z.string()).optional(),
  localConditions: z.array(z.string()).optional(),
  pricingModifierPct: z.number().min(-1).max(1).optional(),
  images: z.array(z.object({
    url: URLSchema,
    alt: z.string().min(1),
    role: z.enum(['hero', 'gallery', 'service']).optional(),
    width: z.number().int().positive().optional(),
    height: z.number().int().positive().optional(),
    priority: z.boolean().optional()
  })).optional(),
  reviews: z.object({
    ratingValue: z.number().min(0).max(5).optional(),
    reviewCount: z.number().int().nonnegative().optional(),
    featured: z.array(z.string()).optional()
  }).optional(),
  openingHours: z.union([z.string(), z.array(z.string())]).optional()
});

// ============================================================================
// Integration Schemas
// ============================================================================

export const AnalyticsConfigSchema = z.object({
  ga4: z.string().optional(),
  googleAdsId: z.string().optional(),
  facebookPixelId: z.string().optional(),
  hotjarId: z.string().optional()
}).optional();

export const PaymentConfigSchema = z.object({
  stripePublishableKey: z.string().optional(),
  stripeAccountId: z.string().optional(),
  acceptsPayments: z.boolean().optional().default(false),
  depositRequired: z.boolean().optional().default(false),
  depositPercentage: z.number().min(0).max(1).optional()
}).optional();

export const FeatureFlagsSchema = z.object({
  bookingEnabled: z.boolean().optional().default(false),
  loginEnabled: z.boolean().optional().default(false),
  reviewsEnabled: z.boolean().optional().default(true),
  blogEnabled: z.boolean().optional().default(false),
  referralProgramEnabled: z.boolean().optional().default(false),
  loyaltyProgramEnabled: z.boolean().optional().default(false),
  smsNotificationsEnabled: z.boolean().optional().default(false),
  emailNotificationsEnabled: z.boolean().optional().default(true)
}).optional();

// ============================================================================
// Complete Tenant Configuration Schema
// ============================================================================

// ============================================================================
// Main Tenant Configuration Schema
// ============================================================================

export const TenantConfigSchema = z.object({
  // ============================================
  // CORE IDENTITY (4 required)
  // ============================================
  id: z.union([z.string(), z.number()]),  // ✓ REQUIRED
  slug: z.string().min(1, 'Tenant slug is required'),  // ✓ REQUIRED
  vertical: VerticalSchema,  // ✓ REQUIRED
  status: TenantStatusSchema,  // ✓ REQUIRED
  
  // ============================================
  // BRANDING (2 required nested)
  // ============================================
  branding: TenantBrandingSchema,  // ✓ REQUIRED
  
  // ============================================
  // CONTACT (4 required nested)
  // ============================================
  contact: ContactInfoSchema,  // ✓ REQUIRED
  
  // ============================================
  // FUTURE FEATURES (all optional)
  // ============================================
  services: ServiceCatalogSchema.optional(),
  enabledServiceCategories: z.array(ServiceCategorySchema).optional(),
  
  serviceAreas: ServiceAreaConfigSchema.optional(),
  serviceRadiusMiles: z.number().int().positive().optional(),
  
  locationPages: z.array(LocationPageSchema).optional(),
  mainSiteSEO: SEOMetadataSchema.optional(),
  
  analytics: AnalyticsConfigSchema.optional(),
  payment: PaymentConfigSchema.optional(),
  features: FeatureFlagsSchema.optional(),
  
  domains: z.array(z.string()).optional(),
  primaryDomain: z.string().optional(),
  
  businessLicense: z.string().optional(),
  insuranceProvider: z.string().optional(),
  insuranceExpiry: z.string().optional(),
  operatingHours: z.record(
    z.string(),
    z.object({
      open: z.string(),
      close: z.string(),
      closed: z.boolean().optional()
    })
  ).optional(),
  
  rating: z.number().min(0).max(5).optional(),
  reviewCount: z.number().int().nonnegative().optional(),
  totalJobs: z.number().int().nonnegative().optional(),
  
  metadata: z.record(z.unknown()).optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  approvedAt: z.string().optional()
});

// ============================================================================
// Helper Schemas
// ============================================================================

export const TenantConfigUpdateSchema = TenantConfigSchema.partial();

export const TenantSummarySchema = z.object({
  id: z.union([z.string(), z.number()]),
  slug: z.string(),
  businessName: z.string(),
  vertical: VerticalSchema,
  status: TenantStatusSchema,
  mainPhone: z.string(),
  // eslint-disable-next-line @typescript-eslint/no-deprecated -- z.string().email() is the correct modern Zod syntax despite deprecation warning
  email: z.string().email('Must be a valid email address'),
  rating: z.number().min(0).max(5).optional(),
  reviewCount: z.number().int().nonnegative().optional()
});

export const TenantCreatePayloadSchema = TenantConfigSchema.omit({
  id: true,
  createdAt: true,
  updatedAt: true,
  approvedAt: true
});

// ============================================================================
// Validation Helper Functions
// ============================================================================

/**
 * Validate tenant config with detailed error reporting
 */
export function validateTenantConfig(data: unknown): {
  success: boolean;
  data?: z.infer<typeof TenantConfigSchema>;
  errors?: z.ZodError;
} {
  try {
    const validated = TenantConfigSchema.parse(data);
    return { success: true, data: validated };
  } catch (error) {
    if (error instanceof z.ZodError) {
      return { success: false, errors: error };
    }
    throw error;
  }
}

/**
 * Safe parse tenant config (returns null on error instead of throwing)
 */
export function safeParseTenantConfig(data: unknown) {
  return TenantConfigSchema.safeParse(data);
}

/**
 * Validate service catalog
 */
export function validateServiceCatalog(data: unknown) {
  return ServiceCatalogSchema.safeParse(data);
}

/**
 * Validate location page
 */
export function validateLocationPage(data: unknown) {
  return LocationPageSchema.safeParse(data);
}



============================
FILE: frontend\src\shared\seo\defaultSchemas.ts
============================
/**
 * Default JSON-LD schemas for the main platform
 * Used when no tenant-specific data is available
 */

import { getOrganizationSchema, getWebsiteSchema } from './jsonld';

// Default organization schema for That Smart Site
export const defaultOrganizationSchema = getOrganizationSchema({
  name: "That Smart Site",
  url: "https://thatsmartsite.com",
  description: "Multi-tenant website platform for local service businesses. Mobile detailing, maid service, lawn care, pet grooming, and more.",
  contactPoint: {
    telephone: "+1-555-0123",
    contactType: "customer service",
    email: "support@thatsmartsite.com",
  },
  sameAs: [
    "https://facebook.com/thatsmartsite",
    "https://twitter.com/thatsmartsite",
    "https://linkedin.com/company/thatsmartsite",
  ],
});

// Default website schema for the main platform
export const defaultWebsiteSchema = getWebsiteSchema({
  name: "That Smart Site",
  url: "https://thatsmartsite.com",
  description: "Professional website platform for local service businesses. Get online fast with mobile detailing, maid service, lawn care, pet grooming, and more.",
  potentialAction: {
    "@type": "SearchAction",
    target: "https://thatsmartsite.com/search?q={search_term_string}",
    "query-input": "required name=search_term_string",
  },
});

// Default FAQ schema for the main platform
export const defaultFAQSchema = {
  "@context": "https://schema.org",
  "@type": "FAQPage",
  mainEntity: [
    {
      "@type": "Question",
      name: "What is That Smart Site?",
      acceptedAnswer: {
        "@type": "Answer",
        text: "That Smart Site is a multi-tenant website platform designed specifically for local service businesses. We help mobile detailers, maid services, lawn care companies, pet groomers, and barber shops get online quickly with professional, SEO-optimized websites.",
      },
    },
    {
      "@type": "Question",
      name: "How much does it cost?",
      acceptedAnswer: {
        "@type": "Answer",
        text: "We offer three pricing tiers: Starter at $15/month, Metro at $25/month, and Pro at $35/month. Each tier includes different features like custom domains, multiple email addresses, and advanced booking capabilities.",
      },
    },
    {
      "@type": "Question",
      name: "Do I need technical knowledge?",
      acceptedAnswer: {
        "@type": "Answer",
        text: "No technical knowledge required! We handle all the technical setup, hosting, and maintenance. You just need to provide your business information and we'll create a professional website for you.",
      },
    },
    {
      "@type": "Question",
      name: "Can I customize my website?",
      acceptedAnswer: {
        "@type": "Answer",
        text: "Yes! You can customize your business information, services, pricing, photos, and more through our easy-to-use dashboard. No coding required.",
      },
    },
    {
      "@type": "Question",
      name: "Will my website show up on Google?",
      acceptedAnswer: {
        "@type": "Answer",
        text: "Absolutely! All our websites are built with SEO best practices and include features like sitemaps, meta tags, and structured data to help search engines find and rank your business.",
      },
    },
  ],
};

// Service schemas for each industry
export const industryServiceSchemas = {
  mobileDetailing: {
    "@context": "https://schema.org",
    "@type": "Service",
    name: "Mobile Detailing Services",
    description: "Professional mobile car detailing services at your location",
    serviceType: "Automotive Detailing",
    provider: {
      "@type": "Organization",
      name: "That Smart Site",
      url: "https://thatsmartsite.com",
    },
    areaServed: [
      { "@type": "City", name: "New York, NY" },
      { "@type": "City", name: "Los Angeles, CA" },
      { "@type": "City", name: "Chicago, IL" },
    ],
  },
  maidService: {
    "@context": "https://schema.org",
    "@type": "Service",
    name: "Maid Service",
    description: "Professional residential cleaning services",
    serviceType: "Cleaning Service",
    provider: {
      "@type": "Organization",
      name: "That Smart Site",
      url: "https://thatsmartsite.com",
    },
    areaServed: [
      { "@type": "City", name: "New York, NY" },
      { "@type": "City", name: "Los Angeles, CA" },
      { "@type": "City", name: "Chicago, IL" },
    ],
  },
  lawnCare: {
    "@context": "https://schema.org",
    "@type": "Service",
    name: "Lawn Care Services",
    description: "Professional lawn maintenance and landscaping services",
    serviceType: "Landscaping Service",
    provider: {
      "@type": "Organization",
      name: "That Smart Site",
      url: "https://thatsmartsite.com",
    },
    areaServed: [
      { "@type": "City", name: "New York, NY" },
      { "@type": "City", name: "Los Angeles, CA" },
      { "@type": "City", name: "Chicago, IL" },
    ],
  },
  petGrooming: {
    "@context": "https://schema.org",
    "@type": "Service",
    name: "Pet Grooming Services",
    description: "Professional pet grooming and care services",
    serviceType: "Pet Grooming Service",
    provider: {
      "@type": "Organization",
      name: "That Smart Site",
      url: "https://thatsmartsite.com",
    },
    areaServed: [
      { "@type": "City", name: "New York, NY" },
      { "@type": "City", name: "Los Angeles, CA" },
      { "@type": "City", name: "Chicago, IL" },
    ],
  },
  barberShop: {
    "@context": "https://schema.org",
    "@type": "Service",
    name: "Barber Shop Services",
    description: "Professional haircuts and grooming services",
    serviceType: "Beauty Service",
    provider: {
      "@type": "Organization",
      name: "That Smart Site",
      url: "https://thatsmartsite.com",
    },
    areaServed: [
      { "@type": "City", name: "New York, NY" },
      { "@type": "City", name: "Los Angeles, CA" },
      { "@type": "City", name: "Chicago, IL" },
    ],
  },
};

// Default schemas array for main platform pages
export const defaultSchemas = [
  defaultOrganizationSchema,
  defaultWebsiteSchema,
  defaultFAQSchema,
];


============================
FILE: frontend\src\shared\seo\index.ts
============================
/**
 * SEO Module - Centralized SEO utilities and components
 * 
 * This barrel file anchors Cursor's understanding of the SEO architecture.
 * All SEO-related functionality should be imported from here.
 */

export * from "./jsonld";
export * from "./robotsHandler";
export * from "./SeoHead";
export * from "./sitemapBuilder";


============================
FILE: frontend\src\shared\seo\jsonld.ts
============================
/**
 * JSON-LD structured data helpers.
 * Generates schema.org markup for SEO.
 * 
 * This module anchors Cursor's understanding of structured data generation.
 */

// Enhanced LocalBusiness schema with more fields
export const getLocalBusinessSchema = (biz: {
  name: string;
  phone?: string;
  address?: {
    streetAddress?: string;
    addressLocality?: string;
    addressRegion?: string;
    postalCode?: string;
    addressCountry?: string;
  };
  image?: string;
  url?: string;
  description?: string;
  priceRange?: string;
  openingHours?: string[];
  sameAs?: string[];
  aggregateRating?: {
    ratingValue: number;
    reviewCount: number;
  };
}) => ({
  "@context": "https://schema.org",
  "@type": "LocalBusiness",
  name: biz.name,
  description: biz.description,
  telephone: biz.phone,
  image: biz.image,
  url: biz.url,
  priceRange: biz.priceRange,
  openingHours: biz.openingHours,
  sameAs: biz.sameAs,
  address: biz.address ? {
    "@type": "PostalAddress",
    streetAddress: biz.address.streetAddress,
    addressLocality: biz.address.addressLocality,
    addressRegion: biz.address.addressRegion,
    postalCode: biz.address.postalCode,
    addressCountry: biz.address.addressCountry || "US",
  } : undefined,
  aggregateRating: biz.aggregateRating ? {
    "@type": "AggregateRating",
    ratingValue: biz.aggregateRating.ratingValue,
    reviewCount: biz.aggregateRating.reviewCount,
  } : undefined,
});

// Enhanced Service schema
export const getServiceSchema = (service: {
  name: string;
  description?: string;
  price?: string;
  priceCurrency?: string;
  serviceType?: string;
  provider?: {
    name: string;
    url?: string;
  };
  areaServed?: string[];
  availableChannel?: {
    "@type": "ServiceChannel";
    serviceUrl?: string;
    servicePhone?: string;
  };
}) => ({
  "@context": "https://schema.org",
  "@type": "Service",
  name: service.name,
  description: service.description,
  serviceType: service.serviceType,
  provider: service.provider ? {
    "@type": "Organization",
    name: service.provider.name,
    url: service.provider.url,
  } : undefined,
  areaServed: service.areaServed?.map(area => ({
    "@type": "City",
    name: area,
  })),
  availableChannel: service.availableChannel,
  offers: service.price
    ? { 
        "@type": "Offer", 
        price: service.price, 
        priceCurrency: service.priceCurrency || "USD",
        availability: "https://schema.org/InStock",
      }
    : undefined,
});

// Enhanced FAQ schema
export const getFAQSchema = (faqs: { q: string; a: string }[]) => ({
  "@context": "https://schema.org",
  "@type": "FAQPage",
  mainEntity: faqs.map((f) => ({
    "@type": "Question",
    name: f.q,
    acceptedAnswer: { 
      "@type": "Answer", 
      text: f.a,
    },
  })),
});

// Website schema for the main platform
export const getWebsiteSchema = (website: {
  name: string;
  url: string;
  description?: string;
  potentialAction?: {
    "@type": "SearchAction";
    target: string;
    "query-input": string;
  };
}) => ({
  "@context": "https://schema.org",
  "@type": "WebSite",
  name: website.name,
  url: website.url,
  description: website.description,
  potentialAction: website.potentialAction,
});

// Organization schema for That Smart Site
export const getOrganizationSchema = (org: {
  name: string;
  url: string;
  logo?: string;
  description?: string;
  contactPoint?: {
    telephone?: string;
    contactType?: string;
    email?: string;
  };
  sameAs?: string[];
}) => ({
  "@context": "https://schema.org",
  "@type": "Organization",
  name: org.name,
  url: org.url,
  logo: org.logo,
  description: org.description,
  contactPoint: org.contactPoint ? {
    "@type": "ContactPoint",
    telephone: org.contactPoint.telephone,
    contactType: org.contactPoint.contactType,
    email: org.contactPoint.email,
  } : undefined,
  sameAs: org.sameAs,
});

// Breadcrumb schema
export const getBreadcrumbSchema = (breadcrumbs: {
  name: string;
  url: string;
}[]) => ({
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: breadcrumbs.map((crumb, index) => ({
    "@type": "ListItem",
    position: index + 1,
    name: crumb.name,
    item: crumb.url,
  })),
});

// Review schema
export const getReviewSchema = (review: {
  author: string;
  reviewBody: string;
  ratingValue: number;
  bestRating?: number;
  worstRating?: number;
  datePublished?: string;
}) => ({
  "@context": "https://schema.org",
  "@type": "Review",
  author: {
    "@type": "Person",
    name: review.author,
  },
  reviewBody: review.reviewBody,
  reviewRating: {
    "@type": "Rating",
    ratingValue: review.ratingValue,
    bestRating: review.bestRating || 5,
    worstRating: review.worstRating || 1,
  },
  datePublished: review.datePublished,
});

// Industry-specific schemas
export const getIndustrySchemas = {
  mobileDetailing: (business: any) => ({
    ...getLocalBusinessSchema(business),
    "@type": ["LocalBusiness", "AutomotiveBusiness"],
    additionalType: "https://schema.org/AutomotiveRepair",
  }),
  
  maidService: (business: any) => ({
    ...getLocalBusinessSchema(business),
    "@type": ["LocalBusiness", "HomeAndConstructionBusiness"],
    additionalType: "https://schema.org/CleaningService",
  }),
  
  lawnCare: (business: any) => ({
    ...getLocalBusinessSchema(business),
    "@type": ["LocalBusiness", "HomeAndConstructionBusiness"],
    additionalType: "https://schema.org/LandscapingService",
  }),
  
  petGrooming: (business: any) => ({
    ...getLocalBusinessSchema(business),
    "@type": ["LocalBusiness", "PetStore"],
    additionalType: "https://schema.org/PetGroomingService",
  }),
  
  barberShop: (business: any) => ({
    ...getLocalBusinessSchema(business),
    "@type": ["LocalBusiness", "HealthAndBeautyBusiness"],
    additionalType: "https://schema.org/BeautySalon",
  }),
};

============================
FILE: frontend\src\shared\seo\README.md
============================
# SEO Module

This directory contains all SEO-related functionality for the application. This module anchors Cursor's understanding of SEO architecture and ensures consistent SEO implementation across all features.

## Architecture

- **SeoHead.tsx** - Centralized head management component
- **jsonld.ts** - JSON-LD structured data utilities  
- **imageOptimization.ts** - Image optimization utilities
- **industryDefaults.ts** - Industry-specific SEO defaults
- **OptimizedImage.tsx** - SEO-optimized image component
- **index.ts** - Barrel exports for clean imports

## Usage

```tsx
// Import from the SEO module
import { SeoHead, OptimizedImage, useAnalytics } from '@/shared/seo';

// Use in components
<SeoHead 
  title="Page Title"
  description="Page description"
  isPreview={isPreview}
/>
```

## Cursor Integration

This module structure ensures Cursor will:
- Route all SEO edits through these shared utilities
- Avoid duplicating meta tags across pages
- Use consistent structured data generation
- Maintain proper image optimization patterns

## Database Integration

SEO configuration is stored in `website.seo_config` table, allowing for:
- Tenant-specific SEO overrides
- Analytics configuration per tenant
- JSON-LD customizations
- Dynamic meta tag generation


============================
FILE: frontend\src\shared\seo\robotsHandler.ts
============================
/**
 * Returns robots.txt content based on environment or preview status.
 * 
 * This module anchors Cursor's understanding of robots.txt generation.
 */

export const generateRobotsTxt = (hostname: string, isPreview = false) => {
  return `User-agent: *
${isPreview ? "Disallow: /" : "Allow: /"}
Sitemap: https://${hostname}/sitemap.xml
`;
};


============================
FILE: frontend\src\shared\seo\seoDefaults\lawncare.json
============================
{
  "title": "Professional Lawn Care & Landscaping",
  "description": "Expert lawn care, landscaping, and yard maintenance services.",
  "keywords": ["lawn care", "landscaping", "yard maintenance", "grass cutting"]
}


============================
FILE: frontend\src\shared\seo\seoDefaults\maid-service.json
============================
{
  "title": "Professional House Cleaning & Maid Services",
  "description": "Reliable house cleaning and maid services for your home.",
  "keywords": ["maid service", "house cleaning", "residential cleaning", "housekeeping"]
}


============================
FILE: frontend\src\shared\seo\seoDefaults\mobile-detailing.json
============================
{
  "title": "Professional Mobile Detailing",
  "description": "Expert mobile car, boat, and RV detailing at your location.",
  "keywords": ["mobile detailing", "car wash", "ceramic coating", "auto spa"]
}


============================
FILE: frontend\src\shared\seo\seoDefaults\pet-grooming.json
============================
{
  "title": "Professional Pet Grooming & Spa Services",
  "description": "Expert pet grooming, bathing, and spa services for dogs and cats.",
  "keywords": ["pet grooming", "dog grooming", "cat grooming", "pet spa"]
}


============================
FILE: frontend\src\shared\seo\seoDefaults\README.md
============================
# SEO Defaults Directory

This directory contains industry-specific SEO defaults that anchor Cursor's understanding of SEO fallback content.

## Purpose

These JSON files provide fallback SEO content for each industry when tenant-specific SEO data is not available.

## Files

- `mobile-detailing.json` - Mobile car detailing defaults
- `lawncare.json` - Lawn care and landscaping defaults  
- `maid-service.json` - House cleaning defaults
- `pet-grooming.json` - Pet grooming defaults

## Usage

These defaults are loaded by the provisioning script and used as fallbacks in the SeoHead component.

## Cursor Integration

This directory anchors Cursor's understanding that SEO defaults should be centralized here rather than hardcoded in components.


============================
FILE: frontend\src\shared\seo\SeoHead.tsx
============================
/**
 * Central SEO head manager.
 * Handles <title>, <meta>, <canonical>, noindex logic, and JSON-LD structured data.
 * 
 * This component anchors Cursor's understanding of SEO head management.
 */
import React from "react";
import { Helmet } from "react-helmet-async";

interface SeoHeadProps {
  title?: string;
  description?: string;
  canonical?: string;
  noindex?: boolean;
  jsonLd?: any | any[]; // Single schema object or array of schemas
  ogImage?: string;
  ogType?: string;
  twitterCard?: string;
}

export const SeoHead: React.FC<SeoHeadProps> = ({
  title,
  description,
  canonical,
  noindex,
  jsonLd,
  ogImage,
  ogType = "website",
  twitterCard = "summary_large_image",
}) => {
  // Handle JSON-LD - can be single object or array
  const jsonLdSchemas = Array.isArray(jsonLd) ? jsonLd : (jsonLd ? [jsonLd] : []);

  return (
    <Helmet>
      {/* Basic meta tags */}
      {title && <title>{title}</title>}
      {description && <meta name="description" content={description} />}
      {canonical && <link rel="canonical" href={canonical} />}
      {noindex && <meta name="robots" content="noindex, nofollow" />}
      
      {/* Open Graph tags */}
      {title && <meta property="og:title" content={title} />}
      {description && <meta property="og:description" content={description} />}
      {canonical && <meta property="og:url" content={canonical} />}
      <meta property="og:type" content={ogType} />
      {ogImage && <meta property="og:image" content={ogImage} />}
      
      {/* Twitter Card tags */}
      <meta name="twitter:card" content={twitterCard} />
      {title && <meta name="twitter:title" content={title} />}
      {description && <meta name="twitter:description" content={description} />}
      {ogImage && <meta name="twitter:image" content={ogImage} />}
      
      {/* JSON-LD structured data */}
      {jsonLdSchemas.map((schema, index) => (
        <script
          key={index}
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify(schema, null, 2),
          }}
        />
      ))}
    </Helmet>
  );
};


============================
FILE: frontend\src\shared\seo\sitemapBuilder.ts
============================
/**
 * Generates per-tenant sitemap XML.
 * Should run on the backend, but callable from scripts if needed.
 * 
 * This module anchors Cursor's understanding of sitemap generation.
 */

export const generateSitemap = (tenantDomain: string, pages: string[]) => {
  const urls = pages
    .map(
      (path) =>
        `<url><loc>https://${tenantDomain}${path}</loc><changefreq>weekly</changefreq></url>`
    )
    .join("\n");

  return `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${urls}
</urlset>`;
};


============================
FILE: frontend\src\shared\state\sectionStore.ts
============================
import { create } from 'zustand';

export type SectionId = 'top' | 'services' | 'services-desktop' | 'reviews' | 'faq' | 'gallery' | 'footer' | 'gallery-desktop';

interface SectionState {
  current: SectionId | null;
  setCurrent: (id: SectionId | null) => void;
}

// Map actual section IDs to navigation IDs
export const getNavId = (sectionId: SectionId | null): SectionId | null => {
  if (!sectionId) return null;
  if (sectionId === 'services-desktop') return 'services';
  if (sectionId === 'gallery-desktop' || sectionId === 'gallery') return 'footer';
  return sectionId;
};

export const useSectionStore = create<SectionState>((set) => ({
  current: null,
  setCurrent: (id) => { set({ current: id }); },
}));



============================
FILE: frontend\src\shared\testing\README.md
============================
# Shared Testing Utilities

This folder contains testing utilities and helpers that can be used across all features and apps.

## Structure

- `setup.ts` - Test setup and configuration
- `mocks/` - Shared mock data and functions
- `helpers/` - Testing helper functions
- `fixtures/` - Test data fixtures

## Usage

```typescript
import { renderWithProviders } from '@/shared/testing/setup';
import { mockTenantData } from '@/shared/testing/mocks/tenant';
```

## Guidelines

- Keep testing utilities framework-agnostic when possible
- Use descriptive names for test helpers
- Document complex testing scenarios
- Share common mocks and fixtures across features


============================
FILE: frontend\src\shared\types\business.ts
============================
export interface ServiceArea {
  city: string;
  state: string;
  zip: string;
}

export interface BusinessData {
  name: string;
  slug: string;
  "business-name": string;
  "business-slug": string;
  "business-url": string;
  "business-phone": string;
  "business-email": string;
  "business-address": string;
  "business-city": string;
  "business-state": string;
  "business-zip": string;
  "business-logo": string;
  "business-description": string;
  "business-services": string[];
  "business-hours": string;
  "service-areas": ServiceArea[];
}

export interface EmployeesData {
  [affiliateSlug: string]: BusinessData;
}


============================
FILE: frontend\src\shared\types\gallery.types.ts
============================
// Gallery image types - shared across features

export interface GalleryImage {
  id: string;
  src: string;
  type: string;
  alt: string;
  width: number;
  height: number;
  caption: string;
  title: string;
  thumbnailUrl: string;
  variants: ImageVariant[];
  loading?: 'eager' | 'lazy';
  fetchPriority?: 'high' | 'low' | 'auto';
  datePublished: string;
  dateModified: string;
  author: string;
  license: string;
  tags: string[];
  hash: string;
}

export interface ImageVariant {
  url: string;
  width: number;
  height: number;
  type: string;
}



============================
FILE: frontend\src\shared\types\googlePlaces.types.ts
============================
// Google Places API types for location autocomplete
// Shared types - can be used across features

export interface AutocompleteSuggestion {
  placePrediction: {
    place: string;
    placeId: string;
    text: {
      text: string;
      matches: Array<{
        endOffset: number;
        startOffset: number;
      }>;
    };
    structuredFormat: {
      mainText: {
        text: string;
        matches: Array<{
          endOffset: number;
          startOffset: number;
        }>;
      };
      secondaryText: {
        text: string;
        matches: Array<{
          endOffset: number;
          startOffset: number;
        }>;
      };
    };
    types: string[];
  };
}

export interface AutocompleteRequest {
  input: string;
  sessionToken: AutocompleteSessionToken;
  includedRegionCodes?: string[];
  locationBias?: google.maps.LatLngBounds | google.maps.LatLng;
  locationRestriction?: google.maps.LatLngBounds | google.maps.LatLng;
  includedPrimaryTypes?: string[];
  includedSecondaryTypes?: string[];
  languageCode?: string;
  regionCode?: string;
  origin?: google.maps.LatLng;
}

export interface AutocompleteResponse {
  suggestions: AutocompleteSuggestion[];
}

export interface AutocompleteSessionToken {
  // This is a Google Maps API object, so we just need to type it as an object
  // The actual implementation is provided by Google Maps
  [key: string]: unknown;
}

export interface PlacesLibrary {
  AutocompleteSuggestion: {
    fetchAutocompleteSuggestions(request: AutocompleteRequest): Promise<AutocompleteResponse>;
  };
  AutocompleteSessionToken: new () => AutocompleteSessionToken;
}



============================
FILE: frontend\src\shared\types\guards.ts
============================
/**
 * Type-narrowing helpers to reduce @typescript-eslint/no-unnecessary-condition warnings
 * while maintaining runtime safety
 */

/**
 * Type guard to check if a value is present (not null or undefined)
 */
export function isPresent<T>(v: T | null | undefined): v is T {
  return v != null;
}

/**
 * Type guard to check if a string is non-empty
 */
export function isNonEmptyString(s: string | null | undefined): s is string {
  return typeof s === 'string' && s.length > 0;
}

/**
 * Type guard to check if an array is non-empty
 */
export function isNonEmptyArray<T>(arr: T[] | null | undefined): arr is T[] {
  return Array.isArray(arr) && arr.length > 0;
}

/**
 * Exhaustiveness check for switch statements
 * Throws at compile time if not all cases are handled
 */
export function assertNever(x: never, msg = 'Unexpected branch'): never {
  throw new Error(`${msg}: ${String(x)}`);
}

/**
 * Safe property access with type narrowing
 * Returns undefined if the object or property is null/undefined
 */
export function safeGet<T, K extends keyof T>(
  obj: T | null | undefined,
  key: K
): T[K] | undefined {
  return obj?.[key];
}

/**
 * Safe array access with bounds checking
 */
export function safeArrayGet<T>(arr: T[] | null | undefined, index: number): T | undefined {
  return arr?.[index];
}


============================
FILE: frontend\src\shared\types\index.ts
============================
export type { BusinessData, EmployeesData, ServiceArea } from './business';
export * from './gallery.types';
export * from './guards';
export * from './location';
export type { SiteActions,SiteContextType, SiteState } from './site';
export type { Business, BusinessResponse } from './tenant-business.types';

// Centralized tenant types
export type {
  AnalyticsConfig,
  BrandColors,
  ContactInfo,
  EmailAddresses,
  FAQItem,
  FeatureFlags,
  HeroContent,
  HeroMedia,
  IndustryType,  // Alias for Vertical (backward compatibility)
  LocationPage,
  Logo,
  PaymentConfig,
  PhoneNumbers,
  PricingUnit,
  SEOMetadata,
  Service,
  ServiceArea,
  ServiceAreaConfig,
  ServiceCatalog,
  ServiceCategory,
  ServiceTier,
  SizeBucket,
  SocialMediaLinks,
  TenantBranding,
  TenantConfig,
  TenantConfigUpdate,
  TenantCreatePayload,
  TenantId,
  TenantStatus,
  TenantSummary,
  TenantUserRole,
  VehicleType,
  Vertical} from './tenant.types';

============================
FILE: frontend\src\shared\types\location.ts
============================
/**
 * Comprehensive TypeScript interfaces for location page data structure
 * Supports both main site configuration and city-specific overrides
 */

export interface LocationPage {
  // Core identification
  slug: string;
  city: string;
  stateCode: string; // e.g., "AZ"
  state: string;     // e.g., "Arizona"
  postalCode: string; // e.g., "86442"
  latitude: number; // e.g., 35.1359
  longitude: number; // e.g., -114.5286
  openingHours?: string | string[]; // e.g., ["Mo-Fr 06:00-20:00", "Sa 06:00-20:00", "Su 06:00-20:00"]
  urlPath: string;   // "/az/bullhead-city/"
  
  // Affiliate/employee references
  affiliateRef?: string; // maps to /data/affiliates/{affiliateRef}.json
  employee?: string;     // legacy alias for backward compatibility

  // Header overrides
  header?: {
    businessName?: string;   // "JP's Mobile Detailing"
    phoneDisplay?: string;   // "(928) 555-1234"
    phoneE164?: string;      // "+19285551234"
    cityStateLabel?: string; // "Bullhead City, AZ"
  };

  // SEO configuration
  seo: {
    title: string;
    description: string;
    keywords?: string[];
    canonicalPath: string;
    ogImage?: string;
    twitterImage?: string;
    robots?: "index,follow" | "noindex,nofollow";
  };

  // Hero section
  hero: {
    h1: string;
    sub?: string;
    // Note: Hero images are referenced from the images array by role: "hero"
  };

  // Content sections
  faqIntro?: string; // camelCase version of faq-intro
  neighborhoods?: string[];
  landmarks?: string[];
  localConditions?: string[];

  // Pricing
  pricingModifierPct?: number; // decimal percent: 0.00 = no markup, 0.10 = +10% markup, -0.05 = -5% discount

  // Images with performance optimization
  images?: Array<{
    url: string; // Image URL path (serves as both public URL and file path)
    alt: string;
    caption?: string;
            role: "hero" | "gallery" | "process" | "result" | "auto" | "marine" | "rv";
    width?: number;
    height?: number;
    priority?: boolean;
    sources?: Array<{
      srcset: string;
      type: string; // "image/webp", "image/avif", etc.
    }>;
  }>;

  // FAQ structure with analytics support
  faqs?: Array<{
    id?: string; // for analytics and A/B testing
    q: string;
    a: string;
  }>;

  // Reviews section
  reviewsSection?: {
    heading?: string;
    intro?: string;
    feedKey?: string; // for future GBP/Yelp integration
  };

  // Service area coverage
  serviceArea?: {
    postalCodes?: string[];
    // Future: could add polygon coordinates for precise mapping
  };

  // Operational information
  ops?: {
    acceptsSameDay?: boolean;
    leadTimeDays?: number;
    serviceRadiusMiles?: number;
  };

  // Schema.org structured data (most fields auto-generated from other location data)
  schemaOrg?: {
    // Auto-generated fields: name (from header.businessName), addressLocality (from city), 
    // addressRegion (from stateCode), postalCode (from postalCode), latitude/longitude (from top-level fields),
    // openingHours (from top-level openingHours), areaServed (from neighborhoods), url (from urlPath), 
    // telephone (from header.phoneE164), image (from images array with role: "hero"), 
    // aggregateRating (from site.json)
    
    // Manual fields only (if any):
    aggregateRating?: {
      "@type"?: string;
      ratingValue?: number;
      reviewCount?: number;
      bestRating?: number;
      worstRating?: number;
    };
    review?: Array<{
      "@type"?: string;
      author?: {
        "@type"?: string;
        name?: string;
      };
      reviewRating?: {
        "@type"?: string;
        ratingValue?: number;
        bestRating?: number;
        worstRating?: number;
      };
      reviewBody?: string;
    }>;
    // Allow additional schema properties
    [key: string]: unknown;
  };
}

/**
 * Main site configuration interface
 * Contains default values that city configs can override
 * Note: Header information comes from location-specific configs, not main config
 */
export interface MainSiteConfig {
  brand: string;
  slug: string;
  urlPath: string;
  
  logo: {
    url: string;
    alt: string;
    darkUrl?: string;
    lightUrl?: string;
  };

  seo: {
    title: string;
    description: string;
    keywords?: string[];
    canonicalPath: string;
    ogImage?: string;
    twitterImage?: string;
    robots?: "index,follow" | "noindex,nofollow";
  };

  hero: {
    h1: string;
    sub?: string;
    images?: Array<{
      url: string; // Image URL path (serves as both public URL and file path)
      alt: string;
      width?: number;
      height?: number;
      priority?: boolean;
    }>;
    ctas?: Array<{
      label: string;
      href: string;
    }>;
  };

  finder?: {
    placeholder?: string;
    sub?: string;
  };

  servicesGrid?: Array<{
    slug: string;
    title: string;
    image: string;
    alt: string;
    href: string;
    width?: number;
    height?: number;
    priority?: boolean;
  }>;

  reviews?: {
    title: string;
    subtitle?: string;
    ratingValue?: string;
    reviewCount?: number;
    source?: string;
  };

  faq?: {
    title: string;
    subtitle?: string;
  };

  contact?: {
    email?: string;
    phone?: string;
  };

  socials?: {
    facebook?: string;
    instagram?: string;
    tiktok?: string;
    youtube?: string;
    googleBusiness?: string;
  };

  jsonLd?: {
    organization?: Record<string, unknown>;
    website?: Record<string, unknown>;
  };
}

/**
 * Merged configuration type
 * Result of merging MainSiteConfig with LocationPage overrides
 * Currently identical to LocationPage but kept as a separate type for future extensions
 */
export type MergedLocationConfig = LocationPage;

/**
 * Utility types for type safety
 */
export type ImageRole = "hero" | "gallery" | "process" | "result";
export type RobotsDirective = "index,follow" | "noindex,nofollow";
export type SchemaOrgType = "LocalBusiness" | "WebSite" | "WebPage" | "Organization";

/**
 * Configuration validation result
 */
export interface ConfigValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
}


============================
FILE: frontend\src\shared\types\reviews.ts
============================
export interface ReviewsSummaryProps {
  averageRating?: number;
  totalReviews?: number;
  googleBusinessUrl?: string;
  className?: string;
  variant?: 'default' | 'compact';
}


============================
FILE: frontend\src\shared\types\site.ts
============================
export type SiteState = 'tenant';

export interface SiteContextType {
  siteState: SiteState;
  currentLocation: {
    slug: string;
    city: string;
    state: string;
    affiliate: string;
  } | null;
  businessData: {
    name: string;
    phone: string;
    email: string;
    url: string;
    logo: string;
    description: string;
    services: string[];
    hours: string;
    serviceAreas: Array<{
      city: string;
      state: string;
      zip: string;
    }>;
  } | null;
  isLoading: boolean;
  hasError: boolean;
}

export interface SiteActions {
  setLocation: (locationSlug: string) => void;
  clearLocation: () => void;
  setLoading: (loading: boolean) => void;
  setError: (error: boolean) => void;
}


============================
FILE: frontend\src\shared\types\tenant-business.types.ts
============================
// Tenant business data from API
// Shared types for API responses

export interface Business {
  id: number;
  slug: string;
  business_name: string;
  application_status: string;
  business_phone: string;
  sms_phone: string;
  twilio_phone: string;
  service_areas: ServiceArea[];
  owner: string;
  business_email: string | null;
  personal_email: string;
  first_name: string;
  last_name: string;
  personal_phone: string;
  business_start_date: string;
  website: string;
  gbp_url: string | null;
  facebook_url: string | null;
  facebook_enabled: boolean;
  youtube_url: string | null;
  youtube_enabled: boolean;
  tiktok_url: string | null;
  tiktok_enabled: boolean;
  instagram_url: string | null;
  instagram_enabled: boolean;
  industry: string;
  created_at: string;
  updated_at: string;
}

export interface ServiceArea {
  city: string;
  state: string;
  zip?: string;
  primary?: boolean;
  minimum?: number;
  multiplier?: number;
}

export interface BusinessResponse {
  success: boolean;
  data: Business;
}



============================
FILE: frontend\src\shared\types\tenant.types.ts
============================
/**
 * Centralized Tenant Types & Configuration
 * Single source of truth for multi-vertical tenant management
 * 
 * Philosophy: Start minimal, expand as needed
 * - Only 10 core fields are required (matching current usage)
 * - Everything else is optional and can be added later
 * - Structure is organized for future expansion
 * 
 * Prevents duplication across verticals (detailing, petGrooming, etc.)
 * Aligned with backend database schemas and enums
 */

// ============================================================================
// Core Tenant Identification
// ============================================================================

/**
 * Unique identifier for a tenant (affiliate/business)
 */
export type TenantId = string | number;

/**
 * Business vertical types
 * Extensible for future verticals
 * 
 * Format: kebab-case (matches database, file paths, and API)
 * This ensures consistency across:
 * - Database industry column
 * - Folder structure: /src/data/{vertical}/
 * - Public assets: /public/{vertical}/icons/
 * - API responses
 */
export type Vertical = 
  | 'mobile-detailing'   // Auto/boat/RV detailing
  | 'pet-grooming'       // Pet grooming services (future)
  | 'lawn-care'          // Lawn & landscaping (future)
  | 'maid-service'       // Cleaning services (future)
  | 'hvac'               // HVAC services (future)
  | 'plumbing'           // Plumbing services (future)
  | 'electrical';        // Electrical services (future)

/**
 * Legacy alias for backward compatibility
 * @deprecated Use Vertical instead
 */
export type IndustryType = Vertical;

/**
 * Application/approval status
 */
export type TenantStatus = 
  | 'pending'
  | 'approved'
  | 'active'
  | 'suspended'
  | 'rejected';

/**
 * User role within a tenant organization
 */
export type TenantUserRole = 
  | 'owner'
  | 'manager'
  | 'tech'        // Technician/service provider
  | 'viewer';     // Read-only access

// ============================================================================
// Service Catalog Types (FUTURE - not used yet)
// ============================================================================
// Placeholder for when service catalog is needed
// These types align with backend database schemas

/**
 * Service categories (for future use)
 * Aligned with backend service_category enum
 */
export type ServiceCategory =
  | 'interior'
  | 'exterior'
  | 'service-packages'
  | 'addons'
  | 'ceramic-coating'
  | 'paint-correction'
  | 'paint-protection-film'
  | 'auto'
  | 'boat'
  | 'rv'
  | 'ppf'
  | 'ceramic';

/**
 * Vehicle types (for future use)
 */
export type VehicleType = 'auto' | 'boat' | 'rv' | 'truck' | 'motorcycle' | 'off-road';

/**
 * Service pricing tier (for future use)
 */
export interface ServiceTier {
  id: string | number;
  name: string;
  priceCents: number;
  durationMinutes: number;
  description: string;
  features: string[];
  popular?: boolean;
  enabled?: boolean;
  sortOrder?: number;
}

/**
 * Service definition (for future use)
 */
export interface Service {
  id: string | number;
  name: string;
  slug?: string;
  category: ServiceCategory;
  description?: string;
  vehicleTypes?: VehicleType[];
  basePriceCents?: number;
  tiers?: ServiceTier[];
  active?: boolean;
  featured?: boolean;
  metadata?: Record<string, unknown>;
}

/**
 * Service catalog (for future use)
 */
export interface ServiceCatalog {
  [category: string]: Service[];
}

// ============================================================================
// Branding & Visual Identity
// ============================================================================

/**
 * Logo configuration
 * REQUIRED: url (maps to current logo_url)
 * OPTIONAL: Everything else for future enhancement
 */
export interface Logo {
  url: string;                     // ✓ REQUIRED - Primary logo URL
  alt?: string;                    // Alt text for accessibility
  darkUrl?: string;                // Dark mode variant (future)
  lightUrl?: string;               // Light mode variant (future)
  width?: number;                  // Preferred width (future)
  height?: number;                 // Preferred height (future)
}

/**
 * Tenant branding configuration
 * REQUIRED: businessName, logo.url
 * OPTIONAL: Everything else for future use
 */
export interface TenantBranding {
  businessName: string;            // ✓ REQUIRED - Legal/display business name
  logo: Logo;                      // ✓ REQUIRED - At least logo.url
  tagline?: string;                // Marketing tagline (future)
  favicon?: string;                // Favicon URL (future)
  colors?: {                       // Brand colors (future)
    primary?: string;
    secondary?: string;
    accent?: string;
  };
  theme?: 'default' | 'southwest' | 'coastal' | 'modern' | 'classic';  // Future
}

// ============================================================================
// Contact & Social
// ============================================================================

/**
 * Phone numbers
 * REQUIRED: main (maps to current phone field)
 */
export interface PhoneNumbers {
  main: string;                    // ✓ REQUIRED - Primary business phone
  sms?: string;                    // SMS-capable number (future)
  twilio?: string;                 // Twilio integration number (future)
}

/**
 * Email addresses
 * REQUIRED: primary (maps to current email field)
 */
export interface EmailAddresses {
  primary: string;                 // ✓ REQUIRED - Primary contact email
  support?: string;                // Customer support (future)
  billing?: string;                // Billing inquiries (future)
}

/**
 * Social media profiles
 * REQUIRED: facebook, instagram, tiktok, youtube (maps to current fields)
 * Can be empty strings if not used
 */
export interface SocialMediaLinks {
  facebook: string;                // ✓ REQUIRED - Facebook URL or empty
  instagram: string;               // ✓ REQUIRED - Instagram URL or empty
  tiktok: string;                  // ✓ REQUIRED - TikTok URL or empty
  youtube: string;                 // ✓ REQUIRED - YouTube URL or empty
  twitter?: string;                // Future
  linkedin?: string;               // Future
  yelp?: string;                   // Future
  gbp?: string;                    // Google Business Profile (future)
}

/**
 * Base location info
 * REQUIRED: city, state (maps to current base_location)
 */
export interface BaseLocation {
  city: string;                    // ✓ REQUIRED - Primary city
  state: string;                   // ✓ REQUIRED - Primary state
}

/**
 * Contact information bundle
 * REQUIRED: phones.main, emails.primary, socials (all 4), baseLocation
 */
export interface ContactInfo {
  phones: PhoneNumbers;            // ✓ REQUIRED
  emails: EmailAddresses;          // ✓ REQUIRED
  socials: SocialMediaLinks;       // ✓ REQUIRED
  baseLocation: BaseLocation;      // ✓ REQUIRED
  address?: {                      // Future - full address
    street?: string;
    city?: string;
    state?: string;
    zip?: string;
    country?: string;
  };
}

// ============================================================================
// Service Areas & Locations (FUTURE - placeholder)
// ============================================================================

/**
 * Geographic service area (for future use)
 */
export interface ServiceArea {
  id?: string | number;
  city: string;
  citySlug: string;
  stateCode: string;
  stateName: string;
  zipCodes?: string[];
  latitude?: number;
  longitude?: number;
  radiusMiles?: number;
}

/**
 * Service area configuration (for future use)
 */
export interface ServiceAreaConfig {
  [stateCode: string]: ServiceArea[];
}

// ============================================================================
// Future Features (Placeholders - not used yet)
// ============================================================================

/**
 * SEO metadata (for future use)
 */
export interface SEOMetadata {
  title: string;
  description: string;
  keywords?: string[];
  canonicalPath?: string;
  ogImage?: string;
  twitterImage?: string;
  robots?: 'index,follow' | 'noindex,nofollow';
}

/**
 * FAQ item (for future use)
 */
export interface FAQItem {
  question: string;
  answer: string;
  category?: string;
}

/**
 * Location-specific page (for future use)
 */
export interface LocationPage {
  slug: string;
  city: string;
  stateCode: string;
  state: string;
  seo: SEOMetadata;
  faqs?: FAQItem[];
  pricingModifierPct?: number;
}

/**
 * Analytics configuration (for future use)
 */
export interface AnalyticsConfig {
  ga4?: string;
  googleAdsId?: string;
  facebookPixelId?: string;
}

/**
 * Payment configuration (for future use)
 */
export interface PaymentConfig {
  stripePublishableKey?: string;
  stripeAccountId?: string;
  acceptsPayments?: boolean;
  depositRequired?: boolean;
}

/**
 * Feature flags (for future use)
 */
export interface FeatureFlags {
  bookingEnabled?: boolean;
  loginEnabled?: boolean;
  reviewsEnabled?: boolean;
}

// ============================================================================
// Complete Tenant Configuration
// ============================================================================

/**
 * Minimal tenant configuration (current needs)
 * 
 * REQUIRED FIELDS (10 total - matching current usage):
 * ✓ id, slug, vertical, status
 * ✓ branding.businessName
 * ✓ branding.logo.url
 * ✓ contact.phones.main
 * ✓ contact.emails.primary
 * ✓ contact.socials (facebook, instagram, tiktok, youtube)
 * ✓ contact.baseLocation (city, state)
 * 
 * OPTIONAL FIELDS (everything else - add as needed):
 * - services (service catalog - future)
 * - serviceAreas (geographic coverage - future)
 * - locationPages (SEO pages - future)
 * - analytics (tracking - future)
 * - payment (Stripe integration - future)
 * - features (feature flags - future)
 * - All other fields
 */
export interface TenantConfig {
  // ============================================
  // CORE IDENTITY (4 required fields)
  // ============================================
  id: TenantId;                    // ✓ REQUIRED
  slug: string;                    // ✓ REQUIRED - URL-safe identifier
  vertical: Vertical;              // ✓ REQUIRED - Business vertical
  status: TenantStatus;            // ✓ REQUIRED - Approval status
  
  // ============================================
  // BRANDING (2 required fields)
  // ============================================
  branding: TenantBranding;        // ✓ REQUIRED
  // - branding.businessName (required)
  // - branding.logo.url (required)
  // - branding.tagline (optional)
  // - branding.colors (optional)
  // - branding.theme (optional)
  
  // ============================================
  // CONTACT (4 required fields nested)
  // ============================================
  contact: ContactInfo;            // ✓ REQUIRED
  // - contact.phones.main (required)
  // - contact.emails.primary (required)
  // - contact.socials.facebook (required, can be empty)
  // - contact.socials.instagram (required, can be empty)
  // - contact.socials.tiktok (required, can be empty)
  // - contact.socials.youtube (required, can be empty)
  // - contact.baseLocation.city (required)
  // - contact.baseLocation.state (required)
  // - contact.address (optional - future)
  
  // ============================================
  // FUTURE FEATURES (all optional)
  // ============================================
  services?: ServiceCatalog;       // Service catalog (future)
  enabledServiceCategories?: ServiceCategory[];
  
  serviceAreas?: ServiceAreaConfig; // Geographic coverage (future)
  serviceRadiusMiles?: number;
  
  locationPages?: LocationPage[];  // SEO landing pages (future)
  mainSiteSEO?: SEOMetadata;
  
  analytics?: AnalyticsConfig;     // Tracking integrations (future)
  payment?: PaymentConfig;         // Stripe integration (future)
  features?: FeatureFlags;         // Feature flags (future)
  
  domains?: string[];              // Custom domains (future)
  primaryDomain?: string;
  
  businessLicense?: string;        // Business details (future)
  insuranceProvider?: string;
  insuranceExpiry?: string;
  operatingHours?: Record<string, { open: string; close: string; closed?: boolean }>;
  
  rating?: number;                 // Performance metrics (future)
  reviewCount?: number;
  totalJobs?: number;
  
  metadata?: Record<string, unknown>; // Flexible additional data (future)
  createdAt?: string;
  updatedAt?: string;
  approvedAt?: string;
}

// ============================================================================
// Helper Types
// ============================================================================

/**
 * Partial tenant config for updates
 */
export type TenantConfigUpdate = Partial<TenantConfig>;

/**
 * Tenant summary (lightweight version for lists)
 */
export interface TenantSummary {
  id: TenantId;
  slug: string;
  businessName: string;
  vertical: Vertical;
  status: TenantStatus;
  mainPhone: string;
  email: string;
  rating?: number;
  reviewCount?: number;
}

/**
 * Tenant creation payload
 */
export type TenantCreatePayload = Omit<TenantConfig, 'id' | 'createdAt' | 'updatedAt' | 'approvedAt'>;



============================
FILE: frontend\src\shared\ui\buttons\BookNow.tsx
============================
import React from 'react';
import { Link } from 'react-router-dom';

import { cn } from '@/shared/utils/cn';

import { Button } from './Button';

interface BookNowProps {
  to?: string;
  onClick?: (e: React.MouseEvent) => void;
  variant?: 'primary' | 'secondary' | 'outline' | 'outline-white' | 'ghost' | 'destructive';
  size?: 'sm' | 'md' | 'lg' | 'xl';
  loading?: boolean;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
  className?: string;
  children?: React.ReactNode;
  style?: React.CSSProperties;
}

const BookNow = React.forwardRef<HTMLButtonElement, BookNowProps>(
  ({
    to,
    onClick,
    variant = 'primary',
    size = 'lg',
    loading = false,
    leftIcon,
    rightIcon,
    className = '',
    children,
    style,
    ...props
  }, ref) => {
    const buttonText = children || 'Book Now';

    // Determine destination based on context
    const getDestination = () => {
      if (to) return to; // Use custom destination if provided
      
      // Always go directly to booking for now
      // TODO: Add location selection page if needed
      return '/booking';
    };

    const buttonProps = {
      variant,
      size,
      loading,
      leftIcon,
      rightIcon,
      className: cn(
        'whitespace-nowrap',
        className
      ),
      style,
      children: buttonText,
      ref,
      ...props
    };

    if (onClick) {
      return (
        <Button
          onClick={onClick}
          {...buttonProps}
        />
      );
    }

    return (
      <Link to={getDestination()}>
        <Button {...buttonProps} />
      </Link>
    );
  }
);

BookNow.displayName = 'BookNow';

export default BookNow;


============================
FILE: frontend\src\shared\ui\buttons\Button.tsx
============================
/* eslint-disable react/prop-types -- Using TypeScript interfaces instead of PropTypes */
import React from 'react';

import { cn } from '@/shared/utils/cn';
/* eslint-enable react/prop-types -- Re-enable after TypeScript interface declarations */

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline' | 'outline-white' | 'ghost' | 'destructive';
  size?: 'sm' | 'md' | 'lg' | 'xl';
  loading?: boolean;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ 
    className, 
    variant = 'primary', 
    size = 'md', 
    loading = false,
    leftIcon,
    rightIcon,
    children,
    disabled,
    ...props 
  }, ref) => {
    const baseStyles = 'inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50';
    
    const variants = {
      primary: 'bg-orange-500 text-white hover:bg-orange-600',
      secondary: 'bg-gray-600 text-white hover:bg-gray-700',
      outline: 'border border-gray-300 bg-transparent text-gray-700 hover:bg-gray-50',
      'outline-white': 'border border-white bg-transparent text-white hover:bg-white hover:text-gray-900',
      ghost: 'text-gray-700 hover:bg-gray-100',
      destructive: 'bg-red-500 text-white hover:bg-red-600',
    };

    const sizes = {
      sm: 'h-9 px-3 text-sm',
      md: 'h-10 px-4 py-2',
      lg: 'h-11 px-8 text-lg',
      xl: 'h-14 px-10 text-xl',
    };

    return (
      <button
        className={cn(
          baseStyles,
          variants[variant],
          sizes[size],
          className
        )}
        disabled={disabled || loading}
        ref={ref}
        {...props}
      >
        {loading && (
          <svg
            className="mr-2 h-4 w-4 animate-spin"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              strokeWidth="4"
            />
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            />
          </svg>
        )}
        {!loading && leftIcon && <span className="mr-2">{leftIcon}</span>}
        {children}
        {!loading && rightIcon && <span className="ml-2">{rightIcon}</span>}
      </button>
    );
  }
);

Button.displayName = 'Button';

export { Button };


============================
FILE: frontend\src\shared\ui\buttons\CTAButtons.tsx
============================
import React from 'react';

import { useDataOptional } from '@/shared/hooks/useData';
import { cn } from '@/shared/utils/cn';

import BookNow from './BookNow';
import GetQuote from './GetQuote';

interface CTAButtonsProps {
  layout?: 'horizontal' | 'vertical';
  className?: string;
  bookNowProps?: {
    to?: string;
    onClick?: () => void;
    variant?: 'primary' | 'secondary' | 'outline' | 'outline-white' | 'ghost' | 'destructive';
    size?: 'sm' | 'md' | 'lg' | 'xl';
    className?: string;
    children?: React.ReactNode;
  };
  getQuoteProps?: {
    variant?: 'primary' | 'secondary' | 'outline' | 'outline-white' | 'ghost' | 'destructive';
    size?: 'sm' | 'md' | 'lg' | 'xl';
    className?: string;
    children?: React.ReactNode;
    onClick?: () => void;
  };
}

const CTAButtons: React.FC<CTAButtonsProps> = ({
  layout = 'horizontal',
  className = '',
  bookNowProps = {},
  getQuoteProps = {}
}) => {
  const data = useDataOptional();
  const isPreview = data?.isPreview || false;

  // Default both to the same size unless overridden
  const buttonSize = bookNowProps.size ?? getQuoteProps.size ?? 'lg';

  const containerClasses =
    layout === 'vertical'
      ? // Single column, centered, consistent width
        'flex flex-col gap-3 w-full max-w-[28rem] md:max-w-[32rem] mx-auto px-6'
      : // 1 col on mobile, 2 equal cols ≥ sm
        'grid grid-cols-1 sm:grid-cols-2 gap-3 w-full max-w-[28rem] md:max-w-[32rem] mx-auto px-6';

  const commonBtnClasses = 'w-full justify-center'; // fill column, equal widths

  const handleBookNowClick = (e: React.MouseEvent) => {
    if (isPreview) {
      e.preventDefault();
      e.stopPropagation();
      alert('📋 Preview Mode\n\nBooking is disabled in preview mode.\n\nThis is a demonstration site to showcase features to potential clients.');
      return;
    }
    bookNowProps.onClick?.();
  };

  return (
    <div className={cn(containerClasses, className)}>
      <BookNow
        variant={bookNowProps.variant ?? 'primary'}
        size={buttonSize}
        className={cn(commonBtnClasses, isPreview && 'cursor-pointer', bookNowProps.className)}
        onClick={isPreview ? handleBookNowClick : bookNowProps.onClick}
        {...(bookNowProps.to && !isPreview && { to: bookNowProps.to })}
      >
        {bookNowProps.children ?? 'Book Now'}
      </BookNow>

      <GetQuote
        variant={getQuoteProps.variant ?? 'outline-white'}
        size={buttonSize}
        className={cn(commonBtnClasses, getQuoteProps.className)}
        onClick={getQuoteProps.onClick}
      >
        {getQuoteProps.children ?? 'Request Quote'}
      </GetQuote>
    </div>
  );
};

export default CTAButtons;

============================
FILE: frontend\src\shared\ui\buttons\GetQuote.tsx
============================
import React from 'react';

import { cn } from '@/shared/utils/cn';

import { Button } from './Button';

interface GetQuoteProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline' | 'outline-white' | 'ghost' | 'destructive';
  size?: 'sm' | 'md' | 'lg' | 'xl';
  loading?: boolean;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
  className?: string;
  children?: React.ReactNode;
  style?: React.CSSProperties;
}

const GetQuote = React.forwardRef<HTMLButtonElement, GetQuoteProps>(
  ({
    variant = 'secondary',
    size = 'lg',
    loading = false,
    leftIcon,
    rightIcon,
    className = '',
    children,
    style,
    ...props
  }, ref) => {
    const buttonText = children || 'Request Quote';

    return (
      <Button
        variant={variant}
        size={size}
        loading={loading}
        leftIcon={leftIcon}
        rightIcon={rightIcon}
        className={cn(
          'whitespace-nowrap',
          className
        )}
        style={style}
        ref={ref}
        {...props}
      >
        {buttonText}
      </Button>
    );
  }
);

GetQuote.displayName = 'GetQuote';

export default GetQuote;


============================
FILE: frontend\src\shared\ui\carousel\BackgroundCarousel.tsx
============================
import React from 'react';

import { useImageRotation } from '@/shared/hooks';
import { getImageOpacityClasses, getTransitionStyles,getVisibleImageIndices } from '@/shared/utils';

interface BackgroundCarouselProps {
  images: string[];
  interval?: number;
  className?: string;
  overlay?: boolean;
  overlayOpacity?: number;
  altText?: string;
}

const BackgroundCarousel: React.FC<BackgroundCarouselProps & React.HTMLAttributes<HTMLDivElement>> = ({
  images,
  interval = 8000,
  className = '',
  overlay = true,
  overlayOpacity = 0.7,
  altText = 'Background image',
  ...rest
}) => {
  // Use the new image rotation utility
  const rotation = useImageRotation({
    images,
    autoRotate: true,
    interval,
    fadeDuration: 2000, // 2s fade duration to match original
    preloadNext: true,
    pauseOnHover: false // Background carousel doesn't need hover pause
  });

  const { currentIndex: currentImageIndex } = rotation;
  
  // Get visible image indices for performance optimization
  const visibleIndices = getVisibleImageIndices(currentImageIndex, images.length, true);

  if (images.length === 0) {
    return (
      <div className={`absolute inset-0 bg-gradient-to-br from-stone-800 to-stone-900 ${className}`} {...rest} />
    );
  }

  return (
    <div className={`absolute inset-0 overflow-hidden ${className}`} {...rest}>
      {/* Render only visible images for performance */}
      {images.map((src: string, idx: number) => {
        // Only render visible images
        if (!visibleIndices.includes(idx)) return null;
        
        return (
          <img
            key={`bg-carousel-${String(idx)}`}
            src={src}
            alt={`${altText} ${String(idx + 1)}`}
            className={`absolute inset-0 w-full h-full object-cover ${getImageOpacityClasses(idx, currentImageIndex, 2000)}`}
            style={getTransitionStyles(2000)}
            loading={idx === 0 ? "eager" : "lazy"}
            decoding="async"
          />
        );
      })}
      
      {/* Optional overlay */}
      {overlay && (
        <div 
          className="absolute inset-0 bg-stone-900"
          style={{ opacity: overlayOpacity }}
        />
      )}
    </div>
  );
};

export default BackgroundCarousel;


============================
FILE: frontend\src\shared\ui\carousel\Carousel.tsx
============================
import React, { useEffect,useState } from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';

interface CarouselItem {
  id: string;
  name: string;
  price: number;
  description: string;
  features: string[];
  featureIds: string[];
  popular?: boolean;
}

interface CarouselProps<T extends CarouselItem> {
  items: T[];
  selectedItem?: string;
  renderItem: (item: T & { position: 'center' | 'left' | 'right' }, isSelected: boolean) => React.ReactNode;
  onItemClick?: (item: T) => void;
  emptyMessage?: string;
  containerHeight?: string;
  containerTop?: string;
}

const Carousel = <T extends CarouselItem>({
  items,
  selectedItem,
  renderItem,
  onItemClick,
  emptyMessage = "No items available",
  containerHeight = "h-[70vh]",
  containerTop = "top-[36.5%]"
}: CarouselProps<T>) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  

  // Update index when items load to show most popular item in center
  useEffect(() => {
    if (items.length > 0) {
      const popularIndex = items.findIndex(item => item.popular);
      const initialIndex = popularIndex !== -1 ? popularIndex : 0;
      setCurrentIndex(initialIndex);
    }
  }, [items]);

  const handlePrevious = () => {
    setCurrentIndex((prev) => (prev > 0 ? prev - 1 : items.length - 1));
  };

  const handleNext = () => {
    setCurrentIndex((prev) => (prev < items.length - 1 ? prev + 1 : 0));
  };

  const getVisibleItems = () => {
    const visible: (T & { position: 'center' | 'left' | 'right' })[] = [];
    for (let i = -1; i <= 1; i++) {
      const index = (currentIndex + i + items.length) % items.length;
      const item = items[index];
      if (item) {
        visible.push({
          ...item,
          popular: item.popular || false, // Ensure boolean type
          position: i === 0 ? 'center' : i === -1 ? 'left' : 'right'
        });
      }
    }
    return visible;
  };

  if (items.length === 0) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-300 text-lg">{emptyMessage}</p>
      </div>
    );
  }

  return (
    <div className={`relative w-full max-w-5xl mx-auto ${containerHeight}`}>
      {/* Items Container */}
      <div className={`absolute ${containerTop} left-1/2 transform -translate-x-1/2 w-full`}>
        {/* Navigation Arrows */}
        {items.length > 1 && (
          <>
            <button
              onClick={handlePrevious}
              className="absolute -left-8 sm:-left-16 md:-left-32 lg:-left-64 top-1/2 -translate-y-1/2 z-20 bg-orange-500 hover:bg-orange-600 text-white p-4 rounded-full transition-colors shadow-lg"
              aria-label="Previous item"
            >
              <ChevronLeft className="h-6 w-6" />
            </button>

            <button
              onClick={handleNext}
              className="absolute -right-8 sm:-right-16 md:-right-32 lg:-right-64 top-1/2 -translate-y-1/2 z-20 bg-orange-500 hover:bg-orange-600 text-white p-4 rounded-full transition-colors shadow-lg"
              aria-label="Next item"
            >
              <ChevronRight className="h-6 w-6" />
            </button>
          </>
        )}
        
        <div className="flex items-center justify-center gap-4 w-full max-w-5xl">
          {getVisibleItems().map((item) => {
            const isSelected = selectedItem === item.id;
            return (
              <button
                key={item.id}
                type="button"
                onClick={() => onItemClick?.(item)}
                className="bg-transparent border-none p-0 cursor-pointer"
              >
                {renderItem(item, isSelected)}
              </button>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default Carousel;


============================
FILE: frontend\src\shared\ui\forms\AutoSaveInput.tsx
============================
import React from 'react';
import { AlertCircle, CheckCircle, Loader2 } from 'lucide-react';

/**
 * Generic auto-save input component with visual feedback
 * 
 * Features:
 * - Green checkmark when value is saved
 * - Blue spinning loader while saving
 * - Red alert icon on error
 * - "Saving..." text below field during save
 * - Error message display
 */

interface AutoSaveInputProps {
  label: string;
  type?: 'text' | 'email' | 'tel' | 'url' | 'date';
  value: string;
  onChange: (value: string) => void;
  isSaving: boolean;
  error: string | null;
  placeholder?: string;
  className?: string;
  disabled?: boolean;
}

export const AutoSaveInput: React.FC<AutoSaveInputProps> = ({
  label,
  type = 'text',
  value,
  onChange,
  isSaving,
  error,
  placeholder,
  className = '',
  disabled = false,
}) => {
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onChange(e.target.value);
  };

  const getStatusIcon = () => {
    if (isSaving) {
      return <Loader2 className="h-4 w-4 text-blue-500 animate-spin" />;
    }
    if (error) {
      return <AlertCircle className="h-4 w-4 text-red-500" />;
    }
    if (value && value.trim() !== '') {
      return <CheckCircle className="h-4 w-4 text-green-500" />;
    }
    return null;
  };

  return (
    <div className="relative">
      <label className="block text-sm font-medium text-gray-300 mb-2">
        {label}
      </label>
      <div className="relative">
        <input
          type={type}
          value={value}
          onChange={handleChange}
          placeholder={placeholder}
          disabled={disabled}
          className={`w-full px-3 py-2 pr-10 border rounded-md bg-stone-700 text-white focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent ${
            error ? 'border-red-500' : 'border-stone-600'
          } ${disabled ? 'opacity-50 cursor-not-allowed' : ''} ${className}`}
        />
        <div className="absolute inset-y-0 right-0 flex items-center pr-3">
          {getStatusIcon()}
        </div>
      </div>
      {error && (
        <p className="mt-1 text-sm text-red-400">{error}</p>
      )}
      {isSaving && (
        <p className="mt-1 text-sm text-blue-400">Saving...</p>
      )}
    </div>
  );
};



============================
FILE: frontend\src\shared\ui\forms\Badge.tsx
============================
/* eslint-disable react/prop-types -- Using TypeScript interfaces instead of PropTypes */
import React from 'react';

import { cn } from '@/shared/utils/cn';
/* eslint-enable react/prop-types -- Re-enable after imports */

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: 'default' | 'secondary' | 'destructive' | 'outline' | 'success' | 'warning';
  size?: 'sm' | 'md' | 'lg';
  dot?: boolean;
}

const Badge = React.forwardRef<HTMLDivElement, BadgeProps>(
  ({ className, variant = 'default', size = 'md', dot = false, children, ...props }, ref) => {
    const baseStyles = 'inline-flex items-center rounded-full font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2';
    
    const variants = {
      default: 'bg-primary text-primary-foreground hover:bg-primary/80',
      secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
      destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/80',
      outline: 'text-foreground border border-input',
      success: 'bg-green-100 text-green-800 hover:bg-green-200 dark:bg-green-900 dark:text-green-200',
      warning: 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200 dark:bg-yellow-900 dark:text-yellow-200',
    };

    const sizes = {
      sm: 'px-2 py-1 text-xs',
      md: 'px-2.5 py-0.5 text-sm',
      lg: 'px-3 py-1 text-base',
    };

    return (
      <div
        ref={ref}
        className={cn(
          baseStyles,
          variants[variant],
          sizes[size],
          className
        )}
        {...props}
      >
        {dot && (
          <div className="w-2 h-2 rounded-full bg-current mr-1.5" />
        )}
        {children}
      </div>
    );
  }
);

Badge.displayName = 'Badge';

export { Badge };


============================
FILE: frontend\src\shared\ui\forms\CheckboxField.tsx
============================
/**
 * CheckboxField - Checkbox input primitive
 * Consistent styling for checkbox inputs with labels
 * No network calls - pure presentational component
 */

import React from 'react';

import { cn } from '@/shared/utils';

export interface CheckboxFieldProps {
  label: React.ReactNode;
  checked: boolean;
  onChange: (checked: boolean) => void;
  error?: string | string[];
  disabled?: boolean;
  helperText?: string;
  className?: string;
  id?: string;
}

export const CheckboxField: React.FC<CheckboxFieldProps> = ({
  label,
  checked,
  onChange,
  error,
  disabled = false,
  helperText,
  className = '',
  id,
}) => {
  const errorMessage = Array.isArray(error) ? error[0] : error;
  const hasError = !!errorMessage;
  const checkboxId = id || `checkbox-${Math.random().toString(36).substring(2, 11)}`;
  
  return (
    <div className={cn('space-y-2', className)}>
      <div className="flex items-start">
        <input
          type="checkbox"
          id={checkboxId}
          checked={checked}
          onChange={(e) => { onChange(e.target.checked); }}
          disabled={disabled}
          className={cn(
            'mt-1 w-4 h-4 rounded border transition-colors',
            'bg-stone-700 border-stone-600',
            'checked:bg-orange-500 checked:border-orange-500',
            'focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-stone-900',
            hasError && 'border-red-500',
            disabled && 'opacity-50 cursor-not-allowed'
          )}
        />
        <label 
          htmlFor={checkboxId}
          className={cn(
            'ml-3 text-sm text-gray-300',
            disabled && 'opacity-50 cursor-not-allowed'
          )}
        >
          {label}
        </label>
      </div>
      
      {helperText && !hasError && (
        <p className="text-sm text-gray-400 ml-7">{helperText}</p>
      )}
      
      {hasError && (
        <p className="text-sm text-red-400 ml-7">{errorMessage}</p>
      )}
    </div>
  );
};



============================
FILE: frontend\src\shared\ui\forms\FilterChip.tsx
============================
import React from 'react';
import { LucideIcon } from 'lucide-react';

import { cn } from '@/shared/utils/cn';

export interface FilterChipProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  isSelected?: boolean;
  icon?: LucideIcon;
  children: React.ReactNode;
  variant?: 'default' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
}

const FilterChip = React.forwardRef<HTMLButtonElement, FilterChipProps>(
  ({ 
    className, 
    isSelected = false, 
    icon: Icon, 
    children, 
    variant = 'default',
    size = 'md',
    ...props 
  }, ref) => {
    const baseStyles = 'inline-flex items-center gap-2 rounded-full font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';
    
    const variants = {
      default: isSelected 
        ? 'bg-orange-500 text-white shadow-lg shadow-orange-500/30 hover:bg-orange-600' 
        : 'bg-stone-800/70 text-stone-200 hover:bg-stone-700/70 hover:text-white border border-stone-600/50',
      outline: isSelected
        ? 'bg-orange-500 text-white border-orange-500 shadow-lg shadow-orange-500/30'
        : 'text-stone-200 border border-stone-600/50 hover:bg-stone-800/50 hover:border-stone-500',
      ghost: isSelected
        ? 'bg-orange-500/20 text-orange-300 hover:bg-orange-500/30'
        : 'text-stone-300 hover:text-white hover:bg-stone-800/50'
    };

    const sizes = {
      sm: 'px-3 py-1.5 text-sm',
      md: 'px-4 py-2 text-base',
      lg: 'px-6 py-3 text-lg',
    };

    return (
      <button
        ref={ref}
        className={cn(
          baseStyles,
          variants[variant],
          sizes[size],
          className
        )}
        {...props}
      >
        {Icon && <Icon className="h-4 w-4" />}
        {children}
      </button>
    );
  }
);

FilterChip.displayName = 'FilterChip';

export { FilterChip };


============================
FILE: frontend\src\shared\ui\forms\Input.tsx
============================
/* eslint-disable react/prop-types -- Using TypeScript interfaces instead of PropTypes */
import React from 'react';

import { cn } from '@/shared/utils/cn';

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  helperText?: string;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
  variant?: 'default' | 'filled' | 'outlined';
}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ 
    className, 
    type = 'text', 
    label,
    error,
    helperText,
    leftIcon,
    rightIcon,
    variant = 'default',
    id,
    ...props 
  }, ref) => {
    const inputId = id || `input-${Math.random().toString(36).substring(2, 11)}`;
    
    const baseStyles = 'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50';
    
    const variants = {
      default: 'border-input',
      filled: 'border-transparent bg-muted',
      outlined: 'border-2 border-input',
    };

    const inputClasses = cn(
      baseStyles,
      variants[variant],
      error && 'border-destructive focus-visible:ring-destructive',
      leftIcon && 'pl-10',
      rightIcon && 'pr-10',
      className
    );

    return (
      <div className="w-full">
        {label && (
          <label
            htmlFor={inputId}
            className="block text-sm font-medium text-foreground mb-2"
          >
            {label}
            {props.required && <span className="text-destructive ml-1">*</span>}
          </label>
        )}
        <div className="relative">
          {leftIcon && (
            <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground">
              {leftIcon}
            </div>
          )}
          <input
            type={type}
            className={inputClasses}
            ref={ref}
            id={inputId}
            {...props}
          />
          {rightIcon && (
            <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground">
              {rightIcon}
            </div>
          )}
        </div>
        {error && (
          <p className="mt-1 text-sm text-destructive" role="alert">
            {error}
          </p>
        )}
        {helperText && !error && (
          <p className="mt-1 text-sm text-muted-foreground">
            {helperText}
          </p>
        )}
      </div>
    );
  }
);

Input.displayName = 'Input';

export { Input };
/* eslint-enable react/prop-types -- Re-enable after TypeScript interface declarations */


============================
FILE: frontend\src\shared\ui\forms\PhoneField.tsx
============================
/**
 * PhoneField - Phone number input with auto-formatting
 * Uses shared formatPhoneNumber utility
 * No network calls - pure presentational component
 */

import React from 'react';

import { cn, formatPhoneNumber } from '@/shared/utils';

export interface PhoneFieldProps {
  label: string;
  value: string;
  onChange: (value: string) => void;
  error?: string | string[];
  placeholder?: string;
  required?: boolean;
  disabled?: boolean;
  helperText?: string;
  className?: string;
}

export const PhoneField: React.FC<PhoneFieldProps> = ({
  label,
  value,
  onChange,
  error,
  placeholder = '(555) 123-4567',
  required = false,
  disabled = false,
  helperText,
  className = '',
}) => {
  const errorMessage = Array.isArray(error) ? error[0] : error;
  const hasError = !!errorMessage;
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const formatted = formatPhoneNumber(e.target.value);
    onChange(formatted);
  };
  
  return (
    <div className={cn('space-y-2', className)}>
      <label className="block text-sm font-medium text-gray-300">
        {label}
        {required && <span className="text-red-400 ml-1">*</span>}
      </label>
      
      <input
        type="tel"
        value={value}
        onChange={handleChange}
        placeholder={placeholder}
        disabled={disabled}
        required={required}
        autoComplete="tel"
        className={cn(
          'w-full px-3 py-2 rounded-md border transition-colors',
          'bg-stone-700 text-white placeholder-gray-400',
          'focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent',
          hasError ? 'border-red-500' : 'border-stone-600',
          disabled && 'opacity-50 cursor-not-allowed'
        )}
      />
      
      {helperText && !hasError && (
        <p className="text-sm text-gray-400">{helperText}</p>
      )}
      
      {hasError && (
        <p className="text-sm text-red-400">{errorMessage}</p>
      )}
    </div>
  );
};



============================
FILE: frontend\src\shared\ui\forms\PriceInput.tsx
============================
/**
 * PriceInput - Currency input with formatting
 * Handles price in cents (backend format) but displays as dollars
 * No network calls - pure presentational component
 */

import React from 'react';

import { cn, parseCurrency } from '@/shared/utils';

export interface PriceInputProps {
  label: string;
  value: number;  // Price in cents
  onChange: (cents: number) => void;
  error?: string | string[];
  placeholder?: string;
  required?: boolean;
  disabled?: boolean;
  helperText?: string;
  min?: number;  // Minimum in cents
  max?: number;  // Maximum in cents
  className?: string;
}

export const PriceInput: React.FC<PriceInputProps> = ({
  label,
  value,
  onChange,
  error,
  placeholder = '0.00',
  required = false,
  disabled = false,
  helperText,
  min,
  max,
  className = '',
}) => {
  const errorMessage = Array.isArray(error) ? error[0] : error;
  const hasError = !!errorMessage;
  
  // Display value in dollars
  const displayValue = value ? (value / 100).toFixed(2) : '';
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const inputValue = e.target.value;
    
    // Allow empty
    if (!inputValue) {
      onChange(0);
      return;
    }
    
    // Parse to cents
    const dollars = parseCurrency(inputValue);
    const cents = Math.round(dollars * 100);
    
    // Apply min/max constraints
    let finalValue = cents;
    if (min !== undefined && cents < min) finalValue = min;
    if (max !== undefined && cents > max) finalValue = max;
    
    onChange(finalValue);
  };
  
  return (
    <div className={cn('space-y-2', className)}>
      <label className="block text-sm font-medium text-gray-300">
        {label}
        {required && <span className="text-red-400 ml-1">*</span>}
      </label>
      
      <div className="relative">
        <span className="absolute left-3 top-2 text-gray-400">$</span>
        <input
          type="text"
          value={displayValue}
          onChange={handleChange}
          placeholder={placeholder}
          disabled={disabled}
          required={required}
          className={cn(
            'w-full pl-8 pr-3 py-2 rounded-md border transition-colors',
            'bg-stone-700 text-white placeholder-gray-400',
            'focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent',
            hasError ? 'border-red-500' : 'border-stone-600',
            disabled && 'opacity-50 cursor-not-allowed'
          )}
        />
      </div>
      
      {helperText && !hasError && (
        <p className="text-sm text-gray-400">{helperText}</p>
      )}
      
      {hasError && (
        <p className="text-sm text-red-400">{errorMessage}</p>
      )}
    </div>
  );
};



============================
FILE: frontend\src\shared\ui\forms\README.md
============================
# Shared Form Primitives

Reusable form components to prevent duplication across features. All components follow these principles:

- **No network calls** - pure presentational components
- **Consistent styling** - Tailwind + shadcn/ui conventions
- **Built-in validation** - error display and required field indicators
- **Type-safe** - full TypeScript support

## Available Components

### TextField
Basic text input with validation and error display.

```tsx
import { TextField } from '@/shared/ui';

<TextField
  label="Full Name"
  value={name}
  onChange={(value) => setName(value)}
  error={errors.name}
  placeholder="Enter your name"
  required
/>
```

**Props:**
- `label` - Field label (required)
- `value` - Current value (required)
- `onChange` - Value change handler (required)
- `error` - Error message(s) to display
- `type` - Input type: 'text', 'email', 'url', 'password' (default: 'text')
- `placeholder` - Placeholder text
- `required` - Show required indicator
- `disabled` - Disable input
- `helperText` - Helper text below input
- `autoComplete` - Autocomplete attribute

### PhoneField
Phone number input with auto-formatting.

```tsx
import { PhoneField } from '@/shared/ui';

<PhoneField
  label="Phone Number"
  value={phone}
  onChange={(value) => setPhone(value)}
  error={errors.phone}
  required
/>
```

**Props:** Same as TextField (minus `type`)

### SelectField
Dropdown/select input.

```tsx
import { SelectField } from '@/shared/ui';

<SelectField
  label="Vehicle Type"
  value={vehicleType}
  onChange={(value) => setVehicleType(value)}
  options={['Sedan', 'SUV', 'Truck']}
  // Or with complex options:
  // options={[{ value: 'sedan', label: 'Sedan' }, ...]}
  error={errors.vehicleType}
  placeholder="Select vehicle type"
  required
/>
```

**Props:**
- `options` - Array of strings or `{ value, label, disabled? }` objects
- Other props same as TextField

### TextAreaField
Multi-line text input.

```tsx
import { TextAreaField } from '@/shared/ui';

<TextAreaField
  label="Message"
  value={message}
  onChange={(value) => setMessage(value)}
  error={errors.message}
  rows={4}
  maxLength={500}
  helperText="Tell us about your needs"
/>
```

**Props:**
- `rows` - Number of visible rows (default: 4)
- `maxLength` - Maximum character count (shows counter)
- Other props same as TextField

### PriceInput
Currency input that handles price in cents (backend format).

```tsx
import { PriceInput } from '@/shared/ui';

<PriceInput
  label="Price"
  value={priceCents}  // e.g., 12500 for $125.00
  onChange={(cents) => setPriceCents(cents)}
  error={errors.price}
  min={1000}  // $10 minimum
  max={100000}  // $1000 maximum
/>
```

**Props:**
- `value` - Price in cents (number)
- `onChange` - Returns price in cents (number)
- `min`, `max` - Min/max values in cents
- Other props same as TextField

### CheckboxField
Checkbox input with label.

```tsx
import { CheckboxField } from '@/shared/ui';

<CheckboxField
  label="I agree to the terms and conditions"
  checked={agreedToTerms}
  onChange={(checked) => setAgreedToTerms(checked)}
  error={errors.terms}
  helperText="Please read our terms carefully"
/>
```

**Props:**
- `label` - Label text (required)
- `checked` - Current checked state (required)
- `onChange` - Change handler (required)
- `error`, `helperText`, `disabled` - Same as other fields

### SubmitButton
Form submit button with loading states.

```tsx
import { SubmitButton } from '@/shared/ui';

<SubmitButton
  isLoading={isSubmitting}
  disabled={!isFormValid}
  variant="primary"
  size="lg"
  fullWidth
>
  Submit Quote Request
</SubmitButton>
```

**Props:**
- `isLoading` - Show loading spinner
- `disabled` - Disable button
- `variant` - 'primary', 'secondary', 'danger' (default: 'primary')
- `size` - 'sm', 'md', 'lg' (default: 'md')
- `fullWidth` - Expand to full width
- `type` - 'submit' or 'button' (default: 'submit')
- `loadingText` - Text to show while loading (default: 'Loading...')

## Migration Example

See `ContactSection.refactored.tsx` in `features/quotes/components/` for a complete before/after example.

## Benefits

1. **Less boilerplate** - No manual class string construction
2. **Consistent styling** - Forms look the same across all features
3. **Built-in accessibility** - Proper labels, ARIA attributes
4. **Easier maintenance** - Update one component, fix everywhere
5. **Type safety** - Catch errors at compile time

## Adding New Primitives

When adding new form primitives:

1. Create file in `frontend/src/shared/ui/forms/[ComponentName].tsx`
2. Follow the existing pattern (props interface, component with proper types)
3. Export from `frontend/src/shared/ui/index.ts`
4. Add documentation here
5. No network calls - keep components pure
6. Use Tailwind for styling (no ad-hoc inline styles)



============================
FILE: frontend\src\shared\ui\forms\SelectField.tsx
============================
/**
 * SelectField - Shared dropdown/select primitive
 * Reusable select input with validation and error display
 * No network calls - pure presentational component
 */

import React from 'react';

import { cn } from '@/shared/utils';

export interface SelectOption {
  value: string;
  label: string;
  disabled?: boolean;
}

export interface SelectFieldProps {
  label: string;
  value: string;
  onChange: (value: string) => void;
  options: SelectOption[] | string[];
  error?: string | string[];
  placeholder?: string;
  required?: boolean;
  disabled?: boolean;
  helperText?: string;
  className?: string;
  selectClassName?: string;
}

export const SelectField: React.FC<SelectFieldProps> = ({
  label,
  value,
  onChange,
  options,
  error,
  placeholder = 'Select...',
  required = false,
  disabled = false,
  helperText,
  className = '',
  selectClassName = '',
}) => {
  const errorMessage = Array.isArray(error) ? error[0] : error;
  const hasError = !!errorMessage;
  
  // Normalize options to SelectOption format
  const normalizedOptions: SelectOption[] = options.map(opt => 
    typeof opt === 'string' ? { value: opt, label: opt } : opt
  );
  
  return (
    <div className={cn('space-y-2', className)}>
      <label className="block text-sm font-medium text-gray-300">
        {label}
        {required && <span className="text-red-400 ml-1">*</span>}
      </label>
      
      <select
        value={value}
        onChange={(e) => { onChange(e.target.value); }}
        disabled={disabled}
        required={required}
        className={cn(
          'w-full px-3 py-2 rounded-md border transition-colors',
          'bg-stone-700 text-white',
          'focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent',
          hasError ? 'border-red-500' : 'border-stone-600',
          disabled && 'opacity-50 cursor-not-allowed',
          selectClassName
        )}
      >
        {placeholder && (
          <option value="" disabled>
            {placeholder}
          </option>
        )}
        
        {normalizedOptions.map((option) => (
          <option 
            key={option.value} 
            value={option.value}
            disabled={option.disabled}
          >
            {option.label}
          </option>
        ))}
      </select>
      
      {helperText && !hasError && (
        <p className="text-sm text-gray-400">{helperText}</p>
      )}
      
      {hasError && (
        <p className="text-sm text-red-400">{errorMessage}</p>
      )}
    </div>
  );
};



============================
FILE: frontend\src\shared\ui\forms\SubmitButton.tsx
============================
/**
 * SubmitButton - Shared form submit button
 * Consistent styling and loading states
 * No network calls - pure presentational component
 */

import React from 'react';
import { Loader2 } from 'lucide-react';

import { cn } from '@/shared/utils';

export interface SubmitButtonProps {
  children: React.ReactNode;
  isLoading?: boolean;
  disabled?: boolean;
  onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void;
  type?: 'submit' | 'button';
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  fullWidth?: boolean;
  className?: string;
  loadingText?: string;
}

export const SubmitButton: React.FC<SubmitButtonProps> = ({
  children,
  isLoading = false,
  disabled = false,
  onClick,
  type = 'submit',
  variant = 'primary',
  size = 'md',
  fullWidth = false,
  className = '',
  loadingText = 'Loading...',
}) => {
  const variantStyles = {
    primary: 'bg-orange-500 hover:bg-orange-600 text-white',
    secondary: 'bg-stone-600 hover:bg-stone-700 text-white',
    danger: 'bg-red-500 hover:bg-red-600 text-white',
  };
  
  const sizeStyles = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-base',
    lg: 'px-6 py-3 text-lg',
  };
  
  const isDisabled = disabled || isLoading;
  
  return (
    <button
      type={type}
      onClick={onClick}
      disabled={isDisabled}
      className={cn(
        'rounded-md font-medium transition-colors',
        'focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-stone-900',
        'disabled:opacity-50 disabled:cursor-not-allowed',
        'flex items-center justify-center gap-2',
        variantStyles[variant],
        sizeStyles[size],
        fullWidth && 'w-full',
        className
      )}
    >
      {isLoading && <Loader2 className="w-4 h-4 animate-spin" />}
      {isLoading ? loadingText : children}
    </button>
  );
};



============================
FILE: frontend\src\shared\ui\forms\TextAreaField.tsx
============================
/**
 * TextAreaField - Multi-line text input
 * Reusable textarea with validation and error display
 * No network calls - pure presentational component
 */

import React from 'react';

import { cn } from '@/shared/utils';

export interface TextAreaFieldProps {
  label: string;
  value: string;
  onChange: (value: string) => void;
  error?: string | string[];
  placeholder?: string;
  required?: boolean;
  disabled?: boolean;
  helperText?: string;
  rows?: number;
  maxLength?: number;
  className?: string;
  textareaClassName?: string;
}

export const TextAreaField: React.FC<TextAreaFieldProps> = ({
  label,
  value,
  onChange,
  error,
  placeholder,
  required = false,
  disabled = false,
  helperText,
  rows = 4,
  maxLength,
  className = '',
  textareaClassName = '',
}) => {
  const errorMessage = Array.isArray(error) ? error[0] : error;
  const hasError = !!errorMessage;
  const charCount = value.length;
  const showCharCount = maxLength !== undefined;
  
  return (
    <div className={cn('space-y-2', className)}>
      <div className="flex items-center justify-between">
        <label className="block text-sm font-medium text-gray-300">
          {label}
          {required && <span className="text-red-400 ml-1">*</span>}
        </label>
        
        {showCharCount && (
          <span className="text-xs text-gray-400">
            {charCount}/{maxLength}
          </span>
        )}
      </div>
      
      <textarea
        value={value}
        onChange={(e) => { onChange(e.target.value); }}
        placeholder={placeholder}
        disabled={disabled}
        required={required}
        rows={rows}
        maxLength={maxLength}
        className={cn(
          'w-full px-3 py-2 rounded-md border transition-colors resize-y',
          'bg-stone-700 text-white placeholder-gray-400',
          'focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent',
          hasError ? 'border-red-500' : 'border-stone-600',
          disabled && 'opacity-50 cursor-not-allowed',
          textareaClassName
        )}
      />
      
      {helperText && !hasError && (
        <p className="text-sm text-gray-400">{helperText}</p>
      )}
      
      {hasError && (
        <p className="text-sm text-red-400">{errorMessage}</p>
      )}
    </div>
  );
};



============================
FILE: frontend\src\shared\ui\forms\TextField.tsx
============================
/**
 * TextField - Shared form primitive
 * Reusable text input with validation and error display
 * No network calls - pure presentational component
 */

import React from 'react';

import { cn } from '@/shared/utils';

export interface TextFieldProps {
  label: string;
  value: string;
  onChange: (value: string) => void;
  error?: string | string[];
  placeholder?: string;
  type?: 'text' | 'email' | 'url' | 'password';
  required?: boolean;
  disabled?: boolean;
  helperText?: string;
  className?: string;
  inputClassName?: string;
  autoComplete?: string;
}

export const TextField: React.FC<TextFieldProps> = ({
  label,
  value,
  onChange,
  error,
  placeholder,
  type = 'text',
  required = false,
  disabled = false,
  helperText,
  className = '',
  inputClassName = '',
  autoComplete,
}) => {
  const errorMessage = Array.isArray(error) ? error[0] : error;
  const hasError = !!errorMessage;
  
  return (
    <div className={cn('space-y-2', className)}>
      <label className="block text-sm font-medium text-gray-300">
        {label}
        {required && <span className="text-red-400 ml-1">*</span>}
      </label>
      
      <input
        type={type}
        value={value}
        onChange={(e) => { onChange(e.target.value); }}
        placeholder={placeholder}
        disabled={disabled}
        required={required}
        autoComplete={autoComplete}
        className={cn(
          'w-full px-3 py-2 rounded-md border transition-colors',
          'bg-stone-700 text-white placeholder-gray-400',
          'focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent',
          hasError ? 'border-red-500' : 'border-stone-600',
          disabled && 'opacity-50 cursor-not-allowed',
          inputClassName
        )}
      />
      
      {helperText && !hasError && (
        <p className="text-sm text-gray-400">{helperText}</p>
      )}
      
      {hasError && (
        <p className="text-sm text-red-400">{errorMessage}</p>
      )}
    </div>
  );
};



============================
FILE: frontend\src\shared\ui\icons\PaymentIcons.tsx
============================
import React from 'react';

export const CardIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg viewBox="0 0 24 24" fill="currentColor" {...props}>
    <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2zm0 2v2h16V6H4zm0 4v6h16v-6H4z"/>
  </svg>
);

export const ApplePayIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg viewBox="0 0 24 24" fill="currentColor" {...props}>
    <path d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/>
  </svg>
);

export const GooglePayIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg viewBox="0 0 24 24" fill="currentColor" {...props}>
    <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4"/>
    <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853"/>
    <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="#FBBC05"/>
    <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335"/>
  </svg>
);

export const PaymentIcons = {
  card: CardIcon,
  'apple-pay': ApplePayIcon,
  'google-pay': GooglePayIcon,
} as const;


============================
FILE: frontend\src\shared\ui\ImageCarousel.tsx
============================
/**
 * ImageCarousel Component
 * 
 * A reusable image carousel component that uses the image rotation utilities.
 * This serves as both a standalone component and a reference implementation.
 */

import React, { useMemo } from 'react';

import { useImageRotation, useImageRotationHover } from '@/shared/hooks';
import { cn } from '@/shared/utils/cn';
import {
  getAccessibilityAttributes,
  getImageOpacityClasses,
  getTransitionStyles,
  getVisibleImageIndices,
  type ImageRotationConfig
} from '@/shared/utils/imageRotation';

export interface ImageCarouselProps extends Omit<ImageRotationConfig, 'images'> {
  /** Array of image URLs to display */
  images: string[];
  /** CSS class name for the container */
  className?: string;
  /** CSS class name for individual images */
  imageClassName?: string;
  /** Alt text for images (will be appended with index) */
  altText?: string;
  /** Whether to show navigation dots */
  showDots?: boolean;
  /** Whether to show navigation arrows */
  showArrows?: boolean;
  /** Custom gradient overlay */
  gradientOverlay?: boolean;
  /** Custom gradient classes */
  gradientClassName?: string;
  /** Whether images are decorative (no alt text) */
  decorative?: boolean;
}

/**
 * Reusable Image Carousel Component
 */
export const ImageCarousel: React.FC<ImageCarouselProps> = ({
  images,
  autoRotate = true,
  interval = 7000,
  fadeDuration = 2000,
  preloadNext = true,
  pauseOnHover = false,
  className,
  imageClassName,
  altText = 'Carousel image',
  showDots = false,
  showArrows = false,
  gradientOverlay = false,
  gradientClassName = 'bg-gradient-to-t from-black/70 via-black/40 to-black/30',
  decorative = false,
  ...props
}) => {
  const config: ImageRotationConfig = useMemo(() => ({
    images,
    autoRotate,
    interval,
    fadeDuration,
    preloadNext,
    pauseOnHover
  }), [images, autoRotate, interval, fadeDuration, preloadNext, pauseOnHover]);

  const rotation = useImageRotation(config);
  const hoverHandlers = useImageRotationHover(rotation);

  const {
    currentIndex,
    hasMultipleImages,
    totalImages,
    isValid,
    next,
    previous,
    goTo
  } = rotation;

  // Don't render if invalid
  if (!isValid) {
    return (
      <div className={cn('flex items-center justify-center p-8', className)}>
        <p className="text-red-500">Invalid image carousel configuration</p>
      </div>
    );
  }

  // Don't render if no images
  if (totalImages === 0) {
    return (
      <div className={cn('flex items-center justify-center p-8', className)}>
        <p className="text-gray-500">No images to display</p>
      </div>
    );
  }

  // Get visible image indices for performance optimization
  const visibleIndices = getVisibleImageIndices(currentIndex, totalImages, preloadNext);

  return (
    <div 
      className={cn('relative overflow-hidden', className)}
      {...(pauseOnHover ? hoverHandlers : {})}
      {...props}
    >
      {/* Images */}
      {images.map((image, index) => {
        // Only render visible images for performance
        if (!visibleIndices.includes(index)) return null;

        return (
          <img
            key={index}
            src={image}
            alt={decorative ? '' : `${altText} ${index + 1}`}
            className={cn(
              'absolute inset-0 w-full h-full object-cover',
              getImageOpacityClasses(index, currentIndex, fadeDuration),
              imageClassName
            )}
            style={getTransitionStyles(fadeDuration)}
            decoding={index === 0 ? 'sync' : 'async'}
            loading={index === 0 ? 'eager' : 'lazy'}
            {...getAccessibilityAttributes(currentIndex, totalImages, autoRotate)}
          />
        );
      })}

      {/* Gradient Overlay */}
      {gradientOverlay && (
        <div className={cn('absolute inset-0', gradientClassName)} />
      )}

      {/* Navigation Arrows */}
      {showArrows && hasMultipleImages && (
        <>
          <button
            onClick={previous}
            className="absolute left-4 top-1/2 -translate-y-1/2 z-10 bg-black/50 hover:bg-black/70 text-white p-2 rounded-full transition-colors"
            aria-label="Previous image"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
          </button>
          
          <button
            onClick={next}
            className="absolute right-4 top-1/2 -translate-y-1/2 z-10 bg-black/50 hover:bg-black/70 text-white p-2 rounded-full transition-colors"
            aria-label="Next image"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </>
      )}

      {/* Navigation Dots */}
      {showDots && hasMultipleImages && (
        <div className="absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2 z-10">
          {Array.from({ length: totalImages }).map((_, index) => (
            <button
              key={index}
              onClick={() => { goTo(index); }}
              className={cn(
                'w-3 h-3 rounded-full transition-colors',
                index === currentIndex 
                  ? 'bg-white' 
                  : 'bg-white/50 hover:bg-white/75'
              )}
              aria-label={`Go to image ${index + 1}`}
            />
          ))}
        </div>
      )}
    </div>
  );
};

export default ImageCarousel;


============================
FILE: frontend\src\shared\ui\index.ts
============================
export type { ButtonProps } from './buttons/Button';
export { Button } from './buttons/Button';
export { AutoSaveInput } from './forms/AutoSaveInput';
export type { BadgeProps } from './forms/Badge';
export { Badge } from './forms/Badge';
export type { FilterChipProps } from './forms/FilterChip';
export { FilterChip } from './forms/FilterChip';
export type { InputProps } from './forms/Input';
export { Input } from './forms/Input';
export type { CardProps } from './layout/Card';
export { Card } from './layout/Card';

// Form primitives
export { CheckboxField } from './forms/CheckboxField';
export { PhoneField } from './forms/PhoneField';
export { PriceInput } from './forms/PriceInput';
export { SelectField } from './forms/SelectField';
export { SubmitButton } from './forms/SubmitButton';
export { TextAreaField } from './forms/TextAreaField';
export { TextField } from './forms/TextField';
export type { ModalProps } from './modals/Modal';
export { Modal } from './modals/Modal';
export type { SpinnerProps } from './utility/Spinner';
export { Spinner } from './utility/Spinner';
export type { ToastOptions, ToastProps } from './utility/toast';
export { Toast } from './utility/toast';

// Background components
export { default as BackgroundCarousel } from './carousel/BackgroundCarousel';
export { default as Carousel } from './carousel/Carousel';

// Shared UI components
// LocationsNavigation removed - no longer needed for tenant-based routing
export { default as BookNow } from './buttons/BookNow';
export { default as CTAButtons } from './buttons/CTAButtons';
export { default as GetQuote } from './buttons/GetQuote';
export { default as ErrorBoundary } from './layout/ErrorBoundary';
export { default as LoginPage } from './layout/LoginPage';
export { default as LocationEditModal } from './modals/LocationEditModal';
export { default as QuoteModal } from './modals/QuoteModal';
// export { default as LocationSearchBar } from './navigation/LocationSearchBar'; // Removed - unused
export { default as NotFoundPage } from './layout/NotFoundPage';
export { default as ProtectedRoute } from './layout/ProtectedRoute';

// Image Carousel
export { default as ImageCarousel } from './ImageCarousel';

// Reviews Summary
export { default as ValidationStatus } from '../components/ValidationStatus';
export { default as ReviewsSummary } from './ReviewsSummary';
export type { ReviewsSummaryProps } from '@/shared/types/reviews';

============================
FILE: frontend\src\shared\ui\layout\Card.tsx
============================
/* eslint-disable react/prop-types -- Using TypeScript interfaces instead of PropTypes */
import React from 'react';

import { cn } from '@/shared/utils/cn';
/* eslint-enable react/prop-types -- Re-enable after imports section */

export interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: 'default' | 'outlined' | 'elevated';
  padding?: 'none' | 'sm' | 'md' | 'lg';
}

const Card = React.forwardRef<HTMLDivElement, CardProps>(
  ({ className, variant = 'default', padding = 'md', ...props }, ref) => {
    const baseStyles = 'rounded-lg border bg-card text-card-foreground shadow-sm';
    
    const variants = {
      default: 'border-border',
      outlined: 'border-2 border-border',
      elevated: 'border-border shadow-lg',
    };

    const paddings = {
      none: '',
      sm: 'p-3',
      md: 'p-6',
      lg: 'p-8',
    };

    return (
      <div
        ref={ref}
        className={cn(
          baseStyles,
          variants[variant],
          paddings[padding],
          className
        )}
        {...props}
      />
    );
  }
);

Card.displayName = 'Card';

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-1.5 p-6', className)}
    {...props}
  />
));
CardHeader.displayName = 'CardHeader';

const CardTitle = React.forwardRef<
  HTMLHeadingElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, children, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      'text-2xl font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  >
    {children}
  </h3>
));
CardTitle.displayName = 'CardTitle';

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
CardDescription.displayName = 'CardDescription';

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
));
CardContent.displayName = 'CardContent';

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex items-center p-6 pt-0', className)}
    {...props}
  />
));
CardFooter.displayName = 'CardFooter';

export { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle
};


============================
FILE: frontend\src\shared\ui\layout\ErrorBoundary.tsx
============================
import type { ErrorInfo, ReactNode } from 'react';
import React, { Component } from 'react';
import PropTypes from 'prop-types';

import { env } from '@/shared/env';
import { handleReactError } from '@/shared/utils/errorMonitoring';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
  onError?: (error: Error, errorInfo: ErrorInfo) => void;
}

interface State {
  hasError: boolean;
  error?: Error;
}

class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
    
    // Capture error in our monitoring system
    handleReactError(error, errorInfo, errorInfo.componentStack);
    
    // Call custom error handler if provided
    if (this.props.onError) {
      this.props.onError(error, errorInfo);
    }

    // Log to external service in production
    if (env.PROD) {
      // You can integrate with services like Sentry, LogRocket, etc.
      console.error('Production error:', { error, errorInfo });
    }
  }

  render() {
    if (this.state.hasError) {
      // Custom fallback UI
      if (this.props.fallback) {
        return this.props.fallback;
      }

      // Default error UI
      return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
          <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-6 text-center">
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
            </div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">
              Something went wrong
            </h2>
            <p className="text-gray-600 mb-4">
              We&apos;re sorry, but something unexpected happened. Please try refreshing the page.
            </p>
            <button
              onClick={() => { window.location.reload(); }}
              className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
            >
              Refresh Page
            </button>
            {env.DEV && this.state.error && (
              <details className="mt-4 text-left">
                <summary className="cursor-pointer text-sm text-gray-500 hover:text-gray-700">
                  Error Details (Development)
                </summary>
                <pre className="mt-2 text-xs text-red-600 bg-red-50 p-2 rounded overflow-auto">
                  {this.state.error.toString()}
                </pre>
              </details>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

ErrorBoundary.propTypes = {
  children: PropTypes.node.isRequired,
  fallback: PropTypes.node,
  onError: PropTypes.func,
};

export default ErrorBoundary;


============================
FILE: frontend\src\shared\ui\layout\LoginPage.tsx
============================
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';

const LoginPage: React.FC = () => {
  const [email, setEmail] = useState('admin@thatsmartsite.com');
  const [password, setPassword] = useState('');
  const { login, loading, error } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const success = await login({ email, password });
    
    if (success) {
      // Add a small delay to ensure state is updated
      setTimeout(() => {
        navigate('/admin-dashboard');
      }, 100);
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 flex items-center justify-center">
      <div className="max-w-md w-full bg-gray-800 rounded-lg shadow-lg p-8">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-white mb-2">Admin Login</h1>
          <p className="text-gray-400">Sign in to access the admin dashboard</p>
        </div>
        
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
        
        <form className="space-y-6" onSubmit={handleSubmit}>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-300 mb-2">
              Email Address
            </label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="admin@thatsmartsite.com"
              required
            />
          </div>
          
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-300 mb-2">
              Password
            </label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter your password"
              required
            />
          </div>
          
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? 'Signing In...' : 'Sign In'}
          </button>
        </form>
        
        <div className="mt-6 text-center">
          <p className="text-gray-400 text-sm">
            Don't have an account?{' '}
            <Link to="/tenant-onboarding" className="text-blue-400 hover:text-blue-300">
              Apply for tenant access
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;


============================
FILE: frontend\src\shared\ui\layout\NotFoundPage.tsx
============================
import React from 'react';
import { Link } from 'react-router-dom';

const NotFoundPage: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center px-4">
      <div className="max-w-md w-full text-center">
        <div className="mb-8">
          <h1 className="text-9xl font-bold text-gray-300">404</h1>
          <h2 className="text-2xl font-semibold text-gray-700 mb-4">Page Not Found</h2>
          <p className="text-gray-600 mb-8">
            The page you&apos;re looking for doesn&apos;t exist or has been moved.
          </p>
        </div>
        
        <div className="space-y-4">
          <Link
            to="/"
            className="inline-block w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200"
          >
            Go Home
          </Link>
          
          <button
            onClick={() => { window.history.back(); }}
            className="inline-block w-full bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-3 px-6 rounded-lg transition-colors duration-200"
          >
            Go Back
          </button>
        </div>
      </div>
    </div>
  );
};

export default NotFoundPage;


============================
FILE: frontend\src\shared\ui\layout\ProtectedRoute.tsx
============================
import React from 'react';
import { Navigate } from 'react-router-dom';

import { env } from '@/shared/env';
import { useAuth } from '@/shared/hooks/useAuth';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredRole?: 'admin' | 'tenant' | 'user' | ('admin' | 'tenant' | 'user')[];
  fallbackPath?: string;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ 
  children, 
  requiredRole = 'user',
  fallbackPath = '/login'
}) => {
  const { user, loading, isAuthenticated, isAdmin } = useAuth();
  
  // Allow admin access in development mode only (commented out for testing)
  // if (env.DEV) {
  //   // Allow tenant access
  //   if (Array.isArray(requiredRole) && requiredRole.includes('tenant')) {
  //     return <>{children}</>;
  //   }
  //   if (requiredRole === 'tenant') {
  //     return <>{children}</>;
  //   }
  //   // Allow admin access
  //   if (Array.isArray(requiredRole) && requiredRole.includes('admin')) {
  //     return <>{children}</>;
  //   }
  //   if (requiredRole === 'admin') {
  //     return <>{children}</>;
  //   }
  // }
  
  // Show loading while checking authentication
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="text-white text-2xl mb-4">Loading...</div>
        </div>
      </div>
    );
  }
  
  // Check if user is authenticated
  if (!isAuthenticated) {
    return <Navigate to={fallbackPath} replace />;
  }
  
  // Check if user has required role
  if (Array.isArray(requiredRole)) {
    if (requiredRole.includes('admin') && !isAdmin) {
      return <Navigate to={fallbackPath} replace />;
    }
    if (requiredRole.includes('tenant') && isAdmin) {
      return <Navigate to={fallbackPath} replace />;
    }
  } else {
    if (requiredRole === 'admin' && !isAdmin) {
      return <Navigate to={fallbackPath} replace />;
    }
    
    if (requiredRole === 'tenant' && isAdmin) {
      return <Navigate to={fallbackPath} replace />;
    }
  }
  
  return <>{children}</>;
};

export default ProtectedRoute;


============================
FILE: frontend\src\shared\ui\modals\LocationEditModal.tsx
============================
import React from 'react';

import { Modal } from './Modal';

interface LocationEditModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (location: string) => void;
  currentLocation?: string;
}

const LocationEditModal: React.FC<LocationEditModalProps> = ({
  isOpen,
  onClose,
  onSave,
  currentLocation = ''
}) => {
  const [location, setLocation] = React.useState(currentLocation);

  const handleSave = () => {
    onSave(location);
    onClose();
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title="Edit Location"
    >
      <div className="space-y-4">
        <div>
          <label htmlFor="location" className="block text-sm font-medium text-gray-700 mb-1">
            Location
          </label>
          <input
            id="location"
            type="text"
            value={location}
            onChange={(e) => { setLocation(e.target.value); }}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Enter your location"
          />
        </div>
        <div className="flex justify-end space-x-2">
          <button
            onClick={onClose}
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md"
          >
            Cancel
          </button>
          <button
            onClick={handleSave}
            className="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md"
          >
            Save
          </button>
        </div>
      </div>
    </Modal>
  );
};

export default LocationEditModal;


============================
FILE: frontend\src\shared\ui\modals\Modal.tsx
============================
import React, { useEffect, useRef } from 'react';
import { createPortal } from 'react-dom';

import { cn } from '@/shared/utils/cn';

export interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title?: string;
  description?: string;
  children: React.ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';
  closeOnOverlayClick?: boolean;
  closeOnEscape?: boolean;
  showCloseButton?: boolean;
  className?: string;
}

const Modal: React.FC<ModalProps> = ({
  isOpen,
  onClose,
  title,
  description,
  children,
  size = 'md',
  closeOnOverlayClick = true,
  closeOnEscape = true,
  showCloseButton = true,
  className,
}) => {
  const modalRef = useRef<HTMLDivElement>(null);
  const previousActiveElement = useRef<HTMLElement | null>(null);

  const sizes = {
    sm: 'max-w-sm',
    md: 'max-w-md',
    lg: 'max-w-lg',
    xl: 'max-w-xl',
    full: 'max-w-full mx-4',
  };

  // Handle escape key
  useEffect(() => {
    if (!isOpen || !closeOnEscape) return;

    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    document.addEventListener('keydown', handleEscape);
    return () => { document.removeEventListener('keydown', handleEscape); return; };
  }, [isOpen, closeOnEscape, onClose]);

  // Handle focus management
  useEffect(() => {
    if (!isOpen) return;

    // Store the previously focused element
    previousActiveElement.current = document.activeElement as HTMLElement;

    // Focus the modal
    const focusableElements = modalRef.current?.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    const firstElement = focusableElements[0] as HTMLElement;
    firstElement.focus();

    // Prevent body scroll
    document.body.style.overflow = 'hidden';

    return () => {
      // Restore body scroll
      document.body.style.overflow = 'unset';
      
      // Restore focus to previously focused element
      previousActiveElement.current?.focus();
    };
  }, [isOpen]);

  // Handle overlay click
  const handleOverlayClick = (event: React.MouseEvent) => {
    if (closeOnOverlayClick && event.target === event.currentTarget) {
      onClose();
    }
  };

  if (!isOpen) return null;

  return createPortal(
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      {/* Backdrop */}
      <div
        className="fixed inset-0 bg-black/50 backdrop-blur-sm"
        onClick={handleOverlayClick}
        onKeyDown={(e) => {
          if (e.key === 'Escape' && closeOnEscape) {
            onClose();
          }
        }}
        role="button"
        tabIndex={-1}
        aria-label="Close modal"
      />
      
      {/* Modal */}
      <div
        ref={modalRef}
        className={cn(
          'relative bg-background rounded-lg shadow-lg w-full',
          sizes[size],
          className
        )}
        role="dialog"
        aria-modal="true"
        aria-labelledby={title ? 'modal-title' : undefined}
        aria-describedby={description ? 'modal-description' : undefined}
        tabIndex={-1}
      >
        {/* Header */}
        {(title || showCloseButton) && (
          <div className="flex items-center justify-between p-6 border-b border-border">
            <div>
              {title && (
                <h2 id="modal-title" className="text-lg font-semibold text-foreground">
                  {title}
                </h2>
              )}
              {description && (
                <p id="modal-description" className="text-sm text-muted-foreground mt-1">
                  {description}
                </p>
              )}
            </div>
            {showCloseButton && (
              <button
                onClick={onClose}
                className="rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"
                aria-label="Close modal"
              >
                <svg
                  className="h-4 w-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </button>
            )}
          </div>
        )}

        {/* Content */}
        <div className="p-6">
          {children}
        </div>
      </div>
    </div>,
    document.body
  );
};

export { Modal };


============================
FILE: frontend\src\shared\ui\modals\QuoteModal.tsx
============================
import React, { useState } from 'react';

import { Button } from '../buttons/Button';
import { Modal } from './Modal';

interface QuoteModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const QuoteModal: React.FC<QuoteModalProps> = ({ isOpen, onClose }) => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    service: '',
    message: ''
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // TODO: Implement quote submission logic
    onClose();
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title="Request a Quote"
      description="Fill out the form below and we'll get back to you with a personalized quote."
      size="lg"
    >
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
              Full Name *
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleInputChange}
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            />
          </div>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
              Email *
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            />
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">
              Phone Number
            </label>
            <input
              type="tel"
              id="phone"
              name="phone"
              value={formData.phone}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            />
          </div>
          <div>
            <label htmlFor="service" className="block text-sm font-medium text-gray-700 mb-1">
              Service Type
            </label>
            <select
              id="service"
              name="service"
              value={formData.service}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            >
              <option value="">Select a service</option>
              <option value="cleaning">House Cleaning</option>
              <option value="maintenance">Maintenance</option>
              <option value="repair">Repair Service</option>
              <option value="other">Other</option>
            </select>
          </div>
        </div>

        <div>
          <label htmlFor="message" className="block text-sm font-medium text-gray-700 mb-1">
            Additional Details
          </label>
          <textarea
            id="message"
            name="message"
            value={formData.message}
            onChange={handleInputChange}
            rows={4}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            placeholder="Tell us more about your needs..."
          />
        </div>

        <div className="flex justify-end space-x-3 pt-4">
          <Button
            type="button"
            variant="outline"
            onClick={onClose}
          >
            Cancel
          </Button>
          <Button
            type="submit"
            variant="primary"
          >
            Send Quote Request
          </Button>
        </div>
      </form>
    </Modal>
  );
};

export default QuoteModal;


============================
FILE: frontend\src\shared\ui\modals\ServiceAreasModal.tsx
============================
import React, { useMemo } from 'react';
import { createPortal } from 'react-dom';
import { MapPin,X } from 'lucide-react';

interface ServiceArea {
  city: string;
  state: string;
  zip?: string;
  primary?: boolean;
  minimum?: number;
  multiplier?: number;
}

interface ServiceAreasModalProps {
  isOpen: boolean;
  onClose: () => void;
  serviceAreas: ServiceArea[];
  businessName?: string;
}

const ServiceAreasModal: React.FC<ServiceAreasModalProps> = ({
  isOpen,
  onClose,
  serviceAreas,
  businessName = 'Our Business'
}) => {
  // Group service areas by state
  const areasByState = useMemo(() => {
    const grouped: Record<string, ServiceArea[]> = {};
    
    serviceAreas.forEach(area => {
      if (!grouped[area.state]) {
        grouped[area.state] = [];
      }
      grouped[area.state].push(area);
    });
    
    // Sort states alphabetically
    const sortedStates = Object.keys(grouped).sort();
    const result: Record<string, ServiceArea[]> = {};
    sortedStates.forEach(state => {
      // Sort cities within each state, with primary first
      result[state] = grouped[state].sort((a, b) => {
        if (a.primary && !b.primary) return -1;
        if (!a.primary && b.primary) return 1;
        return a.city.localeCompare(b.city);
      });
    });
    
    return result;
  }, [serviceAreas]);

  if (!isOpen) return null;

  const modalContent = (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/70 backdrop-blur-sm">
      <div className="bg-stone-800 rounded-lg shadow-2xl max-w-4xl w-full max-h-[80vh] overflow-hidden border border-stone-700">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-stone-700">
          <div>
            <h2 className="text-2xl font-bold text-white">Service Areas</h2>
            <p className="text-gray-400 mt-1">Where {businessName} provides mobile detailing services</p>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-white transition-colors p-2 hover:bg-stone-700 rounded-lg"
            aria-label="Close modal"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        {/* Content */}
        <div className="p-6 overflow-y-auto max-h-[calc(80vh-120px)]">
          {Object.entries(areasByState).map(([state, areas]) => (
            <div key={state} className="mb-8 last:mb-0">
              {/* State Header */}
              <div className="flex items-center gap-2 mb-4">
                <MapPin className="h-5 w-5 text-orange-400" />
                <h3 className="text-xl font-semibold text-orange-400">
                  {state}
                </h3>
                <span className="text-gray-400 text-sm">
                  ({areas.length} {areas.length === 1 ? 'city' : 'cities'})
                </span>
              </div>

              {/* Cities Grid */}
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 ml-7">
                {areas.map((area, index) => (
                  <div
                    key={`${area.state}-${area.city}-${index}`}
                    className="flex items-center gap-2 text-gray-300 hover:text-white transition-colors"
                  >
                    <div className="w-1.5 h-1.5 rounded-full bg-orange-400 flex-shrink-0"></div>
                    <span className="text-sm">
                      {area.city}
                      {area.primary && (
                        <span className="ml-2 text-xs text-orange-400 font-medium">
                          Primary
                        </span>
                      )}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          ))}

          {serviceAreas.length === 0 && (
            <div className="text-center py-12">
              <MapPin className="h-12 w-12 text-gray-600 mx-auto mb-4" />
              <p className="text-gray-400">No service areas configured</p>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="p-6 border-t border-stone-700 bg-stone-900">
          <div className="flex items-center justify-between">
            <p className="text-sm text-gray-400">
              {serviceAreas.length} total service {serviceAreas.length === 1 ? 'area' : 'areas'}
            </p>
            <button
              onClick={onClose}
              className="px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors font-medium"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  return createPortal(modalContent, document.body);
};

export default ServiceAreasModal;



============================
FILE: frontend\src\shared\ui\navigation\FooterLocations.tsx
============================
import React, { useState } from 'react';

import { useData } from '@/features/header';

import ServiceAreasModal from '../modals/ServiceAreasModal';

interface ServiceArea {
  city: string;
  state: string;
  zip?: string;
  primary?: boolean;
  minimum?: number;
  multiplier?: number;
}

interface FooterLocationsProps {
  serviceAreas?: ServiceArea[];
}

const FooterLocations: React.FC<FooterLocationsProps> = ({ serviceAreas }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  
  // Get tenant data - component should always be used in a valid context
  const tenantData = useData();
  
  // Use tenant service areas if available, otherwise show default message
  const shouldUseTenantData = tenantData.isTenant && serviceAreas && serviceAreas.length > 0;
  
  // Always show first 4 cities
  const displayAreas = shouldUseTenantData ? serviceAreas.slice(0, 4) : [];
  const hasMore = shouldUseTenantData && serviceAreas.length > 4;
  
  const handleViewMore = () => {
    setIsModalOpen(true);
  };
  
  return (
    <>
      <div className="text-center md:text-right">
        <h3 className="font-bold text-orange-400 text-xl mb-6">Service Areas</h3>
        <div className="flex flex-col space-y-3">
          {shouldUseTenantData ? (
            <>
              {displayAreas.map((area, index) => (
                <div key={index} className="text-white text-lg">
                  {area.city}, {area.state}
                </div>
              ))}
              {hasMore && (
                <div className="flex justify-center md:justify-end">
                  <button
                    onClick={handleViewMore}
                    className="text-orange-400 hover:text-orange-300 transition-colors duration-200 text-lg bg-transparent border-none p-0 font-inherit cursor-pointer"
                  >
                    View More
                  </button>
                </div>
              )}
            </>
          ) : (
            <div className="text-white text-lg">
              Multiple Service Areas
            </div>
          )}
        </div>
      </div>

      {/* Service Areas Modal */}
      {shouldUseTenantData && (
        <ServiceAreasModal
          isOpen={isModalOpen}
          onClose={() => { setIsModalOpen(false); }}
          serviceAreas={serviceAreas}
          businessName={tenantData.businessName}
        />
      )}
    </>
  );
};

export default FooterLocations;


============================
FILE: frontend\src\shared\ui\ReviewsSummary.tsx
============================
import React from 'react';
import { Star, Users } from 'lucide-react';

import { useReviewsRating } from '@/features/reviews/hooks';
import { useReviewsAvailability } from '@/shared/hooks';
import { useDataOptional } from '@/shared/hooks/useData';
import type { ReviewsSummaryProps } from '@/shared/types/reviews';

const ReviewsSummary: React.FC<ReviewsSummaryProps> = ({ 
  averageRating: propAverageRating, 
  totalReviews: propTotalReviews,
  googleBusinessUrl: propGoogleBusinessUrl,
  className = '',
  variant = 'default'
}) => {
  // Check if in preview mode
  const data = useDataOptional();
  const isPreview = data?.isPreview || false;
  
  // Check if reviews are available (unless in preview mode)
  const hasReviews = useReviewsAvailability();
  
  // Get data from database (with fallbacks to site.json)
  const dbData = useReviewsRating();
  
  // Use props if provided, otherwise use database/site data
  // Ensure averageRating is a number (convert if string)
  const averageRating = typeof propAverageRating === 'number' 
    ? propAverageRating 
    : (typeof dbData.averageRating === 'number' 
      ? dbData.averageRating 
      : parseFloat(String(dbData.averageRating)) || 4.9);
      
  // Ensure totalReviews is a number (convert if string)
  const totalReviews = typeof propTotalReviews === 'number'
    ? propTotalReviews
    : (typeof dbData.totalReviews === 'number'
      ? dbData.totalReviews
      : parseInt(String(dbData.totalReviews), 10) || 112);
      
  const googleBusinessUrl = propGoogleBusinessUrl ?? dbData.googleBusinessUrl;
  const isCompact = variant === 'compact';
  
  // Don't render if there are no reviews (unless in preview mode)
  if (!isPreview && !hasReviews) {
    return null;
  }
  
  const containerClasses = isCompact 
    ? 'flex items-center justify-center gap-4'
    : 'flex items-center justify-center gap-8';
    
  const textSize = isCompact ? 'text-lg' : 'text-2xl';
  const iconSize = isCompact ? 'w-4 h-4' : 'w-6 h-6';
  const usersIconSize = isCompact ? 'w-4 h-4' : 'w-5 h-5';
  const dividerHeight = isCompact ? 'h-6' : 'h-8';

  return (
    <div className={`${containerClasses} ${className}`}>
      {/* Rating Section - Clickable (or span in preview mode) */}
      {isPreview ? (
        <span className="flex items-center gap-2 cursor-pointer">
          <Star className={`${iconSize} text-orange-400 fill-current`} />
          <span className={`${textSize} font-bold text-white`}>
            {averageRating.toFixed(1)}
          </span>
          <span className="text-gray-300">average</span>
        </span>
      ) : (
        <a 
          href={googleBusinessUrl}
          target="_blank"
          rel="noopener noreferrer"
          className="flex items-center gap-2 hover:opacity-80 transition-opacity duration-200 cursor-pointer"
        >
          <Star className={`${iconSize} text-orange-400 fill-current`} />
          <span className={`${textSize} font-bold text-white`}>
            {averageRating.toFixed(1)}
          </span>
          <span className="text-gray-300">average</span>
        </a>
      )}
      
      {/* Vertical Divider */}
      <div className={`w-px ${dividerHeight} bg-stone-600`}></div>
      
      {/* Reviews Count Section - Clickable (or span in preview mode) */}
      {isPreview ? (
        <span className="flex items-center gap-2 cursor-pointer">
          <Users className={`${usersIconSize} text-orange-400`} />
          <span className={`${textSize} font-bold text-white`}>
            {totalReviews.toLocaleString()}
          </span>
          <span className="text-gray-300">reviews</span>
        </span>
      ) : (
        <a 
          href={googleBusinessUrl}
          target="_blank"
          rel="noopener noreferrer"
          className="flex items-center gap-2 hover:opacity-80 transition-opacity duration-200 cursor-pointer"
        >
          <Users className={`${usersIconSize} text-orange-400`} />
          <span className={`${textSize} font-bold text-white`}>
            {totalReviews.toLocaleString()}
          </span>
          <span className="text-gray-300">reviews</span>
        </a>
      )}
    </div>
  );
};

export default ReviewsSummary;


============================
FILE: frontend\src\shared\ui\utility\Spinner.tsx
============================
import React from 'react';

import { cn } from '@/shared/utils/cn';

export interface SpinnerProps extends React.HTMLAttributes<HTMLDivElement> {
  size?: 'sm' | 'md' | 'lg' | 'xl';
  variant?: 'default' | 'primary' | 'secondary' | 'muted';
  text?: string;
}

const Spinner: React.FC<SpinnerProps> = ({
  className,
  size = 'md',
  variant = 'default',
  text,
  ...props
}) => {
  const sizes = {
    sm: 'h-4 w-4',
    md: 'h-6 w-6',
    lg: 'h-8 w-8',
    xl: 'h-12 w-12',
  };

  const variants = {
    default: 'text-foreground',
    primary: 'text-primary',
    secondary: 'text-secondary-foreground',
    muted: 'text-muted-foreground',
  };

  return (
    <div
      className={cn('flex flex-col items-center justify-center', className)}
      {...props}
    >
      <svg
        className={cn(
          'animate-spin',
          sizes[size],
          variants[variant]
        )}
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
      >
        <circle
          className="opacity-25"
          cx="12"
          cy="12"
          r="10"
          stroke="currentColor"
          strokeWidth="4"
        />
        <path
          className="opacity-75"
          fill="currentColor"
          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
        />
      </svg>
      {text && (
        <p className="mt-2 text-sm text-muted-foreground">{text}</p>
      )}
    </div>
  );
};

export { Spinner };


============================
FILE: frontend\src\shared\ui\utility\toast.tsx
============================
import React, { createContext, useCallback, useState } from 'react';
import { createPortal } from 'react-dom';

import { cn } from '@/shared/utils/cn';

import { Button } from '../buttons/Button';

export interface ToastOptions {
  id?: string;
  title?: string;
  description?: string;
  variant?: 'default' | 'success' | 'error' | 'warning' | 'info';
  duration?: number;
  action?: {
    label: string;
    onClick: () => void;
  };
}

export interface ToastProps extends ToastOptions {
  id: string;
  onClose: () => void;
}

export const Toast: React.FC<ToastProps> = ({
  title,
  description,
  variant = 'default',
  action,
  onClose,
}) => {
  const variants = {
    default: 'bg-background border-border text-foreground',
    success: 'bg-green-50 border-green-200 text-green-900 dark:bg-green-900 dark:border-green-700 dark:text-green-100',
    error: 'bg-red-50 border-red-200 text-red-900 dark:bg-red-900 dark:border-red-700 dark:text-red-100',
    warning: 'bg-yellow-50 border-yellow-200 text-yellow-900 dark:bg-yellow-900 dark:border-yellow-700 dark:text-yellow-100',
    info: 'bg-blue-50 border-blue-200 text-blue-900 dark:bg-blue-900 dark:border-blue-700 dark:text-blue-100',
  };

  const icons = {
    default: null,
    success: (
      <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
      </svg>
    ),
    error: (
      <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
      </svg>
    ),
    warning: (
      <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
        <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.725-1.36 3.49 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
      </svg>
    ),
    info: (
      <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
      </svg>
    ),
  };

  return (
    <div
      className={cn(
        'pointer-events-auto w-full max-w-sm overflow-hidden rounded-lg border shadow-lg',
        variants[variant]
      )}
    >
      <div className="p-4">
        <div className="flex items-start">
          <div className="flex-shrink-0">
            {icons[variant]}
          </div>
          <div className="ml-3 w-0 flex-1">
            {title && (
              <p className="text-sm font-medium">{title}</p>
            )}
            {description && (
              <p className="mt-1 text-sm opacity-90">{description}</p>
            )}
            {action && (
              <div className="mt-3">
                <Button
                  onClick={action.onClick}
                  variant="ghost"
                  size="sm"
                  className="text-sm font-medium underline hover:no-underline p-0 h-auto"
                >
                  {action.label}
                </Button>
              </div>
            )}
          </div>
          <div className="ml-4 flex-shrink-0 flex">
            <Button
              onClick={onClose}
              variant="ghost"
              size="sm"
              className="inline-flex rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 p-1"
            >
              <span className="sr-only">Close</span>
              <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
              </svg>
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

interface ToastContextType {
  toasts: ToastProps[];
  toast: (options: ToastOptions) => string;
  dismiss: (id: string) => void;
  dismissAll: () => void;
}

export const ToastContext = createContext<ToastContextType | undefined>(undefined);

export const ToastProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [toasts, setToasts] = useState<ToastProps[]>([]);

  const toast = useCallback((options: ToastOptions) => {
    const id = options.id || Math.random().toString(36).substring(2, 11);
    const duration = options.duration || 5000;

    const newToast: ToastProps = {
      ...options,
      id,
      onClose: () => { dismiss(id); return; },
    };

    setToasts(prev => [...prev, newToast]);

    if (duration > 0) {
      setTimeout(() => {
        dismiss(id);
      }, duration);
    }

    return id;
  }, [dismiss]);

  const dismiss = useCallback((id: string) => {
    setToasts(prev => prev.filter(toast => toast.id !== id));
  }, []);

  const dismissAll = useCallback(() => {
    setToasts([]);
  }, []);

  return (
    <ToastContext.Provider value={{ toasts, toast, dismiss, dismissAll }}>
      {children}
      <ToastContainer toasts={toasts} />
    </ToastContext.Provider>
  );
};

const ToastContainer: React.FC<{ toasts: ToastProps[] }> = ({ toasts }) => {
  if (toasts.length === 0) return null;

  return createPortal(
    <div className="pointer-events-none fixed inset-0 z-50 flex items-end px-4 py-6 sm:items-start sm:p-6">
      <div className="flex w-full flex-col items-center space-y-4 sm:items-end">
        {toasts.map(toast => (
          <Toast key={toast.id} {...toast} />
        ))}
      </div>
    </div>,
    document.body
  );
};



============================
FILE: frontend\src\shared\useRouterDebug.ts
============================
import { useInRouterContext } from 'react-router-dom';
import { useEffect } from 'react';

export function useRouterDebug(name: string) {
  const inside = useInRouterContext();
  useEffect(() => console.log(`[RouterDebug] ${name} in router?`, inside), [inside]);
}


============================
FILE: frontend\src\shared\utils\assetLocator.md
============================
# Tenant Asset Locator

**Purpose:** Centralized helper for constructing tenant asset URLs with intelligent fallbacks. Eliminates brittle string concatenation throughout the codebase.

## The Problem

Before this utility, asset paths were constructed manually everywhere:

```tsx
// ❌ Brittle, inconsistent, hard to maintain
const logoUrl = `/${industry}/icons/logo.webp`;
const heroUrl = `/mobile-detailing/images/hero/hero1.png`;
const avatarUrl = `/uploads/avatars/${filename}`;
const ogImage = affiliate.logo_url || `/${vertical}/icons/logo.png`;
```

**Issues:**
- String concatenation is error-prone
- No consistent fallback strategy
- Hard to change asset location strategy later
- Different patterns across features
- No type safety

## The Solution

```tsx
import { getTenantAssetUrl } from '@/shared/utils';

// ✅ Clean, consistent, maintainable
const logoUrl = getTenantAssetUrl({ 
  vertical: 'mobile-detailing', 
  type: 'logo' 
});

const heroUrl = getTenantAssetUrl({ 
  vertical: 'mobile-detailing', 
  type: 'hero-1' 
});

const avatarUrl = getTenantAssetUrl({ 
  vertical: 'mobile-detailing', 
  type: 'avatar',
  filename: 'user-123.jpg'
});
```

## API Reference

### `getTenantAssetUrl(options)`

Generate a single asset URL with intelligent fallback logic.

**Priority:**
1. Custom URL (if provided via database/config)
2. Tenant-specific uploads (if `tenantId` provided)
3. Vertical default assets (fallback)

**Options:**

```typescript
interface AssetLocatorOptions {
  tenantId?: string;              // Tenant ID - enables tenant uploads
  vertical: Vertical;             // Industry vertical (required)
  type: AssetType;                // Asset type (required)
  filename?: string;              // Custom filename
  extension?: AssetExtension;     // File extension (auto-detected)
  useTenantUploads?: boolean;     // Use tenant uploads dir (default: true)
  forceVerticalDefault?: boolean; // Skip tenant check (default: false)
}
```

**Asset Types:**

- `'logo'` - Primary brand logo
- `'logo-dark'` - Dark mode variant
- `'logo-light'` - Light mode variant
- `'favicon'` - Browser favicon
- `'hero'`, `'hero-1'`, `'hero-2'`, `'hero-3'` - Hero images
- `'og-image'` - Open Graph social share image
- `'twitter-image'` - Twitter Card image
- `'avatar'` - User/review avatar
- `'gallery'` - Gallery/portfolio images

### Examples

#### Basic logo (vertical default)
```tsx
getTenantAssetUrl({ 
  vertical: 'mobile-detailing', 
  type: 'logo' 
})
// => '/mobile-detailing/icons/logo.webp'
```

#### Tenant-specific logo
```tsx
getTenantAssetUrl({ 
  tenantId: 'jps',
  vertical: 'mobile-detailing', 
  type: 'logo' 
})
// => '/uploads/jps/icons/logo.webp'
```

#### Specific hero image
```tsx
getTenantAssetUrl({ 
  vertical: 'mobile-detailing', 
  type: 'hero-2' 
})
// => '/mobile-detailing/hero/hero2.webp'
```

#### Avatar with custom filename
```tsx
getTenantAssetUrl({ 
  vertical: 'mobile-detailing', 
  type: 'avatar',
  filename: 'user-123.jpg'
})
// => '/uploads/avatars/user-123.jpg'
```

#### Custom extension
```tsx
getTenantAssetUrl({ 
  vertical: 'mobile-detailing', 
  type: 'logo',
  extension: 'svg'
})
// => '/mobile-detailing/icons/logo.svg'
```

#### Force vertical default
```tsx
getTenantAssetUrl({ 
  tenantId: 'jps',
  vertical: 'mobile-detailing', 
  type: 'logo',
  forceVerticalDefault: true 
})
// => '/mobile-detailing/icons/logo.webp' (skips tenant check)
```

### `getTenantAssetUrls(options)`

Get multiple asset URLs at once.

```tsx
getTenantAssetUrls({ 
  vertical: 'mobile-detailing', 
  types: ['hero-1', 'hero-2', 'hero-3'] 
})
// => [
//   '/mobile-detailing/hero/hero1.webp',
//   '/mobile-detailing/hero/hero2.webp',
//   '/mobile-detailing/hero/hero3.webp'
// ]
```

### `getTenantLogoUrls(options)`

Get all logo variants (default, dark, light) at once.

```tsx
getTenantLogoUrls({ 
  vertical: 'mobile-detailing' 
})
// => {
//   default: '/mobile-detailing/icons/logo.webp',
//   dark: '/mobile-detailing/icons/logo-dark.webp',
//   light: '/mobile-detailing/icons/logo-light.webp'
// }
```

### Helper Functions

#### `hasFileExtension(filename)`
```tsx
hasFileExtension('photo.jpg')  // => true
hasFileExtension('logo')       // => false
```

#### `normalizeAssetUrl(url)`
```tsx
normalizeAssetUrl('images/logo.png')              // => '/images/logo.png'
normalizeAssetUrl('/images/logo.png')             // => '/images/logo.png'
normalizeAssetUrl('https://cdn.com/logo.png')     // => 'https://cdn.com/logo.png'
```

## URL Patterns

### Tenant-Specific Uploads
```
/uploads/{tenantId}/{subdirectory}/{filename}
/uploads/jps/icons/logo.webp
/uploads/jps/hero/hero1.webp
```

**Exception:** Avatars use flat structure:
```
/uploads/avatars/{filename}
/uploads/avatars/user-123.jpg
```

### Vertical Defaults
```
/{vertical}/{subdirectory}/{filename}
/mobile-detailing/icons/logo.webp
/mobile-detailing/hero/hero1.webp
/mobile-detailing/social/og-image.webp
```

### Subdirectory Mapping

| Asset Type | Subdirectory |
|------------|--------------|
| `logo`, `logo-dark`, `logo-light`, `favicon` | `icons` |
| `hero`, `hero-1`, `hero-2`, `hero-3` | `hero` |
| `og-image`, `twitter-image` | `social` |
| `avatar` | `avatars` |
| `gallery` | `gallery` |

## Migration Guide

### Before
```tsx
// Scattered throughout codebase
const logoUrl = affiliate.logo_url || `/${industry}/icons/logo.webp`;
const heroImage = `/mobile-detailing/images/hero/hero1.png`;
const avatar = dbReview.avatar_filename 
  ? `/uploads/avatars/${dbReview.avatar_filename}` 
  : undefined;
```

### After
```tsx
import { getTenantAssetUrl } from '@/shared/utils';

const logoUrl = affiliate.logo_url || getTenantAssetUrl({
  tenantId: affiliate.id?.toString(),
  vertical: industry,
  type: 'logo',
});

const heroImage = getTenantAssetUrl({
  vertical: 'mobile-detailing',
  type: 'hero-1',
});

const avatar = dbReview.avatar_filename 
  ? getTenantAssetUrl({
      vertical: 'mobile-detailing',
      type: 'avatar',
      filename: dbReview.avatar_filename,
    })
  : undefined;
```

## Benefits

1. **DRY** - No repeated string concatenation
2. **Type-safe** - Full TypeScript support
3. **Consistent** - Same pattern everywhere
4. **Maintainable** - Change location strategy in one place
5. **Fallback logic** - Built-in tenant → vertical fallback
6. **Future-proof** - Easy to add CDN support later

## Testing

Full unit test coverage in `__tests__/assetLocator.test.ts`:
- ✅ Vertical defaults
- ✅ Tenant-specific uploads
- ✅ Force vertical default
- ✅ Hero images
- ✅ Avatars with custom filenames
- ✅ Custom extensions
- ✅ Logo variants
- ✅ Social media images
- ✅ Multiple URLs at once
- ✅ URL normalization

## Future Enhancements

- CDN support (prepend CDN URL)
- Responsive image srcsets
- Image optimization hints
- WebP/AVIF fallbacks
- Lazy loading attributes



============================
FILE: frontend\src\shared\utils\assetLocator.ts
============================
/**
 * Tenant Asset Locator
 * 
 * Centralized helper for constructing tenant asset URLs with fallbacks.
 * Eliminates brittle string concatenation throughout the codebase.
 * 
 * Pure function - no IO, no network calls, no DOM access.
 */

import type { Vertical } from '@/shared/types';

/**
 * Supported asset types for tenant branding and content
 */
export type AssetType =
  | 'logo'           // Primary brand logo
  | 'logo-dark'      // Dark mode variant
  | 'logo-light'     // Light mode variant
  | 'favicon'        // Browser favicon
  | 'hero'           // Hero/banner images
  | 'hero-1'         // Specific hero image (numbered)
  | 'hero-2'
  | 'hero-3'
  | 'og-image'       // Open Graph social share image
  | 'twitter-image'  // Twitter Card image
  | 'avatar'         // User/review avatar
  | 'gallery';       // Gallery/portfolio images

/**
 * File extension preferences
 */
export type AssetExtension = 'webp' | 'png' | 'jpg' | 'jpeg' | 'svg' | 'gif';

/**
 * Options for asset URL generation
 */
export interface AssetLocatorOptions {
  /** Tenant ID (e.g., 'jps', '123') - if provided, checks uploads first */
  tenantId?: string;
  
  /** Vertical/industry (e.g., 'mobile-detailing') - used for fallback paths */
  vertical: Vertical;
  
  /** Asset type to locate */
  type: AssetType;
  
  /** Custom filename (useful for avatars, gallery images) */
  filename?: string;
  
  /** Preferred file extension (default: 'webp' for most, 'svg' for favicon) */
  extension?: AssetExtension;
  
  /** Use tenant-specific uploads directory (default: true if tenantId provided) */
  useTenantUploads?: boolean;
  
  /** Force fallback to vertical default (skip tenant uploads check) */
  forceVerticalDefault?: boolean;
}

/**
 * Get the default extension for a given asset type
 */
function getDefaultExtension(type: AssetType): AssetExtension {
  if (type === 'favicon') return 'svg';
  if (type.startsWith('logo')) return 'webp';
  return 'webp';
}

/**
 * Get the subdirectory path for a given asset type
 */
function getAssetSubdirectory(type: AssetType): string {
  if (type === 'avatar') return 'avatars';
  if (type === 'gallery') return 'gallery';
  if (type.startsWith('hero')) return 'hero';
  if (type.startsWith('logo') || type === 'favicon') return 'icons';
  if (type === 'og-image' || type === 'twitter-image') return 'social';
  return 'images';
}

/**
 * Get the filename for a given asset type
 */
function getAssetFilename(type: AssetType, customFilename?: string, extension?: AssetExtension): string {
  // If custom filename provided (common for avatars, gallery), use it
  if (customFilename) {
    // If filename already has extension, use as-is
    if (/\.(webp|png|jpg|jpeg|svg|gif)$/i.test(customFilename)) {
      return customFilename;
    }
    // Otherwise append extension
    return `${customFilename}.${extension || 'webp'}`;
  }
  
  // Standard filenames by type
  const ext = extension || getDefaultExtension(type);
  
  switch (type) {
    case 'logo':
      return `logo.${ext}`;
    case 'logo-dark':
      return `logo-dark.${ext}`;
    case 'logo-light':
      return `logo-light.${ext}`;
    case 'favicon':
      return `favicon.${ext}`;
    case 'hero':
    case 'hero-1':
      return `hero1.${ext}`;
    case 'hero-2':
      return `hero2.${ext}`;
    case 'hero-3':
      return `hero3.${ext}`;
    case 'og-image':
      return `og-image.${ext}`;
    case 'twitter-image':
      return `twitter-image.${ext}`;
    default:
      return `${type}.${ext}`;
  }
}

/**
 * Generate tenant-specific upload URL
 * Format: /uploads/{tenantId}/{subdirectory}/{filename}
 */
function getTenantUploadUrl(
  tenantId: string,
  type: AssetType,
  filename: string
): string {
  const subdirectory = getAssetSubdirectory(type);
  
  // For avatars, uploads structure is: /uploads/avatars/{filename}
  if (type === 'avatar') {
    return `/uploads/avatars/${filename}`;
  }
  
  // For other assets: /uploads/{tenantId}/{subdirectory}/{filename}
  return `/uploads/${tenantId}/${subdirectory}/${filename}`;
}

/**
 * Generate vertical default URL
 * Format: /{vertical}/{subdirectory}/{filename}
 */
function getVerticalDefaultUrl(
  vertical: Vertical,
  type: AssetType,
  filename: string
): string {
  const subdirectory = getAssetSubdirectory(type);
  return `/${vertical}/${subdirectory}/${filename}`;
}

/**
 * Get tenant asset URL with intelligent fallback logic
 * 
 * Priority:
 * 1. Custom URL (if provided via database/config)
 * 2. Tenant-specific uploads (if tenantId provided and useTenantUploads=true)
 * 3. Vertical default assets (fallback)
 * 
 * @example
 * // Get tenant logo (checks uploads, falls back to vertical)
 * getTenantAssetUrl({ tenantId: 'jps', vertical: 'mobile-detailing', type: 'logo' })
 * // => '/uploads/jps/icons/logo.webp' or '/{vertical}/icons/logo.webp'
 * 
 * @example
 * // Get specific hero image
 * getTenantAssetUrl({ vertical: 'mobile-detailing', type: 'hero-2' })
 * // => '/mobile-detailing/hero/hero2.webp'
 * 
 * @example
 * // Get avatar with custom filename
 * getTenantAssetUrl({ vertical: 'mobile-detailing', type: 'avatar', filename: 'user-123.jpg' })
 * // => '/uploads/avatars/user-123.jpg'
 * 
 * @example
 * // Force vertical default (skip tenant check)
 * getTenantAssetUrl({ 
 *   tenantId: 'jps', 
 *   vertical: 'mobile-detailing', 
 *   type: 'logo',
 *   forceVerticalDefault: true 
 * })
 * // => '/mobile-detailing/icons/logo.webp'
 */
export function getTenantAssetUrl(options: AssetLocatorOptions): string {
  const {
    tenantId,
    vertical,
    type,
    filename: customFilename,
    extension,
    useTenantUploads = true,
    forceVerticalDefault = false,
  } = options;
  
  // Generate filename
  const filename = getAssetFilename(type, customFilename, extension);
  
  // If forcing vertical default, skip tenant uploads
  if (forceVerticalDefault) {
    return getVerticalDefaultUrl(vertical, type, filename);
  }
  
  // Avatars always use /uploads/avatars/ (no tenant-specific directory)
  if (type === 'avatar') {
    return `/uploads/avatars/${filename}`;
  }
  
  // If tenant ID provided and uploads enabled, use tenant-specific path
  if (tenantId && useTenantUploads) {
    return getTenantUploadUrl(tenantId, type, filename);
  }
  
  // Fallback to vertical default
  return getVerticalDefaultUrl(vertical, type, filename);
}

/**
 * Get multiple asset URLs at once (useful for responsive images, variants)
 * 
 * @example
 * // Get all hero images
 * getTenantAssetUrls({ 
 *   vertical: 'mobile-detailing', 
 *   types: ['hero-1', 'hero-2', 'hero-3'] 
 * })
 * // => ['/mobile-detailing/hero/hero1.webp', '/mobile-detailing/hero/hero2.webp', ...]
 */
export function getTenantAssetUrls(
  options: Omit<AssetLocatorOptions, 'type'> & { types: AssetType[] }
): string[] {
  const { types, ...baseOptions } = options;
  return types.map(type => getTenantAssetUrl({ ...baseOptions, type }));
}

/**
 * Get logo with automatic dark/light mode fallback
 * Returns an object with all logo variants
 */
export interface LogoUrls {
  default: string;
  dark?: string;
  light?: string;
}

export function getTenantLogoUrls(
  options: Omit<AssetLocatorOptions, 'type'>
): LogoUrls {
  return {
    default: getTenantAssetUrl({ ...options, type: 'logo' }),
    dark: getTenantAssetUrl({ ...options, type: 'logo-dark' }),
    light: getTenantAssetUrl({ ...options, type: 'logo-light' }),
  };
}

/**
 * Check if a filename already includes an extension
 */
export function hasFileExtension(filename: string): boolean {
  return /\.(webp|png|jpg|jpeg|svg|gif|bmp|ico)$/i.test(filename);
}

/**
 * Ensure a URL has proper leading slash
 */
export function normalizeAssetUrl(url: string): string {
  if (!url) return '';
  if (url.startsWith('http://') || url.startsWith('https://')) return url;
  return url.startsWith('/') ? url : `/${url}`;
}



============================
FILE: frontend\src\shared\utils\cn.ts
============================
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

/**
 * Utility function to merge Tailwind CSS classes
 * Combines clsx for conditional classes and tailwind-merge for deduplication
 */
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}


============================
FILE: frontend\src\shared\utils\currencyFormatter.ts
============================
/**
 * Currency Formatting Utilities
 * Centralized currency formatting functions for consistent display across the app
 */

/**
 * Format a number as USD currency
 * @param amount - The amount to format
 * @param options - Optional formatting options
 * @returns Formatted currency string (e.g., "$1,234.56")
 */
export function formatCurrency(
  amount: number,
  options: {
    showCents?: boolean;
    showSymbol?: boolean;
  } = {}
): string {
  const { showCents = true, showSymbol = true } = options;
  
  const formatted = amount.toLocaleString('en-US', {
    minimumFractionDigits: showCents ? 2 : 0,
    maximumFractionDigits: showCents ? 2 : 0,
  });
  
  return showSymbol ? `$${formatted}` : formatted;
}

/**
 * Format a price for display (always shows cents)
 * @param price - The price to format
 * @returns Formatted price string (e.g., "$1,234.56")
 */
export function formatPrice(price: number): string {
  return formatCurrency(price, { showCents: true, showSymbol: true });
}

/**
 * Format a price without the dollar sign
 * @param price - The price to format
 * @returns Formatted price string without symbol (e.g., "1,234.56")
 */
export function formatPriceNoSymbol(price: number): string {
  return formatCurrency(price, { showCents: true, showSymbol: false });
}

/**
 * Format a whole dollar amount (no cents)
 * @param amount - The amount to format
 * @returns Formatted amount string (e.g., "$1,234")
 */
export function formatDollars(amount: number): string {
  return formatCurrency(amount, { showCents: false, showSymbol: true });
}

/**
 * Parse a currency string to a number
 * @param currencyString - String like "$1,234.56" or "1234.56"
 * @returns Numeric value
 */
export function parseCurrency(currencyString: string): number {
  // Remove all non-numeric characters except decimal point and minus
  const cleaned = currencyString.replace(/[^0-9.-]/g, '');
  return parseFloat(cleaned) || 0;
}

/**
 * Format a percentage
 * @param value - The decimal value (e.g., 0.15 for 15%)
 * @param decimals - Number of decimal places to show
 * @returns Formatted percentage string (e.g., "15%")
 */
export function formatPercentage(value: number, decimals: number = 0): string {
  const percentage = value * 100;
  return `${percentage.toFixed(decimals)}%`;
}

/**
 * Format a discount percentage
 * @param value - The decimal value (e.g., 0.15 for 15% off)
 * @returns Formatted discount string (e.g., "15% off")
 */
export function formatDiscount(value: number): string {
  return `${formatPercentage(value)} off`;
}

/**
 * Calculate and format a price with tax
 * @param basePrice - The base price before tax
 * @param taxRate - The tax rate as a decimal (e.g., 0.08 for 8%)
 * @returns Object with formatted base, tax, and total
 */
export function formatPriceWithTax(basePrice: number, taxRate: number): {
  base: string;
  tax: string;
  total: string;
  taxAmount: number;
  totalAmount: number;
} {
  const taxAmount = basePrice * taxRate;
  const totalAmount = basePrice + taxAmount;
  
  return {
    base: formatPrice(basePrice),
    tax: formatPrice(taxAmount),
    total: formatPrice(totalAmount),
    taxAmount,
    totalAmount,
  };
}

/**
 * Format a price range
 * @param minPrice - Minimum price
 * @param maxPrice - Maximum price
 * @returns Formatted price range string (e.g., "$100 - $200")
 */
export function formatPriceRange(minPrice: number, maxPrice: number): string {
  if (minPrice === maxPrice) {
    return formatPrice(minPrice);
  }
  return `${formatPrice(minPrice)} - ${formatPrice(maxPrice)}`;
}

/**
 * Format a compact currency amount (e.g., "$1.2K", "$1.5M")
 * @param amount - The amount to format
 * @returns Compact formatted string
 */
export function formatCurrencyCompact(amount: number): string {
  if (amount >= 1000000) {
    return `$${(amount / 1000000).toFixed(1)}M`;
  }
  if (amount >= 1000) {
    return `$${(amount / 1000).toFixed(1)}K`;
  }
  return formatPrice(amount);
}



============================
FILE: frontend\src\shared\utils\dateFormatter.ts
============================
/**
 * Date Formatting Utilities
 * Centralized date formatting functions to ensure consistency across the app
 */

/**
 * Get today's date as YYYY-MM-DD string (local timezone)
 */
export function getToday(): string {
  const now = new Date();
  return formatDateToYYYYMMDD(now);
}

/**
 * Parse YYYY-MM-DD string as local date (avoids timezone issues)
 * @param dateString - Date string in YYYY-MM-DD format
 * @returns Date object in local timezone
 */
export function parseLocalDate(dateString: string): Date {
  const [year = 0, month = 1, day = 1] = dateString.split('-').map(Number);
  return new Date(year, month - 1, day);
}

/**
 * Format Date object as YYYY-MM-DD string
 * @param date - Date object
 * @returns Date string in YYYY-MM-DD format
 */
export function formatDateToYYYYMMDD(date: Date): string {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
}

/**
 * Format date for display (e.g., "January 15, 2025")
 * @param date - Date object or YYYY-MM-DD string
 * @param options - Intl.DateTimeFormatOptions
 * @returns Formatted date string
 */
export function formatDateForDisplay(
  date: Date | string,
  options: Intl.DateTimeFormatOptions = {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }
): string {
  const dateObj = typeof date === 'string' ? parseLocalDate(date) : date;
  return dateObj.toLocaleDateString('en-US', options);
}

/**
 * Format date for short display (e.g., "Jan 15, 2025")
 * @param date - Date object or YYYY-MM-DD string
 * @returns Short formatted date string
 */
export function formatDateShort(date: Date | string): string {
  return formatDateForDisplay(date, {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
}

/**
 * Format date for compact display (e.g., "1/15/25")
 * @param date - Date object or YYYY-MM-DD string
 * @returns Compact formatted date string
 */
export function formatDateCompact(date: Date | string): string {
  return formatDateForDisplay(date, {
    year: '2-digit',
    month: 'numeric',
    day: 'numeric'
  });
}

/**
 * Get month and year display (e.g., "January 2025")
 * @param date - Date object or YYYY-MM-DD string
 * @returns Month and year string
 */
export function formatMonthYear(date: Date | string): string {
  return formatDateForDisplay(date, {
    year: 'numeric',
    month: 'long'
  });
}

/**
 * Get week dates (Monday to Sunday) for a given date
 * @param dateString - Date string in YYYY-MM-DD format
 * @returns Array of 7 date strings (Monday to Sunday)
 */
export function getWeekDates(dateString: string): string[] {
  const parts = dateString.split('-').map(Number);
  const year = parts[0] ?? 0;
  const month = parts[1] ?? 1;
  const day = parts[2] ?? 1;
  
  const selectedDate = new Date(year, month - 1, day);
  const dayOfWeek = selectedDate.getDay();
  
  // Calculate offset to Monday (0=Sunday, 1=Monday, etc.)
  const mondayOffset = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;
  
  const weekDates: string[] = [];
  for (let i = 0; i < 7; i++) {
    const weekDate = new Date(year, month - 1, day + mondayOffset + i);
    weekDates.push(formatDateToYYYYMMDD(weekDate));
  }
  
  return weekDates;
}

/**
 * Get week range display (e.g., "Jan 15 - Jan 21, 2025")
 * @param dateString - Date string in YYYY-MM-DD format
 * @returns Week range string
 */
export function formatWeekRange(dateString: string): string {
  const weekDates = getWeekDates(dateString);
  
  // getWeekDates always returns 7 dates (Monday-Sunday)
  const firstDate = weekDates[0];
  const lastDate = weekDates[6];
  
  if (!firstDate || !lastDate) {
    return '';
  }
  
  const startDate = parseLocalDate(firstDate);
  const endDate = parseLocalDate(lastDate);
  
  const startFormatted = startDate.toLocaleDateString('en-US', { 
    month: 'short', 
    day: 'numeric' 
  });
  
  const endFormatted = endDate.toLocaleDateString('en-US', { 
    month: 'short', 
    day: 'numeric',
    year: 'numeric' 
  });
  
  return `${startFormatted} - ${endFormatted}`;
}

/**
 * Check if a date is today
 * @param date - Date object or YYYY-MM-DD string
 * @returns True if date is today
 */
export function isToday(date: Date | string): boolean {
  const dateString = typeof date === 'string' ? date : formatDateToYYYYMMDD(date);
  return dateString === getToday();
}

/**
 * Check if a date is in the past
 * @param date - Date object or YYYY-MM-DD string
 * @returns True if date is before today
 */
export function isPast(date: Date | string): boolean {
  const dateString = typeof date === 'string' ? date : formatDateToYYYYMMDD(date);
  return dateString < getToday();
}

/**
 * Check if a date is in the future
 * @param date - Date object or YYYY-MM-DD string
 * @returns True if date is after today
 */
export function isFuture(date: Date | string): boolean {
  const dateString = typeof date === 'string' ? date : formatDateToYYYYMMDD(date);
  return dateString > getToday();
}

/**
 * Get the day name from a date (e.g., "Monday")
 * @param date - Date object or YYYY-MM-DD string
 * @returns Day name
 */
export function getDayName(date: Date | string): string {
  const dateObj = typeof date === 'string' ? parseLocalDate(date) : date;
  return dateObj.toLocaleDateString('en-US', { weekday: 'long' });
}

/**
 * Get the short day name from a date (e.g., "Mon")
 * @param date - Date object or YYYY-MM-DD string
 * @returns Short day name
 */
export function getDayNameShort(date: Date | string): string {
  const dateObj = typeof date === 'string' ? parseLocalDate(date) : date;
  return dateObj.toLocaleDateString('en-US', { weekday: 'short' });
}

/**
 * Add days to a date
 * @param date - Date object or YYYY-MM-DD string
 * @param days - Number of days to add (can be negative)
 * @returns New date string in YYYY-MM-DD format
 */
export function addDays(date: Date | string, days: number): string {
  const dateObj = typeof date === 'string' ? parseLocalDate(date) : new Date(date);
  dateObj.setDate(dateObj.getDate() + days);
  return formatDateToYYYYMMDD(dateObj);
}

/**
 * Add months to a date
 * @param date - Date object or YYYY-MM-DD string
 * @param months - Number of months to add (can be negative)
 * @returns New date string in YYYY-MM-DD format
 */
export function addMonths(date: Date | string, months: number): string {
  const dateObj = typeof date === 'string' ? parseLocalDate(date) : new Date(date);
  dateObj.setMonth(dateObj.getMonth() + months);
  return formatDateToYYYYMMDD(dateObj);
}



============================
FILE: frontend\src\shared\utils\deepMerge.ts
============================
/**
 * Deep merge utility for location data
 * Handles merging main site config with location-specific overrides
 * Includes array deduplication and special handling for different data types
 */

import type { LocationPage, MainSiteConfig } from '@/shared/types/location';

// Type-safe representations for merge operations
type PlainObject = Record<string, unknown>;
type MergeValue = unknown;
type ArrayItem = unknown;

/**
 * Deep merge configuration options
 */
export interface DeepMergeOptions {
  /** Array merge strategy */
  arrayMergeStrategy?: 'replace' | 'concat' | 'dedupe' | 'smart';
  /** Keys to always replace (not merge) */
  replaceKeys?: string[];
  /** Keys to always concatenate arrays */
  concatKeys?: string[];
  /** Keys to deduplicate arrays */
  dedupeKeys?: string[];
  /** Custom merge function for specific keys */
  customMergers?: Record<string, (target: MergeValue, source: MergeValue) => MergeValue>;
}

/**
 * Default merge options for location data
 */
export const DEFAULT_MERGE_OPTIONS: DeepMergeOptions = {
  arrayMergeStrategy: 'smart',
  replaceKeys: [
    'slug', 'city', 'stateCode', 'state', 'postalCode', 'urlPath',
    'latitude', 'longitude', 'affiliateRef', 'employee'
  ],
  concatKeys: [
    'neighborhoods', 'landmarks', 'localConditions', 'keywords'
  ],
  dedupeKeys: [
    'images', 'faqs'
  ],
  customMergers: {
    // SEO: deep merge with location overriding main
    seo: (main, location) => deepMergeObject(main || {}, location || {}),
    // Header: location completely overrides main
    header: (_main, location) => location || _main,
    // Hero: deep merge with location overriding main
    hero: (main, location) => deepMergeObject(main || {}, location || {}),
    // Reviews section: location overrides main
    reviewsSection: (_main, location) => location || _main,
    // Ops: location overrides main
    ops: (_main, location) => location || _main,
    // Service area: location overrides main
    serviceArea: (_main, location) => location || _main,
    // Schema org: location overrides main
    schemaOrg: (_main, location) => location || _main
  }
};

/**
 * Check if value is a plain object
 */
function isPlainObject(value: unknown): value is PlainObject {
  return value !== null && 
         typeof value === 'object' && 
         !Array.isArray(value) &&
         Object.prototype.toString.call(value) === '[object Object]';
}

/**
 * Check if value is an array
 */
function isArray(value: unknown): value is ArrayItem[] {
  return Array.isArray(value);
}

/**
 * Safely get property from object
 */
function getProperty(obj: unknown, key: string): unknown {
  if (isPlainObject(obj)) {
    return obj[key];
  }
  return undefined;
}

/**
 * Create a unique key for array items to enable deduplication
 */
function createItemKey(item: ArrayItem, index: number): string {
  // For images, use role + url combination
  if (isPlainObject(item)) {
    const role = getProperty(item, 'role');
    const url = getProperty(item, 'url');
    if (typeof role === 'string' && typeof url === 'string') {
      return `${role}:${url}`;
    }
    
    // For FAQs, use id or question
    const id = getProperty(item, 'id');
    if (id !== undefined) {
      return `faq:${String(id)}`;
    }
    const q = getProperty(item, 'q');
    if (typeof q === 'string') {
      return `faq:${q}`;
    }
    
    // For objects, try to create a meaningful key
    const slug = getProperty(item, 'slug');
    if (typeof slug === 'string') return `object:${slug}`;
    
    const title = getProperty(item, 'title');
    if (typeof title === 'string') return `object:${title}`;
    
    const name = getProperty(item, 'name');
    if (typeof name === 'string') return `object:${name}`;
  }
  
  // For simple strings, use the string itself
  if (typeof item === 'string') {
    return `string:${item}`;
  }
  
  // Fallback to index-based key
  return `index:${index}`;
}

/**
 * Deduplicate array based on custom key function
 */
function deduplicateArray(array: ArrayItem[], keyFn: (item: ArrayItem, index: number) => string): ArrayItem[] {
  const seen = new Map<string, ArrayItem>();
  
  array.forEach((item, index) => {
    const key = keyFn(item, index);
    if (!seen.has(key)) {
      seen.set(key, item);
    }
  });
  
  return Array.from(seen.values());
}

/**
 * Merge arrays based on strategy
 */
function mergeArrays(
  target: unknown, 
  source: unknown, 
  key: string, 
  options: DeepMergeOptions
): ArrayItem[] {
  const { arrayMergeStrategy, concatKeys, dedupeKeys, replaceKeys } = options;
  
  // Ensure source is an array
  if (!isArray(source)) {
    return [];
  }
  
  // If target is not an array, just return source
  if (!isArray(target)) {
    return source;
  }
  
  // Always concatenate for specific keys (takes precedence over replace)
  if (concatKeys?.includes(key)) {
    return [...target, ...source];
  }
  
  // Always replace for specific keys
  if (replaceKeys?.includes(key)) {
    return source;
  }
  
  // Always deduplicate for specific keys
  if (dedupeKeys?.includes(key)) {
    const combined = [...target, ...source];
    return deduplicateArray(combined, createItemKey);
  }
  
  // Smart strategy: choose based on key
  switch (arrayMergeStrategy) {
    case 'replace':
      return source;
    case 'concat':
      return [...target, ...source];
    case 'dedupe': {
      const combined = [...target, ...source];
      return deduplicateArray(combined, createItemKey);
    }
    case 'smart':
    default: {
      // Smart defaults based on key
      if (['images', 'faqs'].includes(key)) {
        const combined = [...target, ...source];
        return deduplicateArray(combined, createItemKey);
      } else if (['neighborhoods', 'landmarks', 'localConditions', 'keywords'].includes(key)) {
        return [...target, ...source];
      } else {
        return source; // Replace by default
      }
    }
  }
}

/**
 * Deep merge two objects
 */
function deepMergeObject(target: MergeValue, source: MergeValue, options: DeepMergeOptions = DEFAULT_MERGE_OPTIONS): PlainObject {
  if (!isPlainObject(source)) {
    return isPlainObject(target) ? target : {};
  }
  
  if (!isPlainObject(target)) {
    return source;
  }
  
  const result: PlainObject = { ...target };
  
  Object.keys(source).forEach(key => {
    const sourceValue = source[key];
    const targetValue = target[key];
    
    // Use custom merger if available
    const customMerger = options.customMergers?.[key];
    if (customMerger) {
      result[key] = customMerger(targetValue, sourceValue);
      return;
    }
    
    // Handle arrays
    if (isArray(sourceValue)) {
      result[key] = mergeArrays(targetValue, sourceValue, key, options);
      return;
    }
    
    // Handle objects
    if (isPlainObject(sourceValue)) {
      result[key] = deepMergeObject(targetValue || {}, sourceValue, options);
      return;
    }
    
    // Handle primitives
    result[key] = sourceValue;
  });
  
  return result;
}

/**
 * Main merge function for location data
 * Merges main site config with location-specific overrides
 */
export function createMergedLocationData(
  mainConfig: MainSiteConfig,
  locationData: LocationPage,
  options: Partial<DeepMergeOptions> = {}
): LocationPage {
  const mergeOptions: DeepMergeOptions = {
    ...DEFAULT_MERGE_OPTIONS,
    ...options
  };
  
  // Deep merge the configs
  const merged = deepMergeObject(mainConfig, locationData, mergeOptions) as unknown as LocationPage;
  
  // Ensure required fields from location always take precedence
  const requiredFields: Array<keyof LocationPage> = [
    'slug', 'city', 'stateCode', 'state', 'urlPath'
  ];
  
  requiredFields.forEach(field => {
    if (field in locationData) {
      (merged as unknown as PlainObject)[field] = locationData[field];
    }
  });
  
  return merged;
}

/**
 * Validation result for merged data
 */
export interface ValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
}

/**
 * Validate merged location data
 */
export function validateMergedData(data: LocationPage): ValidationResult {
  const errors: string[] = [];
  const warnings: string[] = [];
  
  // Check required fields
  if (!data.slug) errors.push('Missing required field: slug');
  if (!data.city) errors.push('Missing required field: city');
  if (!data.stateCode) errors.push('Missing required field: stateCode');
  if (!data.state) errors.push('Missing required field: state');
  if (!data.urlPath) errors.push('Missing required field: urlPath');
  
  // Check SEO
  if (!data.seo.title) warnings.push('Missing SEO title');
  if (!data.seo.description) warnings.push('Missing SEO description');
  
  // Check hero
  if (!data.hero.h1) warnings.push('Missing hero H1');
  
  // Warnings for optional but recommended fields
  if (!data.images || data.images.length === 0) {
    warnings.push('No images provided');
  }
  
  if (!data.faqs || data.faqs.length === 0) {
    warnings.push('No FAQs provided');
  }
  
  return {
    isValid: errors.length === 0,
    errors,
    warnings
  };
}

/**
 * Helper to create a minimal location page from partial data
 */
export function createLocationPage(
  data: Partial<LocationPage> & { slug: string; city: string; stateCode: string; state: string; urlPath: string }
): LocationPage {
  const defaults = {
    seo: data.seo || {
      title: `${data.city}, ${data.stateCode} | Services`,
      description: `Professional services in ${data.city}, ${data.state}`,
      canonicalPath: data.urlPath,
    },
    hero: data.hero || {
      h1: `${data.city}, ${data.stateCode}`,
    }
  };

  return {
    ...defaults,
    ...data,
    slug: data.slug,
    city: data.city,
    stateCode: data.stateCode,
    state: data.state,
    urlPath: data.urlPath
  } as LocationPage;
}

/**
 * Deep clone an object (useful for testing merge operations)
 */
export function deepClone<T>(obj: T): T {
  if (obj === null || typeof obj !== 'object') {
    return obj;
  }
  
  if (Array.isArray(obj)) {
    return obj.map((item: unknown) => deepClone(item)) as unknown as T;
  }
  
  const cloned: Record<string, unknown> = {};
  Object.keys(obj).forEach(key => {
    cloned[key] = deepClone((obj as Record<string, unknown>)[key]);
  });
  
  return cloned as T;
}

/**
 * Compare two objects for equality (deep comparison)
 */
export function deepEqual(a: unknown, b: unknown): boolean {
  if (a === b) return true;
  
  if (a === null || b === null) return false;
  if (typeof a !== 'object' || typeof b !== 'object') return false;
  
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    return a.every((item, index) => deepEqual(item, b[index]));
  }
  
  if (Array.isArray(a) || Array.isArray(b)) return false;
  
  const keysA = Object.keys(a);
  const keysB = Object.keys(b);
  
  if (keysA.length !== keysB.length) return false;
  
  return keysA.every(key => 
    keysB.includes(key) && 
    deepEqual((a as Record<string, unknown>)[key], (b as Record<string, unknown>)[key])
  );
}

/**
 * Statistics about merge operations
 */
export interface MergeStatistics {
  fieldsFromMain: string[];
  fieldsFromLocation: string[];
  fieldsMerged: string[];
  arraysConcatenated: string[];
  arraysDeduplicated: string[];
}

/**
 * Get merge statistics - analyze which fields came from where
 */
export function getMergeStatistics(
  mainConfig: MainSiteConfig,
  locationData: LocationPage,
  mergedData: LocationPage
): MergeStatistics {
  const fieldsFromMain: string[] = [];
  const fieldsFromLocation: string[] = [];
  const fieldsMerged: string[] = [];
  const arraysConcatenated: string[] = [];
  const arraysDeduplicated: string[] = [];

  const allKeys = new Set([
    ...Object.keys(mainConfig),
    ...Object.keys(locationData),
    ...Object.keys(mergedData)
  ]);

  allKeys.forEach(key => {
    const mainValue = (mainConfig as unknown as Record<string, unknown>)[key];
    const locationValue = (locationData as unknown as Record<string, unknown>)[key];
    const mergedValue = (mergedData as unknown as Record<string, unknown>)[key];

    // Skip if no merged value
    if (mergedValue === undefined) return;

    const hasMain = mainValue !== undefined;
    const hasLocation = locationValue !== undefined;

    if (hasMain && hasLocation) {
      // Both have values - field was merged
      fieldsMerged.push(key);

      // Check if arrays were involved
      if (Array.isArray(mainValue) && Array.isArray(locationValue) && Array.isArray(mergedValue)) {
        const totalLength = mainValue.length + locationValue.length;
        if (mergedValue.length < totalLength) {
          arraysDeduplicated.push(key);
        } else if (mergedValue.length === totalLength) {
          arraysConcatenated.push(key);
        }
      }
    } else if (hasLocation) {
      fieldsFromLocation.push(key);
    } else if (hasMain) {
      fieldsFromMain.push(key);
    }
  });

  return {
    fieldsFromMain,
    fieldsFromLocation,
    fieldsMerged,
    arraysConcatenated,
    arraysDeduplicated
  };
}

============================
FILE: frontend\src\shared\utils\domainUtils.ts
============================
/**
 * Domain Resolution Utilities
 * 
 * Single responsibility: Extract tenant slug from hostname/domain
 * Pure functions with no side effects
 */

/**
 * Domain-to-tenant slug mappings for custom domains
 * In production, this could be loaded from a config file or API
 */
const CUSTOM_DOMAIN_MAPPINGS: Record<string, string> = {
  'jpsdetailing.com': 'jps',
  'example.com': 'example',
  'thatsmartsite.com': 'main-site', // Main site for admin dashboard
  'thatsmartsite-backend.onrender.com': 'main-site', // Render URL for admin dashboard
  // Add more domain mappings as needed
};

/**
 * Reserved subdomains that should not be treated as tenant slugs
 */
const RESERVED_SUBDOMAINS = ['www', 'thatsmartsite', 'api', 'admin', 'staging', 'dev', 'main-site'];

/**
 * Extract tenant slug from subdomain
 * Example: jps.thatsmartsite.com -> 'jps', testing-mobile-detail.lvh.me -> 'testing-mobile-detail'
 * 
 * @param hostname - The hostname to parse
 * @returns Tenant slug or null if not a valid subdomain
 */
function getTenantFromSubdomain(hostname: string): string | null {
  if (!hostname.includes('.')) {
    return null;
  }
  
  const parts = hostname.split('.');
  const subdomain = parts[0];
  
  // Check if subdomain is reserved
  if (!subdomain || RESERVED_SUBDOMAINS.includes(subdomain)) {
    return null;
  }
  
  // Handle both .thatsmartsite.com and .lvh.me domains
  const domain = parts.slice(-2).join('.');
  if (domain === 'thatsmartsite.com' || domain === 'lvh.me') {
    return subdomain;
  }
  
  return null;
}

/**
 * Extract tenant slug from custom domain mapping
 * Example: jpsdetailing.com -> 'jps'
 * 
 * @param hostname - The hostname to look up
 * @returns Tenant slug or null if not in mapping
 */
function getTenantFromCustomDomain(hostname: string): string | null {
  return CUSTOM_DOMAIN_MAPPINGS[hostname] || null;
}

/**
 * Extract tenant slug from domain/subdomain in production
 * Tries subdomain approach first, then custom domain mapping
 * 
 * @param hostname - Optional hostname to parse (defaults to window.location.hostname)
 * @param defaultSlug - Default slug to return if no tenant found (defaults to 'jps')
 * @returns Tenant slug
 * 
 * @example
 * ```ts
 * // Subdomain: jps.thatsmartsite.com -> 'jps'
 * const slug = getTenantFromDomain();
 * 
 * // Custom domain: jpsdetailing.com -> 'jps'
 * const slug = getTenantFromDomain('jpsdetailing.com');
 * 
 * // No match: example.org -> 'default-tenant'
 * const slug = getTenantFromDomain('example.org', 'default-tenant');
 * ```
 */
export function getTenantFromDomain(
  hostname: string = window.location.hostname,
  defaultSlug: string = 'main-site'
): string {
  // Try subdomain approach first
  const subdomainSlug = getTenantFromSubdomain(hostname);
  if (subdomainSlug) {
    return subdomainSlug;
  }
  
  // Try custom domain mapping
  const customDomainSlug = getTenantFromCustomDomain(hostname);
  if (customDomainSlug) {
    return customDomainSlug;
  }
  
  // Return default fallback
  return defaultSlug;
}

/**
 * Add a custom domain mapping at runtime
 * Useful for dynamic tenant configurations
 * 
 * @param domain - Custom domain
 * @param slug - Tenant slug to map to
 * 
 * @example
 * ```ts
 * addDomainMapping('newclient.com', 'newclient-slug');
 * ```
 */
export function addDomainMapping(domain: string, slug: string): void {
  CUSTOM_DOMAIN_MAPPINGS[domain] = slug;
}

/**
 * Get all custom domain mappings
 * Useful for debugging or admin panels
 */
export function getDomainMappings(): Record<string, string> {
  return { ...CUSTOM_DOMAIN_MAPPINGS };
}

/**
 * Check if a hostname is a reserved subdomain
 * 
 * @param hostname - The hostname to check
 * @returns True if the subdomain is reserved
 */
export function isReservedSubdomain(hostname: string): boolean {
  const parts = hostname.split('.');
  const subdomain = parts[0];
  
  if (!subdomain) {
    return false;
  }
  
  return RESERVED_SUBDOMAINS.includes(subdomain);
}



============================
FILE: frontend\src\shared\utils\errorHandling.ts
============================
/**
 * Safe Error Handling Utilities
 * 
 * TypeScript-safe error message extraction from unknown errors.
 */

/**
 * Safely extract an error message from an unknown error
 * @param error - Unknown error from catch block
 * @returns Safe error message string
 */
export function safeErrorMessage(error: unknown): string {
  if (typeof error === 'string') {
    return error;
  }
  
  if (error instanceof Error) {
    return error.message;
  }
  
  if (typeof error === 'object' && error !== null) {
    // Check for message property
    const errorObj = error as { message?: unknown };
    if (typeof errorObj.message === 'string') {
      return errorObj.message;
    }
  }
  
  return 'An unexpected error occurred';
}

/**
 * Safely extract the first validation error from a Zod-like error object
 * @param error - Validation error object
 * @returns First error message or default
 */
export function safeValidationMessage(error: unknown): string {
  if (typeof error === 'object' && error !== null) {
    const errorObj = error as { errors?: unknown[] };
    if (Array.isArray(errorObj.errors) && errorObj.errors.length > 0) {
      const firstError = errorObj.errors[0];
      if (typeof firstError === 'object' && firstError !== null) {
        const err = firstError as { message?: unknown };
        if (typeof err.message === 'string') {
          return err.message;
        }
      }
    }
  }
  return safeErrorMessage(error);
}



============================
FILE: frontend\src\shared\utils\errorMonitoring.ts
============================
/**
 * Enhanced Error Monitoring System
 * Catches all frontend errors including console errors, unhandled promises, and React errors
 */

interface ReactErrorInfo {
  componentStack?: string;
}

// Type guard to safely extract error properties
function getErrorStack(error: unknown): string | undefined {
  if (error && typeof error === 'object' && 'stack' in error) {
    return String((error as { stack: unknown }).stack);
  }
  return undefined;
}

function getErrorMessage(error: unknown): string {
  if (error && typeof error === 'object' && 'message' in error) {
    return String((error as { message: unknown }).message);
  }
  return String(error);
}

interface ErrorEvent {
  id: string;
  timestamp: Date;
  type: 'console' | 'unhandled' | 'promise' | 'react' | 'network';
  message: string;
  stack?: string;
  url?: string;
  line?: number;
  column?: number;
  userAgent?: string;
  userId?: string;
  sessionId?: string;
  componentStack?: string;
  errorBoundary?: string;
  networkInfo?: {
    url: string;
    method: string;
    status?: number;
    responseTime?: number;
  };
}

class ErrorMonitor {
  private errors: ErrorEvent[] = [];
  private maxErrors = 1000; // Keep last 1000 errors
  private sessionId: string;
  private userId?: string;
  private isEnabled = false; // Disabled to see actual console errors
  private listeners: ((error: ErrorEvent) => void)[] = [];

  constructor() {
    this.sessionId = this.generateSessionId();
    this.setupGlobalErrorHandlers();
    this.setupConsoleErrorHandling();
    this.setupNetworkErrorHandling();
  }

  private generateSessionId(): string {
    return `session_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;
  }

  private setupGlobalErrorHandlers(): void {
    // Catch all unhandled errors
    window.addEventListener('error', (event) => {
      const stack = getErrorStack(event.error);
      this.captureError({
        type: 'unhandled',
        message: event.message,
        ...(stack ? { stack } : {}),
        url: event.filename,
        line: event.lineno,
        column: event.colno,
      });
    });

    // Catch unhandled promise rejections
    window.addEventListener('unhandledrejection', (event) => {
      const stack = getErrorStack(event.reason);
      this.captureError({
        type: 'promise',
        message: getErrorMessage(event.reason),
        ...(stack ? { stack } : {}),
      });
    });

    // Catch resource loading errors
    window.addEventListener('error', (event) => {
      if (event.target !== window) {
        const target = event.target;
        const targetName = target instanceof Element ? target.tagName.toLowerCase() : 'unknown';
        
        let url = 'unknown';
        if (target && typeof target === 'object') {
          if ('src' in target && typeof target.src === 'string') {
            url = target.src;
          } else if ('href' in target && typeof target.href === 'string') {
            url = target.href;
          }
        }
        
        this.captureError({
          type: 'network',
          message: `Resource loading error: ${targetName}`,
          networkInfo: {
            url,
            method: 'GET',
          },
        });
      }
    }, true);
  }

  private setupConsoleErrorHandling(): void {
    // Override console methods to catch all console errors
    const originalConsoleError = console.error;
    const originalConsoleWarn = console.warn;

    console.error = (...args: unknown[]) => {
      const stack = new Error().stack;
      this.captureError({
        type: 'console',
        message: args.map(arg => typeof arg === 'string' ? arg : JSON.stringify(arg)).join(' '),
        ...(stack ? { stack } : {}),
      });
      originalConsoleError.apply(console, args);
    };

    console.warn = (...args: unknown[]) => {
      const stack = new Error().stack;
      this.captureError({
        type: 'console',
        message: `WARNING: ${args.map(arg => typeof arg === 'string' ? arg : JSON.stringify(arg)).join(' ')}`,
        ...(stack ? { stack } : {}),
      });
      originalConsoleWarn.apply(console, args);
    };
  }

  private setupNetworkErrorHandling(): void {
    // Override fetch to catch network errors
    const originalFetch = window.fetch;
    window.fetch = async (...args: Parameters<typeof fetch>) => {
      const startTime = Date.now();
      const requestInput = args[0];
      // Extract URL from request input - either string or Request object
      let url: string;
      if (typeof requestInput === 'string') {
        url = requestInput;
      } else {
        url = (requestInput as Request).url;
      }
      const method = args[1]?.method || 'GET';

      try {
        const response = await originalFetch(...args);
        const responseTime = Date.now() - startTime;

        // Log failed requests (but ignore localhost connection refused errors)
        if (!response.ok && !(url.includes('localhost:5173') && response.status === 0)) {
          this.captureError({
            type: 'network',
            message: `HTTP ${response.status}: ${response.statusText}`,
            networkInfo: {
              url,
              method,
              status: response.status,
              responseTime,
            },
          });
        }

        return response;
      } catch (error: unknown) {
        const responseTime = Date.now() - startTime;
        const errorMessage = getErrorMessage(error);
        
        // Check if it's a connection refused error to localhost
        const isLocalConnectionError = 
          url.includes('localhost:5173') && 
          error instanceof TypeError && 
          errorMessage.includes('ERR_CONNECTION_REFUSED');
        
        // Don't log connection refused errors to localhost:5173 (Vite dev server pings)
        if (!isLocalConnectionError) {
          this.captureError({
            type: 'network',
            message: `Network error: ${errorMessage}`,
            networkInfo: {
              url,
              method,
              responseTime,
            },
          });
        }
        
        throw error;
      }
    };
  }

  private captureError(errorData: Partial<ErrorEvent>): void {
    if (!this.isEnabled) return;

    const error: ErrorEvent = {
      id: `error_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`,
      timestamp: new Date(),
      type: 'console',
      message: '',
      url: window.location.href,
      userAgent: navigator.userAgent,
      sessionId: this.sessionId,
      ...(this.userId ? { userId: this.userId } : {}),
      ...errorData,
    };

    this.errors.push(error);

    // Keep only the last maxErrors
    if (this.errors.length > this.maxErrors) {
      this.errors = this.errors.slice(-this.maxErrors);
    }

    // Notify listeners
    this.listeners.forEach(listener => { listener(error); });

    // Log to console in development
    if (import.meta.env.DEV) {
      console.group(`🚨 Error Captured (${error.type.toUpperCase()})`);
      console.error('Message:', error.message);
      console.error('Timestamp:', error.timestamp.toISOString());
      console.error('URL:', error.url);
      if (error.stack) console.error('Stack:', error.stack);
      if (error.componentStack) console.error('Component Stack:', error.componentStack);
      if (error.networkInfo) console.error('Network Info:', error.networkInfo);
      console.groupEnd();
    }
  }

  // Public methods
  public captureReactError(error: Error, errorInfo: ReactErrorInfo, componentStack?: string): void {
    const stack = error.stack;
    const component = componentStack || errorInfo.componentStack;
    this.captureError({
      type: 'react',
      message: error.message,
      ...(stack ? { stack } : {}),
      ...(component ? { componentStack: component } : {}),
    });
  }

  public setUserId(userId: string): void {
    this.userId = userId;
  }

  public enable(): void {
    this.isEnabled = true;
  }

  public disable(): void {
    this.isEnabled = false;
  }

  public getErrors(): ErrorEvent[] {
    return [...this.errors];
  }

  public getErrorsByType(type: ErrorEvent['type']): ErrorEvent[] {
    return this.errors.filter(error => error.type === type);
  }

  public getRecentErrors(count: number = 10): ErrorEvent[] {
    return this.errors.slice(-count);
  }

  public clearErrors(): void {
    this.errors = [];
  }

  public addListener(listener: (error: ErrorEvent) => void): () => void {
    this.listeners.push(listener);
    return () => {
      const index = this.listeners.indexOf(listener);
      if (index > -1) {
        this.listeners.splice(index, 1);
      }
    };
  }

  public exportErrors(): string {
    return JSON.stringify({
      sessionId: this.sessionId,
      userId: this.userId,
      timestamp: new Date().toISOString(),
      errors: this.errors,
    }, null, 2);
  }

  public printErrorsToConsole(): void {
    console.group('🔍 Error Monitor - All Captured Errors');
    console.log(`Session ID: ${this.sessionId}`);
    console.log(`Total Errors: ${this.errors.length}`);
    console.log(`User ID: ${this.userId || 'Not set'}`);
    
    this.errors.forEach((error, index) => {
      console.group(`Error ${index + 1} (${error.type})`);
      console.log('Time:', error.timestamp.toISOString());
      console.log('Message:', error.message);
      console.log('URL:', error.url);
      if (error.stack) console.log('Stack:', error.stack);
      if (error.componentStack) console.log('Component Stack:', error.componentStack);
      if (error.networkInfo) console.log('Network Info:', error.networkInfo);
      console.groupEnd();
    });
    
    console.groupEnd();
  }

  public getErrorSummary(): {
    total: number;
    byType: Record<string, number>;
    recent: ErrorEvent[];
  } {
    const byType = this.errors.reduce<Record<string, number>>((acc, error) => {
      acc[error.type] = (acc[error.type] || 0) + 1;
      return acc;
    }, {});

    return {
      total: this.errors.length,
      byType,
      recent: this.getRecentErrors(5),
    };
  }
}

// Create singleton instance
export const errorMonitor = new ErrorMonitor();

// Export types for use in other files
export type { ErrorEvent, ReactErrorInfo };

// Global error handler for React errors
export const handleReactError = (error: Error, errorInfo: ReactErrorInfo, componentStack?: string) => {
  errorMonitor.captureReactError(error, errorInfo, componentStack);
};

// Extend Window interface for debugging commands
declare global {
  interface Window {
    errorMonitor: ErrorMonitor;
    printErrors: () => void;
    getErrors: () => ErrorEvent[];
    clearErrors: () => void;
    exportErrors: () => string;
  }
}

// Console commands for debugging
if (typeof window !== 'undefined') {
  window.errorMonitor = errorMonitor;
  window.printErrors = () => { errorMonitor.printErrorsToConsole(); };
  window.getErrors = () => errorMonitor.getErrors();
  window.clearErrors = () => { errorMonitor.clearErrors(); };
  window.exportErrors = () => errorMonitor.exportErrors();
}


============================
FILE: frontend\src\shared\utils\faqLoader.ts
============================
/**
 * FAQ Data Loader - Shared Utility
 * 
 * Dynamically loads FAQ data from industry-specific JSON files.
 * Shared across features to avoid boundary violations.
 */

export interface FAQItem {
  question: string;
  answer: string;
  category: string;
}

/**
 * Load all FAQ categories for a specific industry
 * 
 * @param industry - Industry slug (e.g., 'mobile-detailing')
 * @returns Array of FAQ items with unique IDs
 */
export async function loadIndustryFAQs(industry: string): Promise<FAQItem[]> {
  const categories = [
    'services',
    'pricing',
    'scheduling',
    'locations',
    'preparation',
    'payments',
    'warranty',
    'aftercare',
    'general',
  ];
  
  try {
    const faqArrays = await Promise.all(
      categories.map(async (category) => {
        try {
          const module = await import(`@/data/${industry}/faq/${category}.json`) as { default: FAQItem[] };
          return module.default;
        } catch {
          console.warn(`FAQ category ${category} not found for ${industry}, skipping`);
          return [];
        }
      })
    );
    
    // Flatten and add unique IDs
    const allFAQs = faqArrays.flat();
    return allFAQs.map((faq, index) => ({
      ...faq,
      id: `${industry}-${String(index)}`
    }));
  } catch (error) {
    console.error(`Failed to load FAQs for ${industry}:`, error);
    return [];
  }
}



============================
FILE: frontend\src\shared\utils\faqSchemaBuilder.ts
============================
/**
 * Build-time FAQ schema generation utilities
 * Generates FAQPage JSON-LD schemas for all pages at build time
 */

import type { FAQItem } from '@/features/faq/types';
import type { LocationPage } from '@/shared/types/location';

import { convertFAQItemsToSchemaFormat,generateFAQSchema } from './schemaUtils';

/**
 * Build FAQ schema for a location page
 */
export function buildLocationFAQSchema(locationData: LocationPage): Record<string, unknown> | null {
  if (!locationData.faqs || locationData.faqs.length === 0) {
    return null;
  }

  return generateFAQSchema(locationData.faqs);
}

/**
 * Build FAQ schema for the main site using general FAQs
 */
export function buildMainSiteFAQSchema(generalFAQs: FAQItem[]): Record<string, unknown> | null {
  if (generalFAQs.length === 0) {
    return null;
  }

  const convertedFAQs = convertFAQItemsToSchemaFormat(generalFAQs);
  return generateFAQSchema(convertedFAQs);
}

/**
 * Build FAQ schemas for all location pages
 */
export function buildAllLocationFAQSchemas(locationDataArray: LocationPage[]): Array<{
  location: string;
  schema: Record<string, unknown> | null;
}> {
  return locationDataArray.map(locationData => ({
    location: locationData.slug,
    schema: buildLocationFAQSchema(locationData)
  }));
}

/**
 * Generate FAQ schema statistics
 */
export function getFAQSchemaStatistics(
  locationDataArray: LocationPage[],
  generalFAQs: FAQItem[]
): {
  totalLocations: number;
  locationsWithFAQs: number;
  totalLocationFAQs: number;
  mainSiteFAQs: number;
  schemaCoverage: {
    locations: number;
    mainSite: boolean;
  };
} {
  const locationsWithFAQs = locationDataArray.filter(location => 
    location.faqs && location.faqs.length > 0
  );
  
  const totalLocationFAQs = locationDataArray.reduce((total, location) => 
    total + (location.faqs?.length || 0), 0
  );

  return {
    totalLocations: locationDataArray.length,
    locationsWithFAQs: locationsWithFAQs.length,
    totalLocationFAQs,
    mainSiteFAQs: generalFAQs.length,
    schemaCoverage: {
      locations: locationsWithFAQs.length,
      mainSite: generalFAQs.length > 0
    }
  };
}

/**
 * Validate FAQ schema completeness
 */
export function validateFAQSchemaCompleteness(
  locationDataArray: LocationPage[],
  generalFAQs: FAQItem[]
): {
  isValid: boolean;
  warnings: string[];
  recommendations: string[];
} {
  const warnings: string[] = [];
  const recommendations: string[] = [];

  // Check main site FAQs
  if (generalFAQs.length === 0) {
    warnings.push('No general FAQs found for main site FAQPage schema');
    recommendations.push('Add general FAQs to generate main site FAQPage schema');
  }

  // Check location FAQs
  const locationsWithoutFAQs = locationDataArray.filter(location => 
    !location.faqs || location.faqs.length === 0
  );

  if (locationsWithoutFAQs.length > 0) {
    warnings.push(`${locationsWithoutFAQs.length} locations without FAQs`);
    recommendations.push('Consider adding location-specific FAQs for better SEO');
  }

  // Check FAQ quality
  locationDataArray.forEach(location => {
    if (location.faqs && location.faqs.length > 0) {
      const faqsWithoutIds = location.faqs.filter(faq => !faq.id);
      if (faqsWithoutIds.length > 0) {
        warnings.push(`Location ${location.slug}: ${faqsWithoutIds.length} FAQs without IDs`);
        recommendations.push('Add IDs to FAQs for better analytics and A/B testing');
      }

      const shortAnswers = location.faqs.filter(faq => faq.a.length < 50);
      if (shortAnswers.length > 0) {
        recommendations.push(`Location ${location.slug}: Consider expanding short FAQ answers for better SEO`);
      }
    }
  });

  return {
    isValid: warnings.length === 0,
    warnings,
    recommendations
  };
}

/**
 * Generate FAQ schema manifest for build tools
 */
export function generateFAQSchemaManifest(
  locationDataArray: LocationPage[],
  generalFAQs: FAQItem[]
): {
  version: string;
  generatedAt: string;
  mainSite: {
    hasSchema: boolean;
    faqCount: number;
    schemaPath?: string;
  };
  locations: Array<{
    slug: string;
    hasSchema: boolean;
    faqCount: number;
    schemaPath?: string;
  }>;
  statistics: ReturnType<typeof getFAQSchemaStatistics>;
  validation: ReturnType<typeof validateFAQSchemaCompleteness>;
} {
  const statistics = getFAQSchemaStatistics(locationDataArray, generalFAQs);
  const validation = validateFAQSchemaCompleteness(locationDataArray, generalFAQs);

  return {
    version: '1.0.0',
    generatedAt: new Date().toISOString(),
    mainSite: {
      hasSchema: generalFAQs.length > 0,
      faqCount: generalFAQs.length,
      ...(generalFAQs.length > 0 ? { schemaPath: '/schemas/main-site-faq.json' } : {})
    },
    locations: locationDataArray.map(location => {
      const hasFAQs = !!(location.faqs && location.faqs.length > 0);
      return {
        slug: location.slug,
        hasSchema: hasFAQs,
        faqCount: location.faqs?.length || 0,
        ...(hasFAQs ? { schemaPath: `/schemas/locations/${location.slug}-faq.json` } : {})
      };
    }),
    statistics,
    validation
  };
}

/**
 * Build-time FAQ schema generation for static export
 */
export function buildStaticFAQSchemas(
  locationDataArray: LocationPage[],
  generalFAQs: FAQItem[]
): {
  schemas: Record<string, Record<string, unknown>>;
  manifest: ReturnType<typeof generateFAQSchemaManifest>;
} {
  const schemas: Record<string, Record<string, unknown>> = {};

  // Generate main site FAQ schema
  const mainSiteSchema = buildMainSiteFAQSchema(generalFAQs);
  if (mainSiteSchema) {
    schemas['main-site-faq.json'] = mainSiteSchema;
  }

  // Generate location FAQ schemas
  locationDataArray.forEach(locationData => {
    const locationSchema = buildLocationFAQSchema(locationData);
    if (locationSchema) {
      schemas[`locations/${locationData.slug}-faq.json`] = locationSchema;
    }
  });

  const manifest = generateFAQSchemaManifest(locationDataArray, generalFAQs);

  return {
    schemas,
    manifest
  };
}


============================
FILE: frontend\src\shared\utils\findBusinessByLocation.ts
============================
// frontend/src/shared/utils/findBusinessByLocation.ts
import { config, env } from '@/shared/env';

interface BusinessLookupResponse {
  slugs?: string[];
}

export async function findBusinessByLocation(zipCode?: string, city?: string, state?: string) {
  const params = new URLSearchParams();
  if (zipCode) params.append('zip', zipCode);
  if (city) params.append('city', city);
  if (state) params.append('state', state);

  const url = `${config.apiUrl}/api/affiliates/lookup?${params.toString()}`;
  
  if (env.DEV) {
    // Making request to find business by location
  }
  
  const res = await fetch(url);
  if (!res.ok) {
    if (env.DEV) {
      console.error('findBusinessByLocation: Request failed:', res.status, res.statusText);
    }
    return null;
  }
  
  const data = await res.json() as BusinessLookupResponse;
  
  if (env.DEV) {
    // Response received
  }
  
  // Return the first affiliate slug found (assuming only 1 for now as mentioned)
  if (data.slugs && data.slugs.length > 0) {
    return { slug: data.slugs[0] };
  }
  
  return null;
}


============================
FILE: frontend\src\shared\utils\googleMaps.helpers.ts
============================
// Google Maps helper functions with proper typing
// Shared utility - can be used across features

export function getGoogle(): (typeof google) | undefined {
  return (window as unknown as { google?: typeof google }).google;
}

export function hasImportLibrary(): boolean {
  const g = getGoogle();
  // v=beta exposes maps.importLibrary
  return !!g?.maps.importLibrary;
}

export function hasMaps(): boolean {
  const g = getGoogle();
  return !!g?.maps;
}



============================
FILE: frontend\src\shared\utils\imageRotation.ts
============================
/**
 * Image Rotation and Fade Utilities
 * 
 * Provides reusable functions and hooks for creating image carousels with
 * fade transitions, auto-rotation, and performance optimizations.
 */

import type React from 'react';

export interface ImageRotationConfig {
  /** Array of image URLs to rotate through */
  images: string[];
  /** Whether to auto-rotate images */
  autoRotate?: boolean;
  /** Interval in milliseconds between rotations */
  interval?: number;
  /** Duration of fade transition in milliseconds */
  fadeDuration?: number;
  /** Whether to preload next image for smoother transitions */
  preloadNext?: boolean;
  /** Whether to pause rotation on hover */
  pauseOnHover?: boolean;
}

export interface ImageRotationState {
  /** Current active image index */
  currentIndex: number;
  /** Next image index (for preloading) */
  nextIndex: number;
  /** Whether rotation is currently paused */
  isPaused: boolean;
}

export interface ImageRotationActions {
  /** Go to next image */
  next: () => void;
  /** Go to previous image */
  previous: () => void;
  /** Go to specific image index */
  goTo: (index: number) => void;
  /** Toggle pause state */
  togglePause: () => void;
  /** Set pause state */
  setPaused: (paused: boolean) => void;
}

/**
 * Calculate the next image index in the rotation
 */
export const getNextImageIndex = (currentIndex: number, totalImages: number): number => {
  return (currentIndex + 1) % totalImages;
};

/**
 * Calculate the previous image index in the rotation
 */
export const getPreviousImageIndex = (currentIndex: number, totalImages: number): number => {
  return currentIndex === 0 ? totalImages - 1 : currentIndex - 1;
};

/**
 * Preload an image for smoother transitions
 */
export const preloadImage = (imageUrl: string): Promise<void> => {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.onload = () => { resolve(); };
    img.onerror = () => { reject(new Error(`Failed to preload image: ${imageUrl}`)); };
    img.src = imageUrl;
  });
};

/**
 * Preload multiple images
 */
export const preloadImages = async (imageUrls: string[]): Promise<void> => {
  await Promise.all(imageUrls.map(preloadImage));
};

/**
 * Get CSS transition duration string from milliseconds
 */
export const getTransitionDuration = (durationMs: number): string => {
  return `${durationMs}ms`;
};

/**
 * Generate CSS classes for image opacity based on current state
 */
export const getImageOpacityClasses = (
  imageIndex: number,
  currentIndex: number,
  fadeDuration: number = 2000
): string => {
  const isActive = imageIndex === currentIndex;
  const duration = getTransitionDuration(fadeDuration);
  
  return `transition-opacity duration-[${duration}] ${
    isActive ? 'opacity-100' : 'opacity-0'
  }`;
};

/**
 * Generate inline styles for transition duration
 */
export const getTransitionStyles = (durationMs: number): React.CSSProperties => {
  return {
    transitionDuration: getTransitionDuration(durationMs)
  };
};

/**
 * Filter images to only render current and next (for performance)
 */
export const getVisibleImageIndices = (
  currentIndex: number,
  totalImages: number,
  preloadNext: boolean = true
): number[] => {
  if (totalImages <= 1) return [currentIndex];
  
  const indices = [currentIndex];
  if (preloadNext) {
    const nextIndex = getNextImageIndex(currentIndex, totalImages);
    indices.push(nextIndex);
  }
  
  return indices;
};

/**
 * Check if image rotation is valid for the given configuration
 */
export const validateImageRotationConfig = (config: ImageRotationConfig): {
  isValid: boolean;
  errors: string[];
} => {
  const errors: string[] = [];
  
  if (config.images.length === 0) {
    errors.push('Images array cannot be empty');
  }
  
  if (config.interval && config.interval < 1000) {
    errors.push('Interval should be at least 1000ms for better UX');
  }
  
  if (config.fadeDuration && config.fadeDuration < 100) {
    errors.push('Fade duration should be at least 100ms');
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
};

/**
 * Create a debounced function for rotation controls
 */
export const createDebouncedRotation = (
  callback: () => void,
  delay: number = 300
): (() => void) => {
  let timeoutId: NodeJS.Timeout;
  
  return () => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(callback, delay);
  };
};

/**
 * Generate accessibility attributes for image carousel
 */
export const getAccessibilityAttributes = (
  currentIndex: number,
  totalImages: number,
  autoRotate: boolean
): Record<string, string | boolean> => {
  return {
    role: 'img',
    'aria-label': `Image ${currentIndex + 1} of ${totalImages}`,
    'aria-live': autoRotate ? 'polite' : 'off',
    'aria-atomic': true
  };
};


============================
FILE: frontend\src\shared\utils\imageUtils.ts
============================
/**
 * Image optimization utilities for responsive images and WebP conversion
 */

/**
 * Converts image URL to WebP format
 * @param imageUrl - Original image URL
 * @returns WebP version of the image URL
 */
export const toWebp = (imageUrl: string): string => {
  if (!imageUrl) return imageUrl;
  return imageUrl.replace(/\.(png|jpg|jpeg)$/i, '.webp');
};

/**
 * Generates responsive srcSet for WebP images
 * @param imageUrl - Original image URL
 * @param widths - Array of widths to generate
 * @returns WebP srcSet string
 */
export const generateWebpSrcSet = (imageUrl: string, widths: number[]): string => {
  const webpUrl = toWebp(imageUrl);
  return widths.map(width => `${webpUrl} ${width}w`).join(', ');
};

/**
 * Generates responsive srcSet for fallback images
 * @param imageUrl - Original image URL
 * @param widths - Array of widths to generate
 * @returns Fallback srcSet string
 */
export const generateFallbackSrcSet = (imageUrl: string, widths: number[]): string => {
  return widths.map(width => `${imageUrl} ${width}w`).join(', ');
};

/**
 * Generates responsive srcSet (alias for generateFallbackSrcSet for backward compatibility)
 * @param imageUrl - Original image URL
 * @param widths - Array of widths to generate
 * @returns Fallback srcSet string
 */
export const generateSrcSet = (imageUrl: string, widths: number[]): string => {
  return generateFallbackSrcSet(imageUrl, widths);
};

/**
 * Gets responsive image sizes for card components
 * @returns Sizes string for card images
 */
export const getCardImageSizes = (): string => {
  return '(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw';
};

/**
 * Gets responsive image sizes for hero components
 * @returns Sizes string for hero images
 */
export const getHeroImageSizes = (): string => {
  return '(max-width: 1024px) 100vw, 60vw';
};

/**
 * Gets responsive image sizes for service components
 * @returns Sizes string for service images
 */
export const getServiceImageSizes = (): string => {
  return '(max-width: 640px) 100vw, 50vw';
};

/**
 * Common responsive image configurations
 */
export const RESPONSIVE_CONFIGS = {
  // Hero images - large, high priority
  hero: {
    widths: [800, 1200, 1600],
    sizes: '(max-width: 1024px) 100vw, 60vw',
    loading: 'eager' as const,
    decoding: 'sync' as const,
  },
  
  // Service cards - medium priority
  serviceCard: {
    widths: [600, 1200],
    sizes: '(max-width: 640px) 100vw, (max-width: 1024px) 100vw, 100vw',
    loading: 'lazy' as const,
    decoding: 'async' as const,
  },
  
  // Content images - medium priority
  content: {
    widths: [500, 800],
    sizes: '(max-width: 640px) 100vw, 50vw',
    loading: 'lazy' as const,
    decoding: 'async' as const,
  },
  
  // Process step images
  process: {
    widths: [600, 800],
    sizes: '(max-width: 640px) 100vw, 50vw',
    loading: 'lazy' as const,
    decoding: 'async' as const,
  },
  
  // Before/after slider images
  slider: {
    widths: [600, 1200],
    sizes: '100vw',
    loading: 'lazy' as const,
    decoding: 'async' as const,
  },
  
  // Profile avatars - small, low priority
  avatar: {
    widths: [64],
    sizes: '64px',
    loading: 'lazy' as const,
    decoding: 'async' as const,
  },
  
  // Icons - very small, low priority
  icon: {
    widths: [20, 32],
    sizes: '20px, 32px',
    loading: 'lazy' as const,
    decoding: 'async' as const,
  },
} as const;

/**
 * Generates optimized image props for a given configuration
 * @param imageUrl - Original image URL
 * @param config - Responsive configuration
 * @param alt - Alt text
 * @param additionalProps - Additional props to merge
 * @returns Optimized image props
 */
export const generateImageProps = (
  imageUrl: string,
  config: typeof RESPONSIVE_CONFIGS[keyof typeof RESPONSIVE_CONFIGS],
  alt: string,
  additionalProps: Record<string, unknown> = {}
) => {
  const webpSrcSet = generateWebpSrcSet(imageUrl, config.widths);
  const fallbackSrcSet = generateFallbackSrcSet(imageUrl, config.widths);
  
  return {
    alt,
    loading: config.loading,
    decoding: config.decoding,
    srcSet: fallbackSrcSet,
    sizes: config.sizes,
    ...additionalProps,
    // WebP source will be handled by <picture> element
    webpSrcSet,
  };
};

/**
 * Creates a responsive picture element with WebP support
 * @param imageUrl - Original image URL
 * @param config - Responsive configuration
 * @param alt - Alt text
 * @param additionalProps - Additional props for the img element
 * @returns JSX for picture element
 */
export const createResponsivePicture = (
  imageUrl: string,
  config: typeof RESPONSIVE_CONFIGS[keyof typeof RESPONSIVE_CONFIGS],
  alt: string,
  additionalProps: Record<string, unknown> = {}
) => {
  const webpSrcSet = generateWebpSrcSet(imageUrl, config.widths);
  const fallbackSrcSet = generateFallbackSrcSet(imageUrl, config.widths);
  
  return {
    webpSrcSet,
    fallbackSrcSet,
    sizes: config.sizes,
    alt,
    loading: config.loading,
    decoding: config.decoding,
    ...additionalProps,
  };
};

============================
FILE: frontend\src\shared\utils\index.ts
============================
// UI utilities
export { cn } from './cn';

// Performance utilities
export { performanceMonitor } from './performance';

// Scroll utilities
export { scrollRestoration, useScrollRestoration } from './scrollRestoration';
export { scrollToTop, scrollToTopImmediate } from './scrollToTop';

// Validation utilities
export {
  type FieldValidation,
  sanitizeHtml,
  sanitizeText,
  validateEmail,
  validateFormData,
  validateMessage,
  validateName,
  validatePassword,
  validatePhone,
  validateService,
  validateTextField,
  validateVehicleField,
  type ValidationResult
} from './validation';

// Phone formatting utilities
export {
  formatPhoneNumber,
  formatPhoneNumberAsTyped,
  getPhoneDigits,
  isCompletePhoneNumber
} from './phoneFormatter';

// Auto-save utility
// useAutoSave moved to hooks folder

// Date formatting utilities
export {
  addDays,
  addMonths,
  formatDateCompact,
  formatDateForDisplay,
  formatDateShort,
  formatDateToYYYYMMDD,
  formatMonthYear,
  formatWeekRange,
  getDayName,
  getDayNameShort,
  getToday,
  getWeekDates,
  isFuture,
  isPast,
  isToday,
  parseLocalDate} from './dateFormatter';

// Currency formatting utilities
export {
  formatCurrency,
  formatCurrencyCompact,
  formatDiscount,
  formatDollars,
  formatPercentage,
  formatPrice,
  formatPriceNoSymbol,
  formatPriceRange,
  formatPriceWithTax,
  parseCurrency} from './currencyFormatter';

// Modal code-splitting utilities
export {
  getModalPrefetchManager,
  type ModalPrefetchConfig,
  type ModalType,
  type PrefetchStrategy,
  preloadCriticalModals,
  useModalTriggerRef} from './modalCodeSplitting';

// Business utilities
export { findBusinessByLocation } from './findBusinessByLocation';


// Legacy business utilities removed - now using DataProvider for tenant-based routing

// Site data utilities
export {
  formatContactInfo,
  formatFAQ,
  formatHero,
  formatReviews,
  formatSEO,
  formatServices,
  formatSiteData,
  formatSocialMedia,
  getAbsoluteUrl,
  getBusinessInfo} from './siteUtils';

// Legacy areas utilities removed - no longer needed for tenant-based routing

// Locations data utilities (simplified locations.json format)
export {
  getAllLocations,
  getFooterLocations,
  getLocationsByState,
  type LocationInfo,
  type LocationStateInfo
} from './locationsUtils';

// Image rotation utilities
export {
  createDebouncedRotation,
  getAccessibilityAttributes,
  getImageOpacityClasses,
  getNextImageIndex,
  getPreviousImageIndex,
  getTransitionDuration,
  getTransitionStyles,
  getVisibleImageIndices,
  type ImageRotationActions,
  type ImageRotationConfig,
  type ImageRotationState,
  preloadImage,
  preloadImages,
  validateImageRotationConfig} from './imageRotation';

// Responsive image utilities
export {
  generateSrcSet,
  getCardImageSizes,
  getHeroImageSizes,
  getServiceImageSizes} from './imageUtils';

// Image rotation hooks moved to @/shared/hooks

// Logger utility
export { default as logger } from './logger';

// Tenant config migration utilities
export {
  affiliateToTenantConfig,
  type LegacyTenantConfig,
  legacyToTenantConfig,
  tenantConfigToLegacy} from './tenantConfigMigration';

// Tenant asset locator utilities
export {
  type AssetExtension,
  type AssetLocatorOptions,
  type AssetType,
  getTenantAssetUrl,
  getTenantAssetUrls,
  getTenantLogoUrls,
  hasFileExtension,
  type LogoUrls,
  normalizeAssetUrl} from './assetLocator';

// Domain utilities
export {
  addDomainMapping,
  getDomainMappings,
  getTenantFromDomain,
  isReservedSubdomain
} from './domainUtils';

// Tenant data transformation utilities
export {
  formatBusinessPhone,
  getBusinessEmail,
  getPrimaryLocation,
  getPrimaryServiceAreas,
  hasSocialMedia,
  type SocialMediaLinks,
  transformSocialMedia
} from './tenantDataTransform';

============================
FILE: frontend\src\shared\utils\industryRegistry.ts
============================
/**
 * Industry Template Registry
 * 
 * Maps industry types to their template data.
 * Updated to use new modular file structure (assets.json, content-defaults.json, seo-defaults.json)
 */

// Industry types enum
export const INDUSTRIES = [
  'mobile-detailing',
  'maid-service',
  'lawncare',
  'pet-grooming',
] as const;

export type Industry = (typeof INDUSTRIES)[number];

// Base industry template structure
export interface IndustryTemplate {
  tenant: {
    brand: string | null;
    businessName: string | null;
    customBranding: boolean;
  };
  slug: string;
  urlPath: string;
  logo: {
    url: string;
    alt: string;
    darkUrl?: string;
    lightUrl?: string;
  };
  seo: {
    Title: string;
    subTitle: string;
    canonicalPath: string;
    OgImage?: string;
    TwitterImage?: string;
    robots?: string;
  };
  hero: {
    h1: string;
    subTitle: string;
    Images: Array<{
      url: string;
      alt: string;
      width?: number;
      height?: number;
      priority?: boolean;
    }>;
  };
  servicesGrid?: unknown[];
  [key: string]: unknown;
}

/**
 * Load industry template from modular loaders
 * All industries now use the new modular architecture
 * 
 * @param industry - Industry type
 * @returns Promise resolving to the industry template
 */
export async function getIndustryTemplate(
  industry: Industry
): Promise<IndustryTemplate> {
  try {
    // All industries now use modular loaders via index.ts
    let config;
    
    switch (industry) {
      case 'mobile-detailing': {
        const { loadMobileDetailingConfig } = await import('@/data/mobile-detailing');
        config = loadMobileDetailingConfig();
        break;
      }
      case 'pet-grooming': {
        const { loadPetGroomingConfig } = await import('@/data/pet-grooming');
        config = await loadPetGroomingConfig();
        break;
      }
      case 'maid-service': {
        const { loadMaidServiceConfig } = await import('@/data/maid-service');
        config = await loadMaidServiceConfig();
        break;
      }
      case 'lawncare': {
        const { loadLawncareConfig } = await import('@/data/lawncare');
        config = await loadLawncareConfig();
        break;
      }
      default: {
        const unknownIndustry: string = industry;
        throw new Error(`Unknown industry: ${unknownIndustry}`);
      }
    }

    // Convert MainSiteConfig to IndustryTemplate format
    return {
      tenant: {
        brand: config.brand || null,
        businessName: null,
        customBranding: false,
      },
      slug: config.slug || 'site',
      urlPath: config.urlPath || '/',
      logo: config.logo,
      seo: {
        Title: config.seo.title,
        subTitle: config.seo.description,
        canonicalPath: config.seo.canonicalPath,
        OgImage: config.seo.ogImage,
        TwitterImage: config.seo.twitterImage,
        robots: config.seo.robots,
      },
      hero: {
        h1: config.hero.h1,
        subTitle: config.hero.sub || '',
        Images: config.hero.images || [],
      },
      servicesGrid: config.servicesGrid,
    };
  } catch (error) {
    console.error('Failed to load industry template:', error);
    const errorMsg = error instanceof Error ? error.message : 'Unknown error';
    const industryStr: string = industry;
    throw new Error(`Failed to load template for industry ${industryStr}: ${errorMsg}`);
  }
}

/**
 * Validate if a string is a valid industry
 * @param value - Value to check
 * @returns True if valid industry
 */
export function isValidIndustry(value: unknown): value is Industry {
  return typeof value === 'string' && INDUSTRIES.includes(value as Industry);
}


============================
FILE: frontend\src\shared\utils\loadDefaults.ts
============================
/**
 * Load industry defaults for tenant provisioning
 * 
 * These defaults are used ONLY during tenant signup to populate the database.
 * At runtime, the site loads content from the database (single source of truth).
 */

export type IndustrySlug = 
  | 'mobile-detailing'
  | 'lawncare'
  | 'maid-service'
  | 'pet-grooming';

export interface FAQItem {
  category: string;
  question: string;
  answer: string;
}

export interface ContentDefaults {
  hero: {
    h1: string;
    subTitle: string;
  };
  reviews: {
    title: string;
    subtitle: string;
  };
  faq: {
    title: string;
    subtitle: string;
  };
}

export interface SEODefaults {
  title: string;
  description: string;
  keywords: string;
  ogImage: string;
  twitterImage: string;
  canonicalPath: string;
  robots: string;
}

export interface IndustryDefaults {
  content: ContentDefaults;
  seo: SEODefaults;
  faqItems: FAQItem[];
}

/**
 * Load FAQ items for an industry from all category files
 * 
 * @param industry - Industry identifier
 * @returns Array of FAQ items from all categories
 */
async function loadFAQItems(industry: IndustrySlug): Promise<FAQItem[]> {
  const categories = [
    'general',
    'services',
    'pricing',
    'scheduling',
    'locations',
    'preparation',
    'payments',
    'warranty',
    'aftercare',
  ];
  
  const faqArrays = await Promise.all(
    categories.map(async (category) => {
      try {
        const module = await import(`@/data/${industry}/faq/${category}.json`) as { default: FAQItem[] };
        return module.default;
      } catch {
        // Category file might not exist for all industries
        return [];
      }
    })
  );
  
  // Flatten all categories into a single array (no IDs needed for database storage)
  return faqArrays.flat();
}

/**
 * Load all defaults for an industry (content + SEO + FAQ items)
 * 
 * Used ONLY during tenant signup to populate website.content table.
 * Not used at runtime - DB is the single source of truth.
 * 
 * @param industry - Industry identifier
 * @returns All defaults for database provisioning
 */
export async function loadDefaults(
  industry: IndustrySlug
): Promise<IndustryDefaults> {
  try {
    const [contentModule, seoModule, faqItems] = await Promise.all([
      import(`@/data/${industry}/content-defaults.json`) as Promise<{ default: ContentDefaults }>,
      import(`@/data/${industry}/seo-defaults.json`) as Promise<{ default: SEODefaults }>,
      loadFAQItems(industry)
    ]);
    
    return {
      content: contentModule.default,
      seo: seoModule.default,
      faqItems
    };
  } catch (error) {
    console.error(`Failed to load defaults for ${industry}:`, error);
    throw new Error(`Defaults not found for industry: ${industry}`);
  }
}



============================
FILE: frontend\src\shared\utils\locationDataLoader.ts
============================
/**
 * Location data loader with deep merge capabilities
 * Handles loading and merging main site config with location-specific data
 */

import type { LocationPage, MainSiteConfig } from '@/shared/types/location';
import { 
  createMergedLocationData, 
  type DeepMergeOptions, 
  validateMergedData} from '@/shared/utils/deepMerge';

/**
 * Load and merge location data
 */
export async function loadMergedLocationData(
  mainConfigPath: string,
  locationConfigPath: string,
  options?: Partial<DeepMergeOptions>
): Promise<{
  data: LocationPage;
  validation: ReturnType<typeof validateMergedData>;
  wasMerged: boolean;
}> {
  try {
    // Load main site config
    const mainConfigResponse = await fetch(mainConfigPath);
    if (!mainConfigResponse.ok) {
      throw new Error(`Failed to load main config: ${mainConfigResponse.statusText}`);
    }
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- response.json() returns any
    const mainConfig: MainSiteConfig = await mainConfigResponse.json();

    // Load location config
    const locationConfigResponse = await fetch(locationConfigPath);
    if (!locationConfigResponse.ok) {
      throw new Error(`Failed to load location config: ${locationConfigResponse.statusText}`);
    }
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- response.json() returns any
    const locationData: LocationPage = await locationConfigResponse.json();

    // Merge the data
    const mergedData = createMergedLocationData(mainConfig, locationData, options);
    
    // Validate merged data
    const validation = validateMergedData(mergedData);

    return {
      data: mergedData,
      validation,
      wasMerged: true
    };
  } catch (error) {
    console.error('Error loading merged location data:', error);
    throw error;
  }
}

/**
 * Load multiple location configs and merge with main config
 */
export async function loadAllMergedLocations(
  mainConfigPath: string,
  locationConfigPaths: string[],
  options?: Partial<DeepMergeOptions>
): Promise<Array<{
  path: string;
  data: LocationPage;
  validation: ReturnType<typeof validateMergedData>;
  wasMerged: boolean;
}>> {
  try {
    // Load main config once
    const mainConfigResponse = await fetch(mainConfigPath);
    if (!mainConfigResponse.ok) {
      throw new Error(`Failed to load main config: ${mainConfigResponse.statusText}`);
    }
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- response.json() returns any
    const mainConfig: MainSiteConfig = await mainConfigResponse.json();

    // Load and merge all location configs
    const results = await Promise.all(
      locationConfigPaths.map(async (path) => {
        try {
          const locationConfigResponse = await fetch(path);
          if (!locationConfigResponse.ok) {
            throw new Error(`Failed to load location config: ${locationConfigResponse.statusText}`);
          }
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- response.json() returns any
          const locationData: LocationPage = await locationConfigResponse.json();

          const mergedData = createMergedLocationData(mainConfig, locationData, options);
          const validation = validateMergedData(mergedData);

          return {
            path,
            data: mergedData,
            validation,
            wasMerged: true
          };
        } catch (error) {
          console.error(`Error loading location config ${path}:`, error);
          throw error;
        }
      })
    );

    return results;
  } catch (error) {
    console.error('Error loading all merged locations:', error);
    throw error;
  }
}

/**
 * Sync load merged location data (for build time or server-side)
 */
export function loadMergedLocationDataSync(
  mainConfig: MainSiteConfig,
  locationData: LocationPage,
  options?: Partial<DeepMergeOptions>
): {
  data: LocationPage;
  validation: ReturnType<typeof validateMergedData>;
  wasMerged: boolean;
} {
  const mergedData = createMergedLocationData(mainConfig, locationData, options);
  const validation = validateMergedData(mergedData);

  return {
    data: mergedData,
    validation,
    wasMerged: true
  };
}

/**
 * Create a location data loader with caching
 */
export class LocationDataLoader {
  private cache = new Map<string, LocationPage>();
  private mainConfigCache: MainSiteConfig | null = null;
  private validationCache = new Map<string, ReturnType<typeof validateMergedData>>();

  constructor(
    private mainConfigPath: string,
    private options?: Partial<DeepMergeOptions>
  ) {}

  /**
   * Load main config (with caching)
   */
  async loadMainConfig(): Promise<MainSiteConfig> {
    if (this.mainConfigCache) {
      return this.mainConfigCache;
    }

    const response = await fetch(this.mainConfigPath);
    if (!response.ok) {
      throw new Error(`Failed to load main config: ${response.statusText}`);
    }

    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- response.json() returns any
    const config: MainSiteConfig = await response.json();
    this.mainConfigCache = config;
    return config;
  }

  /**
   * Load merged location data (with caching)
   */
  async loadLocation(locationConfigPath: string): Promise<{
    data: LocationPage;
    validation: ReturnType<typeof validateMergedData>;
    wasMerged: boolean;
  }> {
    const cacheKey = locationConfigPath;
    
    // Check cache
    const cachedData = this.cache.get(cacheKey);
    const cachedValidation = this.validationCache.get(cacheKey);
    
    if (cachedData && cachedValidation) {
      return {
        data: cachedData,
        validation: cachedValidation,
        wasMerged: true
      };
    }

    // Load fresh data
    const mainConfig = await this.loadMainConfig();
    
    const locationResponse = await fetch(locationConfigPath);
    if (!locationResponse.ok) {
      throw new Error(`Failed to load location config: ${locationResponse.statusText}`);
    }
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- response.json() returns any
    const locationData: LocationPage = await locationResponse.json();

    const mergedData = createMergedLocationData(mainConfig, locationData, this.options);
    const validation = validateMergedData(mergedData);

    // Cache results
    this.cache.set(cacheKey, mergedData);
    this.validationCache.set(cacheKey, validation);

    return {
      data: mergedData,
      validation,
      wasMerged: true
    };
  }

  /**
   * Clear cache
   */
  clearCache(): void {
    this.cache.clear();
    this.validationCache.clear();
    this.mainConfigCache = null;
  }

  /**
   * Get cache statistics
   */
  getCacheStats(): {
    mainConfigCached: boolean;
    locationCount: number;
    totalCacheSize: number;
  } {
    return {
      mainConfigCached: this.mainConfigCache !== null,
      locationCount: this.cache.size,
      totalCacheSize: this.cache.size + (this.mainConfigCache ? 1 : 0)
    };
  }
}

/**
 * Create a default location data loader instance
 */
export function createLocationDataLoader(
  mainConfigPath: string = '/src/data/mdh/site.json',
  options?: Partial<DeepMergeOptions>
): LocationDataLoader {
  return new LocationDataLoader(mainConfigPath, options);
}

/**
 * Utility to get all location file paths
 */
export function getLocationFilePaths(basePath: string = '/src/data/locations'): string[] {
  // This would typically be generated at build time or read from a manifest
  // For now, return the known paths
  return [
    `${basePath}/az/bullhead-city.json`,
    `${basePath}/nv/las-vegas.json`
  ];
}

/**
 * Preload all location data
 */
export async function preloadAllLocationData(
  mainConfigPath: string = '/src/data/mdh/site.json',
  locationBasePath: string = '/src/data/locations',
  options?: Partial<DeepMergeOptions>
): Promise<Array<{
  path: string;
  data: LocationPage;
  validation: ReturnType<typeof validateMergedData>;
  wasMerged: boolean;
}>> {
  const loader = createLocationDataLoader(mainConfigPath, options);
  const locationPaths = getLocationFilePaths(locationBasePath);
  
  const results = await Promise.all(
    locationPaths.map(async (path) => {
      const result = await loader.loadLocation(path);
      return {
        path,
        ...result
      };
    })
  );

  return results;
}


============================
FILE: frontend\src\shared\utils\locationsUtils.ts
============================
/**
 * Locations Data Utilities
 * Functions to work with location data from the database
 * TODO: Update to use API calls instead of JSON imports
 */

// Note: Location data is now stored in the database
// These functions should be updated to use API calls

export interface LocationInfo {
  slug: string;
  city: string;
  stateCode: string;
  state: string;
  urlPath: string;
}

export interface LocationStateInfo {
  code: string;
  name: string;
  cities: LocationInfo[];
}

// State code to full name mapping
// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Reserved for future use
const STATE_NAMES: Record<string, string> = {
  'AZ': 'Arizona',
  'NV': 'Nevada', 
  'CA': 'California',
  'UT': 'Utah',
  'CO': 'Colorado',
  'NM': 'New Mexico',
  'TX': 'Texas',
  'FL': 'Florida',
  'WA': 'Washington',
  'OR': 'Oregon'
};

/**
 * Get locations grouped by state from database
 * TODO: Update to use API call to database
 */
export function getLocationsByState(): LocationStateInfo[] {
  console.warn('getLocationsByState is using legacy JSON data. Should be updated to use database API.');
  // TODO: Replace with API call to get locations from database
  return [];
}

/**
 * Get all locations as a flat array
 */
export function getAllLocations(): LocationInfo[] {
  const locationsByState = getLocationsByState();
  return locationsByState.flatMap(state => state.cities);
}

/**
 * Get locations for footer display (limited number for performance)
 */
export function getFooterLocations(limit: number = 12): LocationStateInfo[] {
  const locationsByState = getLocationsByState();
  
  // Limit the number of states and cities shown in footer
  return locationsByState
    .map(state => ({
      ...state,
      cities: state.cities.slice(0, 6) // Max 6 cities per state in footer
    }))
    .slice(0, limit);
}


============================
FILE: frontend\src\shared\utils\logger.ts
============================
/**
 * Logger utility for consistent logging across the application
 * Disables logging in production to avoid console noise
 */

import { env } from '@/shared/env';

type LogLevel = 'debug' | 'info' | 'warn' | 'error';

interface LoggerConfig {
  enabled: boolean;
  level: LogLevel;
}

const config: LoggerConfig = {
  enabled: env.DEV,
  level: 'debug'
};

const levels: Record<LogLevel, number> = {
  debug: 0,
  info: 1,
  warn: 2,
  error: 3
};

class Logger {
  private shouldLog(level: LogLevel): boolean {
    return config.enabled && levels[level] >= levels[config.level];
  }

  debug(message: string, ...args: unknown[]): void {
    if (this.shouldLog('debug')) {
      // eslint-disable-next-line no-console -- Logger utility needs console access
      console.log(`[DEBUG] ${message}`, ...args);
    }
  }

  info(message: string, ...args: unknown[]): void {
    if (this.shouldLog('info')) {
      // eslint-disable-next-line no-console -- Logger utility needs console access
      console.info(`[INFO] ${message}`, ...args);
    }
  }

  warn(message: string, ...args: unknown[]): void {
    if (this.shouldLog('warn')) {
      console.warn(`[WARN] ${message}`, ...args);
    }
  }

  error(message: string, ...args: unknown[]): void {
    if (this.shouldLog('error')) {
      console.error(`[ERROR] ${message}`, ...args);
    }
  }

  // Booking-specific loggers
  booking = {
    stepChanged: (step: string) => { this.debug(`🔄 Step changed to: ${step}`); },
    dataUpdated: (data: unknown) => { this.debug('📊 Booking data updated:', data); },
    vehicleSelected: (vehicle: string) => { this.debug(`🚗 Vehicle selected: ${vehicle}`); },
    serviceSelected: (service: string) => { this.debug(`🎯 Service selected: ${service}`); },
    addonsSelected: (addons: string[]) => { this.debug('➕ Addons selected:', addons); },
    scheduleSelected: (schedule: unknown) => { this.debug('📅 Schedule selected:', schedule); },
    paymentSelected: (method: string) => { this.debug(`💳 Payment method selected: ${method}`); },
    bookingCompleted: () => { this.info('🎉 Booking completed!'); },
    bookingReset: () => { this.debug('🔄 Booking reset'); },
    error: (error: string) => { this.error(`❌ Booking error: ${error}`); }
  };

  // Data loading loggers
  data = {
    loading: (type: string, params: unknown) => { this.debug(`🔍 Loading ${type}:`, params); },
    loaded: (type: string, count: number) => { this.debug(`📊 Loaded ${count} ${type}`); },
    error: (type: string, error: string) => { this.error(`❌ Error loading ${type}: ${error}`); },
    noData: (type: string, params: unknown) => { this.warn(`⚠️ No ${type} available:`, params); }
  };
}

export const logger = new Logger();
export default logger;


============================
FILE: frontend\src\shared\utils\modalCodeSplitting.ts
============================
/**
 * Advanced modal code-splitting utilities for optimal performance
 * This module provides intelligent prefetching strategies to minimize first paint delay
 */

type ModalType = 'quote' | 'login';

interface PrefetchStrategy {
  immediate: boolean;
  onHover: boolean;
  onFocus: boolean;
  onViewport: boolean;
  delay?: number;
}

interface ModalPrefetchConfig {
  [key: string]: PrefetchStrategy;
}

// Default prefetch strategies for different modals
const DEFAULT_PREFETCH_CONFIG: ModalPrefetchConfig = {
  quote: {
    immediate: false,
    onHover: true,
    onFocus: true,
    onViewport: true,
    delay: 2000, // Prefetch after 2 seconds
  },
  login: {
    immediate: false,
    onHover: true,
    onFocus: true,
    onViewport: true,
    delay: 1500, // Login is more commonly used, prefetch sooner
  },
};

import type React from 'react';

// Type for dynamic imports
type ModalModule = {
  default: React.ComponentType<unknown>;
  [key: string]: unknown;
};

class ModalPrefetchManager {
  private prefetchedModules = new Map<ModalType, Promise<ModalModule>>();
  private prefetchStrategies = new Map<ModalType, PrefetchStrategy>();
  private intersectionObserver?: IntersectionObserver;
  private prefetchTimers = new Map<ModalType, ReturnType<typeof setTimeout>>();

  constructor(config: ModalPrefetchConfig = DEFAULT_PREFETCH_CONFIG) {
    Object.entries(config).forEach(([modalType, strategy]) => {
      this.prefetchStrategies.set(modalType as ModalType, strategy);
    });

    this.setupIntersectionObserver();
    this.setupDelayedPrefetching();
  }

  private setupIntersectionObserver() {
    if (typeof window === 'undefined') return;

    this.intersectionObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const modalType = entry.target.getAttribute('data-modal-trigger') as ModalType | null;
            if (modalType) {
              void this.prefetch(modalType);
            }
          }
        });
      },
      {
        threshold: 0.1,
        rootMargin: '100px', // Start prefetching when element is 100px away from viewport
      }
    );
  }

  private setupDelayedPrefetching() {
    this.prefetchStrategies.forEach((strategy, modalType) => {
      if (strategy.delay && strategy.delay > 0) {
        const timer = setTimeout(() => {
          void this.prefetch(modalType);
        }, strategy.delay);
        this.prefetchTimers.set(modalType, timer);
      }
    });
  }

  private shouldPrefetchOnViewport(modalType: ModalType): boolean {
    return this.prefetchStrategies.get(modalType)?.onViewport ?? false;
  }

  async prefetch(modalType: ModalType): Promise<void> {
    if (this.prefetchedModules.has(modalType)) {
      return; // Already prefetched or in progress
    }

    let importPromise: Promise<ModalModule>;

    switch (modalType) {
      case 'quote':
        importPromise = import('@/features/quotes/components/RequestQuoteModal') as Promise<ModalModule>;
        break;
      case 'login':
        importPromise = import('@/features/auth/components/LoginModal') as Promise<ModalModule>;
        break;
      default:
        // Unknown modal type
        return;
    }

    this.prefetchedModules.set(modalType, importPromise);

    try {
      await importPromise;
      // Modal prefetched successfully
    } catch (error) {
      console.error(`❌ Failed to prefetch ${modalType} modal:`, error);
      // Remove failed prefetch so it can be retried
      this.prefetchedModules.delete(modalType);
    }
  }

  observeElement(element: HTMLElement, modalType: ModalType) {
    if (this.intersectionObserver && this.shouldPrefetchOnViewport(modalType)) {
      element.setAttribute('data-modal-trigger', modalType);
      this.intersectionObserver.observe(element);
    }
  }

  unobserveElement(element: HTMLElement) {
    if (this.intersectionObserver) {
      this.intersectionObserver.unobserve(element);
    }
  }

  // Event handlers for manual triggering
  handleHover = (modalType: ModalType): void => {
    const strategy = this.prefetchStrategies.get(modalType);
    if (strategy?.onHover) {
      void this.prefetch(modalType);
    }
  };

  handleFocus = (modalType: ModalType): void => {
    const strategy = this.prefetchStrategies.get(modalType);
    if (strategy?.onFocus) {
      void this.prefetch(modalType);
    }
  };

  // Check if a modal is already prefetched
  isPrefetched(modalType: ModalType): boolean {
    return this.prefetchedModules.has(modalType);
  }

  // Get prefetch status for debugging
  getStatus() {
    const status: Record<string, boolean> = {};
    this.prefetchStrategies.forEach((_, modalType) => {
      status[modalType] = this.isPrefetched(modalType);
    });
    return status;
  }

  // Cleanup method
  destroy() {
    this.intersectionObserver?.disconnect();
    this.prefetchTimers.forEach((timer) => { clearTimeout(timer); });
    this.prefetchTimers.clear();
  }
}

// Global manager instance
let globalPrefetchManager: ModalPrefetchManager | null = null;

export const getModalPrefetchManager = (): ModalPrefetchManager => {
  if (!globalPrefetchManager) {
    globalPrefetchManager = new ModalPrefetchManager();
  }
  return globalPrefetchManager;
};

// Convenience hooks and utilities
export const useModalPrefetch = () => {
  const manager = getModalPrefetchManager();

  return {
    prefetch: (modalType: ModalType) => manager.prefetch(modalType),
    handleHover: (modalType: ModalType) => { manager.handleHover(modalType); },
    handleFocus: (modalType: ModalType) => { manager.handleFocus(modalType); },
    observeElement: (element: HTMLElement, modalType: ModalType) => 
      { manager.observeElement(element, modalType); },
    unobserveElement: (element: HTMLElement) => { manager.unobserveElement(element); },
    isPrefetched: (modalType: ModalType) => manager.isPrefetched(modalType),
    getStatus: () => manager.getStatus(),
  };
};

// React hook for automatic element observation
export const useModalTriggerRef = (modalType: ModalType) => {
  const manager = getModalPrefetchManager();

  return (element: HTMLElement | null) => {
    if (element) {
      manager.observeElement(element, modalType);
      return () => { manager.unobserveElement(element); };
    }
  };
};

// Preload critical modals on app initialization
export const preloadCriticalModals = async (): Promise<void> => {
  const manager = getModalPrefetchManager();
  
  // Preload login modal as it's commonly used
  await manager.prefetch('login');
  
  // Optionally preload quote modal after a short delay
  setTimeout(() => {
    void manager.prefetch('quote');
  }, 3000);
};

export type { ModalPrefetchConfig, ModalType, PrefetchStrategy };


============================
FILE: frontend\src\shared\utils\performance.ts
============================
/**
 * Performance monitoring utilities for lazy loading and prefetching
 */

import { env } from '@/shared/env';

interface PerformanceMetrics {
  componentLoadTime: number;
  prefetchTime: number;
  totalTime: number;
}

class PerformanceMonitor {
  private metrics = new Map<string, PerformanceMetrics>();
  private startTimes = new Map<string, number>();

  /**
   * Start timing a component load
   */
  startTiming(componentName: string): void {
    this.startTimes.set(componentName, performance.now());
  }

  /**
   * End timing and record metrics
   */
  endTiming(componentName: string, type: 'load' | 'prefetch'): void {
    const startTime = this.startTimes.get(componentName);
    if (!startTime) return;

    const endTime = performance.now();
    const duration = endTime - startTime;

    const existing = this.metrics.get(componentName) || {
      componentLoadTime: 0,
      prefetchTime: 0,
      totalTime: 0
    };

    if (type === 'load') {
      existing.componentLoadTime = duration;
    } else {
      existing.prefetchTime = duration;
    }

    existing.totalTime = existing.componentLoadTime + existing.prefetchTime;
    this.metrics.set(componentName, existing);

    // Log performance data in development
    if (env.DEV) {
      // Performance measurement logged
    }
  }

  /**
   * Get performance metrics for a component
   */
  getMetrics(componentName: string): PerformanceMetrics | undefined {
    return this.metrics.get(componentName);
  }

  /**
   * Get all performance metrics
   */
  getAllMetrics(): Map<string, PerformanceMetrics> {
    return new Map(this.metrics);
  }

  /**
   * Clear all metrics
   */
  clearMetrics(): void {
    this.metrics.clear();
    this.startTimes.clear();
  }
}

export const performanceMonitor = new PerformanceMonitor();

/**
 * Hook for monitoring component performance
 */
export const usePerformanceMonitor = (componentName: string) => {
  const startLoad = () => { performanceMonitor.startTiming(componentName); };
  const endLoad = () => { performanceMonitor.endTiming(componentName, 'load'); };
  const startPrefetch = () => { performanceMonitor.startTiming(componentName); };
  const endPrefetch = () => { performanceMonitor.endTiming(componentName, 'prefetch'); };

  return {
    startLoad,
    endLoad,
    startPrefetch,
    endPrefetch
  };
};


============================
FILE: frontend\src\shared\utils\phoneFormatter.ts
============================
/**
 * Phone Number Formatter Utility
 * Ensures phone numbers are always in the format (###) ###-####
 */

/**
 * Formats a phone number string to (###) ###-#### format
 * @param input - Raw phone number input (can include spaces, dashes, dots, etc.)
 * @returns Formatted phone number string
 */
export function formatPhoneNumber(input: string): string {
  if (!input) return '';
  
  // Remove all non-digit characters
  const digitsOnly = input.replace(/\D/g, '');
  
  // Remove leading 1 if it exists (country code)
  const withoutCountryCode = digitsOnly.startsWith('1') && digitsOnly.length > 10 
    ? digitsOnly.slice(1) 
    : digitsOnly;
  
  // If we don't have exactly 10 digits, return the cleaned input
  if (withoutCountryCode.length !== 10) {
    return withoutCountryCode;
  }
  
  // Format as (###) ###-####
  const areaCode = withoutCountryCode.slice(0, 3);
  const prefix = withoutCountryCode.slice(3, 6);
  const lineNumber = withoutCountryCode.slice(6, 10);
  
  return `(${areaCode}) ${prefix}-${lineNumber}`;
}

/**
 * Validates if a phone number is complete (has 10 digits)
 * @param input - Phone number string
 * @returns boolean indicating if the number is complete
 */
export function isCompletePhoneNumber(input: string): boolean {
  const digitsOnly = input.replace(/\D/g, '');
  const withoutCountryCode = digitsOnly.startsWith('1') && digitsOnly.length > 10 
    ? digitsOnly.slice(1) 
    : digitsOnly;
  
  return withoutCountryCode.length === 10;
}

/**
 * Gets just the digits from a phone number (useful for storage/API calls)
 * @param input - Phone number string
 * @returns String of digits only
 */
export function getPhoneDigits(input: string): string {
  const digitsOnly = input.replace(/\D/g, '');
  const withoutCountryCode = digitsOnly.startsWith('1') && digitsOnly.length > 10 
    ? digitsOnly.slice(1) 
    : digitsOnly;
  
  return withoutCountryCode;
}

/**
 * Formats phone number as user types (real-time formatting)
 * @param input - Current input value
 * @param cursorPosition - Current cursor position
 * @returns Object with formatted value and new cursor position
 */
export function formatPhoneNumberAsTyped(input: string, cursorPosition: number): {
  value: string;
  cursorPosition: number;
} {
  if (!input) return { value: '', cursorPosition: 0 };
  
  // Get the current digits
  const currentDigits = getPhoneDigits(input);
  
  // If we have 10+ digits, format it
  if (currentDigits.length >= 10) {
    const formatted = formatPhoneNumber(currentDigits);
    
    // Calculate new cursor position
    let newPosition = cursorPosition;
    
    // Adjust cursor position based on formatting characters added
    if (cursorPosition > 0) {
      // Count formatting characters before cursor in original input
      const beforeCursor = input.slice(0, cursorPosition);
      const digitsBeforeCursor = beforeCursor.replace(/\D/g, '').length;
      
      // Find position in formatted string after same number of digits
      let digitCount = 0;
      for (let i = 0; i < formatted.length; i++) {
        if (/\d/.test(formatted[i])) {
          digitCount++;
          if (digitCount === digitsBeforeCursor) {
            newPosition = i + 1;
            break;
          }
        }
      }
    }
    
    return { value: formatted, cursorPosition: newPosition };
  }
  
  // If less than 10 digits, just return cleaned input
  return { value: currentDigits, cursorPosition: cursorPosition };
}


============================
FILE: frontend\src\shared\utils\schemaUtils.ts
============================
/**
 * Utility functions for generating Schema.org structured data
 * from location configuration data
 * 
 * Industry-agnostic: All functions accept site config as parameter
 */

import type { LocationPage, MainSiteConfig } from '@/shared/types/location';

/**
 * Automatically generate Schema.org image array from location images
 * Filters images by role and returns their URLs
 */
export function generateSchemaImages(
  locationData: LocationPage, 
  roles: string[] = ['hero']
): string[] {
  if (!locationData.images) {
    return [];
  }

  return locationData.images
    .filter(img => roles.includes(img.role))
    .map(img => img.url);
}

/**
 * Generate complete Schema.org LocalBusiness structure
 * from location data with automatic image population and enhanced fields
 */
export function generateLocationSchema(
  locationData: LocationPage,
  siteConfig: MainSiteConfig
): Record<string, unknown> {
  // Get hero images automatically
  const heroImages = generateSchemaImages(locationData, ['hero']);
  
  // Auto-generate area served from postal codes, neighborhoods, and city
  const areaServed = [
    locationData.city,
    ...(locationData.serviceArea?.postalCodes || []),
    ...(locationData.neighborhoods || []).map(n => `${n}, ${locationData.stateCode}`)
  ];

  // Base schema structure with auto-generated fields
  const domain = window.location.host;
  
  const baseSchema = {
    "@context": "https://schema.org",
    "@type": "LocalBusiness",
    "name": locationData.header?.businessName || `${locationData.city} ${siteConfig.brand}`,
    "url": `https://${domain}${locationData.urlPath}`,
    "telephone": locationData.header?.phoneE164 || siteConfig.contact?.phone,
    "address": {
      "@type": "PostalAddress",
      "addressLocality": locationData.city,  // Auto-generated
      "addressRegion": locationData.stateCode,  // Auto-generated
      "postalCode": locationData.postalCode || ""  // Auto-generated from location data
    },
    "areaServed": areaServed,  // Auto-generated
    "geo": {
      "@type": "GeoCoordinates",
      "latitude": locationData.latitude,
      "longitude": locationData.longitude
    },
    "sameAs": [
      siteConfig.socials?.facebook,
      siteConfig.socials?.instagram,
      siteConfig.socials?.youtube,
      siteConfig.socials?.googleBusiness
    ].filter(Boolean),
    "description": locationData.seo.description || `Professional ${siteConfig.brand} services in ${locationData.city}, ${locationData.stateCode}`,
    "priceRange": "$$",
    "currenciesAccepted": "USD",
    "paymentAccepted": ["Cash", "Credit Card", "Debit Card", "Check"],
    "serviceType": siteConfig.servicesGrid?.map(s => s.title) || []
  };

  // Add images if available
  let schema = { ...baseSchema };
  if (heroImages.length > 0) {
    schema.image = heroImages;
  }

  // Add aggregate rating from site.json (global reviews)
  if (siteConfig.reviews?.ratingValue && siteConfig.reviews.reviewCount) {
    schema.aggregateRating = {
      "@type": "AggregateRating",
      "ratingValue": siteConfig.reviews.ratingValue,
      "reviewCount": siteConfig.reviews.reviewCount.toString(),
      "bestRating": "5",
      "worstRating": "1"
    };
  }

  // Note: Individual reviews are handled globally, not per location
  // Reviews are managed through the main Reviews component and site.json

  // Add business hours from top-level openingHours field
  if (locationData.openingHours) {
    schema.openingHours = locationData.openingHours;
  }

  // Add operational information for better service understanding
  if (locationData.ops) {
    const operationalInfo = getOperationalInfo(locationData);
    
    // Add service area information
    schema.hasOfferCatalog = {
      "@type": "OfferCatalog",
      "name": "Mobile Detailing Services",
      "itemListElement": [
        {
          "@type": "Offer",
          "itemOffered": {
            "@type": "Service",
            "name": "Mobile Auto Detailing",
            "description": `Professional mobile detailing within ${operationalInfo.serviceRadiusMiles} miles`,
            "areaServed": {
              "@type": "GeoCircle",
              "geoMidpoint": {
                "@type": "GeoCoordinates",
                "latitude": locationData.latitude,
                "longitude": locationData.longitude
              },
              "geoRadius": `${operationalInfo.serviceRadiusMiles * 1609.34}` // Convert miles to meters
            }
          }
        }
      ]
    };

    // Add availability information
    if (operationalInfo.acceptsSameDay) {
      schema.availability = "https://schema.org/InStock";
    }
  }

  // Add pricing information if available
  if (locationData.pricingModifierPct !== undefined) {
    const pricingValidation = validatePricingModifier(locationData.pricingModifierPct);
    if (pricingValidation.isValid) {
      schema.priceRange = pricingValidation.value === 0 
        ? "$$" 
        : pricingValidation.value > 0 
          ? "$$$" 
          : "$";
    }
  }

  return schema;
}

/**
 * Generate FAQ Schema from location FAQs
 */
export function generateFAQSchema(faqs: Array<{ id?: string; q: string; a: string }>): Record<string, unknown> {
  return {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    "mainEntity": faqs.map(faq => ({
      "@type": "Question",
      "name": faq.q,
      "acceptedAnswer": {
        "@type": "Answer",
        "text": faq.a
      }
    }))
  };
}

/**
 * Convert FAQItem format to generateFAQSchema format
 */
export function convertFAQItemsToSchemaFormat(faqItems: Array<{ 
  id?: string; 
  question: string; 
  answer: string; 
  category?: string; 
}>): Array<{ id?: string; q: string; a: string }> {
  return faqItems.map(item => ({
    id: item.id,
    q: item.question,
    a: item.answer
  }));
}

/**
 * Get service-specific image from location data with fallback
 */
export function getServiceImageFromLocation(
  locationData: LocationPage | null, 
  serviceRole: "auto" | "marine" | "rv", 
  fallbackImage: string
): {
  url: string;
  alt: string;
  width?: number;
  height?: number;
  priority?: boolean;
} {
  if (!locationData?.images || locationData.images.length === 0) {
    return {
      url: fallbackImage,
      alt: "Service image",
      width: 400,
      height: 300,
      priority: false
    };
  }

  const serviceImage = locationData.images.find(img => img.role === serviceRole);
  
  if (serviceImage) {
    return {
      url: serviceImage.url,
      alt: serviceImage.alt,
      width: serviceImage.width || 400,
      height: serviceImage.height || 300,
      priority: serviceImage.priority || false
    };
  }

  // Fallback to default image
  return {
    url: fallbackImage,
    alt: "Service image",
    width: 400,
    height: 300,
    priority: false
  };
}

/**
 * Get operational information for a location
 */
export function getOperationalInfo(locationData: LocationPage): {
  acceptsSameDay: boolean;
  leadTimeDays: number;
  serviceRadiusMiles: number;
  leadTimeText: string;
  serviceAreaText: string;
} {
  const ops = locationData.ops || {};
  
  return {
    acceptsSameDay: ops.acceptsSameDay || false,
    leadTimeDays: ops.leadTimeDays || 2,
    serviceRadiusMiles: ops.serviceRadiusMiles || 25,
    leadTimeText: ops.acceptsSameDay ? 'Same day available' : `${ops.leadTimeDays || 2} day lead time`,
    serviceAreaText: `${ops.serviceRadiusMiles || 25} mile service radius`
  };
}

/**
 * Check if a postal code is served by a location
 */
export function isPostalCodeServed(locationData: LocationPage, postalCode: string): boolean {
  if (!locationData.serviceArea?.postalCodes) {
    return false;
  }
  
  return locationData.serviceArea.postalCodes.includes(postalCode);
}

/**
 * Get service area information for a location
 */
export function getServiceAreaInfo(locationData: LocationPage): {
  postalCodes: string[];
  postalCodeCount: number;
  serviceAreaText: string;
  primaryPostalCode: string;
} {
  const postalCodes = locationData.serviceArea?.postalCodes || [];
  
  return {
    postalCodes,
    postalCodeCount: postalCodes.length,
    serviceAreaText: postalCodes.length > 0 
      ? `We serve ${postalCodes.length} ZIP code${postalCodes.length === 1 ? '' : 's'} in ${locationData.city}`
      : `Service area: ${locationData.city}`,
    primaryPostalCode: postalCodes[0] || locationData.postalCode
  };
}

/**
 * Validate and format pricing modifier
 */
export function validatePricingModifier(pricingModifierPct?: number): {
  isValid: boolean;
  value: number;
  percentage: number;
  displayText: string;
  error?: string;
} {
  // Default to no markup if not provided
  const value = pricingModifierPct ?? 0;
  const percentage = value * 100;

  // Validate range (reasonable limits: -50% to +100%)
  if (value < -0.5 || value > 1.0) {
    return {
      isValid: false,
      value,
      percentage,
      displayText: `${percentage.toFixed(1)}%`,
      error: 'Pricing modifier must be between -0.50 (-50%) and 1.00 (+100%)'
    };
  }

  // Format display text
  let displayText: string;
  if (value === 0) {
    displayText = 'Standard pricing';
  } else if (value > 0) {
    displayText = `+${percentage.toFixed(1)}% markup`;
  } else {
    displayText = `${percentage.toFixed(1)}% discount`;
  }

  return {
    isValid: true,
    value,
    percentage,
    displayText
  };
}

/**
 * Apply pricing modifier to a base price
 */
export function applyPricingModifier(basePrice: number, pricingModifierPct?: number): {
  originalPrice: number;
  modifier: number;
  finalPrice: number;
  difference: number;
  displayText: string;
} {
  const validation = validatePricingModifier(pricingModifierPct);
  
  if (!validation.isValid) {
    throw new Error(`Invalid pricing modifier: ${validation.error}`);
  }

  const finalPrice = basePrice * (1 + validation.value);
  const difference = finalPrice - basePrice;

  return {
    originalPrice: basePrice,
    modifier: validation.value,
    finalPrice: Math.round(finalPrice * 100) / 100, // Round to 2 decimal places
    difference: Math.round(difference * 100) / 100,
    displayText: validation.displayText
  };
}

/**
 * Generate BreadcrumbList Schema for location pages
 */
export function generateBreadcrumbSchema(locationData: LocationPage): Record<string, unknown> {
  return {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": [
      {
        "@type": "ListItem",
        "position": 1,
        "name": "Home",
        "item": "https://thatsmartsite.com/"
      },
      {
        "@type": "ListItem",
        "position": 2,
        "name": locationData.state,
        "item": `https://thatsmartsite.com/${locationData.stateCode.toLowerCase()}/`
      },
      {
        "@type": "ListItem",
        "position": 3,
        "name": locationData.city,
        "item": `https://thatsmartsite.com${locationData.urlPath}`
      }
    ]
  };
}

/**
 * Generate Organization Schema for main site
 */
export function generateOrganizationSchema(siteConfig: MainSiteConfig): Record<string, unknown> {
  const domain = window.location.host;
  
  const schema: Record<string, unknown> = {
    "@context": "https://schema.org",
    "@type": "Organization",
    "name": siteConfig.brand,
    "url": `https://${domain}/`,
    "logo": `https://${domain}${siteConfig.logo.url}`,
    "sameAs": [
      siteConfig.socials?.facebook,
      siteConfig.socials?.instagram,
      siteConfig.socials?.youtube,
      siteConfig.socials?.googleBusiness
    ].filter(Boolean),
    "contactPoint": [{
      "@type": "ContactPoint",
      "contactType": "customer service",
      "telephone": siteConfig.contact?.phone || "",
      "areaServed": "US"
    }]
  };
  
  // Add aggregate rating if available
  if (siteConfig.reviews?.ratingValue && siteConfig.reviews.reviewCount) {
    schema.aggregateRating = {
      "@type": "AggregateRating",
      "ratingValue": siteConfig.reviews.ratingValue,
      "reviewCount": siteConfig.reviews.reviewCount.toString(),
      "bestRating": "5",
      "worstRating": "1"
    };
  }
  
  return schema;
}

/**
 * Generate Website Schema for main site
 */
export function generateWebsiteSchema(siteConfig: MainSiteConfig): Record<string, unknown> {
  const domain = window.location.host;
  
  return {
    "@context": "https://schema.org",
    "@type": "WebSite",
    "url": `https://${domain}/`,
    "name": siteConfig.brand,
    "potentialAction": {
      "@type": "SearchAction",
      "target": `https://${domain}/search?q={query}`,
      "query-input": "required name=query"
    }
  };
}

/**
 * Generate WebPage Schema for any page
 */
export function generateWebPageSchema(
  pageData: MainSiteConfig | LocationPage, 
  siteConfig: MainSiteConfig,
  pageType: 'home' | 'location' = 'home'
): Record<string, unknown> {
  const domain = window.location.host;
  const baseUrl = `https://${domain}`;
  
  const schema: Record<string, unknown> = {
    "@context": "https://schema.org",
    "@type": "WebPage",
    "url": `${baseUrl}${'urlPath' in pageData ? pageData.urlPath : '/'}`,
    "name": pageData.seo.title || siteConfig.brand,
    "description": pageData.seo.description,
    "isPartOf": {
      "@type": "WebSite",
      "name": siteConfig.brand,
      "url": baseUrl
    }
  };

  if (pageData.seo.keywords && Array.isArray(pageData.seo.keywords)) {
    schema.keywords = pageData.seo.keywords.join(', ');
  }

  if (pageData.seo.ogImage) {
    schema.image = pageData.seo.ogImage;
  }

  if (pageType === 'location' && 'city' in pageData) {
    schema.about = {
      "@type": "LocalBusiness",
      "name": pageData.header?.businessName || `${pageData.city} ${siteConfig.brand}`,
      "address": {
        "@type": "PostalAddress",
        "addressLocality": pageData.city,
        "addressRegion": pageData.stateCode,
        "postalCode": pageData.postalCode
      }
    };
  }

  return schema;
}

/**
 * Generate all JSON-LD schemas for a page
 */
export function generateAllSchemas(
  pageData: MainSiteConfig | LocationPage,
  siteConfig: MainSiteConfig,
  pageType: 'home' | 'location' = 'home',
  additionalFAQs?: Array<{ id?: string; q: string; a: string }>
): Record<string, unknown>[] {
  const schemas: Record<string, unknown>[] = [];

  if (pageType === 'home') {
    // Main site gets Organization and Website schemas
    schemas.push(generateOrganizationSchema(siteConfig));
    schemas.push(generateWebsiteSchema(siteConfig));
    schemas.push(generateWebPageSchema(pageData, siteConfig, 'home'));
    
    // Add FAQPage schema if additional FAQs are provided (from general FAQ utils)
    if (additionalFAQs && additionalFAQs.length > 0) {
      schemas.push(generateFAQSchema(additionalFAQs));
    }
  } else {
    // Location pages get LocalBusiness, FAQPage, BreadcrumbList, and WebPage schemas
    if ('city' in pageData) {
      schemas.push(generateLocationSchema(pageData, siteConfig));
      schemas.push(generateWebPageSchema(pageData, siteConfig, 'location'));
      schemas.push(generateBreadcrumbSchema(pageData));
      
      if (pageData.faqs && pageData.faqs.length > 0) {
        schemas.push(generateFAQSchema(pageData.faqs));
      }
    }
  }

  return schemas;
}

/**
 * Inject all schemas into document head
 */
export function injectAllSchemas(schemas: Record<string, unknown>[]): void {
  // Remove existing schema scripts
  const existingSchemas = document.querySelectorAll('script[type="application/ld+json"]');
  existingSchemas.forEach(schema => { schema.remove(); });

  // Inject new schemas
  schemas.forEach((schema, index) => {
    const script = document.createElement('script');
    script.type = 'application/ld+json';
    script.textContent = JSON.stringify(schema);
    script.setAttribute('data-schema-index', index.toString());
    document.head.appendChild(script);
  });
}


============================
FILE: frontend\src\shared\utils\scrollRestoration.ts
============================
/**
 * Advanced scroll restoration utilities for React Router v7 compatibility
 * and enhanced user experience
 */

interface ScrollPosition {
  x: number;
  y: number;
}

class ScrollRestorationManager {
  private scrollPositions = new Map<string, ScrollPosition>();
  private isRestoring = false;

  /**
   * Save scroll position for a specific route
   */
  saveScrollPosition(pathname: string): void {
    if (this.isRestoring) return;
    
    this.scrollPositions.set(pathname, {
      x: window.scrollX,
      y: window.scrollY
    });
  }

  /**
   * Restore scroll position for a specific route
   */
  restoreScrollPosition(pathname: string): void {
    const position = this.scrollPositions.get(pathname);
    
    if (position) {
      this.isRestoring = true;
      window.scrollTo({
        left: position.x,
        top: position.y,
        behavior: 'auto'
      });
      
      // Reset flag after a short delay to allow scroll to complete
      setTimeout(() => {
        this.isRestoring = false;
      }, 100);
    } else {
      // No saved position, scroll to top
      this.scrollToTop();
    }
  }

  /**
   * Scroll to top of the page
   */
  scrollToTop(): void {
    window.scrollTo({
      top: 0,
      left: 0,
      behavior: 'smooth'
    });
  }

  /**
   * Clear all saved scroll positions
   */
  clearScrollPositions(): void {
    this.scrollPositions.clear();
  }

  /**
   * Get current scroll position
   */
  getCurrentScrollPosition(): ScrollPosition {
    return {
      x: window.scrollX,
      y: window.scrollY
    };
  }
}

// Export singleton instance
export const scrollRestoration = new ScrollRestorationManager();

/**
 * Hook for manual scroll restoration control
 */
export const useScrollRestoration = () => {
  return {
    savePosition: (pathname: string) => { scrollRestoration.saveScrollPosition(pathname); },
    restorePosition: (pathname: string) => { scrollRestoration.restoreScrollPosition(pathname); },
    scrollToTop: () => { scrollRestoration.scrollToTop(); },
    clearPositions: () => { scrollRestoration.clearScrollPositions(); }
  };
};


============================
FILE: frontend\src\shared\utils\scrollToTop.ts
============================
/**
 * Utility function to scroll to the top of the page
 * Useful for ensuring users land at the top after navigation
 */
export const scrollToTop = (): void => {
  // Smooth scroll to top for better UX
  window.scrollTo({
    top: 0,
    left: 0,
    behavior: 'smooth'
  });
};

/**
 * Utility function to scroll to top immediately without animation
 * Useful for cases where smooth scrolling might interfere with page loading
 */
export const scrollToTopImmediate = (): void => {
  window.scrollTo(0, 0);
};


============================
FILE: frontend\src\shared\utils\siteUtils.ts
============================
/**
 * Site Data Utilities
 * Industry-agnostic functions to transform and format data from site.json for display purposes
 * All functions accept MainSiteConfig to support multi-industry architecture
 */

import type { MainSiteConfig } from '@/shared/types/location';

import { formatPhoneNumber } from './phoneFormatter';

/**
 * Formats contact information from site.json for display
 */
export function formatContactInfo(siteConfig: MainSiteConfig) {
  return {
    phone: siteConfig.contact?.phone ? formatPhoneNumber(siteConfig.contact.phone) : '',
    email: siteConfig.contact?.email || '',
    phoneRaw: siteConfig.contact?.phone || '', // Raw phone for tel: links
  };
}

/**
 * Formats social media links for display
 */
export function formatSocialMedia(siteConfig: MainSiteConfig) {
  return {
    facebook: siteConfig.socials?.facebook || '',
    instagram: siteConfig.socials?.instagram || '',
    tiktok: siteConfig.socials?.tiktok || '',
    youtube: siteConfig.socials?.youtube || '',
  };
}

/**
 * Converts relative URLs to absolute URLs for SEO
 * Uses current window location to determine the domain (works for any industry/subdomain)
 */
export function getAbsoluteUrl(relativeUrl: string): string {
  if (!relativeUrl) return '';
  
  // If it's already an absolute URL, return as is
  if (relativeUrl.startsWith('http://') || relativeUrl.startsWith('https://')) {
    return relativeUrl;
  }
  
  // Use current window location (works for all industries/subdomains)
  if (typeof window !== 'undefined') {
    return `${window.location.protocol}//${window.location.host}${relativeUrl}`;
  }
  
  // Fallback for SSR (should rarely be hit)
  return relativeUrl;
}

/**
 * Formats SEO data for display
 */
export function formatSEO(siteConfig: MainSiteConfig) {
  return {
    title: siteConfig.seo.title || siteConfig.brand || '',
    description: siteConfig.seo.description || '',
    keywords: siteConfig.seo.keywords || [],
    canonical: getAbsoluteUrl(siteConfig.seo.canonicalPath || '/'),
    ogImage: getAbsoluteUrl(siteConfig.seo.ogImage || ''),
  };
}

/**
 * Formats hero section data for display
 */
export function formatHero(siteConfig: MainSiteConfig) {
  return {
    h1: siteConfig.hero.h1 || '',
    images: siteConfig.hero.images || [],
    finder: {
      placeholder: siteConfig.finder?.placeholder || '',
      sub: siteConfig.finder?.sub || '',
    },
  };
}

/**
 * Formats services grid data for display
 */
export function formatServices(siteConfig: MainSiteConfig) {
  return siteConfig.servicesGrid || [];
}

/**
 * Formats reviews data for display
 */
export function formatReviews(siteConfig: MainSiteConfig) {
  return {
    title: siteConfig.reviews?.title || '',
    subtitle: siteConfig.reviews?.subtitle || '',
    ratingValue: siteConfig.reviews?.ratingValue || '',
    reviewCount: siteConfig.reviews?.reviewCount || 0,
    source: siteConfig.reviews?.source || '',
  };
}

/**
 * Formats FAQ data for display
 */
export function formatFAQ(siteConfig: MainSiteConfig) {
  return {
    title: siteConfig.faq?.title || '',
    subtitle: siteConfig.faq?.subtitle || '',
  };
}

/**
 * Gets formatted business information
 */
export function getBusinessInfo(siteConfig: MainSiteConfig) {
  return {
    name: siteConfig.brand || '',
    logo: siteConfig.logo.url || '',
    logoAlt: siteConfig.logo.alt || '',
    slug: siteConfig.slug || '',
    urlPath: siteConfig.urlPath || '/',
  };
}

/**
 * Comprehensive site data formatter - formats all site data at once
 */
export function formatSiteData(siteConfig: MainSiteConfig) {
  return {
    business: getBusinessInfo(siteConfig),
    contact: formatContactInfo(siteConfig),
    socials: formatSocialMedia(siteConfig),
    seo: formatSEO(siteConfig),
    hero: formatHero(siteConfig),
    services: formatServices(siteConfig),
    reviews: formatReviews(siteConfig),
    faq: formatFAQ(siteConfig),
  };
}


============================
FILE: frontend\src\shared\utils\tenantConfigMigration.ts
============================
/**
 * Tenant Config Migration Utilities
 * Helpers for converting between old (simple) and new (centralized) tenant config formats
 */

import { TenantConfig, Vertical } from '@/shared/types';

import { getTenantAssetUrl } from './assetLocator';

/**
 * Type guard to check if a string is a valid Vertical
 */
function isValidVertical(value: unknown): value is Vertical {
  return typeof value === 'string' && [
    'mobile-detailing',
    'pet-grooming',
    'lawn-care',
    'maid-service',
    'hvac',
    'plumbing',
    'electrical'
  ].includes(value);
}

/**
 * Old tenant config format (10 simple fields)
 * @deprecated Use TenantConfig from @/shared/types instead
 */
export interface LegacyTenantConfig {
  business_name: string;
  phone: string;
  email: string;
  logo_url: string;
  facebook: string;
  instagram: string;
  tiktok: string;
  youtube: string;
  base_location: {
    city: string;
    state: string;
  };
}

/**
 * Convert legacy tenant config to new centralized format
 * 
 * @param legacy - Old format config
 * @param affiliateId - Affiliate/tenant ID (optional, will generate from business_name if not provided)
 * @returns New centralized TenantConfig
 */
export function legacyToTenantConfig(
  // eslint-disable-next-line @typescript-eslint/no-deprecated -- This function intentionally works with legacy format for migration
  legacy: LegacyTenantConfig,
  affiliateId?: string | number
): TenantConfig {
  // Generate slug from business name if not provided
  const slug = affiliateId 
    ? String(affiliateId) 
    : legacy.business_name
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/^-|-$/g, '');
  
  return {
    // Core identity
    id: affiliateId || slug,
    slug: slug,
    vertical: 'mobile-detailing',  // Default to mobile-detailing
    status: 'active',
    
    // Branding
    branding: {
      businessName: legacy.business_name,
      logo: {
        url: legacy.logo_url
      }
    },
    
    // Contact
    contact: {
      phones: {
        main: legacy.phone
      },
      emails: {
        primary: legacy.email
      },
      socials: {
        facebook: legacy.facebook,
        instagram: legacy.instagram,
        tiktok: legacy.tiktok,
        youtube: legacy.youtube
      },
      baseLocation: {
        city: legacy.base_location.city,
        state: legacy.base_location.state
      }
    }
  };
}

/**
 * Convert new centralized config to legacy format (for backward compatibility)
 * 
 * @param config - New centralized TenantConfig
 * @returns Old format config
 */
// eslint-disable-next-line @typescript-eslint/no-deprecated -- This function intentionally returns legacy format for backward compatibility
export function tenantConfigToLegacy(config: TenantConfig): LegacyTenantConfig {
  return {
    business_name: config.branding.businessName,
    phone: config.contact.phones.main,
    email: config.contact.emails.primary,
    logo_url: config.branding.logo.url,
    facebook: config.contact.socials.facebook,
    instagram: config.contact.socials.instagram,
    tiktok: config.contact.socials.tiktok,
    youtube: config.contact.socials.youtube,
    base_location: {
      city: config.contact.baseLocation.city,
      state: config.contact.baseLocation.state
    }
  };
}

/**
 * Create a minimal tenant config from affiliate API data
 * 
 * @param affiliate - Affiliate data from API
 * @returns Minimal TenantConfig
 */
export function affiliateToTenantConfig(affiliate: {
  id?: string | number;
  slug?: string;
  business_name: string;
  business_phone: string;
  business_email: string;
  facebook_url?: string;
  instagram_url?: string;
  youtube_url?: string;
  tiktok_url?: string;
  service_areas?: Array<{ city: string; state: string; primary?: boolean }>;
  industry?: string;
  logo_url?: string;
}): TenantConfig {
  // Find primary service area or use first one
  const primaryArea = affiliate.service_areas?.find(area => area.primary) || affiliate.service_areas?.[0];
  
  // Safely convert industry to Vertical type
  const vertical: Vertical = isValidVertical(affiliate.industry) 
    ? affiliate.industry 
    : 'mobile-detailing';
  
  // Build logo URL - use affiliate's logo if provided, otherwise use industry default
  // Only check tenant uploads if a custom logo_url exists in the database
  const logoUrl = affiliate.logo_url || getTenantAssetUrl({
    vertical: vertical,
    type: 'logo',
    forceVerticalDefault: true, // Always use industry default if no custom logo
  });
  
  return {
    // Core identity
    id: affiliate.id || affiliate.slug || 'unknown',
    slug: affiliate.slug || affiliate.business_name.toLowerCase().replace(/[^a-z0-9]+/g, '-'),
    vertical,
    status: 'active',
    
    // Branding
    branding: {
      businessName: affiliate.business_name,
      logo: {
        url: logoUrl
      }
    },
    
    // Contact
    contact: {
      phones: {
        main: affiliate.business_phone
      },
      emails: {
        primary: affiliate.business_email
      },
      socials: {
        facebook: affiliate.facebook_url || '',
        instagram: affiliate.instagram_url || '',
        tiktok: affiliate.tiktok_url || '',
        youtube: affiliate.youtube_url || ''
      },
      baseLocation: {
        city: primaryArea?.city || 'Unknown',
        state: primaryArea?.state || 'Unknown'
      }
    }
  };
}



============================
FILE: frontend\src\shared\utils\tenantDataTransform.ts
============================
/**
 * Tenant Data Transformation Utilities
 * 
 * Single responsibility: Transform flat API data into consumer-friendly formats
 * Pure functions with no side effects
 */

import type { Business } from '@/shared/types/tenant-business.types';

/**
 * Social media links object
 */
export interface SocialMediaLinks {
  facebook?: string;
  instagram?: string;
  youtube?: string;
  tiktok?: string;
  googleBusiness?: string;
}

/**
 * Social media platform data structure
 */
export interface SocialMediaPlatform {
  url: string;
  enabled: boolean;
}

/**
 * Transform business social media data into a clean object
 * Uses individual enabled/url columns
 * Only includes platforms that are enabled and have non-empty URLs
 * 
 * @param business - Business data from API
 * @returns Social media links object with only enabled platforms that have URLs
 * 
 * @example
 * ```ts
 * const socials = transformSocialMedia(businessData);
 * // { facebook: 'https://...', instagram: 'https://...' }
 * ```
 */
export function transformSocialMedia(business: Business): SocialMediaLinks {
  const socials: SocialMediaLinks = {};
  
  // Use individual enabled/url columns
  // Show if enabled (with or without URL)
  if (business.facebook_enabled) {
    socials.facebook = business.facebook_url?.trim() || '';
  }
  
  if (business.instagram_enabled) {
    socials.instagram = business.instagram_url?.trim() || '';
  }
  
  if (business.youtube_enabled) {
    socials.youtube = business.youtube_url?.trim() || '';
  }
  
  if (business.tiktok_enabled) {
    socials.tiktok = business.tiktok_url?.trim() || '';
  }
  
  // Google Business Profile is still handled separately
  if (business.gbp_url?.trim()) {
    socials.googleBusiness = business.gbp_url;
  }
  
  return socials;
}

/**
 * Get primary location from service areas
 * Returns the first primary area, or the first area if no primary is set
 * 
 * @param business - Business data from API
 * @returns Location string in format "City, State" or empty string
 * 
 * @example
 * ```ts
 * const location = getPrimaryLocation(businessData);
 * // "Bullhead City, AZ"
 * ```
 */
export function getPrimaryLocation(business: Business): string {
  if (business.service_areas.length === 0) {
    return '';
  }
  
  // Find primary service area
  const primaryArea = business.service_areas.find(area => area.primary);
  const area = primaryArea ?? business.service_areas[0];
  
  // At this point, area is guaranteed to exist due to length check above
  if (!area) {
    return '';
  }
  
  return `${area.city}, ${area.state}`;
}

/**
 * Get all primary service areas (can be multiple)
 * 
 * @param business - Business data from API
 * @returns Array of primary service areas
 */
export function getPrimaryServiceAreas(business: Business) {
  if (business.service_areas.length === 0) {
    return [];
  }
  
  const primaryAreas = business.service_areas.filter(area => area.primary);
  
  // If no primary areas are marked, return the first one
  if (primaryAreas.length === 0) {
    return [business.service_areas[0]];
  }
  
  return primaryAreas;
}

/**
 * Format business phone for display
 * Handles various formats and ensures consistent output
 * 
 * @param phone - Phone number string
 * @returns Formatted phone or empty string
 */
export function formatBusinessPhone(phone?: string): string {
  if (!phone?.trim()) {
    return '';
  }
  
  // Remove all non-numeric characters
  const digits = phone.replace(/\D/g, '');
  
  // Format as (XXX) XXX-XXXX for 10-digit US numbers
  if (digits.length === 10) {
    return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;
  }
  
  // Format as +X (XXX) XXX-XXXX for 11-digit numbers
  if (digits.length === 11) {
    return `+${digits[0]} (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;
  }
  
  // Return original if format is unexpected
  return phone;
}

/**
 * Check if business has any social media links
 * 
 * @param business - Business data from API
 * @returns True if at least one social media link exists
 */
export function hasSocialMedia(business: Business): boolean {
  return !!(
    business.facebook_enabled ||
    business.instagram_enabled ||
    business.youtube_enabled ||
    business.tiktok_enabled ||
    business.gbp_url?.trim()
  );
}

/**
 * Get business contact email with fallback
 * 
 * @param business - Business data from API
 * @param fallback - Fallback email if none exists
 * @returns Email address
 */
export function getBusinessEmail(business: Business, fallback: string = 'hello@thatsmartsite.com'): string {
  return business.business_email?.trim() || fallback;
}



============================
FILE: frontend\src\shared\utils\tenantEventManager.ts
============================
// Simple event system for tenant updates
// Shared utility for cross-feature communication

type TenantEventListener = () => void;

class TenantEventManager {
  private listeners: TenantEventListener[] = [];

  subscribe(listener: TenantEventListener) {
    this.listeners.push(listener);
    
    // Return unsubscribe function
    return () => {
      const index = this.listeners.indexOf(listener);
      if (index > -1) {
        this.listeners.splice(index, 1);
      }
    };
  }

  notify() {
    this.listeners.forEach(listener => { listener(); });
  }
}

export const tenantEventManager = new TenantEventManager();

// Event types (currently unused, but defined for future use)
export const TENANT_EVENTS = {
  TENANT_DELETED: 'tenant_deleted',
  TENANT_APPROVED: 'tenant_approved',
  TENANT_REJECTED: 'tenant_rejected',
  TENANT_UPDATED: 'tenant_updated'
} as const;



============================
FILE: frontend\src\shared\utils\urlGenerator.ts
============================
/**
 * Utility functions for generating URLs based on environment
 */

export interface EnvironmentConfig {
  isDevelopment: boolean;
  baseDomain: string;
  port?: string;
}

/**
 * Get the current environment configuration
 */
export function getEnvironmentConfig(): EnvironmentConfig {
  const isDevelopment = import.meta.env.DEV;
  
  if (isDevelopment) {
    return {
      isDevelopment: true,
      baseDomain: 'lvh.me',
      port: window.location.port || '5175'
    };
  }
  
  // Production configuration
  return {
    isDevelopment: false,
    baseDomain: 'thatsmartsite.com',
    port: undefined // No port needed in production
  };
}

/**
 * Generate a tenant website URL
 */
export function generateTenantWebsiteUrl(slug: string): string {
  const config = getEnvironmentConfig();
  
  if (config.isDevelopment) {
    return `http://${slug}.${config.baseDomain}:${config.port}/`;
  }
  
  return `https://${slug}.${config.baseDomain}/`;
}

/**
 * Generate a tenant dashboard URL
 */
export function generateTenantDashboardUrl(slug: string): string {
  const config = getEnvironmentConfig();
  
  if (config.isDevelopment) {
    return `http://${slug}.${config.baseDomain}:${config.port}/dashboard`;
  }
  
  return `https://${slug}.${config.baseDomain}/dashboard`;
}

/**
 * Generate a tenant onboarding URL
 */
export function generateTenantOnboardingUrl(): string {
  const config = getEnvironmentConfig();
  
  if (config.isDevelopment) {
    return `http://localhost:${config.port}/tenant-onboarding`;
  }
  
  return `https://${config.baseDomain}/tenant-onboarding`;
}


============================
FILE: frontend\src\shared\utils\validateLocationData.ts
============================
/**
 * Location data validation utilities
 * Use these functions to validate location data at build time or runtime
 */

import type { LocationPage, MainSiteConfig } from '@/shared/types/location';
import { validateLocationData, validateMainSiteConfig, type ValidationResult } from '@/shared/validation/locationSchema';

/**
 * Validate a single location file
 */
export function validateLocationFile(locationData: unknown, filename?: string): ValidationResult<LocationPage> {
  const result = validateLocationData(locationData);
  
  if (!result.success && filename && result.errors) {
    console.error(`❌ Validation failed for ${filename}:`);
    const validationErrors = result.errors as Array<{ path: string; message: string; code: string }>;
    for (const issue of validationErrors) {
      console.error(`  - ${issue.path}: ${issue.message}`);
    }
  }
  
  return result as unknown as ValidationResult<LocationPage>;
}

/**
 * Validate multiple location files
 */
export function validateAllLocationFiles(locationFiles: Array<{ data: unknown; filename: string }>): {
  valid: Array<{ filename: string; data: LocationPage }>;
  invalid: Array<{ filename: string; errors: Array<{ path: string; message: string; code: string }> }>;
} {
  const valid: Array<{ filename: string; data: LocationPage }> = [];
  const invalid: Array<{ filename: string; errors: Array<{ path: string; message: string; code: string }> }> = [];
  
  locationFiles.forEach(({ data, filename }) => {
    const result = validateLocationFile(data, filename);
    
    if (result.success && result.data) {
      valid.push({ filename, data: result.data });
    } else if (result.errors) {
      invalid.push({ filename, errors: result.errors });
    }
  });
  
  return { valid, invalid };
}

/**
 * Validate main site configuration
 */
export function validateMainSiteFile(siteData: unknown, filename?: string): ValidationResult<MainSiteConfig> {
  const result = validateMainSiteConfig(siteData);
  
  if (!result.success && filename && result.errors) {
    console.error(`❌ Validation failed for ${filename}:`);
    const validationErrors = result.errors as Array<{ path: string; message: string; code: string }>;
    for (const issue of validationErrors) {
      console.error(`  - ${issue.path}: ${issue.message}`);
    }
  }
  
  return result as unknown as ValidationResult<MainSiteConfig>;
}

/**
 * Validate location data with detailed error reporting
 */
export function validateLocationWithDetails(locationData: unknown): {
  isValid: boolean;
  errors: string[];
  warnings: string[];
  data?: LocationPage;
} {
  const result = validateLocationData(locationData);
  const errors: string[] = [];
  const warnings: string[] = [];
  
  if (!result.success && result.errors) {
    const validationErrors = result.errors as Array<{ path: string; message: string; code: string }>;
    for (const issue of validationErrors) {
      errors.push(`${issue.path}: ${issue.message}`);
    }
  }
  
  // Additional business logic validations
  if (result.success && result.data) {
    const data = result.data;
    
    // Check for common issues
    if (data.images) {
      const heroImages = data.images.filter(img => img.role === 'hero');
      if (heroImages.length === 0) {
        warnings.push('No hero images found - consider adding images with role="hero"');
      }
      if (heroImages.length > 1) {
        warnings.push('Multiple hero images found - ensure carousel is implemented');
      }
    }
    
    if (data.pricingModifierPct !== undefined) {
      if (data.pricingModifierPct > 0.5) {
        warnings.push(`High pricing modifier (${(data.pricingModifierPct * 100).toFixed(1)}%) - ensure this is intentional`);
      }
      if (data.pricingModifierPct < -0.2) {
        warnings.push(`Negative pricing modifier (${(data.pricingModifierPct * 100).toFixed(1)}%) - ensure this is intentional`);
      }
    }
    
    if (!data.faqs || data.faqs.length === 0) {
      warnings.push('No FAQs provided - consider adding location-specific FAQs');
    }
    
    if (!data.neighborhoods || data.neighborhoods.length === 0) {
      warnings.push('No neighborhoods listed - consider adding local neighborhoods for SEO');
    }
    
    if (!data.localConditions || data.localConditions.length === 0) {
      warnings.push('No local conditions listed - consider adding location-specific conditions');
    }
    
    // Check for required fields that might be missing
    if (!data.header?.businessName) {
      warnings.push('No business name in header - using fallback');
    }
    
    if (!data.header?.phoneDisplay) {
      warnings.push('No phone display format in header - using fallback');
    }
    
    if (!data.seo.canonicalPath) {
      warnings.push('No canonical path specified - using urlPath as fallback');
    }
  }
  
  return {
    isValid: result.success,
    errors,
    warnings,
    ...(result.data ? { data: result.data as unknown as LocationPage } : {})
  };
}

/**
 * Quick validation for development
 */
export function quickValidateLocation(locationData: unknown): boolean {
  const result = validateLocationData(locationData);
  return result.success;
}

/**
 * Validate and format error messages for display
 */
export function formatValidationErrors(errors: Array<{ path: string; message: string; code: string }>): string {
  return errors
    .map(error => `• ${error.path}: ${error.message}`)
    .join('\n');
}

/**
 * Get validation summary
 */
export function getValidationSummary(validationResult: ValidationResult<unknown>): string {
  if (validationResult.success) {
    return '✅ Validation passed';
  }
  
  const errorCount = validationResult.errors?.length || 0;
  const errorText = errorCount === 1 ? 'error' : 'errors';
  return `❌ Validation failed with ${errorCount} ${errorText}`;
}


============================
FILE: frontend\src\shared\utils\validation.ts
============================
/**
 * Comprehensive Input Validation and Sanitization Utility
 * Provides validation functions for common form inputs
 */

export interface ValidationResult {
  isValid: boolean;
  errors: string[];
  sanitizedValue?: string;
}

export interface FieldValidation {
  required?: boolean;
  minLength?: number;
  maxLength?: number;
  pattern?: RegExp;
  custom?: (value: string) => string | null; // Returns error message or null if valid
}

/**
 * Validates and sanitizes a text input field
 */
export function validateTextField(
  value: string,
  fieldName: string,
  validation: FieldValidation = {}
): ValidationResult {
  const errors: string[] = [];
  const sanitizedValue = value.trim();

  // Required validation
  if (validation.required && !sanitizedValue) {
    errors.push(`${fieldName} is required`);
    return { isValid: false, errors };
  }

  // Skip other validations if empty and not required
  if (!sanitizedValue) {
    return { isValid: true, errors: [], sanitizedValue: '' };
  }

  // Length validations
  if (validation.minLength && sanitizedValue.length < validation.minLength) {
    errors.push(`${fieldName} must be at least ${String(validation.minLength)} characters`);
  }

  if (validation.maxLength && sanitizedValue.length > validation.maxLength) {
    errors.push(`${fieldName} must be no more than ${String(validation.maxLength)} characters`);
  }

  // Pattern validation
  if (validation.pattern && !validation.pattern.test(sanitizedValue)) {
    errors.push(`${fieldName} format is invalid`);
  }

  // Custom validation
  if (validation.custom) {
    const customError = validation.custom(sanitizedValue);
    if (customError) {
      errors.push(customError);
    }
  }

  return errors.length === 0
    ? { isValid: true, errors: [], sanitizedValue }
    : { isValid: false, errors };
}

/**
 * Validates and sanitizes an email address
 */
export function validateEmail(email: string): ValidationResult {
  return validateTextField(email, 'Email', {
    required: true,
    pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
    custom: (value) => {
      // Additional email validation
      if (value.length > 254) return 'Email is too long';
      if (value.includes('..')) return 'Email contains invalid consecutive dots';
      if (value.startsWith('.') || value.endsWith('.')) return 'Email cannot start or end with a dot';
      return null;
    }
  });
}

/**
 * Validates and sanitizes a phone number
 */
export function validatePhone(phone: string): ValidationResult {
  const digitsOnly = phone.replace(/\D/g, '');
  
  return validateTextField(phone, 'Phone number', {
    required: true,
    custom: () => {
      if (digitsOnly.length < 10) return 'Phone number must have at least 10 digits';
      if (digitsOnly.length > 15) return 'Phone number is too long';
      return null;
    }
  });
}

/**
 * Validates and sanitizes a name field
 */
export function validateName(name: string): ValidationResult {
  return validateTextField(name, 'Name', {
    required: true,
    minLength: 2,
    maxLength: 100,
    pattern: /^[a-zA-Z\s\-'.]+$/,
    custom: (value) => {
      if (value.includes('  ')) return 'Name cannot contain consecutive spaces';
      if (value.startsWith(' ') || value.endsWith(' ')) return 'Name cannot start or end with spaces';
      return null;
    }
  });
}

/**
 * Validates and sanitizes a password
 */
export function validatePassword(password: string, isLogin: boolean = false): ValidationResult {
  if (isLogin) {
    // For login, just check if it's not empty
    return validateTextField(password, 'Password', { required: true });
  }

  // For registration, enforce stronger requirements
  return validateTextField(password, 'Password', {
    required: true,
    minLength: 8,
    maxLength: 128,
    custom: (value) => {
      const errors: string[] = [];
      
      if (!/[a-z]/.test(value)) errors.push('Password must contain at least one lowercase letter');
      if (!/[A-Z]/.test(value)) errors.push('Password must contain at least one uppercase letter');
      if (!/\d/.test(value)) errors.push('Password must contain at least one number');
      if (!/[!@#$%^&*(),.?":{}|<>]/.test(value)) errors.push('Password must contain at least one special character');
      
      return errors.length > 0 ? errors.join(', ') : null;
    }
  });
}

/**
 * Validates and sanitizes a vehicle make/model
 */
export function validateVehicleField(value: string, fieldName: string): ValidationResult {
  return validateTextField(value, fieldName, {
    required: true,
    minLength: 2,
    maxLength: 50,
    pattern: /^[a-zA-Z0-9\s\-'.]+$/,
    custom: (value) => {
      if (value.includes('  ')) return `${fieldName} cannot contain consecutive spaces`;
      if (value.startsWith(' ') || value.endsWith(' ')) return `${fieldName} cannot start or end with spaces`;
      return null;
    }
  });
}

/**
 * Validates and sanitizes a service selection
 */
export function validateService(service: string): ValidationResult {
  return validateTextField(service, 'Service', {
    required: true,
    minLength: 2,
    maxLength: 100
  });
}

/**
 * Validates and sanitizes additional information/message
 */
export function validateMessage(message: string, required: boolean = false): ValidationResult {
  return validateTextField(message, 'Message', {
    required,
    maxLength: 1000,
    custom: (value) => {
      if (value.includes('  ')) return 'Message cannot contain consecutive spaces';
      return null;
    }
  });
}

/**
 * Sanitizes HTML content to prevent XSS
 */
export function sanitizeHtml(input: string): string {
  return input
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;')
    .replace(/\//g, '&#x2F;');
}

/**
 * Sanitizes text input by removing potentially dangerous characters
 */
export function sanitizeText(input: string): string {
  return input
    .replace(/[<>]/g, '') // Remove angle brackets
    .replace(/javascript:/gi, '') // Remove javascript: protocol
    .replace(/on\w+=/gi, '') // Remove event handlers
    .trim();
}

/**
 * Validates form data object
 */
export function validateFormData(
  data: Record<string, string>,
  validations: Record<string, FieldValidation>
): { isValid: boolean; errors: Record<string, string[]>; sanitizedData: Record<string, string> } {
  const errors: Record<string, string[]> = {};
  const sanitizedData: Record<string, string> = {};
  let isValid = true;

  for (const [fieldName, validation] of Object.entries(validations)) {
    const value = data[fieldName] || '';
    const result = validateTextField(value, fieldName, validation);
    
    if (!result.isValid) {
      isValid = false;
      errors[fieldName] = result.errors;
    } else if (result.sanitizedValue !== undefined) {
      sanitizedData[fieldName] = result.sanitizedValue;
    }
  }

  return { isValid, errors, sanitizedData };
}


============================
FILE: frontend\src\shared\utils\vehicleMapping.ts
============================
// Vehicle type mapping configuration
// Maps frontend vehicle IDs to backend API endpoints and database IDs

export interface VehicleMapping {
  frontendId: string;
  backendEndpoint: string;
  databaseId: number;
  displayName: string;
  description: string;
}

// Vehicle type mappings
export const VEHICLE_MAPPINGS: Record<string, VehicleMapping> = {
  car: {
    frontendId: 'car',
    backendEndpoint: 'car',
    databaseId: 1,
    displayName: 'Car',
    description: 'Sedan/Coupe/Compact'
  },
  truck: {
    frontendId: 'truck',
    backendEndpoint: 'truck',
    databaseId: 2,
    displayName: 'Truck',
    description: 'Light duty, work trucks'
  },
  suv: {
    frontendId: 'suv',
    backendEndpoint: 'suv', // Uses same endpoint as car
    databaseId: 3, // Uses same database ID as car
    displayName: 'SUV',
    description: 'Sport Utility Vehicle'
  },
  rv: {
    frontendId: 'rv',
    backendEndpoint: 'rv',
    databaseId: 4,
    displayName: 'RV',
    description: 'Travel trailers & coaches'
  },
  boat: {
    frontendId: 'boat',
    backendEndpoint: 'boat',
    databaseId: 5,
    displayName: 'Boat',
    description: 'Runabout, bass, wake'
  },
  motorcycle: {
    frontendId: 'motorcycle',
    backendEndpoint: 'motorcycle',
    databaseId: 6,
    displayName: 'Motorcycle',
    description: 'Street & sport bikes'
  }
};

// Helper functions
export const getVehicleMapping = (vehicleId: string): VehicleMapping | undefined => {
  return VEHICLE_MAPPINGS[vehicleId];
};

export const getBackendEndpoint = (vehicleId: string): string => {
  return VEHICLE_MAPPINGS[vehicleId]?.backendEndpoint || 'auto';
};

export const getDatabaseId = (vehicleId: string): number => {
  return VEHICLE_MAPPINGS[vehicleId]?.databaseId || 1;
};

export const getDisplayName = (vehicleId: string): string => {
  return VEHICLE_MAPPINGS[vehicleId]?.displayName || vehicleId;
};

// Get all vehicle IDs that map to the same database ID
export const getVehiclesByDatabaseId = (databaseId: number): string[] => {
  return Object.entries(VEHICLE_MAPPINGS)
    .filter(([_vehicleId, mapping]) => mapping.databaseId === databaseId)
    .map(([vehicleId]) => vehicleId);
};

// Check if two vehicle types are equivalent (same database ID)
export const areVehicleTypesEquivalent = (vehicleId1: string, vehicleId2: string): boolean => {
  const mapping1 = getVehicleMapping(vehicleId1);
  const mapping2 = getVehicleMapping(vehicleId2);
  return mapping1?.databaseId === mapping2?.databaseId;
};

// Get the primary vehicle type for a given database ID
export const getPrimaryVehicleType = (databaseId: number): string => {
  const vehicles = getVehiclesByDatabaseId(databaseId);
  // Priority order: car > truck > suv > rv > boat > motorcycle
  const priorityOrder = ['car', 'truck', 'suv', 'rv', 'boat', 'motorcycle'];
  return vehicles.find(vehicleId => priorityOrder.includes(vehicleId)) || vehicles[0] || 'car';
};


============================
FILE: frontend\src\shared\utils\__tests__\assetLocator.test.ts
============================
/**
 * Unit tests for assetLocator utility
 */

import { describe, expect,it } from 'vitest';

import {
  type AssetLocatorOptions as _AssetLocatorOptions,
  getTenantAssetUrl,
  getTenantAssetUrls,
  getTenantLogoUrls,
  hasFileExtension,
  normalizeAssetUrl,
} from '../assetLocator';

describe('assetLocator', () => {
  describe('getTenantAssetUrl', () => {
    it('should return vertical default when no tenantId provided', () => {
      const url = getTenantAssetUrl({
        vertical: 'mobile-detailing',
        type: 'logo',
      });
      
      expect(url).toBe('/mobile-detailing/icons/logo.webp');
    });
    
    it('should return tenant upload URL when tenantId provided', () => {
      const url = getTenantAssetUrl({
        tenantId: 'jps',
        vertical: 'mobile-detailing',
        type: 'logo',
      });
      
      expect(url).toBe('/uploads/jps/icons/logo.webp');
    });
    
    it('should force vertical default when forceVerticalDefault is true', () => {
      const url = getTenantAssetUrl({
        tenantId: 'jps',
        vertical: 'mobile-detailing',
        type: 'logo',
        forceVerticalDefault: true,
      });
      
      expect(url).toBe('/mobile-detailing/icons/logo.webp');
    });
    
    it('should handle hero images correctly', () => {
      const url1 = getTenantAssetUrl({
        vertical: 'mobile-detailing',
        type: 'hero-1',
      });
      
      const url2 = getTenantAssetUrl({
        vertical: 'mobile-detailing',
        type: 'hero-2',
      });
      
      expect(url1).toBe('/mobile-detailing/hero/hero1.webp');
      expect(url2).toBe('/mobile-detailing/hero/hero2.webp');
    });
    
    it('should handle avatars with custom filename', () => {
      const url = getTenantAssetUrl({
        vertical: 'mobile-detailing',
        type: 'avatar',
        filename: 'user-123.jpg',
      });
      
      expect(url).toBe('/uploads/avatars/user-123.jpg');
    });
    
    it('should respect custom extension', () => {
      const url = getTenantAssetUrl({
        vertical: 'mobile-detailing',
        type: 'logo',
        extension: 'svg',
      });
      
      expect(url).toBe('/mobile-detailing/icons/logo.svg');
    });
    
    it('should use svg for favicon by default', () => {
      const url = getTenantAssetUrl({
        vertical: 'mobile-detailing',
        type: 'favicon',
      });
      
      expect(url).toBe('/mobile-detailing/icons/favicon.svg');
    });
    
    it('should handle og-image and twitter-image', () => {
      const ogUrl = getTenantAssetUrl({
        vertical: 'mobile-detailing',
        type: 'og-image',
      });
      
      const twitterUrl = getTenantAssetUrl({
        vertical: 'mobile-detailing',
        type: 'twitter-image',
      });
      
      expect(ogUrl).toBe('/mobile-detailing/social/og-image.webp');
      expect(twitterUrl).toBe('/mobile-detailing/social/twitter-image.webp');
    });
    
    it('should preserve extension in custom filename', () => {
      const url = getTenantAssetUrl({
        vertical: 'mobile-detailing',
        type: 'avatar',
        filename: 'user-photo.png',
      });
      
      expect(url).toBe('/uploads/avatars/user-photo.png');
    });
    
    it('should handle logo variants', () => {
      const darkUrl = getTenantAssetUrl({
        vertical: 'mobile-detailing',
        type: 'logo-dark',
      });
      
      const lightUrl = getTenantAssetUrl({
        vertical: 'mobile-detailing',
        type: 'logo-light',
      });
      
      expect(darkUrl).toBe('/mobile-detailing/icons/logo-dark.webp');
      expect(lightUrl).toBe('/mobile-detailing/icons/logo-light.webp');
    });
    
    it('should skip tenant uploads when useTenantUploads is false', () => {
      const url = getTenantAssetUrl({
        tenantId: 'jps',
        vertical: 'mobile-detailing',
        type: 'logo',
        useTenantUploads: false,
      });
      
      expect(url).toBe('/mobile-detailing/icons/logo.webp');
    });
  });
  
  describe('getTenantAssetUrls', () => {
    it('should return multiple asset URLs', () => {
      const urls = getTenantAssetUrls({
        vertical: 'mobile-detailing',
        types: ['hero-1', 'hero-2', 'hero-3'],
      });
      
      expect(urls).toEqual([
        '/mobile-detailing/hero/hero1.webp',
        '/mobile-detailing/hero/hero2.webp',
        '/mobile-detailing/hero/hero3.webp',
      ]);
    });
    
    it('should apply tenant ID to all URLs', () => {
      const urls = getTenantAssetUrls({
        tenantId: 'jps',
        vertical: 'mobile-detailing',
        types: ['logo', 'hero-1'],
      });
      
      expect(urls).toEqual([
        '/uploads/jps/icons/logo.webp',
        '/uploads/jps/hero/hero1.webp',
      ]);
    });
  });
  
  describe('getTenantLogoUrls', () => {
    it('should return all logo variants', () => {
      const logos = getTenantLogoUrls({
        vertical: 'mobile-detailing',
      });
      
      expect(logos).toEqual({
        default: '/mobile-detailing/icons/logo.webp',
        dark: '/mobile-detailing/icons/logo-dark.webp',
        light: '/mobile-detailing/icons/logo-light.webp',
      });
    });
    
    it('should use tenant ID for all variants', () => {
      const logos = getTenantLogoUrls({
        tenantId: 'jps',
        vertical: 'mobile-detailing',
      });
      
      expect(logos).toEqual({
        default: '/uploads/jps/icons/logo.webp',
        dark: '/uploads/jps/icons/logo-dark.webp',
        light: '/uploads/jps/icons/logo-light.webp',
      });
    });
  });
  
  describe('hasFileExtension', () => {
    it('should return true for common image extensions', () => {
      expect(hasFileExtension('photo.jpg')).toBe(true);
      expect(hasFileExtension('logo.png')).toBe(true);
      expect(hasFileExtension('icon.svg')).toBe(true);
      expect(hasFileExtension('image.webp')).toBe(true);
      expect(hasFileExtension('favicon.ico')).toBe(true);
    });
    
    it('should return false for filenames without extension', () => {
      expect(hasFileExtension('photo')).toBe(false);
      expect(hasFileExtension('logo')).toBe(false);
    });
    
    it('should be case insensitive', () => {
      expect(hasFileExtension('photo.JPG')).toBe(true);
      expect(hasFileExtension('logo.PNG')).toBe(true);
    });
  });
  
  describe('normalizeAssetUrl', () => {
    it('should add leading slash if missing', () => {
      expect(normalizeAssetUrl('images/logo.png')).toBe('/images/logo.png');
    });
    
    it('should preserve leading slash', () => {
      expect(normalizeAssetUrl('/images/logo.png')).toBe('/images/logo.png');
    });
    
    it('should preserve absolute URLs', () => {
      expect(normalizeAssetUrl('https://cdn.example.com/logo.png'))
        .toBe('https://cdn.example.com/logo.png');
      expect(normalizeAssetUrl('http://example.com/logo.png'))
        .toBe('http://example.com/logo.png');
    });
    
    it('should handle empty strings', () => {
      expect(normalizeAssetUrl('')).toBe('');
    });
  });
});



============================
FILE: frontend\src\shared\utils\__tests__\deepMerge.test.ts
============================
/**
 * Tests for deep merge functionality
 */

import type { LocationPage, MainSiteConfig } from '@/shared/types/location';

import { 
  createMergedLocationData,
  DEFAULT_MERGE_OPTIONS as _DEFAULT_MERGE_OPTIONS, 
  validateMergedData} from '../deepMerge';

// Mock data for testing
const mockMainConfig: MainSiteConfig = {
  brand: 'Mobile Detail Hub',
  slug: 'site',
  urlPath: '/',
  logo: {
    url: '/icons/logo.webp',
    alt: 'Mobile Detail Hub Logo',
    darkUrl: '/icons/logo-dark.webp',
    lightUrl: '/icons/logo.webp'
  },
  seo: {
    title: 'Premium Mobile Detailing — Cars, Boats, RVs, & Aircraft',
    description: 'Company-operated mobile detailing. Paint correction, ceramic coating, PPF, and deep interior cleaning for cars, boats, and RVs.',
    keywords: ['mobile detailing', 'car detailing', 'boat detailing', 'RV detailing'],
    canonicalPath: '/',
    ogImage: '/images/hero/hero1.png',
    twitterImage: '/images/hero/hero1.png',
    robots: 'index,follow'
  },
  hero: {
    h1: 'Professional Mobile Detailing',
    sub: 'Mobile detailing for cars, boats, RVs, & aircraft.',
    images: [
      { 
        url: '/images/hero/hero1.png', 
        alt: 'Professional mobile detailing service in action',
        role: 'hero',
        width: 1920,
        height: 1080,
        priority: true
      }
    ]
  },
  reviews: {
    title: 'What Our Customers Say',
    subtitle: 'Don\'t just take our word for it. See what our satisfied customers have to say about our premium mobile detailing services.',
    ratingValue: '4.9',
    reviewCount: 112,
    source: 'Google'
  }
};

const mockLocationData: LocationPage = {
  slug: 'az-bullhead-city',
  city: 'Bullhead City',
  stateCode: 'AZ',
  state: 'Arizona',
  postalCode: '86442',
  latitude: 35.1359,
  longitude: -114.5286,
  urlPath: '/az/bullhead-city/',
  seo: {
    title: 'Mobile Detailing Bullhead City, AZ — Pro Car, Boat & RV Detailing',
    description: 'On-site car, boat, and RV detailing in Bullhead City, AZ. Paint correction, ceramic coating, interior deep cleans.',
    keywords: ['Bullhead City AZ', 'Colorado River'],
    canonicalPath: '/az/bullhead-city/',
    ogImage: '/images/locations/bullhead-city/hero1.png',
    twitterImage: '/images/locations/bullhead-city/hero1.png',
    robots: 'index,follow'
  },
  hero: {
    h1: 'Mobile Detailing in Bullhead City, AZ',
    sub: 'We come to you — desert-tested shine for cars, boats, RVs, & aircraft'
  },
  images: [
    {
      url: '/images/locations/bullhead-city/hero1.png',
      alt: 'Mobile car detailing in Bullhead City desert scene',
      caption: 'Desert-tested wash & protection in Bullhead City',
      role: 'hero',
      width: 1536,
      height: 1024,
      priority: true
    },
    {
      url: '/images/locations/bullhead-city/auto.png',
      alt: 'Detailing car in front of a mission style home in Bullhead City',
      caption: 'We come to your home — driveways & shade setups welcome',
      role: 'auto',
      width: 1024,
      height: 768,
      priority: false
    }
  ],
  faqs: [
    {
      id: 'hard-water-spots',
      q: 'Do you handle hard-water spots common in Bullhead City?',
      a: 'Yes. We pre-treat mineral deposits, measure paint safely, and finish with protection to reduce future spotting from sprinklers and river use.'
    }
  ],
  neighborhoods: ['Desert Foothills', 'Sunridge Estates'],
  landmarks: ['Colorado River', 'Laughlin Bridge'],
  localConditions: ['Desert dust & windblown sand', 'Intense UV/sun exposure']
};

describe('Deep Merge Functionality', () => {
  describe('createMergedLocationData', () => {
    it('should merge main config with location data', () => {
      const merged = createMergedLocationData(mockMainConfig, mockLocationData);
      
      // Location-specific fields should be preserved
      expect(merged.slug).toBe('az-bullhead-city');
      expect(merged.city).toBe('Bullhead City');
      expect(merged.stateCode).toBe('AZ');
      
      // SEO should be merged (location overrides main)
      expect(merged.seo.title).toBe('Mobile Detailing Bullhead City, AZ — Pro Car, Boat & RV Detailing');
      expect(merged.seo.description).toBe('On-site car, boat, and RV detailing in Bullhead City, AZ. Paint correction, ceramic coating, interior deep cleans.');
      
      // Keywords should be concatenated
      expect(merged.seo.keywords).toEqual([
        'mobile detailing', 'car detailing', 'boat detailing', 'RV detailing',
        'Bullhead City AZ', 'Colorado River'
      ]);
      
      // Hero should be merged
      expect(merged.hero.h1).toBe('Mobile Detailing in Bullhead City, AZ');
      expect(merged.hero.sub).toBe('We come to you — desert-tested shine for cars, boats, RVs, & aircraft');
      
      // Images should be deduplicated (location images + main images)
      expect(merged.images).toHaveLength(2);
      expect(merged.images[0].role).toBe('hero');
      expect(merged.images[1].role).toBe('auto');
    });

    it('should handle array deduplication correctly', () => {
      const locationWithDuplicateImages: LocationPage = {
        ...mockLocationData,
        images: [
          {
            url: '/images/locations/bullhead-city/hero1.png',
            alt: 'Duplicate hero image',
            role: 'hero',
            width: 1536,
            height: 1024,
            priority: true
          },
          {
            url: '/images/locations/bullhead-city/hero1.png',
            alt: 'Same image again',
            role: 'hero',
            width: 1536,
            height: 1024,
            priority: true
          }
        ]
      };

      const merged = createMergedLocationData(mockMainConfig, locationWithDuplicateImages);
      
      // Should deduplicate based on role + url
      const heroImages = merged.images?.filter(img => img.role === 'hero') || [];
      expect(heroImages).toHaveLength(1);
      expect(heroImages[0].alt).toBe('Duplicate hero image');
    });

    it('should handle FAQ deduplication', () => {
      const locationWithDuplicateFAQs: LocationPage = {
        ...mockLocationData,
        faqs: [
          {
            id: 'hard-water-spots',
            q: 'Do you handle hard-water spots common in Bullhead City?',
            a: 'Yes. We pre-treat mineral deposits.'
          },
          {
            id: 'hard-water-spots',
            q: 'Do you handle hard-water spots common in Bullhead City?',
            a: 'Different answer'
          }
        ]
      };

      const merged = createMergedLocationData(mockMainConfig, locationWithDuplicateFAQs);
      
      // Should deduplicate based on ID
      expect(merged.faqs).toHaveLength(1);
      expect(merged.faqs[0].a).toBe('Yes. We pre-treat mineral deposits.');
    });
  });

  describe('validateMergedData', () => {
    it('should validate merged data correctly', () => {
      const merged = createMergedLocationData(mockMainConfig, mockLocationData);
      const validation = validateMergedData(merged);
      
      expect(validation.isValid).toBe(true);
      expect(validation.errors).toHaveLength(0);
    });

    it('should detect missing required fields', () => {
      const incompleteData = {
        ...mockLocationData,
        slug: '', // Empty slug should be invalid
        city: '' // Empty city
      };
      
      const validation = validateMergedData(incompleteData as LocationPage);
      
      expect(validation.isValid).toBe(false);
      expect(validation.errors.length).toBeGreaterThan(0);
      expect(validation.errors.some(error => error.includes('city'))).toBe(true);
    });
  });

  describe('custom merge options', () => {
    it('should respect custom merge options', () => {
      const customOptions = {
        arrayMergeStrategy: 'replace' as const,
        replaceKeys: ['keywords'],
        concatKeys: [] // Remove keywords from concat keys
      };

      const merged = createMergedLocationData(mockMainConfig, mockLocationData, customOptions);
      
      // Keywords should be replaced, not concatenated
      expect(merged.seo.keywords).toEqual(['Bullhead City AZ', 'Colorado River']);
    });
  });
});

describe('Edge Cases', () => {
  it('should handle null/undefined values gracefully', () => {
    const emptyMain: MainSiteConfig = {} as MainSiteConfig;
    const emptyLocation: LocationPage = {} as LocationPage;
    
    const merged = createMergedLocationData(emptyMain, emptyLocation);
    
    expect(merged).toBeDefined();
    expect(typeof merged).toBe('object');
  });

  it('should handle deeply nested objects', () => {
    const complexMain: MainSiteConfig = {
      ...mockMainConfig,
      seo: {
        ...mockMainConfig.seo,
        keywords: ['main1', 'main2']
      }
    };

    const complexLocation: LocationPage = {
      ...mockLocationData,
      seo: {
        ...mockLocationData.seo,
        keywords: ['location1', 'location2']
      }
    };

    const merged = createMergedLocationData(complexMain, complexLocation);
    
    // Should concatenate keywords from nested seo objects
    expect(merged.seo.keywords).toEqual(['main1', 'main2', 'location1', 'location2']);
  });
});


============================
FILE: frontend\src\shared\utils\__tests__\faqSchemaBuilder.test.ts
============================
/**
 * Tests for faqSchemaBuilder.ts - FAQ Schema.org generation
 */

import { describe, expect,it } from 'vitest';

import type { LocationPage } from '@/shared/types/location';

import {
  buildLocationFAQSchema,
  generateFAQSchemaManifest,
  validateFAQSchemaCompleteness} from '../faqSchemaBuilder';

const mockLocationData: LocationPage = {
  city: 'Test City',
  stateCode: 'TC',
  businessName: 'Test Business',
  seo: {
    title: 'Mobile Detailing in Test City',
    description: 'Professional mobile detailing in Test City',
    canonicalPath: '/test-city-tc'
  },
  header: {
    businessName: 'Test Business'
  },
  faq: {
    title: 'Frequently Asked Questions',
    subtitle: 'Everything you need to know about our services',
    items: [
      {
        id: '1',
        q: 'What services do you offer in Test City?',
        a: 'We offer comprehensive mobile detailing services including exterior wash, interior cleaning, and paint protection.'
      },
      {
        id: '2',
        q: 'How much does mobile detailing cost?',
        a: 'Pricing varies based on the size of your vehicle and services requested. Contact us for a free quote.'
      }
    ]
  }
};

const mockGeneralFAQs = [
  {
    id: '1',
    q: 'How do I book an appointment?',
    a: 'You can book online through our website or call us directly.'
  },
  {
    id: '2',
    q: 'What areas do you serve?',
    a: 'We serve the greater metropolitan area and surrounding suburbs.'
  }
];

describe('buildLocationFAQSchema', () => {
  it('should generate FAQPage schema from location data', () => {
    const schema = buildLocationFAQSchema(mockLocationData);

    expect(schema).not.toBeNull();
    expect(schema?.['@context']).toBe('https://schema.org');
    expect(schema?.['@type']).toBe('FAQPage');
    expect(schema?.mainEntity).toHaveLength(2);
    
    expect(schema?.mainEntity?.[0]).toEqual({
      '@type': 'Question',
      name: 'What services do you offer in Test City?',
      acceptedAnswer: {
        '@type': 'Answer',
        text: 'We offer comprehensive mobile detailing services including exterior wash, interior cleaning, and paint protection.'
      }
    });
  });

  it('should return null when no FAQ data is present', () => {
    const locationWithoutFAQ: LocationPage = {
      city: 'Test City',
      stateCode: 'TC',
      businessName: 'Test Business',
      seo: {
        title: 'Mobile Detailing in Test City',
        description: 'Professional mobile detailing in Test City',
        canonicalPath: '/test-city-tc'
      },
      header: {
        businessName: 'Test Business'
      }
    };

    const schema = buildLocationFAQSchema(locationWithoutFAQ);
    expect(schema).toBeNull();
  });

  it('should return null when FAQ items array is empty', () => {
    const locationWithEmptyFAQ: LocationPage = {
      ...mockLocationData,
      faq: {
        title: 'FAQ',
        subtitle: 'Questions',
        items: []
      }
    };

    const schema = buildLocationFAQSchema(locationWithEmptyFAQ);
    expect(schema).toBeNull();
  });
});

describe('validateFAQSchemaCompleteness', () => {
  it('should validate complete FAQ data', () => {
    const result = validateFAQSchemaCompleteness([mockLocationData], mockGeneralFAQs);

    expect(result.isValid).toBe(true);
    expect(result.warnings).toHaveLength(0);
    expect(result.recommendations).toHaveLength(0);
  });

  it('should identify missing FAQ data', () => {
    const locationWithoutFAQ: LocationPage = {
      city: 'Test City',
      stateCode: 'TC',
      businessName: 'Test Business',
      seo: {
        title: 'Mobile Detailing in Test City',
        description: 'Professional mobile detailing in Test City',
        canonicalPath: '/test-city-tc'
      },
      header: {
        businessName: 'Test Business'
      }
    };

    const result = validateFAQSchemaCompleteness([locationWithoutFAQ], mockGeneralFAQs);

    expect(result.isValid).toBe(false);
    expect(result.warnings).toContain('Test City has no FAQ data');
    expect(result.recommendations).toContain('Add FAQ data for Test City');
  });

  it('should identify locations with insufficient FAQ items', () => {
    const locationWithMinimalFAQ: LocationPage = {
      ...mockLocationData,
      faq: {
        title: 'FAQ',
        subtitle: 'Questions',
        items: [
          {
            id: '1',
            q: 'Only one question?',
            a: 'Only one answer.'
          }
        ]
      }
    };

    const result = validateFAQSchemaCompleteness([locationWithMinimalFAQ], mockGeneralFAQs);

    expect(result.isValid).toBe(false);
    expect(result.warnings).toContain('Test City has only 1 FAQ items (recommended: 3+)');
    expect(result.recommendations).toContain('Add more FAQ items for Test City');
  });

  it('should handle empty location data array', () => {
    const result = validateFAQSchemaCompleteness([], mockGeneralFAQs);

    expect(result.isValid).toBe(true);
    expect(result.warnings).toHaveLength(0);
    expect(result.recommendations).toHaveLength(0);
  });

  it('should handle empty general FAQs array', () => {
    const result = validateFAQSchemaCompleteness([mockLocationData], []);

    expect(result.isValid).toBe(true);
    expect(result.warnings).toHaveLength(0);
    expect(result.recommendations).toHaveLength(0);
  });
});

describe('generateFAQSchemaManifest', () => {
  it('should generate complete manifest for locations with FAQ data', () => {
    const manifest = generateFAQSchemaManifest([mockLocationData], mockGeneralFAQs);

    expect(manifest.version).toBe('1.0');
    expect(manifest.generatedAt).toBeDefined();
    expect(manifest.mainSite.hasSchema).toBe(true);
    expect(manifest.mainSite.faqCount).toBe(2);
    expect(manifest.locations).toHaveLength(1);
    
    const locationManifest = manifest.locations[0];
    expect(locationManifest.city).toBe('Test City');
    expect(locationManifest.hasSchema).toBe(true);
    expect(locationManifest.faqCount).toBe(2);
  });

  it('should generate manifest for locations without FAQ data', () => {
    const locationWithoutFAQ: LocationPage = {
      city: 'Test City',
      stateCode: 'TC',
      businessName: 'Test Business',
      seo: {
        title: 'Mobile Detailing in Test City',
        description: 'Professional mobile detailing in Test City',
        canonicalPath: '/test-city-tc'
      },
      header: {
        businessName: 'Test Business'
      }
    };

    const manifest = generateFAQSchemaManifest([locationWithoutFAQ], mockGeneralFAQs);

    expect(manifest.mainSite.hasSchema).toBe(true);
    expect(manifest.mainSite.faqCount).toBe(2);
    expect(manifest.locations).toHaveLength(1);
    
    const locationManifest = manifest.locations[0];
    expect(locationManifest.city).toBe('Test City');
    expect(locationManifest.hasSchema).toBe(false);
    expect(locationManifest.faqCount).toBe(0);
  });

  it('should handle mixed locations with and without FAQ data', () => {
    const locationWithoutFAQ: LocationPage = {
      city: 'Another City',
      stateCode: 'AC',
      businessName: 'Another Business',
      seo: {
        title: 'Mobile Detailing in Another City',
        description: 'Professional mobile detailing in Another City',
        canonicalPath: '/another-city-ac'
      },
      header: {
        businessName: 'Another Business'
      }
    };

    const manifest = generateFAQSchemaManifest([mockLocationData, locationWithoutFAQ], mockGeneralFAQs);

    expect(manifest.locations).toHaveLength(2);
    
    const testCityManifest = manifest.locations.find(l => l.city === 'Test City');
    expect(testCityManifest?.hasSchema).toBe(true);
    expect(testCityManifest?.faqCount).toBe(2);
    
    const anotherCityManifest = manifest.locations.find(l => l.city === 'Another City');
    expect(anotherCityManifest?.hasSchema).toBe(false);
    expect(anotherCityManifest?.faqCount).toBe(0);
  });

  it('should handle empty data arrays', () => {
    const manifest = generateFAQSchemaManifest([], []);

    expect(manifest.mainSite.hasSchema).toBe(false);
    expect(manifest.mainSite.faqCount).toBe(0);
    expect(manifest.locations).toHaveLength(0);
  });
});


============================
FILE: frontend\src\shared\utils\__tests__\imageRotation.test.ts
============================
/**
 * Tests for Image Rotation Utilities
 */

import {
  getAccessibilityAttributes,
  getImageOpacityClasses,
  getNextImageIndex,
  getPreviousImageIndex,
  getTransitionDuration,
  getVisibleImageIndices,
  validateImageRotationConfig} from '../imageRotation';

describe('Image Rotation Utilities', () => {
  describe('getNextImageIndex', () => {
    it('should return next index in sequence', () => {
      expect(getNextImageIndex(0, 5)).toBe(1);
      expect(getNextImageIndex(2, 5)).toBe(3);
    });

    it('should wrap to first index when at end', () => {
      expect(getNextImageIndex(4, 5)).toBe(0);
    });

    it('should handle single image', () => {
      expect(getNextImageIndex(0, 1)).toBe(0);
    });
  });

  describe('getPreviousImageIndex', () => {
    it('should return previous index in sequence', () => {
      expect(getPreviousImageIndex(2, 5)).toBe(1);
      expect(getPreviousImageIndex(4, 5)).toBe(3);
    });

    it('should wrap to last index when at beginning', () => {
      expect(getPreviousImageIndex(0, 5)).toBe(4);
    });

    it('should handle single image', () => {
      expect(getPreviousImageIndex(0, 1)).toBe(0);
    });
  });

  describe('getTransitionDuration', () => {
    it('should format duration correctly', () => {
      expect(getTransitionDuration(2000)).toBe('2000ms');
      expect(getTransitionDuration(500)).toBe('500ms');
    });
  });

  describe('getImageOpacityClasses', () => {
    it('should return active classes for current image', () => {
      const classes = getImageOpacityClasses(2, 2, 1500);
      expect(classes).toContain('opacity-100');
      expect(classes).toContain('transition-opacity');
      expect(classes).toContain('duration-[1500ms]');
    });

    it('should return inactive classes for non-current image', () => {
      const classes = getImageOpacityClasses(1, 2, 1500);
      expect(classes).toContain('opacity-0');
      expect(classes).toContain('transition-opacity');
    });
  });

  describe('getVisibleImageIndices', () => {
    it('should return current index for single image', () => {
      expect(getVisibleImageIndices(0, 1, true)).toEqual([0]);
    });

    it('should return current and next indices for multiple images', () => {
      expect(getVisibleImageIndices(2, 5, true)).toEqual([2, 3]);
    });

    it('should wrap next index when at end', () => {
      expect(getVisibleImageIndices(4, 5, true)).toEqual([4, 0]);
    });

    it('should only return current index when preloadNext is false', () => {
      expect(getVisibleImageIndices(2, 5, false)).toEqual([2]);
    });
  });

  describe('validateImageRotationConfig', () => {
    it('should validate correct configuration', () => {
      const config = {
        images: ['image1.jpg', 'image2.jpg'],
        autoRotate: true,
        interval: 5000,
        fadeDuration: 1000
      };
      
      const result = validateImageRotationConfig(config);
      expect(result.isValid).toBe(true);
      expect(result.errors).toHaveLength(0);
    });

    it('should reject empty images array', () => {
      const config = {
        images: [],
        autoRotate: true
      };
      
      const result = validateImageRotationConfig(config);
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('Images array cannot be empty');
    });

    it('should reject short interval', () => {
      const config = {
        images: ['image1.jpg'],
        interval: 500
      };
      
      const result = validateImageRotationConfig(config);
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('Interval should be at least 1000ms for better UX');
    });

    it('should reject short fade duration', () => {
      const config = {
        images: ['image1.jpg'],
        fadeDuration: 50
      };
      
      const result = validateImageRotationConfig(config);
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('Fade duration should be at least 100ms');
    });
  });

  describe('getAccessibilityAttributes', () => {
    it('should return correct accessibility attributes', () => {
      const attrs = getAccessibilityAttributes(2, 5, true);
      
      expect(attrs.role).toBe('img');
      expect(attrs['aria-label']).toBe('Image 3 of 5');
      expect(attrs['aria-live']).toBe('polite');
      expect(attrs['aria-atomic']).toBe(true);
    });

    it('should set aria-live to off when not auto-rotating', () => {
      const attrs = getAccessibilityAttributes(1, 3, false);
      expect(attrs['aria-live']).toBe('off');
    });
  });
});


============================
FILE: frontend\src\shared\utils\__tests__\phoneFormatter.test.ts
============================
/**
 * Phone Formatter Test Examples
 * This file demonstrates how the phone formatter works with various inputs
 */

import { env } from '@/shared/env';

import { formatPhoneNumber, getPhoneDigits, isCompletePhoneNumber } from '../phoneFormatter';

// Test examples - you can run these in the browser console to see how they work
export const testExamples = [
  // Various input formats
  { input: '1234567890', expected: '(123) 456-7890' },
  { input: '123-456-7890', expected: '(123) 456-7890' },
  { input: '123.456.7890', expected: '(123) 456-7890' },
  { input: '123 456 7890', expected: '(123) 456-7890' },
  { input: '(123) 456-7890', expected: '(123) 456-7890' },
  
  // With country code
  { input: '11234567890', expected: '(123) 456-7890' },
  { input: '1-123-456-7890', expected: '(123) 456-7890' },
  
  // Incomplete numbers
  { input: '123', expected: '123' },
  { input: '123456', expected: '123456' },
  { input: '123456789', expected: '123456789' },
  
  // Edge cases
  { input: '', expected: '' },
  { input: 'abc123def456ghi7890', expected: '(123) 456-7890' },
  { input: '1-800-FLOWERS', expected: '1800' }, // Only digits are extracted
];

// Function to run all tests
export function runPhoneFormatterTests() {
  if (env.DEV) {
    // Running Phone Formatter Tests
  }
  
  testExamples.forEach(({ input, expected }, index) => {
    const result = formatPhoneNumber(input);
    const isComplete = isCompletePhoneNumber(input);
    const digits = getPhoneDigits(input);
    
    if (env.DEV) {
      // eslint-disable-next-line no-console -- Debug output for manual test execution
      console.log(`Test ${(index + 1).toString()}:`, {
        input,
        expected,
        result,
        isComplete,
        digits,
        passed: result === expected
      });
    }
  });
  
  if (env.DEV) {
    // Test Complete
  }
}

// Example usage in console:
// import { runPhoneFormatterTests } from './phoneFormatter.test';
// runPhoneFormatterTests();


============================
FILE: frontend\src\shared\utils\__tests__\schemaUtils.test.ts
============================
/**
 * Tests for schemaUtils.ts - Schema.org structured data generation
 */

import { describe, expect, it } from 'vitest';

import type { LocationPage, MainSiteConfig } from '@/shared/types/location';

import {
  generateAllSchemas,
  generateFAQSchema,
  generateLocationSchema,
  generateOrganizationSchema,
  generateSchemaImages,
  generateWebPageSchema,
  generateWebsiteSchema} from '../schemaUtils';

// Mock window.location for tests
const mockLocation = {
  host: 'example.com',
  protocol: 'https:',
  href: 'https://example.com'
};

// Mock window.location
Object.defineProperty(window, 'location', {
  value: mockLocation,
  writable: true
});

describe('generateSchemaImages', () => {
  it('should filter images by role and return URLs', () => {
    const locationData: Partial<LocationPage> = {
      images: [
        { url: '/hero1.jpg', alt: 'Hero 1', role: 'hero' },
        { url: '/hero2.jpg', alt: 'Hero 2', role: 'hero' },
        { url: '/gallery1.jpg', alt: 'Gallery 1', role: 'gallery' },
        { url: '/gallery2.jpg', alt: 'Gallery 2', role: 'gallery' }
      ]
    };

    const heroImages = generateSchemaImages(locationData as LocationPage, ['hero']);
    expect(heroImages).toEqual(['/hero1.jpg', '/hero2.jpg']);

    const galleryImages = generateSchemaImages(locationData as LocationPage, ['gallery']);
    expect(galleryImages).toEqual(['/gallery1.jpg', '/gallery2.jpg']);
  });

  it('should return empty array when no images match role', () => {
    const locationData: Partial<LocationPage> = {
      images: [
        { url: '/hero1.jpg', alt: 'Hero 1', role: 'hero' }
      ]
    };

    const galleryImages = generateSchemaImages(locationData as LocationPage, ['gallery']);
    expect(galleryImages).toEqual([]);
  });

  it('should return empty array when no images provided', () => {
    const locationData: Partial<LocationPage> = {};

    const images = generateSchemaImages(locationData as LocationPage, ['hero']);
    expect(images).toEqual([]);
  });
});

describe('generateLocationSchema', () => {
  const mockSiteConfig: MainSiteConfig = {
    brand: 'Test Brand',
    slug: 'test-brand',
    urlPath: '/',
    logo: { url: '/logo.png', alt: 'Test Brand Logo' },
    seo: {
      title: 'Test Brand - Mobile Detailing',
      description: 'Professional mobile detailing services',
      canonicalPath: '/',
      keywords: ['mobile detailing', 'car wash']
    },
    hero: { h1: 'Professional Mobile Detailing' }
  };

  const mockLocationData: LocationPage = {
    city: 'Test City',
    stateCode: 'TC',
    postalCode: '12345',
    businessName: 'Test Business',
    phone: '555-1234',
    email: 'test@example.com',
    address: '123 Test St',
    serviceArea: {
      postalCodes: ['12345', '12346'],
      neighborhoods: ['Downtown', 'Uptown']
    },
    neighborhoods: ['Downtown', 'Uptown'],
    images: [
      { url: '/hero.jpg', alt: 'Hero Image', role: 'hero' }
    ],
    seo: {
      title: 'Mobile Detailing in Test City',
      description: 'Professional mobile detailing in Test City',
      canonicalPath: '/test-city-tc'
    },
    header: {
      businessName: 'Test Business',
      phone: '555-1234'
    }
  };

  it('should generate complete LocalBusiness schema', () => {
    const schema = generateLocationSchema(mockLocationData, mockSiteConfig);

    expect(schema['@context']).toBe('https://schema.org');
    expect(schema['@type']).toBe('LocalBusiness');
    expect(schema.name).toBe('Test Business');
    expect(schema.telephone).toBe('555-1234');
    expect(schema.email).toBe('test@example.com');
    expect(schema.address).toEqual({
      '@type': 'PostalAddress',
      streetAddress: '123 Test St',
      addressLocality: 'Test City',
      addressRegion: 'TC',
      postalCode: '12345'
    });
    expect(schema.areaServed).toEqual([
      'Test City',
      '12345',
      '12346',
      'Downtown, TC',
      'Uptown, TC'
    ]);
    expect(schema.image).toEqual(['/hero.jpg']);
  });

  it('should handle missing optional fields gracefully', () => {
    const minimalData: LocationPage = {
      city: 'Test City',
      stateCode: 'TC',
      businessName: 'Test Business',
      seo: { title: 'Test', description: 'Test', canonicalPath: '/' },
      header: { businessName: 'Test Business' }
    };

    const schema = generateLocationSchema(minimalData, mockSiteConfig);

    expect(schema.name).toBe('Test Business');
    expect(schema.telephone).toBeUndefined();
    expect(schema.email).toBeUndefined();
    expect(schema.address).toBeUndefined();
    expect(schema.areaServed).toEqual(['Test City']);
  });
});

describe('generateOrganizationSchema', () => {
  const mockSiteConfig: MainSiteConfig = {
    brand: 'Test Brand',
    slug: 'test-brand',
    urlPath: '/',
    logo: { url: '/logo.png', alt: 'Test Brand Logo' },
    seo: {
      title: 'Test Brand - Mobile Detailing',
      description: 'Professional mobile detailing services',
      canonicalPath: '/',
      keywords: ['mobile detailing', 'car wash']
    },
    hero: { h1: 'Professional Mobile Detailing' },
    contact: {
      email: 'contact@testbrand.com',
      phone: '555-1234'
    },
    socials: {
      facebook: 'https://facebook.com/testbrand',
      instagram: 'https://instagram.com/testbrand'
    }
  };

  it('should generate complete Organization schema', () => {
    const schema = generateOrganizationSchema(mockSiteConfig);

    expect(schema['@context']).toBe('https://schema.org');
    expect(schema['@type']).toBe('Organization');
    expect(schema.name).toBe('Test Brand');
    expect(schema.url).toBe('https://example.com/');
    expect(schema.logo).toBe('https://example.com/logo.png');
    expect(schema.description).toBe('Professional mobile detailing services');
    expect(schema.email).toBe('contact@testbrand.com');
    expect(schema.telephone).toBe('555-1234');
    expect(schema.sameAs).toEqual([
      'https://facebook.com/testbrand',
      'https://instagram.com/testbrand'
    ]);
  });

  it('should handle missing contact and social fields', () => {
    const minimalConfig: MainSiteConfig = {
      brand: 'Test Brand',
      slug: 'test-brand',
      urlPath: '/',
      logo: { url: '/logo.png', alt: 'Test Brand Logo' },
      seo: {
        title: 'Test Brand',
        description: 'Test description',
        canonicalPath: '/'
      },
      hero: { h1: 'Test Brand' }
    };

    const schema = generateOrganizationSchema(minimalConfig);

    expect(schema.name).toBe('Test Brand');
    expect(schema.email).toBeUndefined();
    expect(schema.telephone).toBeUndefined();
    expect(schema.sameAs).toBeUndefined();
  });
});

describe('generateWebsiteSchema', () => {
  const mockSiteConfig: MainSiteConfig = {
    brand: 'Test Brand',
    slug: 'test-brand',
    urlPath: '/',
    logo: { url: '/logo.png', alt: 'Test Brand Logo' },
    seo: {
      title: 'Test Brand - Mobile Detailing',
      description: 'Professional mobile detailing services',
      canonicalPath: '/'
    },
    hero: { h1: 'Professional Mobile Detailing' }
  };

  it('should generate Website schema with search action', () => {
    const schema = generateWebsiteSchema(mockSiteConfig);

    expect(schema['@context']).toBe('https://schema.org');
    expect(schema['@type']).toBe('WebSite');
    expect(schema.url).toBe('https://example.com/');
    expect(schema.name).toBe('Test Brand');
    expect(schema.potentialAction).toEqual({
      '@type': 'SearchAction',
      target: 'https://example.com/search?q={query}',
      'query-input': 'required name=query'
    });
  });
});

describe('generateWebPageSchema', () => {
  const mockSiteConfig: MainSiteConfig = {
    brand: 'Test Brand',
    slug: 'test-brand',
    urlPath: '/',
    logo: { url: '/logo.png', alt: 'Test Brand Logo' },
    seo: {
      title: 'Test Brand - Mobile Detailing',
      description: 'Professional mobile detailing services',
      canonicalPath: '/'
    },
    hero: { h1: 'Professional Mobile Detailing' }
  };

  const mockLocationData: LocationPage = {
    city: 'Test City',
    stateCode: 'TC',
    businessName: 'Test Business',
    seo: {
      title: 'Mobile Detailing in Test City',
      description: 'Professional mobile detailing in Test City',
      canonicalPath: '/test-city-tc',
      keywords: ['mobile detailing', 'test city']
    },
    header: {
      businessName: 'Test Business'
    }
  };

  it('should generate WebPage schema for home page', () => {
    const schema = generateWebPageSchema(mockSiteConfig, mockSiteConfig, 'home');

    expect(schema['@context']).toBe('https://schema.org');
    expect(schema['@type']).toBe('WebPage');
    expect(schema.url).toBe('https://example.com/');
    expect(schema.name).toBe('Test Brand - Mobile Detailing');
    expect(schema.description).toBe('Professional mobile detailing services');
    expect(schema.isPartOf).toEqual({
      '@type': 'WebSite',
      name: 'Test Brand',
      url: 'https://example.com'
    });
  });

  it('should generate WebPage schema for location page', () => {
    const schema = generateWebPageSchema(mockLocationData, mockSiteConfig, 'location');

    expect(schema['@context']).toBe('https://schema.org');
    expect(schema['@type']).toBe('WebPage');
    expect(schema.url).toBe('https://example.com/test-city-tc');
    expect(schema.name).toBe('Mobile Detailing in Test City');
    expect(schema.description).toBe('Professional mobile detailing in Test City');
    expect(schema.keywords).toBe('mobile detailing, test city');
    expect(schema.about).toEqual({
      '@type': 'LocalBusiness',
      name: 'Test Business',
      address: {
        '@type': 'PostalAddress',
        addressLocality: 'Test City',
        addressRegion: 'TC',
        postalCode: undefined
      }
    });
  });
});

describe('generateFAQSchema', () => {
  it('should generate FAQPage schema from FAQ items', () => {
    const faqs = [
      { id: '1', q: 'What services do you offer?', a: 'We offer mobile detailing services.' },
      { id: '2', q: 'How much does it cost?', a: 'Pricing varies by service type.' }
    ];

    const schema = generateFAQSchema(faqs);

    expect(schema['@context']).toBe('https://schema.org');
    expect(schema['@type']).toBe('FAQPage');
    expect(schema.mainEntity).toHaveLength(2);
    expect(schema.mainEntity[0]).toEqual({
      '@type': 'Question',
      name: 'What services do you offer?',
      acceptedAnswer: {
        '@type': 'Answer',
        text: 'We offer mobile detailing services.'
      }
    });
  });

  it('should handle empty FAQ array', () => {
    const schema = generateFAQSchema([]);

    expect(schema['@context']).toBe('https://schema.org');
    expect(schema['@type']).toBe('FAQPage');
    expect(schema.mainEntity).toEqual([]);
  });
});

describe('generateAllSchemas', () => {
  const mockSiteConfig: MainSiteConfig = {
    brand: 'Test Brand',
    slug: 'test-brand',
    urlPath: '/',
    logo: { url: '/logo.png', alt: 'Test Brand Logo' },
    seo: {
      title: 'Test Brand - Mobile Detailing',
      description: 'Professional mobile detailing services',
      canonicalPath: '/'
    },
    hero: { h1: 'Professional Mobile Detailing' }
  };

  it('should generate all schemas for home page', () => {
    const schemas = generateAllSchemas(mockSiteConfig, mockSiteConfig, 'home');

    expect(schemas).toHaveLength(3);
    expect(schemas[0]['@type']).toBe('Organization');
    expect(schemas[1]['@type']).toBe('WebSite');
    expect(schemas[2]['@type']).toBe('WebPage');
  });

  it('should include FAQ schema when provided', () => {
    const faqs = [
      { id: '1', q: 'Test question?', a: 'Test answer.' }
    ];

    const schemas = generateAllSchemas(mockSiteConfig, mockSiteConfig, 'home', faqs);

    expect(schemas).toHaveLength(4);
    expect(schemas[3]['@type']).toBe('FAQPage');
  });

  it('should generate schemas for location page', () => {
    const locationData: LocationPage = {
      city: 'Test City',
      stateCode: 'TC',
      businessName: 'Test Business',
      seo: {
        title: 'Mobile Detailing in Test City',
        description: 'Professional mobile detailing in Test City',
        canonicalPath: '/test-city-tc'
      },
      header: {
        businessName: 'Test Business'
      }
    };

    const schemas = generateAllSchemas(locationData, mockSiteConfig, 'location');

    expect(schemas).toHaveLength(1);
    expect(schemas[0]['@type']).toBe('WebPage');
  });
});


============================
FILE: frontend\src\shared\utils\__tests__\siteUtils.test.ts
============================
/**
 * Tests for siteUtils.ts - Site utility functions
 */

import { describe, expect, it } from 'vitest';

import type { MainSiteConfig } from '@/shared/types/location';

import { formatSEO,getAbsoluteUrl } from '../siteUtils';

// Mock window.location for tests
const mockLocation = {
  host: 'example.com',
  protocol: 'https:',
  href: 'https://example.com'
};

Object.defineProperty(window, 'location', {
  value: mockLocation,
  writable: true
});

describe('getAbsoluteUrl', () => {
  beforeEach(() => {
    // Reset window.location mock
    Object.defineProperty(window, 'location', {
      value: mockLocation,
      writable: true
    });
  });

  it('should convert relative URL to absolute URL', () => {
    const result = getAbsoluteUrl('/services');
    expect(result).toBe('https://example.com/services');
  });

  it('should handle root path', () => {
    const result = getAbsoluteUrl('/');
    expect(result).toBe('https://example.com/');
  });

  it('should handle paths without leading slash', () => {
    const result = getAbsoluteUrl('services');
    expect(result).toBe('https://example.com/services');
  });

  it('should handle empty string', () => {
    const result = getAbsoluteUrl('');
    expect(result).toBe('https://example.com/');
  });

  it('should handle different protocols', () => {
    Object.defineProperty(window, 'location', {
      value: { ...mockLocation, protocol: 'http:' },
      writable: true
    });

    const result = getAbsoluteUrl('/test');
    expect(result).toBe('http://example.com/test');
  });

  it('should handle different hosts', () => {
    Object.defineProperty(window, 'location', {
      value: { ...mockLocation, host: 'subdomain.example.com' },
      writable: true
    });

    const result = getAbsoluteUrl('/test');
    expect(result).toBe('https://subdomain.example.com/test');
  });

  it('should handle complex paths', () => {
    const result = getAbsoluteUrl('/api/v1/data?param=value');
    expect(result).toBe('https://example.com/api/v1/data?param=value');
  });
});

describe('formatSEO', () => {
  const mockSiteConfig: MainSiteConfig = {
    brand: 'Test Brand',
    slug: 'test-brand',
    urlPath: '/',
    logo: { url: '/logo.png', alt: 'Test Brand Logo' },
    seo: {
      title: 'Test Brand - Mobile Detailing',
      description: 'Professional mobile detailing services',
      canonicalPath: '/',
      keywords: ['mobile detailing', 'car wash', 'auto detailing']
    },
    hero: { h1: 'Professional Mobile Detailing' }
  };

  it('should format SEO data correctly', () => {
    const result = formatSEO(mockSiteConfig);

    expect(result).toEqual({
      title: 'Test Brand - Mobile Detailing',
      description: 'Professional mobile detailing services',
      keywords: 'mobile detailing, car wash, auto detailing',
      canonicalUrl: 'https://example.com/',
      ogTitle: 'Test Brand - Mobile Detailing',
      ogDescription: 'Professional mobile detailing services',
      ogUrl: 'https://example.com/',
      ogImage: undefined,
      twitterTitle: 'Test Brand - Mobile Detailing',
      twitterDescription: 'Professional mobile detailing services',
      twitterImage: undefined
    });
  });

  it('should handle missing keywords', () => {
    const configWithoutKeywords: MainSiteConfig = {
      ...mockSiteConfig,
      seo: {
        ...mockSiteConfig.seo,
        keywords: undefined
      }
    };

    const result = formatSEO(configWithoutKeywords);

    expect(result.keywords).toBeUndefined();
  });

  it('should handle empty keywords array', () => {
    const configWithEmptyKeywords: MainSiteConfig = {
      ...mockSiteConfig,
      seo: {
        ...mockSiteConfig.seo,
        keywords: []
      }
    };

    const result = formatSEO(configWithEmptyKeywords);

    expect(result.keywords).toBeUndefined();
  });

  it('should handle single keyword', () => {
    const configWithSingleKeyword: MainSiteConfig = {
      ...mockSiteConfig,
      seo: {
        ...mockSiteConfig.seo,
        keywords: ['mobile detailing']
      }
    };

    const result = formatSEO(configWithSingleKeyword);

    expect(result.keywords).toBe('mobile detailing');
  });

  it('should handle ogImage and twitterImage', () => {
    const configWithImages: MainSiteConfig = {
      ...mockSiteConfig,
      seo: {
        ...mockSiteConfig.seo,
        ogImage: '/og-image.jpg',
        twitterImage: '/twitter-image.jpg'
      }
    };

    const result = formatSEO(configWithImages);

    expect(result.ogImage).toBe('https://example.com/og-image.jpg');
    expect(result.twitterImage).toBe('https://example.com/twitter-image.jpg');
  });

  it('should handle different canonical paths', () => {
    const configWithPath: MainSiteConfig = {
      ...mockSiteConfig,
      seo: {
        ...mockSiteConfig.seo,
        canonicalPath: '/services'
      }
    };

    const result = formatSEO(configWithPath);

    expect(result.canonicalUrl).toBe('https://example.com/services');
    expect(result.ogUrl).toBe('https://example.com/services');
  });

  it('should handle complex canonical paths', () => {
    const configWithComplexPath: MainSiteConfig = {
      ...mockSiteConfig,
      seo: {
        ...mockSiteConfig.seo,
        canonicalPath: '/api/v1/data?param=value'
      }
    };

    const result = formatSEO(configWithComplexPath);

    expect(result.canonicalUrl).toBe('https://example.com/api/v1/data?param=value');
    expect(result.ogUrl).toBe('https://example.com/api/v1/data?param=value');
  });

  it('should handle missing seo object', () => {
    const configWithoutSEO: MainSiteConfig = {
      ...mockSiteConfig,
      seo: undefined as any
    };

    const result = formatSEO(configWithoutSEO);

    expect(result.title).toBeUndefined();
    expect(result.description).toBeUndefined();
    expect(result.keywords).toBeUndefined();
    expect(result.canonicalUrl).toBe('https://example.com/');
    expect(result.ogTitle).toBeUndefined();
    expect(result.ogDescription).toBeUndefined();
    expect(result.ogUrl).toBe('https://example.com/');
    expect(result.ogImage).toBeUndefined();
    expect(result.twitterTitle).toBeUndefined();
    expect(result.twitterDescription).toBeUndefined();
    expect(result.twitterImage).toBeUndefined();
  });
});


============================
FILE: frontend\src\shared\utils\__tests__\validation.test.ts
============================
/**
 * Tests for validation utility functions
 */

import { describe, expect, it } from 'vitest';

import { 
  sanitizeHtml,
  sanitizeText,
  validateEmail, 
  validateMessage,
  validateName, 
  validatePassword,
  validatePhone, 
  validateService,
  validateVehicleField} from '../validation';

describe('Validation Utilities', () => {
  describe('validateEmail', () => {
    it('should validate correct email addresses', () => {
      expect(validateEmail('test@example.com')).toEqual({
        isValid: true,
        errors: [],
        sanitizedValue: 'test@example.com'
      });
    });

    it('should reject invalid email addresses', () => {
      expect(validateEmail('invalid-email')).toEqual({
        isValid: false,
        errors: ['Email format is invalid']
      });
    });

    it('should reject empty emails', () => {
      expect(validateEmail('')).toEqual({
        isValid: false,
        errors: ['Email is required']
      });
    });
  });

  describe('validatePhone', () => {
    it('should validate correct phone numbers', () => {
      expect(validatePhone('(555) 123-4567')).toEqual({
        isValid: true,
        errors: [],
        sanitizedValue: '(555) 123-4567'
      });
    });

    it('should reject phone numbers with too few digits', () => {
      expect(validatePhone('123')).toEqual({
        isValid: false,
        errors: ['Phone number must have at least 10 digits']
      });
    });
  });

  describe('validateName', () => {
    it('should validate correct names', () => {
      expect(validateName('John Doe')).toEqual({
        isValid: true,
        errors: [],
        sanitizedValue: 'John Doe'
      });
    });

    it('should reject names that are too short', () => {
      expect(validateName('J')).toEqual({
        isValid: false,
        errors: ['Name must be at least 2 characters']
      });
    });

    it('should reject names with invalid characters', () => {
      expect(validateName('John123')).toEqual({
        isValid: false,
        errors: ['Name format is invalid']
      });
    });
  });

  describe('validatePassword', () => {
    it('should validate login passwords (any non-empty)', () => {
      expect(validatePassword('password', true)).toEqual({
        isValid: true,
        errors: [],
        sanitizedValue: 'password'
      });
    });

    it('should enforce strong password requirements for registration', () => {
      expect(validatePassword('weak', false)).toEqual({
        isValid: false,
        errors: ['Password must be at least 8 characters', 'Password must contain at least one uppercase letter', 'Password must contain at least one number', 'Password must contain at least one special character']
      });
    });

    it('should accept strong passwords', () => {
      expect(validatePassword('StrongPass123!', false)).toEqual({
        isValid: true,
        errors: [],
        sanitizedValue: 'StrongPass123!'
      });
    });
  });

  describe('validateVehicleField', () => {
    it('should validate vehicle make/model', () => {
      expect(validateVehicleField('Toyota', 'Vehicle make')).toEqual({
        isValid: true,
        errors: [],
        sanitizedValue: 'Toyota'
      });
    });

    it('should reject vehicle fields that are too short', () => {
      expect(validateVehicleField('T', 'Vehicle make')).toEqual({
        isValid: false,
        errors: ['Vehicle make must be at least 2 characters']
      });
    });
  });

  describe('validateService', () => {
    it('should validate service selection', () => {
      expect(validateService('Detail')).toEqual({
        isValid: true,
        errors: [],
        sanitizedValue: 'Detail'
      });
    });

    it('should reject empty service', () => {
      expect(validateService('')).toEqual({
        isValid: false,
        errors: ['Service is required']
      });
    });
  });

  describe('validateMessage', () => {
    it('should validate optional message', () => {
      expect(validateMessage('', false)).toEqual({
        isValid: true,
        errors: [],
        sanitizedValue: ''
      });
    });

    it('should validate non-empty message', () => {
      expect(validateMessage('Test message', false)).toEqual({
        isValid: true,
        errors: [],
        sanitizedValue: 'Test message'
      });
    });

    it('should reject messages that are too long', () => {
      const longMessage = 'a'.repeat(1001);
      expect(validateMessage(longMessage, false)).toEqual({
        isValid: false,
        errors: ['Message must be no more than 1000 characters']
      });
    });
  });

  describe('sanitizeText', () => {
    it('should remove dangerous characters', () => {
      expect(sanitizeText('<script>alert("xss")</script>')).toBe('scriptalert("xss")/script');
    });

    it('should remove javascript protocol', () => {
      expect(sanitizeText('javascript:alert("xss")')).toBe('alert("xss")');
    });

    it('should remove event handlers', () => {
      expect(sanitizeText('onclick="alert(1)"')).toBe('="alert(1)"');
    });
  });

  describe('sanitizeHtml', () => {
    it('should escape HTML characters', () => {
      expect(sanitizeHtml('<div>Hello</div>')).toBe('&lt;div&gt;Hello&lt;/div&gt;');
    });

    it('should escape quotes', () => {
      expect(sanitizeHtml('"Hello"')).toBe('&quot;Hello&quot;');
    });
  });
});


============================
FILE: frontend\src\shared\validation\locationSchema.ts
============================
/**
 * Zod validation schemas for location data
 * Ensures data integrity and provides clear error messages
 */

import { z } from 'zod';

// Image schema with performance optimization fields
const ImageSchema = z.object({
  url: z.string().min(1, 'Image URL is required'),
  alt: z.string().min(1, 'Image alt text is required'),
  caption: z.string().optional(),
  role: z.enum(['hero', 'gallery', 'process', 'result', 'auto', 'marine', 'rv'], {
    errorMap: () => ({ message: 'Image role must be one of: hero, gallery, process, result, auto, marine, rv' })
  }),
  width: z.number().positive('Image width must be positive').optional(),
  height: z.number().positive('Image height must be positive').optional(),
  priority: z.boolean().optional(),
  sources: z.array(z.object({
    srcset: z.string(),
    type: z.string()
  })).optional()
});

// Header schema for business information
const HeaderSchema = z.object({
  businessName: z.string().min(1, 'Business name is required').optional(),
  phoneDisplay: z.string().min(1, 'Phone display format is required').optional(),
  phoneE164: z.string().regex(/^\+[1-9]\d{1,14}$/, 'Phone must be in E.164 format (e.g., +1234567890)').optional(),
  cityStateLabel: z.string().min(1, 'City state label is required').optional()
});

// SEO schema
const SEOSchema = z.object({
  title: z.string().min(1, 'SEO title is required'),
  description: z.string().min(1, 'SEO description is required'),
  keywords: z.array(z.string()).optional(),
  canonicalPath: z.string().regex(/^\/.*\/?$/, 'Canonical path must start with /').optional(),
  ogImage: z.string().optional(),
  twitterImage: z.string().optional(),
  robots: z.enum(['index,follow', 'noindex,nofollow']).optional()
});

// Hero schema
const HeroSchema = z.object({
  h1: z.string().min(1, 'Hero H1 is required'),
  sub: z.string().optional()
});

// Operations schema
const OpsSchema = z.object({
  acceptsSameDay: z.boolean().optional(),
  leadTimeDays: z.number().int().min(0, 'Lead time days must be non-negative').max(30, 'Lead time days must be reasonable').optional(),
  serviceRadiusMiles: z.number().positive('Service radius must be positive').max(100, 'Service radius must be reasonable').optional()
});

// Service area schema
const ServiceAreaSchema = z.object({
  postalCodes: z.array(z.string().regex(/^\d{5}(-\d{4})?$/, 'Postal codes must be valid ZIP format')).min(1, 'At least one postal code is required')
});

// FAQ schema
const FAQSchema = z.object({
  id: z.string().optional(),
  q: z.string().min(1, 'FAQ question is required'),
  a: z.string().min(1, 'FAQ answer is required')
});

// Reviews section schema
const ReviewsSectionSchema = z.object({
  heading: z.string().min(1, 'Reviews heading is required').optional(),
  intro: z.string().min(1, 'Reviews intro is required').optional(),
  feedKey: z.string().optional()
});

// Schema.org schema (minimal validation since most fields are auto-generated)
const SchemaOrgSchema = z.object({
  // Manual fields only
  aggregateRating: z.object({
    '@type': z.string().optional(),
    ratingValue: z.string().optional(),
    reviewCount: z.string().optional(),
    bestRating: z.string().optional(),
    worstRating: z.string().optional()
  }).optional(),
  review: z.array(z.object({
    '@type': z.string().optional(),
    author: z.object({
      '@type': z.string().optional(),
      name: z.string().optional()
    }).optional(),
    reviewRating: z.object({
      '@type': z.string().optional(),
      ratingValue: z.string().optional(),
      bestRating: z.string().optional(),
      worstRating: z.string().optional()
    }).optional(),
    reviewBody: z.string().optional()
  })).optional(),
  openingHours: z.union([z.string(), z.array(z.string())]).optional(),
  // Allow additional schema properties
  // eslint-disable-next-line @typescript-eslint/no-deprecated -- passthrough is correct for this zod version
}).passthrough();

// Main LocationPage schema
export const LocationPageSchema = z.object({
  // Core identification
  slug: z.string().min(1, 'Slug is required').regex(/^[a-z0-9-]+$/, 'Slug must contain only lowercase letters, numbers, and hyphens'),
  city: z.string().min(1, 'City is required'),
  stateCode: z.string().length(2, 'State code must be 2 characters').regex(/^[A-Z]{2}$/, 'State code must be uppercase'),
  state: z.string().min(1, 'State name is required'),
  postalCode: z.string().regex(/^\d{5}(-\d{4})?$/, 'Postal code must be valid ZIP format'),
  latitude: z.number().min(-90).max(90, 'Latitude must be between -90 and 90'),
  longitude: z.number().min(-180).max(180, 'Longitude must be between -180 and 180'),
  openingHours: z.union([z.string(), z.array(z.string())]).optional(),
  urlPath: z.string().regex(/^\/.*\/$/, 'URL path must start and end with /'),
  
  // Affiliate/employee references
  affiliateRef: z.string().optional(),
  employee: z.string().optional(),
  
  // Header information
  header: HeaderSchema.optional(),
  
  // SEO
  seo: SEOSchema,
  
  // Hero
  hero: HeroSchema,
  
  // Content
  faqIntro: z.string().optional(),
  neighborhoods: z.array(z.string()).optional(),
  landmarks: z.array(z.string()).optional(),
  localConditions: z.array(z.string()).optional(),
  
  // Pricing
  pricingModifierPct: z.number().min(-0.5, 'Pricing modifier cannot be less than -50%').max(1.0, 'Pricing modifier cannot be more than +100%').optional(),
  
  // Images
  images: z.array(ImageSchema).optional(),
  
  // FAQs
  faqs: z.array(FAQSchema).optional(),
  
  // Reviews
  reviewsSection: ReviewsSectionSchema.optional(),
  
  // Operations
  ops: OpsSchema.optional(),
  
  // Service area
  serviceArea: ServiceAreaSchema.optional(),
  
  // Schema.org
  schemaOrg: SchemaOrgSchema.optional()
});

// Main site configuration schema
export const MainSiteConfigSchema = z.object({
  brand: z.string().min(1, 'Brand name is required'),
  slug: z.string().min(1, 'Slug is required'),
  urlPath: z.string().regex(/^\/.*\/?$/, 'URL path must start with /'),
  
  logo: z.object({
    url: z.string().min(1, 'Logo URL is required'),
    alt: z.string().min(1, 'Logo alt text is required'),
    darkUrl: z.string().optional(),
    lightUrl: z.string().optional()
  }),
  
  seo: SEOSchema,
  
  hero: HeroSchema.extend({
    images: z.array(ImageSchema).optional(),
    ctas: z.array(z.object({
      label: z.string(),
      href: z.string()
    })).optional()
  }),
  
  servicesGrid: z.array(z.object({
    slug: z.string(),
    title: z.string(),
    image: z.string(),
    alt: z.string(),
    href: z.string(),
    width: z.number().positive().optional(),
    height: z.number().positive().optional(),
    priority: z.boolean().optional()
  })).optional(),
  
  reviews: z.object({
    title: z.string(),
    subtitle: z.string(),
    ratingValue: z.string(),
    reviewCount: z.number(),
    source: z.string()
  }).optional(),
  
  faq: z.object({
    title: z.string(),
    subtitle: z.string()
  }).optional(),
  
  contact: z.object({
    email: z.email('Valid email is required'),
    phone: z.string().min(1, 'Phone is required')
  }).optional(),
  
  socials: z.object({
    facebook: z.url().optional(),
    instagram: z.url().optional(),
    tiktok: z.url().optional(),
    youtube: z.url().optional(),
    googleBusiness: z.url().optional()
  }).optional(),
  
  jsonLd: z.object({
    organization: z.record(z.any()).optional(),
    website: z.record(z.any()).optional()
  }).optional()
});

// Validation helper functions
export function validateLocationData(data: unknown) {
  try {
    return {
      success: true,
      data: LocationPageSchema.parse(data),
      errors: null
    };
  } catch (error) {
    if (error instanceof z.ZodError) {
      return {
        success: false,
        data: null,
        errors: error.issues.map((issue) => ({
          path: issue.path.join('.'),
          message: issue.message,
          code: issue.code
        }))
      };
    }
    throw error;
  }
}

export function validateMainSiteConfig(data: unknown) {
  try {
    return {
      success: true,
      data: MainSiteConfigSchema.parse(data),
      errors: null
    };
  } catch (error) {
    if (error instanceof z.ZodError) {
      return {
        success: false,
        data: null,
        errors: error.issues.map((issue) => ({
          path: issue.path.join('.'),
          message: issue.message,
          code: issue.code
        }))
      };
    }
    throw error;
  }
}

// Type exports for use in other files
export type LocationPageData = z.infer<typeof LocationPageSchema>;
export type MainSiteConfigData = z.infer<typeof MainSiteConfigSchema>;
export type ValidationResult<T> = {
  success: boolean;
  data: T | null;
  errors: Array<{
    path: string;
    message: string;
    code: string;
  }> | null;
};


============================
FILE: frontend\src\shared\__tests__\README.md
============================
# SEO Module Tests

This directory contains comprehensive tests for the shared SEO modules as part of Problem 17 implementation.

## Test Coverage

### Frontend Tests (`frontend/src/shared/`)

#### `utils/__tests__/schemaUtils.test.ts`
Tests for Schema.org structured data generation:
- `generateSchemaImages()` - Image filtering by role
- `generateLocationSchema()` - LocalBusiness schema generation
- `generateOrganizationSchema()` - Organization schema generation
- `generateWebsiteSchema()` - Website schema with search action
- `generateWebPageSchema()` - WebPage schema for different page types
- `generateFAQSchema()` - FAQPage schema from FAQ items
- `generateAllSchemas()` - Complete schema generation orchestration

#### `utils/__tests__/faqSchemaBuilder.test.ts`
Tests for FAQ schema building utilities:
- `buildLocationFAQSchema()` - Location-specific FAQ schema generation
- `validateFAQSchemaCompleteness()` - FAQ data validation
- `generateFAQSchemaManifest()` - FAQ schema manifest generation

#### `utils/__tests__/siteUtils.test.ts`
Tests for site utility functions:
- `getAbsoluteUrl()` - Relative to absolute URL conversion
- `formatSEO()` - SEO data formatting and URL generation

#### `hooks/__tests__/useSEO.test.tsx`
Tests for the useSEO React hook:
- Default behavior with no options
- Custom options handling
- Skip flags for browser tab and meta tag updates
- Partial options handling

### Backend Tests (`backend/routes/__tests__/`)

#### `seo.test.js`
Tests for SEO API endpoints:
- `GET /robots.txt` - Robots.txt generation for different domains
- `GET /sitemap.xml` - Sitemap XML generation with tenant data
- Error handling and fallback behavior
- Cache headers and content type validation

## Running Tests

### Frontend Tests
```bash
cd frontend
npm test                    # Run all tests
npm run test:ui            # Run with UI
npm test schemaUtils       # Run specific test file
```

### Backend Tests
```bash
cd backend
npm test                   # Run all tests
npm test seo              # Run SEO route tests
```

## Test Setup

The tests use:
- **Vitest** for frontend testing with React Testing Library
- **Jest** for backend testing with Supertest
- **Mocked dependencies** for database, logger, and browser APIs
- **Comprehensive fixtures** for realistic test data

## Key Test Scenarios

1. **Schema Generation**: Validates proper Schema.org structure and required fields
2. **URL Handling**: Tests relative/absolute URL conversion and domain handling
3. **Error Handling**: Ensures graceful fallbacks when data is missing
4. **SEO Metadata**: Validates proper meta tag and Open Graph generation
5. **API Endpoints**: Tests HTTP responses, headers, and XML generation
6. **Edge Cases**: Handles empty data, malformed input, and missing dependencies

## Mock Data

Tests use realistic mock data that mirrors production structure:
- Complete `MainSiteConfig` objects
- Valid `LocationPage` data with service areas
- FAQ items with proper structure
- Tenant data with service areas and approval status

## Coverage Goals

- ✅ 100% function coverage for schema utilities
- ✅ 100% branch coverage for error handling
- ✅ Edge case testing for malformed data
- ✅ Integration testing for React hooks
- ✅ API endpoint testing with various scenarios

This test suite ensures the SEO modules are robust, maintainable, and production-ready.


============================
FILE: frontend\src\shared\__tests__\setup.ts
============================
/**
 * Test setup file for shared modules
 * Configures mocks and global test utilities
 */

import { vi } from 'vitest';

// Mock window.location for tests
Object.defineProperty(window, 'location', {
  value: {
    host: 'example.com',
    protocol: 'https:',
    href: 'https://example.com',
    origin: 'https://example.com'
  },
  writable: true
});

// Mock window.matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: vi.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: vi.fn(), // deprecated
    removeListener: vi.fn(), // deprecated
    addEventListener: vi.fn(),
    removeEventListener: vi.fn(),
    dispatchEvent: vi.fn(),
  })),
});

// Mock IntersectionObserver
global.IntersectionObserver = vi.fn().mockImplementation(() => ({
  observe: vi.fn(),
  unobserve: vi.fn(),
  disconnect: vi.fn(),
}));

// Mock ResizeObserver
global.ResizeObserver = vi.fn().mockImplementation(() => ({
  observe: vi.fn(),
  unobserve: vi.fn(),
  disconnect: vi.fn(),
}));

// Mock fetch
global.fetch = vi.fn();

// Mock console methods to reduce noise in tests
global.console = {
  ...console,
  log: vi.fn(),
  debug: vi.fn(),
  info: vi.fn(),
  warn: vi.fn(),
  error: vi.fn(),
};


============================
FILE: frontend\src\tenant-app\index.html
============================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/shared/icons/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="theme-color" content="#0b0b0b" />
    <title>Professional Services - Quality service for your needs</title>
    <meta name="description" content="Professional services with quality service for your needs. Book now or request a quote." />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/tenant-app/main.tsx"></script>
  </body>
</html>


============================
FILE: frontend\src\tenant-app\main.tsx
============================
import React, { useEffect } from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';

import { TenantProviders } from './TenantProviders';
import TenantApp from './TenantApp';
import { injectAllSchemas } from '@/shared/utils/schemaUtils';
import { defaultOrganizationSchema, defaultWebsiteSchema } from '@/shared/seo/defaultSchemas';
import '../index.css';

// Component to inject schemas
const SchemaInjector: React.FC = () => {
  useEffect(() => {
    injectAllSchemas([defaultOrganizationSchema, defaultWebsiteSchema]);
  }, []);
  return null;
};

const container = document.getElementById('root');
if (!container) {
  throw new Error('Root element not found');
}

const root = createRoot(container);

root.render(
  <React.StrictMode>
    <BrowserRouter>
      <TenantProviders>
        <SchemaInjector />
        <TenantApp />
      </TenantProviders>
    </BrowserRouter>
  </React.StrictMode>
);


============================
FILE: frontend\src\tenant-app\TenantApp.tsx
============================
import { lazy, Suspense, useState } from 'react';
import { Navigate, Route, Routes } from 'react-router-dom';
import { useRouterDebug } from '@/shared/useRouterDebug';

import { DataProvider, TenantPage } from '@/features/header';
import { LazyRequestQuoteModal } from '@/features/quotes';
import { DashboardPage } from '@/features/tenantDashboard';
import { TenantApplicationPage } from '@/features/tenantOnboarding';
import { LoginPage, ProtectedRoute } from '@/shared/ui';

import HomePage from '@main/pages/HomePage';
import ServicePage from '@main/pages/ServicePage';

// Heavy modules are NOT imported here - they stay out of the initial bundle
const Booking = lazy(() => import('../features/booking/BookingApp'));

export default function TenantApp() {
  useRouterDebug('TenantApp');
  const [isQuoteModalOpen, setIsQuoteModalOpen] = useState(false);

  const handleOpenQuoteModal = () => {
    setIsQuoteModalOpen(true);
  };
  const handleCloseQuoteModal = () => {
    setIsQuoteModalOpen(false);
  };

  const routes = (
    <Suspense fallback={<div className="p-8 text-white">Loading…</div>}>
      <Routes>
        {/* Root path - show tenant page */}
        <Route path="/" element={<TenantPage />} />
        
        {/* Login route */}
        <Route path="/login" element={<LoginPage />} />
        
        {/* Tenant Dashboard - protected route */}
        <Route path="/dashboard" element={
          <ProtectedRoute requiredRole={['admin', 'tenant']} fallbackPath="/">
            <DashboardPage />
          </ProtectedRoute>
        } />
        
        {/* Tenant Application */}
        <Route path="/tenant-onboarding" element={<TenantApplicationPage />} />
        
        {/* Booking route */}
        <Route path="/booking" element={<Booking />} />
        
        {/* Redirect old service routes to tenant-based structure */}
        <Route path="/services/:serviceType" element={<Navigate to="/services/:serviceType" replace />} />
        
        {/* Service routes - must come before generic businessSlug route */}
        <Route path="/:businessSlug/services/:serviceType" element={<ServicePage />} />
        
        <Route path="/:businessSlug/dashboard" element={
          <div style={{ padding: '20px', background: 'red', color: 'white' }}>
            <h1>DASHBOARD ROUTE MATCHED!</h1>
            <p>Business Slug: {window.location.pathname.split('/')[1]}</p>
            <ProtectedRoute requiredRole={['admin', 'tenant']} fallbackPath="/">
                <DashboardPage />
            </ProtectedRoute>
          </div>
        } />
        <Route path="/:businessSlug/booking" element={<Booking />} />
        
        {/* Tenant-specific routes */}
        <Route path="/:businessSlug" element={<HomePage />} />
        
        {/* Catch all - redirect to root */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </Suspense>
  );

  return (
    <div className="min-h-screen bg-gray-900">
      {routes}
      
      {/* Quote Modal */}
      <LazyRequestQuoteModal 
        isOpen={isQuoteModalOpen}
        onClose={handleCloseQuoteModal}
      />
    </div>
  );
}


============================
FILE: frontend\src\tenant-app\TenantProviders.tsx
============================
import React, { PropsWithChildren } from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
// import { ReactQueryDevtools } from '@tanstack/react-query-devtools';

import { ErrorBoundary } from '@/shared/ui';
import { AuthProvider } from '@/shared/contexts/AuthContext';
import { DataProvider } from '@/shared/contexts/DataContext';
import { TenantConfigProvider } from '@/shared/contexts/TenantConfigContext';
import { WebsiteContentProvider } from '@/shared/contexts/WebsiteContentContext';

// Create a single QueryClient instance for the tenant app
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      retry: 1,
    },
  },
});

interface TenantProvidersProps {
  children: React.ReactNode;
}

export const TenantProviders: React.FC<TenantProvidersProps> = ({ children }) => {
  return (
    <ErrorBoundary>
      <QueryClientProvider client={queryClient}>
        <AuthProvider>
          <DataProvider>
            <TenantConfigProvider>
              <WebsiteContentProvider>
                {children}
              </WebsiteContentProvider>
            </TenantConfigProvider>
          </DataProvider>
        </AuthProvider>
        {/* <ReactQueryDevtools initialIsOpen={false} /> */}
      </QueryClientProvider>
    </ErrorBoundary>
  );
};


============================
FILE: frontend\src\types\global.d.ts
============================
// Global type declarations for MDH

declare global {
  interface Window {
    __MDH__: {
      name: string;
      url: string;
      logo: string;
      phone: string;
      email: string;
      socials: {
        facebook: string;
        instagram: string;
        youtube: string;
        tiktok: string;
      };
      header_display: string;
      tagline: string;
      services_description: string;
      logo_url: string;
      favicon_url: string;
      ogImage: string;
      created_at: string;
      updated_at: string;
    };
  }
}

export {};


============================
FILE: frontend\src\types\google-maps.d.ts
============================
/// <reference types="@types/google.maps" />

export {};

declare global {
  const google: typeof globalThis.google;
}

============================
FILE: frontend\src\types\google.d.ts
============================
export {};

declare global {
  namespace google.maps.places {
    interface Place {
      addressComponents?: Array<{ 
        longText?: string; 
        shortText?: string; 
        types?: string[] 
      }>;
      id?: string;
      displayName?: { text?: string };
    }
  }
}


============================
FILE: frontend\src\types\google.maps.d.ts
============================
// Google Maps API type definitions
export {};

declare global {
  const google: typeof import('@types/google.maps') extends infer T
    ? T extends object
      ? T // Use the actual types if available
      : {
          maps: {
            importLibrary: (library: string) => Promise<unknown>;
            [key: string]: unknown;
          };
        }
    : {
        maps: {
          importLibrary: (library: string) => Promise<unknown>;
          [key: string]: unknown;
        };
      };

  interface Window {
    google?: typeof google;
  }
}

============================
FILE: frontend\src\types\vehicle.ts
============================
// Types for vehicle data structures

export interface CarMakeModel {
  brand: string;
  models: string[];
}

export interface BoatMakeModel {
  [make: string]: string[];
}

export interface RvMakeModel {
  [make: string]: string[];
}

export interface MotorcycleMakeModel {
  [make: string]: string[];
}

export interface VehicleType {
  id: string;
  name: string;
  data: CarMakeModel[] | BoatMakeModel | RvMakeModel | MotorcycleMakeModel;
}

export interface VehicleSelection {
  type: string;
  make: string;
  model: string;
}

// Union type for all vehicle data
export type VehicleData = CarMakeModel[] | BoatMakeModel | RvMakeModel | MotorcycleMakeModel;

// Type guard functions
export const isCarData = (data: VehicleData): data is CarMakeModel[] => {
  return Array.isArray(data) && data.length > 0 && 'brand' in data[0];
};

export const isBoatData = (data: VehicleData): data is BoatMakeModel => {
  return !Array.isArray(data) && typeof data === 'object' && !isRvData(data) && !isMotorcycleData(data);
};

export const isRvData = (data: VehicleData): data is RvMakeModel => {
  // RV data has the same structure as boat data, so we need to distinguish them
  // For now, we'll assume if it's not car data and not boat data, it's RV data
  return !Array.isArray(data) && typeof data === 'object' && !isBoatData(data) && !isMotorcycleData(data);
};

export const isMotorcycleData = (data: VehicleData): data is MotorcycleMakeModel => {
  // Motorcycle data has the same structure as boat/RV data
  return !Array.isArray(data) && typeof data === 'object' && !isBoatData(data) && !isRvData(data);
};


============================
FILE: frontend\src\vite-env.d.ts
============================
/// <reference types="vite/client" />

