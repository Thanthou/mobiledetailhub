{"version":3,"file":"RequestQuoteModal-Dp9PY4DU.js","sources":["../../src/shared/utils/validation.ts","../../src/shared/ui/modals/Modal.tsx","../../src/shared/hooks/useVehicleData.ts","../../src/features/quotes/components/ContactSection.tsx","../../src/features/quotes/components/ServicesSection.tsx","../../src/features/quotes/components/VehicleSection.tsx","../../src/features/quotes/components/QuoteForm.tsx","../../src/features/quotes/api/quotes.api.ts","../../src/features/quotes/hooks/useQuoteFormState.ts","../../src/shared/hooks/useAnalytics.ts","../../src/features/quotes/hooks/useQuoteSubmission.ts","../../src/features/quotes/hooks/useQuoteTenantData.ts","../../src/features/quotes/hooks/useQuoteValidation.ts","../../src/features/quotes/hooks/useQuoteVehicleData.ts","../../src/features/quotes/hooks/useQuoteFormLogic.ts","../../src/features/quotes/hooks/useQuoteModal.ts","../../src/features/quotes/components/SuccessMessage.tsx","../../src/features/quotes/components/RequestQuoteModal.tsx"],"sourcesContent":["/**\r\n * Comprehensive Input Validation and Sanitization Utility\r\n * Provides validation functions for common form inputs\r\n */\r\n\r\nexport interface ValidationResult {\r\n  isValid: boolean;\r\n  errors: string[];\r\n  sanitizedValue?: string;\r\n}\r\n\r\nexport interface FieldValidation {\r\n  required?: boolean;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  pattern?: RegExp;\r\n  custom?: (value: string) => string | null; // Returns error message or null if valid\r\n}\r\n\r\n/**\r\n * Validates and sanitizes a text input field\r\n */\r\nexport function validateTextField(\r\n  value: string,\r\n  fieldName: string,\r\n  validation: FieldValidation = {}\r\n): ValidationResult {\r\n  const errors: string[] = [];\r\n  const sanitizedValue = value.trim();\r\n\r\n  // Required validation\r\n  if (validation.required && !sanitizedValue) {\r\n    errors.push(`${fieldName} is required`);\r\n    return { isValid: false, errors };\r\n  }\r\n\r\n  // Skip other validations if empty and not required\r\n  if (!sanitizedValue) {\r\n    return { isValid: true, errors: [], sanitizedValue: '' };\r\n  }\r\n\r\n  // Length validations\r\n  if (validation.minLength && sanitizedValue.length < validation.minLength) {\r\n    errors.push(`${fieldName} must be at least ${String(validation.minLength)} characters`);\r\n  }\r\n\r\n  if (validation.maxLength && sanitizedValue.length > validation.maxLength) {\r\n    errors.push(`${fieldName} must be no more than ${String(validation.maxLength)} characters`);\r\n  }\r\n\r\n  // Pattern validation\r\n  if (validation.pattern && !validation.pattern.test(sanitizedValue)) {\r\n    errors.push(`${fieldName} format is invalid`);\r\n  }\r\n\r\n  // Custom validation\r\n  if (validation.custom) {\r\n    const customError = validation.custom(sanitizedValue);\r\n    if (customError) {\r\n      errors.push(customError);\r\n    }\r\n  }\r\n\r\n  return errors.length === 0\r\n    ? { isValid: true, errors: [], sanitizedValue }\r\n    : { isValid: false, errors };\r\n}\r\n\r\n/**\r\n * Validates and sanitizes an email address\r\n */\r\nexport function validateEmail(email: string): ValidationResult {\r\n  return validateTextField(email, 'Email', {\r\n    required: true,\r\n    pattern: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n    custom: (value) => {\r\n      // Additional email validation\r\n      if (value.length > 254) return 'Email is too long';\r\n      if (value.includes('..')) return 'Email contains invalid consecutive dots';\r\n      if (value.startsWith('.') || value.endsWith('.')) return 'Email cannot start or end with a dot';\r\n      return null;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Validates and sanitizes a phone number\r\n */\r\nexport function validatePhone(phone: string): ValidationResult {\r\n  const digitsOnly = phone.replace(/\\D/g, '');\r\n  \r\n  return validateTextField(phone, 'Phone number', {\r\n    required: true,\r\n    custom: () => {\r\n      if (digitsOnly.length < 10) return 'Phone number must have at least 10 digits';\r\n      if (digitsOnly.length > 15) return 'Phone number is too long';\r\n      return null;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Validates and sanitizes a name field\r\n */\r\nexport function validateName(name: string): ValidationResult {\r\n  return validateTextField(name, 'Name', {\r\n    required: true,\r\n    minLength: 2,\r\n    maxLength: 100,\r\n    pattern: /^[a-zA-Z\\s\\-'.]+$/,\r\n    custom: (value) => {\r\n      if (value.includes('  ')) return 'Name cannot contain consecutive spaces';\r\n      if (value.startsWith(' ') || value.endsWith(' ')) return 'Name cannot start or end with spaces';\r\n      return null;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Validates and sanitizes a password\r\n */\r\nexport function validatePassword(password: string, isLogin: boolean = false): ValidationResult {\r\n  if (isLogin) {\r\n    // For login, just check if it's not empty\r\n    return validateTextField(password, 'Password', { required: true });\r\n  }\r\n\r\n  // For registration, enforce stronger requirements\r\n  return validateTextField(password, 'Password', {\r\n    required: true,\r\n    minLength: 8,\r\n    maxLength: 128,\r\n    custom: (value) => {\r\n      const errors: string[] = [];\r\n      \r\n      if (!/[a-z]/.test(value)) errors.push('Password must contain at least one lowercase letter');\r\n      if (!/[A-Z]/.test(value)) errors.push('Password must contain at least one uppercase letter');\r\n      if (!/\\d/.test(value)) errors.push('Password must contain at least one number');\r\n      if (!/[!@#$%^&*(),.?\":{}|<>]/.test(value)) errors.push('Password must contain at least one special character');\r\n      \r\n      return errors.length > 0 ? errors.join(', ') : null;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Validates and sanitizes a vehicle make/model\r\n */\r\nexport function validateVehicleField(value: string, fieldName: string): ValidationResult {\r\n  return validateTextField(value, fieldName, {\r\n    required: true,\r\n    minLength: 2,\r\n    maxLength: 50,\r\n    pattern: /^[a-zA-Z0-9\\s\\-'.]+$/,\r\n    custom: (value) => {\r\n      if (value.includes('  ')) return `${fieldName} cannot contain consecutive spaces`;\r\n      if (value.startsWith(' ') || value.endsWith(' ')) return `${fieldName} cannot start or end with spaces`;\r\n      return null;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Validates and sanitizes a service selection\r\n */\r\nexport function validateService(service: string): ValidationResult {\r\n  return validateTextField(service, 'Service', {\r\n    required: true,\r\n    minLength: 2,\r\n    maxLength: 100\r\n  });\r\n}\r\n\r\n/**\r\n * Validates and sanitizes additional information/message\r\n */\r\nexport function validateMessage(message: string, required: boolean = false): ValidationResult {\r\n  return validateTextField(message, 'Message', {\r\n    required,\r\n    maxLength: 1000,\r\n    custom: (value) => {\r\n      if (value.includes('  ')) return 'Message cannot contain consecutive spaces';\r\n      return null;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Sanitizes HTML content to prevent XSS\r\n */\r\nexport function sanitizeHtml(input: string): string {\r\n  return input\r\n    .replace(/&/g, '&amp;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\"/g, '&quot;')\r\n    .replace(/'/g, '&#x27;')\r\n    .replace(/\\//g, '&#x2F;');\r\n}\r\n\r\n/**\r\n * Sanitizes text input by removing potentially dangerous characters\r\n */\r\nexport function sanitizeText(input: string): string {\r\n  return input\r\n    .replace(/[<>]/g, '') // Remove angle brackets\r\n    .replace(/javascript:/gi, '') // Remove javascript: protocol\r\n    .replace(/on\\w+=/gi, '') // Remove event handlers\r\n    .trim();\r\n}\r\n\r\n/**\r\n * Validates form data object\r\n */\r\nexport function validateFormData(\r\n  data: Record<string, string>,\r\n  validations: Record<string, FieldValidation>\r\n): { isValid: boolean; errors: Record<string, string[]>; sanitizedData: Record<string, string> } {\r\n  const errors: Record<string, string[]> = {};\r\n  const sanitizedData: Record<string, string> = {};\r\n  let isValid = true;\r\n\r\n  for (const [fieldName, validation] of Object.entries(validations)) {\r\n    const value = data[fieldName] || '';\r\n    const result = validateTextField(value, fieldName, validation);\r\n    \r\n    if (!result.isValid) {\r\n      isValid = false;\r\n      errors[fieldName] = result.errors;\r\n    } else if (result.sanitizedValue !== undefined) {\r\n      sanitizedData[fieldName] = result.sanitizedValue;\r\n    }\r\n  }\r\n\r\n  return { isValid, errors, sanitizedData };\r\n}\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\nimport { cn } from '@/shared/utils/cn';\r\n\r\nexport interface ModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  title?: string;\r\n  description?: string;\r\n  children: React.ReactNode;\r\n  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';\r\n  closeOnOverlayClick?: boolean;\r\n  closeOnEscape?: boolean;\r\n  showCloseButton?: boolean;\r\n  className?: string;\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  title,\r\n  description,\r\n  children,\r\n  size = 'md',\r\n  closeOnOverlayClick = true,\r\n  closeOnEscape = true,\r\n  showCloseButton = true,\r\n  className,\r\n}) => {\r\n  const modalRef = useRef<HTMLDivElement>(null);\r\n  const previousActiveElement = useRef<HTMLElement | null>(null);\r\n\r\n  const sizes = {\r\n    sm: 'max-w-sm',\r\n    md: 'max-w-md',\r\n    lg: 'max-w-lg',\r\n    xl: 'max-w-xl',\r\n    full: 'max-w-full mx-4',\r\n  };\r\n\r\n  // Handle escape key\r\n  useEffect(() => {\r\n    if (!isOpen || !closeOnEscape) return;\r\n\r\n    const handleEscape = (event: KeyboardEvent) => {\r\n      if (event.key === 'Escape') {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleEscape);\r\n    return () => { document.removeEventListener('keydown', handleEscape); return; };\r\n  }, [isOpen, closeOnEscape, onClose]);\r\n\r\n  // Handle focus management\r\n  useEffect(() => {\r\n    if (!isOpen) return;\r\n\r\n    // Store the previously focused element\r\n    previousActiveElement.current = document.activeElement as HTMLElement;\r\n\r\n    // Focus the modal\r\n    const focusableElements = modalRef.current?.querySelectorAll(\r\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n    );\r\n    const firstElement = focusableElements[0] as HTMLElement;\r\n    firstElement.focus();\r\n\r\n    // Prevent body scroll\r\n    document.body.style.overflow = 'hidden';\r\n\r\n    return () => {\r\n      // Restore body scroll\r\n      document.body.style.overflow = 'unset';\r\n      \r\n      // Restore focus to previously focused element\r\n      previousActiveElement.current?.focus();\r\n    };\r\n  }, [isOpen]);\r\n\r\n  // Handle overlay click\r\n  const handleOverlayClick = (event: React.MouseEvent) => {\r\n    if (closeOnOverlayClick && event.target === event.currentTarget) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return createPortal(\r\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\r\n      {/* Backdrop */}\r\n      <div\r\n        className=\"fixed inset-0 bg-black/50 backdrop-blur-sm\"\r\n        onClick={handleOverlayClick}\r\n        onKeyDown={(e) => {\r\n          if (e.key === 'Escape' && closeOnEscape) {\r\n            onClose();\r\n          }\r\n        }}\r\n        role=\"button\"\r\n        tabIndex={-1}\r\n        aria-label=\"Close modal\"\r\n      />\r\n      \r\n      {/* Modal */}\r\n      <div\r\n        ref={modalRef}\r\n        className={cn(\r\n          'relative bg-background rounded-lg shadow-lg w-full',\r\n          sizes[size],\r\n          className\r\n        )}\r\n        role=\"dialog\"\r\n        aria-modal=\"true\"\r\n        aria-labelledby={title ? 'modal-title' : undefined}\r\n        aria-describedby={description ? 'modal-description' : undefined}\r\n        tabIndex={-1}\r\n      >\r\n        {/* Header */}\r\n        {(title || showCloseButton) && (\r\n          <div className=\"flex items-center justify-between p-6 border-b border-border\">\r\n            <div>\r\n              {title && (\r\n                <h2 id=\"modal-title\" className=\"text-lg font-semibold text-foreground\">\r\n                  {title}\r\n                </h2>\r\n              )}\r\n              {description && (\r\n                <p id=\"modal-description\" className=\"text-sm text-muted-foreground mt-1\">\r\n                  {description}\r\n                </p>\r\n              )}\r\n            </div>\r\n            {showCloseButton && (\r\n              <button\r\n                onClick={onClose}\r\n                className=\"rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\"\r\n                aria-label=\"Close modal\"\r\n              >\r\n                <svg\r\n                  className=\"h-4 w-4\"\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth={2}\r\n                    d=\"M6 18L18 6M6 6l12 12\"\r\n                  />\r\n                </svg>\r\n              </button>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Content */}\r\n        <div className=\"p-6\">\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>,\r\n    document.body\r\n  );\r\n};\r\n\r\nexport { Modal };\r\n","import { useCallback, useState } from 'react';\r\n\r\n// Basic vehicle types\r\nconst vehicleTypes = [\r\n  { id: 'cars', name: 'Cars' },\r\n  { id: 'trucks', name: 'Trucks' },\r\n  { id: 'suvs', name: 'SUVs' },\r\n  { id: 'vans', name: 'Vans' },\r\n  { id: 'motorcycles', name: 'Motorcycles' }\r\n];\r\n\r\n// Basic makes\r\nconst vehicleMakes = [\r\n  'Honda', 'Toyota', 'Ford', 'Chevrolet', 'BMW', 'Mercedes-Benz', \r\n  'Audi', 'Nissan', 'Hyundai', 'Kia', 'Mazda', 'Subaru'\r\n];\r\n\r\nexport const useVehicleData = () => {\r\n  const [selectedVehicleType, setSelectedVehicleType] = useState<string>('');\r\n\r\n  const getMakes = useCallback(() => {\r\n    // Return all makes for any vehicle type (simplified)\r\n    return vehicleMakes;\r\n  }, []);\r\n\r\n  const getModels = useCallback(() => {\r\n    // Return some common models (simplified)\r\n    const commonModels = ['Sedan', 'SUV', 'Truck', 'Hatchback', 'Coupe'];\r\n    return commonModels;\r\n  }, []);\r\n\r\n  return {\r\n    vehicleTypes,\r\n    getMakes,\r\n    getModels,\r\n    selectedVehicleType,\r\n    setSelectedVehicleType\r\n  };\r\n};\r\n\r\n","import React from 'react';\r\nimport { Mail, MapPin,Phone, User } from 'lucide-react';\r\n\r\nimport { formatPhoneNumberAsTyped } from '@/shared/utils';\r\n\r\nimport { type QuoteFormData } from '../types';\r\n\r\ninterface ContactSectionProps {\r\n  formData: QuoteFormData;\r\n  fieldErrors: Record<string, string[]>;\r\n  isSubmitting: boolean;\r\n  onInputChange: (field: keyof QuoteFormData, value: string) => void;\r\n}\r\n\r\nconst ContactSection: React.FC<ContactSectionProps> = ({\r\n  formData,\r\n  fieldErrors,\r\n  isSubmitting,\r\n  onInputChange\r\n}) => {\r\n  return (\r\n    <div>\r\n      <h3 className=\"text-xl font-semibold text-white mb-4 flex items-center\">\r\n        <User className=\"mr-2 text-orange-500\" size={20} /> Contact Information\r\n      </h3>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n        <div>\r\n          <label htmlFor=\"name\" className=\"block text-sm font-medium text-white mb-1\">Full Name</label>\r\n          <div className=\"relative\">\r\n            <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-stone-400\" size={18} />\r\n            <input\r\n              type=\"text\"\r\n              id=\"name\"\r\n              value={formData.name}\r\n              onChange={(e) => { onInputChange('name', e.target.value); }}\r\n              className={`w-full pl-10 pr-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${\r\n                fieldErrors.name ? 'border-red-500' : 'border-stone-600'\r\n              }`}\r\n              placeholder=\"Enter your full name\"\r\n              disabled={isSubmitting}\r\n            />\r\n          </div>\r\n          {fieldErrors.name && (\r\n            <p className=\"mt-1 text-sm text-red-300\">{fieldErrors.name[0]}</p>\r\n          )}\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"email\" className=\"block text-sm font-medium text-white mb-1\">Email Address</label>\r\n          <div className=\"relative\">\r\n            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-stone-400\" size={18} />\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              value={formData.email}\r\n              onChange={(e) => { onInputChange('email', e.target.value); }}\r\n              className={`w-full pl-10 pr-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${\r\n                fieldErrors.email ? 'border-red-500' : 'border-stone-600'\r\n              }`}\r\n              placeholder=\"Enter your email\"\r\n              disabled={isSubmitting}\r\n            />\r\n          </div>\r\n          {fieldErrors.email && (\r\n            <p className=\"mt-1 text-sm text-red-300\">{fieldErrors.email[0]}</p>\r\n          )}\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"phone\" className=\"block text-sm font-medium text-white mb-1\">Phone Number</label>\r\n          <div className=\"relative\">\r\n            <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-stone-400\" size={18} />\r\n            <input\r\n              type=\"tel\"\r\n              id=\"phone\"\r\n              value={formData.phone}\r\n              onChange={(e) => {\r\n                const formatted = formatPhoneNumberAsTyped(e.target.value, e.target.selectionStart || 0);\r\n                onInputChange('phone', formatted.value);\r\n              }}\r\n              className={`w-full pl-10 pr-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${\r\n                fieldErrors.phone ? 'border-red-500' : 'border-stone-600'\r\n              }`}\r\n              placeholder=\"(555) 123-4567\"\r\n              disabled={isSubmitting}\r\n            />\r\n          </div>\r\n          {fieldErrors.phone && (\r\n            <p className=\"mt-1 text-sm text-red-300\">{fieldErrors.phone[0]}</p>\r\n          )}\r\n        </div>\r\n        <div className=\"col-span-1 md:col-span-2\">\r\n          <div className=\"block text-sm font-medium text-white mb-1\">Location</div>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\r\n            <div>\r\n              <label htmlFor=\"city\" className=\"block text-xs font-medium text-stone-300 mb-1\">City</label>\r\n              <div className=\"relative\">\r\n                <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-stone-400\" size={16} />\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"city\"\r\n                  value={formData.city || ''}\r\n                  onChange={(e) => { onInputChange('city', e.target.value); }}\r\n                  className={`w-full pl-9 pr-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${\r\n                    fieldErrors.city ? 'border-red-500' : 'border-stone-600'\r\n                  }`}\r\n                  placeholder=\"City\"\r\n                  disabled={isSubmitting}\r\n                />\r\n              </div>\r\n              {fieldErrors.city && (\r\n                <p className=\"mt-1 text-xs text-red-300\">{fieldErrors.city[0]}</p>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"state\" className=\"block text-xs font-medium text-stone-300 mb-1\">State</label>\r\n              <div className=\"relative\">\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"state\"\r\n                  value={formData.state || ''}\r\n                  onChange={(e) => { onInputChange('state', e.target.value); }}\r\n                  className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${\r\n                    fieldErrors.state ? 'border-red-500' : 'border-stone-600'\r\n                  }`}\r\n                  placeholder=\"State\"\r\n                  maxLength={2}\r\n                  disabled={isSubmitting}\r\n                />\r\n              </div>\r\n              {fieldErrors.state && (\r\n                <p className=\"mt-1 text-xs text-red-300\">{fieldErrors.state[0]}</p>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"zipCode\" className=\"block text-xs font-medium text-stone-300 mb-1\">Zip Code</label>\r\n              <div className=\"relative\">\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"zipCode\"\r\n                  value={formData.zipCode || ''}\r\n                  onChange={(e) => { onInputChange('zipCode', e.target.value); }}\r\n                  className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${\r\n                    fieldErrors.zipCode ? 'border-red-500' : 'border-stone-600'\r\n                  }`}\r\n                  placeholder=\"12345\"\r\n                  maxLength={5}\r\n                  disabled={isSubmitting}\r\n                />\r\n              </div>\r\n              {fieldErrors.zipCode && (\r\n                <p className=\"mt-1 text-xs text-red-300\">{fieldErrors.zipCode[0]}</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactSection;\r\n","import React from 'react';\r\nimport { MessageSquare,Wrench } from 'lucide-react';\r\n\r\nimport { sanitizeText } from '@/shared/utils';\r\n\r\nimport { type QuoteFormData } from '../types';\r\n\r\ninterface ServicesSectionProps {\r\n  formData: QuoteFormData;\r\n  fieldErrors: Record<string, string[]>;\r\n  isSubmitting: boolean;\r\n  onServiceToggle: (serviceName: string) => void;\r\n  onInputChange: (field: keyof QuoteFormData, value: string) => void;\r\n}\r\n\r\nconst ServicesSection: React.FC<ServicesSectionProps> = ({\r\n  formData,\r\n  fieldErrors,\r\n  isSubmitting,\r\n  onServiceToggle,\r\n  onInputChange\r\n}) => {\r\n  // Define the specific service options in the requested layout\r\n  const serviceOptions = [\r\n    { label: 'Interior', value: 'Interior' },\r\n    { label: 'Paint Correction', value: 'Paint Correction' },\r\n    { label: 'Exterior', value: 'Exterior' },\r\n    { label: 'Ceramic Coating', value: 'Ceramic Coating' },\r\n    { label: 'Other', value: 'Other' },\r\n    { label: 'Paint Protection Film (PPF)', value: 'Paint Protection Film (PPF)' }\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {/* Services Needed */}\r\n      <div>\r\n        <h3 className=\"text-xl font-semibold text-white mb-4 flex items-center\">\r\n          <Wrench className=\"mr-2 text-orange-500\" size={20} /> Services Needed\r\n        </h3>\r\n        <div className=\"grid grid-cols-2 gap-3\">\r\n          {serviceOptions.map(service => (\r\n            <label key={service.value} className=\"flex items-center space-x-2 cursor-pointer\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={formData.services.includes(service.value)}\r\n                onChange={() => { onServiceToggle(service.value); }}\r\n                className=\"h-5 w-5 text-orange-600 rounded focus:ring-orange-500 bg-stone-700 border-stone-600\"\r\n                disabled={isSubmitting}\r\n              />\r\n              <span className=\"text-white text-sm\">{service.label}</span>\r\n            </label>\r\n          ))}\r\n        </div>\r\n        {fieldErrors.services && (\r\n          <p className=\"mt-1 text-sm text-red-300\">{fieldErrors.services[0]}</p>\r\n        )}\r\n      </div>\r\n\r\n      {/* Additional Message */}\r\n      <div>\r\n        <h3 className=\"text-xl font-semibold text-white mb-4 flex items-center\">\r\n          <MessageSquare className=\"mr-2 text-orange-500\" size={20} /> Additional Message (Optional)\r\n        </h3>\r\n        <textarea\r\n          id=\"message\"\r\n          value={formData.message}\r\n          onChange={(e) => { onInputChange('message', sanitizeText(e.target.value)); }}\r\n          rows={4}\r\n          className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${\r\n            fieldErrors.message ? 'border-red-500' : 'border-stone-600'\r\n          }`}\r\n          placeholder=\"Tell us more about your needs...\"\r\n          disabled={isSubmitting}\r\n        ></textarea>\r\n        {fieldErrors.message && (\r\n          <p className=\"mt-1 text-sm text-red-300\">{fieldErrors.message[0]}</p>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ServicesSection;\r\n","import React, { useMemo } from 'react';\r\nimport { Car } from 'lucide-react';\r\n\r\nimport { getMakesForType, getModelsForMake, getVehicleYears } from '@/data/mobile-detailing/vehicle_data';\r\n\r\nimport { type QuoteFormData } from '../types';\r\n\r\ninterface VehicleSectionProps {\r\n  formData: QuoteFormData;\r\n  fieldErrors: Record<string, string[]>;\r\n  isSubmitting: boolean;\r\n  onInputChange: (field: keyof QuoteFormData, value: string) => void;\r\n}\r\n\r\nconst VehicleSection: React.FC<VehicleSectionProps> = ({\r\n  formData,\r\n  fieldErrors,\r\n  isSubmitting,\r\n  onInputChange\r\n}) => {\r\n  // Get available makes and models based on selected vehicle type\r\n  const availableMakes = useMemo(() => {\r\n    return getMakesForType(formData.vehicleType.toLowerCase());\r\n  }, [formData.vehicleType]);\r\n\r\n  const availableModels = useMemo(() => {\r\n    if (!formData.vehicleMake) return [];\r\n    return getModelsForMake(formData.vehicleType.toLowerCase(), formData.vehicleMake);\r\n  }, [formData.vehicleType, formData.vehicleMake]);\r\n\r\n  const vehicleYears = useMemo(() => {\r\n    return getVehicleYears();\r\n  }, []);\r\n\r\n  // Determine if we should show Length instead of Color\r\n  const showLength = ['RV', 'Boat'].includes(formData.vehicleType);\r\n  const lengthOrColorLabel = showLength ? 'Length' : 'Color';\r\n  const lengthOrColorField = showLength ? 'vehicleLength' : 'vehicleColor';\r\n  const lengthOrColorValue = showLength ? formData.vehicleLength || '' : formData.vehicleColor || '';\r\n  const lengthOrColorPlaceholder = showLength ? 'e.g., 25 ft, 30 ft' : 'e.g., White, Black, Silver';\r\n\r\n  return (\r\n    <div>\r\n      <h3 className=\"text-xl font-semibold text-white mb-4 flex items-center\">\r\n        <Car className=\"mr-2 text-orange-500\" size={20} /> Vehicle Information\r\n      </h3>\r\n      \r\n      {/* Vehicle Type */}\r\n      <div className=\"mb-4\">\r\n        <label htmlFor=\"vehicleType\" className=\"block text-sm font-medium text-white mb-1\">Vehicle Type</label>\r\n        <select\r\n          id=\"vehicleType\"\r\n          value={formData.vehicleType}\r\n          onChange={(e) => { onInputChange('vehicleType', e.target.value); }}\r\n          className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${\r\n            fieldErrors.vehicleType ? 'border-red-500' : 'border-stone-600'\r\n          }`}\r\n          disabled={isSubmitting}\r\n        >\r\n          <option value=\"\" className=\"bg-stone-700 text-white\">Select Type</option>\r\n          <option value=\"Car\" className=\"bg-stone-700 text-white\">Car</option>\r\n          <option value=\"Truck\" className=\"bg-stone-700 text-white\">Truck</option>\r\n          <option value=\"SUV\" className=\"bg-stone-700 text-white\">SUV</option>\r\n          <option value=\"RV\" className=\"bg-stone-700 text-white\">RV</option>\r\n          <option value=\"Boat\" className=\"bg-stone-700 text-white\">Boat</option>\r\n          <option value=\"Motorcycle\" className=\"bg-stone-700 text-white\">Motorcycle</option>\r\n          <option value=\"Other\" className=\"bg-stone-700 text-white\">Other</option>\r\n        </select>\r\n        {fieldErrors.vehicleType && (\r\n          <p className=\"mt-1 text-sm text-red-300\">{fieldErrors.vehicleType[0]}</p>\r\n        )}\r\n      </div>\r\n\r\n      {/* Make and Model Row */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n        <div>\r\n          <label htmlFor=\"vehicleMake\" className=\"block text-sm font-medium text-white mb-1\">Vehicle Make</label>\r\n          <select\r\n            id=\"vehicleMake\"\r\n            value={formData.vehicleMake}\r\n            onChange={(e) => { onInputChange('vehicleMake', e.target.value); }}\r\n            className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${\r\n              fieldErrors.vehicleMake ? 'border-red-500' : 'border-stone-600'\r\n            }`}\r\n            disabled={isSubmitting || !formData.vehicleType}\r\n          >\r\n            <option value=\"\" className=\"bg-stone-700 text-white\">Select Make</option>\r\n            {availableMakes.map(make => (\r\n              <option key={make} value={make} className=\"bg-stone-700 text-white\">{make}</option>\r\n            ))}\r\n          </select>\r\n          {fieldErrors.vehicleMake && (\r\n            <p className=\"mt-1 text-sm text-red-300\">{fieldErrors.vehicleMake[0]}</p>\r\n          )}\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"vehicleModel\" className=\"block text-sm font-medium text-white mb-1\">Vehicle Model</label>\r\n          <select\r\n            id=\"vehicleModel\"\r\n            value={formData.vehicleModel}\r\n            onChange={(e) => { onInputChange('vehicleModel', e.target.value); }}\r\n            className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${\r\n              fieldErrors.vehicleModel ? 'border-red-500' : 'border-stone-600'\r\n            }`}\r\n            disabled={isSubmitting || !formData.vehicleMake}\r\n          >\r\n            <option value=\"\" className=\"bg-stone-700 text-white\">Select Model</option>\r\n            {availableModels.map(model => (\r\n              <option key={model} value={model} className=\"bg-stone-700 text-white\">{model}</option>\r\n            ))}\r\n          </select>\r\n          {fieldErrors.vehicleModel && (\r\n            <p className=\"mt-1 text-sm text-red-300\">{fieldErrors.vehicleModel[0]}</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Year and Length/Color Row */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n        <div>\r\n          <label htmlFor=\"vehicleYear\" className=\"block text-sm font-medium text-white mb-1\">Vehicle Year</label>\r\n          <select\r\n            id=\"vehicleYear\"\r\n            value={formData.vehicleYear}\r\n            onChange={(e) => { onInputChange('vehicleYear', e.target.value); }}\r\n            className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${\r\n              fieldErrors.vehicleYear ? 'border-red-500' : 'border-stone-600'\r\n            }`}\r\n            disabled={isSubmitting}\r\n          >\r\n            <option value=\"\" className=\"bg-stone-700 text-white\">Select Year</option>\r\n            {vehicleYears.map(year => (\r\n              <option key={year} value={year.toString()} className=\"bg-stone-700 text-white\">\r\n                {year}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {fieldErrors.vehicleYear && (\r\n            <p className=\"mt-1 text-sm text-red-300\">{fieldErrors.vehicleYear[0]}</p>\r\n          )}\r\n        </div>\r\n        <div>\r\n          <label htmlFor={lengthOrColorField} className=\"block text-sm font-medium text-white mb-1\">{lengthOrColorLabel}</label>\r\n          <input\r\n            type={showLength ? 'number' : 'text'}\r\n            id={lengthOrColorField}\r\n            value={lengthOrColorValue}\r\n            onChange={(e) => { onInputChange(lengthOrColorField as keyof QuoteFormData, e.target.value); }}\r\n            className={`w-full px-3 py-2 bg-stone-700 border rounded-lg text-white placeholder-stone-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 ${\r\n              fieldErrors[lengthOrColorField] ? 'border-red-500' : 'border-stone-600'\r\n            }`}\r\n            placeholder={lengthOrColorPlaceholder}\r\n            disabled={isSubmitting}\r\n            {...(showLength && { min: '1', step: '1' })}\r\n          />\r\n          {fieldErrors[lengthOrColorField] && (\r\n            <p className=\"mt-1 text-sm text-red-300\">{fieldErrors[lengthOrColorField][0]}</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VehicleSection;\r\n","import React from 'react';\r\n\r\nimport { useDataOptional } from '@/shared/hooks/useData';\r\nimport { Button } from '@/shared/ui';\r\n\r\nimport { type QuoteFormData } from '../types';\r\nimport ContactSection from './ContactSection';\r\nimport ServicesSection from './ServicesSection';\r\nimport VehicleSection from './VehicleSection';\r\n\r\ninterface QuoteFormProps {\r\n  formData: QuoteFormData;\r\n  fieldErrors: Record<string, string[]>;\r\n  isSubmitting: boolean;\r\n  error: string | null;\r\n  services: string[];\r\n  serviceAreas: Array<{ city: string; state: string; primary?: boolean }>;\r\n  isAffiliate: boolean;\r\n  businessLocation: string;\r\n  handleInputChange: (field: keyof QuoteFormData, value: string) => void;\r\n  handleServiceToggle: (serviceName: string) => void;\r\n  handleSubmit: (e: React.FormEvent) => void;\r\n}\r\n\r\nconst QuoteForm: React.FC<QuoteFormProps> = ({\r\n  formData,\r\n  fieldErrors,\r\n  isSubmitting,\r\n  error,\r\n  services,\r\n  serviceAreas,\r\n  isAffiliate,\r\n  businessLocation,\r\n  handleInputChange,\r\n  handleServiceToggle,\r\n  handleSubmit\r\n}) => {\r\n  // Check if in preview mode\r\n  const data = useDataOptional();\r\n  const isPreview = data?.isPreview || false;\r\n  \r\n  const handleFormSubmit = (e: React.FormEvent) => {\r\n    if (isPreview) {\r\n      e.preventDefault();\r\n      return; // Block submission in preview mode\r\n    }\r\n    handleSubmit(e);\r\n  };\r\n  \r\n  return (\r\n    <form onSubmit={handleFormSubmit} className=\"space-y-6\">\r\n      {error && (\r\n        <div className=\"bg-red-900 border border-red-600 text-red-300 px-4 py-3 rounded relative\" role=\"alert\">\r\n          <strong className=\"font-bold\">Error:</strong>\r\n          <span className=\"block sm:inline\"> {error}</span>\r\n        </div>\r\n      )}\r\n\r\n      <ContactSection\r\n        formData={formData}\r\n        fieldErrors={fieldErrors}\r\n        isSubmitting={isSubmitting}\r\n        isAffiliate={isAffiliate}\r\n        businessLocation={businessLocation}\r\n        serviceAreas={serviceAreas}\r\n        onInputChange={handleInputChange}\r\n      />\r\n\r\n      <VehicleSection\r\n        formData={formData}\r\n        fieldErrors={fieldErrors}\r\n        isSubmitting={isSubmitting}\r\n        onInputChange={handleInputChange}\r\n      />\r\n\r\n      <ServicesSection\r\n        formData={formData}\r\n        fieldErrors={fieldErrors}\r\n        isSubmitting={isSubmitting}\r\n        services={services}\r\n        onServiceToggle={handleServiceToggle}\r\n        onInputChange={handleInputChange}\r\n      />\r\n\r\n      {isPreview && (\r\n        <div className=\"bg-orange-900/30 border border-orange-700 rounded-md p-4 text-center\">\r\n          <p className=\"text-orange-200 text-sm\">\r\n            This is a preview. Click <strong>&quot;Get This Site&quot;</strong> to activate quote requests.\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"flex justify-end\">\r\n        <Button\r\n          type={isPreview ? 'button' : 'submit'}\r\n          variant=\"primary\"\r\n          size=\"lg\"\r\n          className={`min-w-[150px] ${\r\n            isPreview \r\n              ? 'bg-gray-600 cursor-not-allowed opacity-60' \r\n              : 'bg-orange-600 hover:bg-orange-700'\r\n          } text-white border-orange-600`}\r\n          loading={isSubmitting}\r\n          disabled={isSubmitting || isPreview}\r\n        >\r\n          {isPreview ? 'Preview Mode' : 'Submit Quote'}\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default QuoteForm;\r\n","// Quote-specific API calls\r\nimport { apiService } from '@/shared/api/api';\r\n\r\nexport const quotesApi = {\r\n  // Submit a quote request\r\n  submitQuoteRequest: async (quoteData: {\r\n    name: string;\r\n    email: string;\r\n    phone: string;\r\n    vehicleType: string;\r\n    vehicleMake: string;\r\n    vehicleModel: string;\r\n    vehicleYear: string;\r\n    services: string[];\r\n    message?: string;\r\n    location: string;\r\n    businessSlug?: string;\r\n  }) => {\r\n    return await apiService.submitQuoteRequest(quoteData);\r\n  },\r\n\r\n  // Get quote by ID\r\n  getQuote: async (quoteId: string) => {\r\n    const response = await fetch(`/api/quotes/${quoteId}`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch quote: ${response.statusText}`);\r\n    }\r\n    return await response.json() as unknown;\r\n  },\r\n\r\n  // Update quote status\r\n  updateQuoteStatus: async (quoteId: string, status: string) => {\r\n    const response = await fetch(`/api/quotes/${quoteId}/status`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ status }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to update quote status: ${response.statusText}`);\r\n    }\r\n    return await response.json() as unknown;\r\n  },\r\n\r\n  // Get quotes for a business\r\n  getBusinessQuotes: async (businessSlug: string, limit = 10, offset = 0) => {\r\n    const response = await fetch(`/api/quotes?business_slug=${businessSlug}&limit=${String(limit)}&offset=${String(offset)}`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch business quotes: ${response.statusText}`);\r\n    }\r\n    return await response.json() as unknown;\r\n  },\r\n\r\n  // Get user quotes\r\n  getUserQuotes: async (userId: string, limit = 10, offset = 0) => {\r\n    const response = await fetch(`/api/quotes?user_id=${userId}&limit=${String(limit)}&offset=${String(offset)}`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch user quotes: ${response.statusText}`);\r\n    }\r\n    return await response.json() as unknown;\r\n  },\r\n\r\n  // Cancel quote\r\n  cancelQuote: async (quoteId: string, reason?: string) => {\r\n    const response = await fetch(`/api/quotes/${quoteId}/cancel`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ reason }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to cancel quote: ${response.statusText}`);\r\n    }\r\n    return await response.json() as unknown;\r\n  }\r\n};\r\n","import { useState } from 'react';\r\n\r\nimport { type QuoteFormData } from '../types';\r\n\r\n/**\r\n * Hook to manage quote form state\r\n * Separates form state from business logic\r\n */\r\nexport const useQuoteFormState = () => {\r\n  const [formData, setFormData] = useState<QuoteFormData>({\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    city: '',\r\n    state: '',\r\n    zipCode: '',\r\n    services: [],\r\n    vehicleType: '',\r\n    vehicleMake: '',\r\n    vehicleModel: '',\r\n    vehicleYear: '',\r\n    message: ''\r\n  });\r\n  const [fieldErrors, setFieldErrors] = useState<Record<string, string[]>>({});\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const updateFormData = (field: keyof QuoteFormData, value: string | string[]) => {\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  const updateFieldErrors = (field: string, errors: string[]) => {\r\n    setFieldErrors(prev => ({ ...prev, [field]: errors }));\r\n  };\r\n\r\n  const clearFieldErrors = (field: string) => {\r\n    setFieldErrors(prev => {\r\n      const { [field]: _, ...newErrors } = prev;\r\n      return newErrors;\r\n    });\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      name: '',\r\n      email: '',\r\n      phone: '',\r\n      city: '',\r\n      state: '',\r\n      zipCode: '',\r\n      services: [],\r\n      vehicleType: '',\r\n      vehicleMake: '',\r\n      vehicleModel: '',\r\n      vehicleYear: '',\r\n      message: ''\r\n    });\r\n    setFieldErrors({});\r\n    setIsSubmitted(false);\r\n    setIsSubmitting(false);\r\n    setError('');\r\n  };\r\n\r\n  return {\r\n    formData,\r\n    fieldErrors,\r\n    isSubmitted,\r\n    isSubmitting,\r\n    error,\r\n    updateFormData,\r\n    updateFieldErrors,\r\n    clearFieldErrors,\r\n    resetForm,\r\n    setIsSubmitted,\r\n    setIsSubmitting,\r\n    setError\r\n  };\r\n};\r\n","/**\r\n * useAnalytics - lightweight analytics wrapper\r\n * Falls back gracefully if GA4 is not available.\r\n */\r\nimport { useCallback } from 'react';\r\n\r\ntype AnalyticsEventParams = Record<string, string | number | boolean | null | undefined>;\r\n\r\ndeclare global {\r\n  interface Window {\r\n    gtag?: (...args: unknown[]) => void;\r\n    dataLayer?: unknown[];\r\n  }\r\n}\r\n\r\nexport const useAnalytics = () => {\r\n  const isGAAvailable = typeof window !== 'undefined' && typeof window.gtag === 'function';\r\n\r\n  const logEvent = useCallback((eventName: string, params: AnalyticsEventParams = {}) => {\r\n    if (isGAAvailable) {\r\n      try {\r\n        if (window.gtag) {\r\n          window.gtag('event', eventName, params);\r\n        }\r\n        return;\r\n      } catch {\r\n        // fallthrough to console\r\n      }\r\n    }\r\n    // Dev fallback\r\n    // eslint-disable-next-line no-console -- Dev fallback for analytics\r\n    console.debug('[analytics:event]', eventName, params);\r\n  }, [isGAAvailable]);\r\n\r\n  const identify = useCallback((userId: string | number, params: AnalyticsEventParams = {}) => {\r\n    if (isGAAvailable) {\r\n      try {\r\n        if (window.gtag) {\r\n          window.gtag('set', { user_id: String(userId), ...params });\r\n        }\r\n        return;\r\n      } catch {\r\n        // fallthrough\r\n      }\r\n    }\r\n    // eslint-disable-next-line no-console -- Dev fallback for analytics\r\n    console.debug('[analytics:identify]', userId, params);\r\n  }, [isGAAvailable]);\r\n\r\n  const setUserProperties = useCallback((params: AnalyticsEventParams) => {\r\n    if (isGAAvailable) {\r\n      try {\r\n        if (window.gtag) {\r\n          window.gtag('set', 'user_properties', params);\r\n        }\r\n        return;\r\n      } catch {\r\n        // fallthrough\r\n      }\r\n    }\r\n    // eslint-disable-next-line no-console -- Dev fallback for analytics\r\n    console.debug('[analytics:user_properties]', params);\r\n  }, [isGAAvailable]);\r\n\r\n  return { logEvent, identify, setUserProperties };\r\n};\r\n","import { useCallback } from 'react';\r\n\r\nimport { useAnalytics } from '@/shared/hooks/useAnalytics';\r\n\r\nimport { quotesApi } from '../api/quotes.api';\r\nimport { type QuoteFormData, quoteRequestSchema } from '../types';\r\n\r\n/**\r\n * Hook to handle quote form submission\r\n * Separates submission logic from form state\r\n */\r\nexport const useQuoteSubmission = () => {\r\n  const { logEvent } = useAnalytics();\r\n  const submitQuote = useCallback(async (\r\n    formData: QuoteFormData,\r\n    slug: string | undefined,\r\n    onSuccess: () => void,\r\n    onError: (error: string) => void\r\n  ) => {\r\n    try {\r\n      // Validate form data with Zod schema\r\n      const validatedData = quoteRequestSchema.parse({\r\n        name: formData.name,\r\n        email: formData.email,\r\n        phone: formData.phone,\r\n        city: formData.city,\r\n        state: formData.state,\r\n        zipCode: formData.zipCode,\r\n        services: formData.services,\r\n        vehicleType: formData.vehicleType,\r\n        vehicleMake: formData.vehicleMake,\r\n        vehicleModel: formData.vehicleModel,\r\n        vehicleYear: formData.vehicleYear,\r\n        message: formData.message || undefined\r\n      });\r\n\r\n      const apiData = {\r\n        ...validatedData,\r\n        message: validatedData.message ?? '',\r\n        businessSlug: slug ?? undefined\r\n      };\r\n\r\n      await quotesApi.submitQuoteRequest(apiData as Parameters<typeof quotesApi.submitQuoteRequest>[0]);\r\n      logEvent('quote_submitted', {\r\n        slug: slug || '',\r\n        services_count: validatedData.services.length,\r\n        vehicle_type: validatedData.vehicleType || '',\r\n        city: validatedData.city || '',\r\n      });\r\n      onSuccess();\r\n    } catch (err) {\r\n      console.error('Quote submission error:', err);\r\n      onError('Failed to submit quote. Please try again.');\r\n    }\r\n  }, [logEvent]);\r\n\r\n  return {\r\n    submitQuote\r\n  };\r\n};\r\n","import { useCallback, useEffect } from 'react';\r\n\r\nimport { useData, useTenantConfigLoader } from '@/shared/hooks';\r\n\r\n/**\r\n * Hook to handle tenant data and business context\r\n * Separates tenant logic from form logic\r\n */\r\nexport const useQuoteTenantData = (updateFormData: (field: string, value: string) => void) => {\r\n  const { businessName } = useData();\r\n  const { data: tenantConfig } = useTenantConfigLoader();\r\n  const slug = tenantConfig?.slug;\r\n\r\n  // Get business location from tenant config\r\n  const businessLocation = tenantConfig \r\n    ? `${tenantConfig.contact.baseLocation.city}, ${tenantConfig.contact.baseLocation.state}`\r\n    : '';\r\n\r\n  // Get service areas from tenant config (if available)\r\n  const serviceAreas = useCallback((): Array<{ city: string; state: string; primary?: boolean }> => {\r\n    // For now, return empty - service areas will be added to tenant config later\r\n    // When ready, will use: tenantConfig?.serviceAreas\r\n    return [];\r\n  }, []);\r\n\r\n  // Set initial location if available\r\n  useEffect(() => {\r\n    if (businessLocation && tenantConfig) {\r\n      // Use tenant location data\r\n      updateFormData('city', tenantConfig.contact.baseLocation.city);\r\n      updateFormData('state', tenantConfig.contact.baseLocation.state);\r\n    }\r\n  }, [businessLocation, tenantConfig, updateFormData]);\r\n\r\n  return {\r\n    businessName,\r\n    slug,\r\n    businessLocation,\r\n    serviceAreas\r\n  };\r\n};\r\n","import { useCallback } from 'react';\r\n\r\nimport {\r\n  validateEmail,\r\n  validateMessage,\r\n  validateName,\r\n  validatePhone,\r\n  validateVehicleField\r\n} from '@/shared/utils';\r\n\r\nimport { type QuoteFormData } from '../types';\r\n\r\n/**\r\n * Hook to handle quote form validation\r\n * Separates validation logic from form state\r\n */\r\nexport const useQuoteValidation = () => {\r\n  const validateField = useCallback((field: keyof QuoteFormData, value: string): string[] => {\r\n    const errors: string[] = [];\r\n    \r\n    switch (field) {\r\n      case 'name':\r\n        if (!value.trim()) {\r\n          errors.push('Name is required.');\r\n        } else {\r\n          const nameErrors = validateName(value);\r\n          if (nameErrors.length > 0) {\r\n            errors.push(...nameErrors);\r\n          }\r\n        }\r\n        break;\r\n        \r\n      case 'email':\r\n        if (!value.trim()) {\r\n          errors.push('Email is required.');\r\n        } else {\r\n          const emailErrors = validateEmail(value);\r\n          if (emailErrors.length > 0) {\r\n            errors.push(...emailErrors);\r\n          }\r\n        }\r\n        break;\r\n        \r\n      case 'phone':\r\n        if (!value.trim()) {\r\n          errors.push('Phone number is required.');\r\n        } else {\r\n          const phoneErrors = validatePhone(value);\r\n          if (phoneErrors.length > 0) {\r\n            errors.push(...phoneErrors);\r\n          }\r\n        }\r\n        break;\r\n        \r\n      case 'city':\r\n        if (!value.trim()) {\r\n          errors.push('City is required.');\r\n        }\r\n        break;\r\n        \r\n      case 'state':\r\n        if (!value.trim()) {\r\n          errors.push('State is required.');\r\n        }\r\n        break;\r\n        \r\n      case 'zipCode':\r\n        if (!value.trim()) {\r\n          errors.push('ZIP code is required.');\r\n        }\r\n        break;\r\n        \r\n      case 'vehicleType':\r\n        if (!value.trim()) {\r\n          errors.push('Vehicle type is required.');\r\n        }\r\n        break;\r\n        \r\n      case 'vehicleMake':\r\n        if (!value.trim()) {\r\n          errors.push('Vehicle make is required.');\r\n        }\r\n        break;\r\n        \r\n      case 'vehicleModel':\r\n        if (!value.trim()) {\r\n          errors.push('Vehicle model is required.');\r\n        }\r\n        break;\r\n        \r\n      case 'vehicleYear':\r\n        if (!value.trim()) {\r\n          errors.push('Vehicle year is required.');\r\n        } else {\r\n          const vehicleErrors = validateVehicleField('year', value);\r\n          if (vehicleErrors.length > 0) {\r\n            errors.push(...vehicleErrors);\r\n          }\r\n        }\r\n        break;\r\n        \r\n      case 'message':\r\n        if (value.trim()) {\r\n          const messageErrors = validateMessage(value);\r\n          if (messageErrors.length > 0) {\r\n            errors.push(...messageErrors);\r\n          }\r\n        }\r\n        break;\r\n    }\r\n    \r\n    return errors;\r\n  }, []);\r\n\r\n  const validateAllFields = useCallback((formData: QuoteFormData): Record<string, string[]> => {\r\n    const allErrors: Record<string, string[]> = {};\r\n    \r\n    const fieldsToValidate: (keyof QuoteFormData)[] = [\r\n      'name', 'email', 'phone', 'city', 'state', 'zipCode',\r\n      'vehicleType', 'vehicleMake', 'vehicleModel', 'vehicleYear'\r\n    ];\r\n    \r\n    fieldsToValidate.forEach(field => {\r\n      const value = formData[field];\r\n      if (typeof value === 'string') {\r\n        const errors = validateField(field, value);\r\n        if (errors.length > 0) {\r\n          allErrors[field] = errors;\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Validate message if provided\r\n    if (formData.message) {\r\n      const messageErrors = validateField('message', formData.message);\r\n      if (messageErrors.length > 0) {\r\n        allErrors.message = messageErrors;\r\n      }\r\n    }\r\n    \r\n    return allErrors;\r\n  }, [validateField]);\r\n\r\n  return {\r\n    validateField,\r\n    validateAllFields\r\n  };\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nimport { useVehicleData } from '@/shared/hooks';\r\n\r\nimport { type QuoteFormData } from '../types';\r\n\r\n/**\r\n * Hook to manage vehicle data and dependencies\r\n * Handles vehicle type, make, model relationships\r\n */\r\nexport const useQuoteVehicleData = (formData: QuoteFormData, updateFormData: (field: keyof QuoteFormData, value: string) => void) => {\r\n  const { vehicleTypes, getMakes, getModels } = useVehicleData();\r\n\r\n  // Get available makes and models based on selected vehicle type\r\n  const availableMakes = formData.vehicleType ? getMakes(formData.vehicleType) : [];\r\n  const availableModels = formData.vehicleType && formData.vehicleMake ?\r\n    getModels(formData.vehicleType, formData.vehicleMake) : [];\r\n\r\n  // Reset vehicle make and model when vehicle type changes\r\n  useEffect(() => {\r\n    if (formData.vehicleType) {\r\n      updateFormData('vehicleMake', '');\r\n      updateFormData('vehicleModel', '');\r\n    }\r\n  }, [formData.vehicleType, updateFormData]);\r\n\r\n  // Reset vehicle model when vehicle make changes\r\n  useEffect(() => {\r\n    if (formData.vehicleMake) {\r\n      updateFormData('vehicleModel', '');\r\n    }\r\n  }, [formData.vehicleMake, updateFormData]);\r\n\r\n  return {\r\n    vehicleTypes,\r\n    availableMakes,\r\n    availableModels\r\n  };\r\n};\r\n","import { type FormEvent, useCallback } from 'react';\r\n\r\nimport { type QuoteFormData } from '../types';\r\nimport { useQuoteFormState } from './useQuoteFormState';\r\nimport { useQuoteSubmission } from './useQuoteSubmission';\r\nimport { useQuoteTenantData } from './useQuoteTenantData';\r\nimport { useQuoteValidation } from './useQuoteValidation';\r\nimport { useQuoteVehicleData } from './useQuoteVehicleData';\r\n\r\n/**\r\n * Main hook that combines all quote form functionality\r\n * Now much cleaner and focused on orchestration\r\n */\r\nexport const useQuoteFormLogic = () => {\r\n  // Form state management\r\n  const formState = useQuoteFormState();\r\n  \r\n  // Vehicle data handling\r\n  const vehicleData = useQuoteVehicleData(formState.formData, formState.updateFormData);\r\n  \r\n  // Validation logic\r\n  const validation = useQuoteValidation();\r\n  \r\n  // Submission logic\r\n  const submission = useQuoteSubmission();\r\n  \r\n  // Tenant data handling\r\n  const tenantData = useQuoteTenantData(formState.updateFormData);\r\n\r\n  // Available services\r\n  const services = [\r\n    'Interior',\r\n    'Exterior',\r\n    'Interior & Exterior',\r\n    'Paint Correction',\r\n    'Ceramic Coating',\r\n    'Paint Protection Film (PPF)',\r\n    'Other'\r\n  ];\r\n\r\n  // Form handlers\r\n  const handleInputChange = useCallback((field: keyof QuoteFormData, value: string) => {\r\n    formState.updateFormData(field, value);\r\n    formState.clearFieldErrors(field);\r\n  }, [formState]);\r\n\r\n  const handleServiceToggle = useCallback((service: string) => {\r\n    const currentServices = formState.formData.services;\r\n    const updatedServices = currentServices.includes(service)\r\n      ? currentServices.filter(s => s !== service)\r\n      : [...currentServices, service];\r\n    \r\n    formState.updateFormData('services', updatedServices);\r\n  }, [formState]);\r\n\r\n  const handleSubmit = useCallback(async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    const allErrors = validation.validateAllFields(formState.formData);\r\n    \r\n    if (Object.keys(allErrors).length > 0) {\r\n      Object.entries(allErrors).forEach(([field, errors]) => {\r\n        formState.updateFieldErrors(field, errors);\r\n      });\r\n      return;\r\n    }\r\n\r\n    formState.setIsSubmitting(true);\r\n    \r\n    await submission.submitQuote(\r\n      formState.formData,\r\n      tenantData.slug,\r\n      () => {\r\n        formState.setIsSubmitted(true);\r\n        formState.resetForm();\r\n      },\r\n      formState.setError\r\n    );\r\n    \r\n    formState.setIsSubmitting(false);\r\n  }, [formState, validation, submission, tenantData.slug]);\r\n\r\n  const resetForm = useCallback(() => {\r\n    formState.resetForm();\r\n  }, [formState]);\r\n\r\n  return {\r\n    // Form state\r\n    formData: formState.formData,\r\n    fieldErrors: formState.fieldErrors,\r\n    isSubmitted: formState.isSubmitted,\r\n    isSubmitting: formState.isSubmitting,\r\n    error: formState.error,\r\n    \r\n    // Vehicle data\r\n    vehicleTypes: vehicleData.vehicleTypes,\r\n    availableMakes: vehicleData.availableMakes,\r\n    availableModels: vehicleData.availableModels,\r\n    \r\n    // Services and tenant data\r\n    services,\r\n    serviceAreas: tenantData.serviceAreas(),\r\n    businessName: tenantData.businessName || '',\r\n    businessLocation: tenantData.businessLocation,\r\n    businessSlug: tenantData.slug || '',\r\n    isAffiliate: !!tenantData.slug,\r\n    \r\n    // Handlers\r\n    handleInputChange,\r\n    handleServiceToggle,\r\n    handleSubmit,\r\n    resetForm\r\n  };\r\n};\r\n","import { type MouseEvent, useCallback, useEffect, useState } from 'react';\r\n\r\nimport { RequestQuoteModalProps } from '../types';\r\n\r\nexport const useQuoteModal = ({ isOpen, onClose }: RequestQuoteModalProps) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n\r\n  // Define handleClose first before it's used\r\n  const handleClose = useCallback(() => {\r\n    // Close immediately; parent controls visibility. Do not block while opening.\r\n    onClose();\r\n  }, [onClose]);\r\n\r\n  const handleBackdropClick = useCallback((e: MouseEvent) => {\r\n    if (e.target === e.currentTarget) {\r\n      handleClose();\r\n    }\r\n  }, [handleClose]);\r\n\r\n  // Handle modal open/close with animation\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setIsVisible(true);\r\n      // Small delay to ensure DOM is ready for animation\r\n      const timer = setTimeout(() => { setIsAnimating(true); }, 10);\r\n      return () => { clearTimeout(timer); };\r\n    } else {\r\n      setIsAnimating(false);\r\n      // Wait for animation to complete before hiding\r\n      const timer = setTimeout(() => { setIsVisible(false); }, 300);\r\n      return () => { clearTimeout(timer); };\r\n    }\r\n  }, [isOpen]);\r\n\r\n  // Handle escape key\r\n  useEffect(() => {\r\n    const handleEscape = (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape' && isOpen) {\r\n        handleClose();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener('keydown', handleEscape);\r\n      // Prevent body scroll\r\n      document.body.style.overflow = 'hidden';\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleEscape);\r\n      document.body.style.overflow = 'unset';\r\n    };\r\n  }, [isOpen, handleClose]);\r\n\r\n  return {\r\n    isVisible,\r\n    isAnimating,\r\n    handleClose,\r\n    handleBackdropClick\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { CheckCircle } from 'lucide-react';\r\n\r\nimport { Button } from '@/shared/ui';\r\n\r\ninterface SuccessMessageProps {\r\n  onClose: () => void;\r\n}\r\n\r\nconst SuccessMessage: React.FC<SuccessMessageProps> = ({ onClose }) => {\r\n  return (\r\n    <div className=\"text-center py-8\">\r\n      <CheckCircle size={64} className=\"text-orange-500 mx-auto mb-4\" />\r\n      <p className=\"text-lg text-white mb-2\">Thank you for your quote request!</p>\r\n      <p className=\"text-stone-300\">We have received your information and will get back to you shortly.</p>\r\n      <Button \r\n        onClick={onClose} \r\n        className=\"mt-6 bg-orange-600 hover:bg-orange-700 text-white border-orange-600\"\r\n      >\r\n        Close\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SuccessMessage;\r\n","import React, { useCallback } from 'react';\r\n\r\nimport { Modal } from '@/shared/ui';\r\n\r\nimport { useQuoteFormLogic, useQuoteModal } from '../hooks';\r\nimport { type RequestQuoteModalProps } from '../types';\r\nimport QuoteForm from './QuoteForm';\r\nimport SuccessMessage from './SuccessMessage';\r\n\r\nconst RequestQuoteModal: React.FC<RequestQuoteModalProps> = ({ isOpen, onClose }) => {\r\n  const {\r\n    formData,\r\n    fieldErrors,\r\n    isSubmitted,\r\n    isSubmitting,\r\n    error,\r\n    services,\r\n    serviceAreas,\r\n    businessName,\r\n    businessLocation,\r\n    isAffiliate,\r\n    handleInputChange,\r\n    handleServiceToggle,\r\n    handleSubmit,\r\n    resetForm\r\n  } = useQuoteFormLogic();\r\n\r\n  const { handleClose } = useQuoteModal({ isOpen, onClose });\r\n\r\n  const handleCloseWithReset = useCallback(() => {\r\n    handleClose();\r\n    resetForm();\r\n  }, [handleClose, resetForm]);\r\n\r\n  const modalTitle = isSubmitted \r\n    ? 'Quote Request Sent!' \r\n    : `Request a Quote ${businessName ? `for ${businessName}` : ''}`;\r\n\r\n  const modalDescription = isSubmitted \r\n    ? 'Thank you for your interest! We will get back to you soon.' \r\n    : 'Fill out the form below and we\\'ll get back to you with a personalized quote.';\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      onClose={handleCloseWithReset}\r\n      title={modalTitle}\r\n      description={modalDescription}\r\n      size=\"xl\"\r\n      className=\"bg-stone-800 text-white\"\r\n    >\r\n      {isSubmitted ? (\r\n        <SuccessMessage onClose={handleCloseWithReset} />\r\n      ) : (\r\n        <QuoteForm\r\n          formData={formData}\r\n          fieldErrors={fieldErrors}\r\n          isSubmitting={isSubmitting}\r\n          error={error || undefined}\r\n          services={services}\r\n          serviceAreas={serviceAreas}\r\n          isAffiliate={isAffiliate}\r\n          businessLocation={businessLocation}\r\n          handleInputChange={handleInputChange}\r\n          handleServiceToggle={handleServiceToggle}\r\n          handleSubmit={() => void handleSubmit()}\r\n        />\r\n      )}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default RequestQuoteModal;"],"names":["value","useRef","useEffect","createPortal","jsxs","jsx","useState","useCallback","Fragment","useMemo"],"mappings":"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"}