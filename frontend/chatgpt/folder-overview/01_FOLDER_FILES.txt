
*** FILE: __tests__\displayUtils.test.ts ***
import { describe, it, expect } from 'vitest';
import { getCardDescription, formatPrice } from '../utils/displayUtils';

describe('displayUtils', () => {
  describe('getCardDescription', () => {
    it('should return service description when available', () => {
      const serviceData = {
        description: 'Premium detailing service'
      };
      const featureKeys = ['feature1', 'feature2'];
      const featuresData = {};

      const result = getCardDescription(serviceData, featureKeys, featuresData);
      expect(result).toBe('Premium detailing service');
    });

    it('should generate description from feature names when no service description', () => {
      const serviceData = {};
      const featureKeys = ['feature1', 'feature2'];
      const featuresData = {
        feature1: { name: 'Wash' },
        feature2: { name: 'Wax' }
      };

      const result = getCardDescription(serviceData, featureKeys, featuresData);
      expect(result).toBe('Wash, Wax');
    });

    it('should truncate features when exceeding maxFeatures', () => {
      const serviceData = {};
      const featureKeys = ['feature1', 'feature2', 'feature3', 'feature4'];
      const featuresData = {
        feature1: { name: 'Wash' },
        feature2: { name: 'Wax' },
        feature3: { name: 'Polish' },
        feature4: { name: 'Seal' }
      };

      const result = getCardDescription(serviceData, featureKeys, featuresData, 2);
      expect(result).toBe('Wash, Wax...');
    });

    it('should handle missing features gracefully', () => {
      const serviceData = {};
      const featureKeys = ['feature1', 'feature2'];
      const featuresData = {
        feature1: { name: 'Wash' }
        // feature2 is missing
      };

      const result = getCardDescription(serviceData, featureKeys, featuresData);
      expect(result).toBe('Wash, feature2');
    });

    it('should return fallback message when no features available', () => {
      const serviceData = {};
      const featureKeys: string[] = [];
      const featuresData = {};

      const result = getCardDescription(serviceData, featureKeys, featuresData);
      expect(result).toBe('No features available');
    });
  });

  describe('formatPrice', () => {
    it('should format price with 2 decimal places', () => {
      expect(formatPrice(123.45)).toBe('123.45');
      expect(formatPrice(100)).toBe('100.00');
      expect(formatPrice(0)).toBe('0.00');
    });

    it('should handle large numbers with commas', () => {
      expect(formatPrice(1234.56)).toBe('1,234.56');
      expect(formatPrice(1000000)).toBe('1,000,000.00');
    });
  });
});


*** END FILE ***

*** FILE: __tests__\useAddons.test.ts ***
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { renderHook, waitFor } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { useAddons } from '../hooks/useAddons';

// Mock the dynamic imports
vi.mock('@/data/affiliate-services/cars/addons/windows/service.json', () => ({
  default: {
    'Window Tinting': {
      cost: 200,
      features: ['tint1', 'tint2'],
      popular: true,
      description: 'Professional window tinting'
    },
    'Window Cleaning': {
      cost: 50,
      features: ['clean1'],
      popular: false,
      description: 'Deep window cleaning'
    }
  }
}));

vi.mock('@/data/affiliate-services/cars/addons/windows/features.json', () => ({
  default: {
    tint1: { name: 'UV Protection' },
    tint2: { name: 'Privacy Enhancement' },
    clean1: { name: 'Streak-Free Finish' }
  }
}));

// Mock the vehicle mapping
vi.mock('@/shared/constants', () => ({
  toFolderName: (vehicleType: string) => {
    const map: Record<string, string> = {
      'car': 'cars',
      'truck': 'trucks',
      'suv': 'suvs'
    };
    return map[vehicleType] || null;
  }
}));

const createWrapper = () => {
  const queryClient = new QueryClient({
    defaultOptions: {
      queries: {
        retry: false,
      },
    },
  });
  return ({ children }: { children: React.ReactNode }) => (
    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
  );
};

describe('useAddons', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('should load addons for valid vehicle type and category', async () => {
    const { result } = renderHook(() => useAddons('car', 'windows'), {
      wrapper: createWrapper(),
    });

    await waitFor(() => {
      expect(result.current.isLoading).toBe(false);
    });

    expect(result.current.availableAddons).toHaveLength(2);
    expect(result.current.availableAddons[0]).toEqual({
      id: 'window-tinting',
      name: 'Window Tinting',
      price: 200,
      description: 'Professional window tinting',
      features: ['UV Protection', 'Privacy Enhancement'],
      featureIds: ['tint1', 'tint2'],
      popular: true
    });
    expect(result.current.availableAddons[1]).toEqual({
      id: 'window-cleaning',
      name: 'Window Cleaning',
      price: 50,
      description: 'Deep window cleaning',
      features: ['Streak-Free Finish'],
      featureIds: ['clean1'],
      popular: false
    });
    expect(result.current.error).toBeNull();
  });

  it('should return empty array for invalid vehicle type', async () => {
    const { result } = renderHook(() => useAddons('invalid', 'windows'), {
      wrapper: createWrapper(),
    });

    await waitFor(() => {
      expect(result.current.isLoading).toBe(false);
    });

    expect(result.current.availableAddons).toEqual([]);
    expect(result.current.error).toBe('No addons available for vehicle type: invalid');
  });

  it('should handle missing parameters', async () => {
    const { result } = renderHook(() => useAddons('', ''), {
      wrapper: createWrapper(),
    });

    await waitFor(() => {
      expect(result.current.isLoading).toBe(false);
    });

    expect(result.current.availableAddons).toEqual([]);
    expect(result.current.error).toBe('No addons available for vehicle type: ');
  });
});


*** END FILE ***

*** FILE: __tests__\useServiceTiers.test.ts ***
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { renderHook, waitFor } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { useServiceTiers } from '../hooks/useServiceTiers';

// Mock the dynamic imports
vi.mock('@/data/affiliate-services/cars/service/services.json', () => ({
  default: {
    'Basic Wash': {
      cost: 50,
      features: ['feature1', 'feature2'],
      popular: false,
      description: 'Basic car wash service'
    },
    'Premium Detail': {
      cost: 150,
      features: ['feature1', 'feature2', 'feature3'],
      popular: true,
      description: 'Premium detailing service'
    }
  }
}));

vi.mock('@/data/affiliate-services/cars/service/features.json', () => ({
  default: {
    feature1: { name: 'Exterior Wash' },
    feature2: { name: 'Tire Cleaning' },
    feature3: { name: 'Wax Application' }
  }
}));

// Mock the vehicle mapping
vi.mock('@/shared/constants', () => ({
  toFolderName: (vehicleType: string) => {
    const map: Record<string, string> = {
      'car': 'cars',
      'truck': 'trucks',
      'suv': 'suvs'
    };
    return map[vehicleType] || null;
  }
}));

const createWrapper = () => {
  const queryClient = new QueryClient({
    defaultOptions: {
      queries: {
        retry: false,
      },
    },
  });
  return ({ children }: { children: React.ReactNode }) => (
    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
  );
};

describe('useServiceTiers', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('should load service tiers for valid vehicle type', async () => {
    const { result } = renderHook(() => useServiceTiers('car'), {
      wrapper: createWrapper(),
    });

    await waitFor(() => {
      expect(result.current.isLoading).toBe(false);
    });

    expect(result.current.serviceTiers).toHaveLength(2);
    expect(result.current.serviceTiers[0]).toEqual({
      id: 'basic-wash',
      name: 'Basic Wash',
      price: 50,
      description: 'Basic car wash service',
      features: ['Exterior Wash', 'Tire Cleaning'],
      featureIds: ['feature1', 'feature2'],
      popular: false
    });
    expect(result.current.serviceTiers[1]).toEqual({
      id: 'premium-detail',
      name: 'Premium Detail',
      price: 150,
      description: 'Premium detailing service',
      features: ['Exterior Wash', 'Tire Cleaning', 'Wax Application'],
      featureIds: ['feature1', 'feature2', 'feature3'],
      popular: true
    });
    expect(result.current.error).toBeNull();
  });

  it('should return empty array for invalid vehicle type', async () => {
    const { result } = renderHook(() => useServiceTiers('invalid'), {
      wrapper: createWrapper(),
    });

    await waitFor(() => {
      expect(result.current.isLoading).toBe(false);
    });

    expect(result.current.serviceTiers).toEqual([]);
    expect(result.current.error).toBe('No services available for vehicle type: invalid');
  });

  it('should handle missing vehicle type', async () => {
    const { result } = renderHook(() => useServiceTiers(''), {
      wrapper: createWrapper(),
    });

    await waitFor(() => {
      expect(result.current.isLoading).toBe(false);
    });

    expect(result.current.serviceTiers).toEqual([]);
    expect(result.current.error).toBe('No services available for vehicle type: ');
  });
});


*** END FILE ***

*** FILE: __tests__\vehicleMapping.test.ts ***
import { describe, it, expect } from 'vitest';
import { 
  VEHICLE_FOLDER_MAP, 
  toFolderName, 
  isValidVehicleType, 
  getAvailableVehicleTypes, 
  getAvailableFolderNames 
} from '@/shared/constants/vehicleMapping';

describe('vehicleMapping', () => {
  describe('VEHICLE_FOLDER_MAP', () => {
    it('should contain all expected vehicle types', () => {
      expect(VEHICLE_FOLDER_MAP).toEqual({
        'car': 'cars',
        'truck': 'trucks',
        'suv': 'suvs',
        'boat': 'boats',
        'rv': 'rvs'
      });
    });
  });

  describe('toFolderName', () => {
    it('should return correct folder name for valid vehicle types', () => {
      expect(toFolderName('car')).toBe('cars');
      expect(toFolderName('truck')).toBe('trucks');
      expect(toFolderName('suv')).toBe('suvs');
      expect(toFolderName('boat')).toBe('boats');
      expect(toFolderName('rv')).toBe('rvs');
    });

    it('should return null for invalid vehicle types', () => {
      expect(toFolderName('invalid')).toBeNull();
      expect(toFolderName('')).toBeNull();
      expect(toFolderName('CAR')).toBeNull(); // case sensitive
    });
  });

  describe('isValidVehicleType', () => {
    it('should return true for valid vehicle types', () => {
      expect(isValidVehicleType('car')).toBe(true);
      expect(isValidVehicleType('truck')).toBe(true);
      expect(isValidVehicleType('suv')).toBe(true);
      expect(isValidVehicleType('boat')).toBe(true);
      expect(isValidVehicleType('rv')).toBe(true);
    });

    it('should return false for invalid vehicle types', () => {
      expect(isValidVehicleType('invalid')).toBe(false);
      expect(isValidVehicleType('')).toBe(false);
      expect(isValidVehicleType('CAR')).toBe(false); // case sensitive
    });
  });

  describe('getAvailableVehicleTypes', () => {
    it('should return all vehicle types', () => {
      const types = getAvailableVehicleTypes();
      expect(types).toEqual(['car', 'truck', 'suv', 'boat', 'rv']);
      expect(types).toHaveLength(5);
    });
  });

  describe('getAvailableFolderNames', () => {
    it('should return all folder names', () => {
      const folders = getAvailableFolderNames();
      expect(folders).toEqual(['cars', 'trucks', 'suvs', 'boats', 'rvs']);
      expect(folders).toHaveLength(5);
    });
  });
});


*** END FILE ***

*** FILE: BookingApp.tsx ***
import React from 'react';
import BookingPage from './components/BookingPage';

/**
 * BookingApp - Main booking application component
 * Purely declarative - error boundaries should be handled higher up in the component tree
 */
const BookingApp: React.FC = () => {
  return <BookingPage />;
};

export default BookingApp;


*** END FILE ***

*** FILE: components\BookingFlowController.tsx ***
import React, { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useBookingStore } from '@/features/booking/state';
import { StepVehicleSelection, StepService, StepAddons, StepSchedule, StepPayment } from './steps';
import BookingLayout from './BookingLayout';

/**
 * BookingFlowController - Handles step logic, navigation, and state management
 * Separated from UI layout concerns
 */
const BookingFlowController: React.FC = () => {
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState('vehicle-selection');
  
  // Get Zustand store for booking data
  const { bookingData, setVehicle, setVehicleDetails, setServiceTier, setAddons, setSchedule, setPaymentMethod } = useBookingStore();
  
  const stepOrder = ['vehicle-selection', 'service-tier', 'addons', 'schedule', 'payment'];
  const currentStepIndex = stepOrder.indexOf(currentStep);
  
  const handleNext = useCallback(() => {
    if (currentStepIndex < stepOrder.length - 1) {
      setCurrentStep(stepOrder[currentStepIndex + 1]);
    }
  }, [currentStepIndex]);
  
  const handleBack = useCallback(() => {
    if (currentStepIndex > 0) {
      setCurrentStep(stepOrder[currentStepIndex - 1]);
    }
  }, [currentStepIndex]);
  
  const handleCancel = useCallback(() => {
    navigate('/');
  }, [navigate]);

  const renderStepContent = useCallback(() => {
    switch (currentStep) {
      case 'vehicle-selection':
        return (
          <StepVehicleSelection 
            onVehicleSelected={useCallback((vehicle) => {
              setVehicle(vehicle);
            }, [setVehicle])}
            onVehicleDetailsSelected={useCallback((details) => {
              setVehicleDetails(details);
            }, [setVehicleDetails])}
          />
        );
      
      case 'service-tier':
        return (
          <StepService 
            onTierSelected={(tier) => {
              setServiceTier(tier);
            }}
          />
        );
      
      case 'addons':
        return (
          <StepAddons 
            onAddonsSelected={(addons) => {
              setAddons(addons);
            }}
          />
        );
      
      case 'schedule':
        return (
          <StepSchedule 
            onScheduleSelected={(schedule) => {
              setSchedule(schedule);
            }}
          />
        );
      
      case 'payment':
        return (
          <StepPayment 
            onPaymentComplete={() => {
              // TODO: Handle payment completion and navigation
              // For now, just navigate back to home
              navigate('/');
            }}
          />
        );
      
      default:
        return (
          <div className="text-center">
            <h2 className="text-4xl font-bold text-white mb-4">
              Unknown Step
            </h2>
            <p className="text-gray-300">Step not found</p>
          </div>
        );
    }
  }, [currentStep, currentStepIndex, setVehicle, setServiceTier, setAddons]);

  return (
    <BookingLayout
      currentStep={currentStep}
      completedSteps={stepOrder.slice(0, currentStepIndex)}
      onNext={handleNext}
      onBack={handleBack}
      onCancel={handleCancel}
      canGoNext={currentStepIndex < stepOrder.length - 1}
      canGoBack={currentStepIndex > 0}
      canSkip={false}
      isLoading={false}
      nextLabel={currentStepIndex === stepOrder.length - 1 ? "Complete" : "Continue"}
      backLabel="Back"
      showNavigation={true}
      averageRating={4.9}
      totalReviews={112}
      showTrustStrip={true}
    >
      {renderStepContent()}
    </BookingLayout>
  );
};

export default BookingFlowController;


*** END FILE ***

*** FILE: components\BookingLayout.tsx ***
import React from 'react';
import { Header } from '@/features/header';
import { ImageCarousel } from '@/shared/ui';
import { Footer } from './shared';
import siteData from '@/data/mdh/site.json';

interface BookingLayoutProps {
  children: React.ReactNode;
  currentStep: string;
  completedSteps: string[];
  onNext: () => void;
  onBack: () => void;
  onCancel: () => void;
  canGoNext: boolean;
  canGoBack: boolean;
  canSkip: boolean;
  isLoading: boolean;
  nextLabel: string;
  backLabel: string;
  showNavigation: boolean;
  averageRating?: number;
  totalReviews?: number;
  showTrustStrip?: boolean;
  className?: string;
}

/**
 * BookingLayout - Provides consistent layout structure for booking steps
 * Fixes absolute positioning issues by using proper grid layout
 */
const BookingLayout: React.FC<BookingLayoutProps> = ({
  children,
  currentStep,
  completedSteps,
  onNext,
  onBack,
  onCancel,
  canGoNext,
  canGoBack,
  canSkip,
  isLoading,
  nextLabel,
  backLabel,
  showNavigation,
  averageRating = 4.9,
  totalReviews = 112,
  showTrustStrip = true,
  className = ''
}) => {
  // Get hero images from site data with safe fallback
  const heroImages = Array.isArray(siteData?.hero?.images)
    ? siteData.hero.images.map(img => img?.url).filter(Boolean)
    : [];

  const getStepTitle = (step: string) => {
    const titles = {
      'vehicle-selection': 'Vehicle Selection',
      'service-tier': 'Choose Service Tier',
      'addons': 'Add Extras',
      'schedule': 'Choose Your Date(s)',
      'payment': 'Complete Payment'
    };
    return titles[step as keyof typeof titles] || 'Booking Step';
  };


  return (
    <section className={`relative w-full min-h-screen bg-stone-900 overflow-hidden ${className}`}>
      {/* Header */}
      <div className="relative z-30">
        <Header />
      </div>
      
      {/* Hero Background with Image Rotation */}
      <div className="absolute inset-0 z-0">
        {heroImages.length > 0 ? (
          <ImageCarousel 
            images={heroImages}
            autoRotate={true}
            interval={7000}
            className="w-full h-full"
            gradientOverlay={true}
            decorative={true}
          />
        ) : (
          <div className="w-full h-full bg-gradient-to-br from-stone-800 to-stone-900" />
        )}
      </div>
      
      {/* Dark Overlay */}
      <div className="absolute inset-0 bg-black/40 z-10" />
      
      {/* Step Header - Absolutely positioned to not affect layout */}
      <div className="absolute top-56 left-0 right-0 z-20">
        <div className="text-center px-4 sm:px-6 lg:px-8">
          <h1 className="text-4xl sm:text-5xl lg:text-6xl font-bold text-white">
            {getStepTitle(currentStep)}
          </h1>
        </div>
      </div>

      {/* Content Container with Proper Grid Layout */}
      <div className="relative z-20 h-screen grid grid-rows-[1fr_auto]">

        {/* Main Content Area */}
        <div className="flex items-center justify-center px-4 sm:px-6 lg:px-8 py-8">
          <div className="w-full max-w-7xl">
            {children}
          </div>
        </div>


        {/* Footer with Step Navigation */}
        <div className="px-4 sm:px-6 lg:px-8 py-4 pb-8">
          <Footer
            currentStep={currentStep}
            completedSteps={completedSteps}
            showStepProgress={true}
            averageRating={averageRating}
            totalReviews={totalReviews}
            showTrustStrip={showTrustStrip}
            onNext={onNext}
            onBack={onBack}
            onCancel={onCancel}
            canGoNext={canGoNext}
            canGoBack={canGoBack}
            canSkip={canSkip}
            isLoading={isLoading}
            nextLabel={nextLabel}
            backLabel={backLabel}
            showNavigation={showNavigation}
          />
        </div>
      </div>
    </section>
  );
};

export default BookingLayout;


*** END FILE ***

*** FILE: components\BookingPage.tsx ***
// Simple booking page component
import React from 'react';
import BookingSteps from './BookingSteps';

const BookingPage: React.FC = () => {
  return <BookingSteps />;
};

export default BookingPage;


*** END FILE ***

*** FILE: components\BookingSteps.tsx ***
// Legacy BookingSteps component - now just exports BookingFlowController
// This maintains backward compatibility while using the new architecture
import BookingFlowController from './BookingFlowController';

const BookingSteps: React.FC = () => {
  return <BookingFlowController />;
};

export default BookingSteps;


*** END FILE ***

*** FILE: components\index.ts ***
// Export only public booking components
export { default as BookingPage } from './BookingPage';
export { default as BookingSteps } from './BookingSteps';

*** END FILE ***

*** FILE: components\shared\DetailsModal.tsx ***
import React, { useState } from 'react';
import { X, ChevronDown, ChevronUp } from 'lucide-react';
import { generateFeatureDetails } from '../../utils/displayUtils';
import { useFeaturesData } from '../../hooks';

interface DetailsItem {
  id: string;
  name: string;
  price: number;
  description: string;
  featureIds: string[];
  popular?: boolean;
}

interface DetailsModalProps {
  item: DetailsItem;
  isOpen: boolean;
  onClose: () => void;
  vehicleType: string;
  category?: string; // Optional for service modals
  itemType: 'service' | 'addon';
}

const DetailsModal: React.FC<DetailsModalProps> = ({
  item,
  isOpen,
  onClose,
  vehicleType,
  category,
  itemType
}) => {
  const [expandedFeatures, setExpandedFeatures] = useState<Set<string>>(new Set());
  const featuresData = useFeaturesData({ isOpen, vehicleType, category, itemType });

  const toggleFeature = (featureId: string) => {
    setExpandedFeatures(prev => {
      const newSet = new Set(prev);
      if (newSet.has(featureId)) {
        newSet.delete(featureId);
      } else {
        newSet.add(featureId);
      }
      return newSet;
    });
  };

  const getFeatureDetails = (featureId: string) => {
    return generateFeatureDetails(featureId, featuresData);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-stone-900 rounded-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="sticky top-0 bg-stone-900 border-b border-stone-700 p-6 rounded-t-xl">
          <div className="flex justify-between items-start">
            <div className="text-center flex-1">
              <h2 className="text-3xl font-bold text-white mb-2">{item.name}</h2>
              <p className="text-4xl font-bold text-orange-500">
                ${item.price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
              </p>
            </div>
            <button
              onClick={onClose}
              className="text-stone-400 hover:text-white transition-colors p-2"
              aria-label="Close modal"
            >
              <X className="h-6 w-6" />
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="p-6">
          {/* Description */}
          <div className="mb-6">
            <p className="text-stone-300 text-lg">{item.description}</p>
          </div>

          {/* Features */}
          <div className="space-y-4">
            <h3 className="text-xl font-semibold text-white mb-4">What's Included:</h3>
            {item.featureIds.map((featureId) => {
              const featureDetails = getFeatureDetails(featureId);
              const isExpanded = expandedFeatures.has(featureId);
              
              return (
                <div key={featureId} className="border border-stone-700 rounded-lg overflow-hidden">
                  <button
                    onClick={() => toggleFeature(featureId)}
                    className="w-full p-4 text-left bg-stone-800 hover:bg-stone-700 transition-colors flex justify-between items-center"
                  >
                    <span className="text-white font-medium">
                      {featureDetails?.name || featureId}
                    </span>
                    {isExpanded ? (
                      <ChevronUp className="h-5 w-5 text-stone-400" />
                    ) : (
                      <ChevronDown className="h-5 w-5 text-stone-400" />
                    )}
                  </button>
                  
                  {isExpanded && featureDetails && (
                    <div className="p-4 bg-stone-850 border-t border-stone-700 space-y-4">
                      {/* Description */}
                      {featureDetails.description && (
                        <div>
                          <h4 className="text-sm font-semibold text-orange-400 uppercase tracking-wide mb-2">
                            Description:
                          </h4>
                          <p className="text-stone-300 text-sm">
                            {featureDetails.description}
                          </p>
                        </div>
                      )}
                      
                      {/* Process/Explanation */}
                      {featureDetails.explanation && (
                        <div>
                          <h4 className="text-sm font-semibold text-orange-400 uppercase tracking-wide mb-2">
                            Process:
                          </h4>
                          <p className="text-stone-300 text-sm">
                            {featureDetails.explanation}
                          </p>
                        </div>
                      )}
                      
                      {/* Features */}
                      {featureDetails.features && featureDetails.features.length > 0 && (
                        <div>
                          <h4 className="text-sm font-semibold text-orange-400 uppercase tracking-wide mb-2">
                            Features:
                          </h4>
                          <ul className="space-y-1">
                            {featureDetails.features.map((feature: string, index: number) => (
                              <li key={index} className="text-sm text-stone-300 flex items-start">
                                <span className="text-orange-500 mr-2">•</span>
                                {feature}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      {/* Duration (if available) */}
                      {featureDetails.duration && (
                        <div className="pt-3 border-t border-stone-700">
                          <span className="text-sm text-orange-400 font-medium">
                            Estimated Duration: {featureDetails.duration} minutes
                          </span>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
};

export default DetailsModal;


*** END FILE ***

*** FILE: components\shared\Footer.tsx ***
// Footer component for booking flow
import React from 'react';
import { Star, Lock } from 'lucide-react';

interface FooterProps {
  // Step progress props
  currentStep?: string;
  completedSteps?: string[];
  showStepProgress?: boolean;
  
  // Trust strip props
  averageRating?: number;
  totalReviews?: number;
  showTrustStrip?: boolean;
  
  // Navigation props
  onNext?: () => void;
  onBack?: () => void;
  onCancel?: () => void;
  onSkip?: () => void;
  canGoNext?: boolean;
  canGoBack?: boolean;
  canSkip?: boolean;
  isLoading?: boolean;
  nextLabel?: string;
  backLabel?: string;
  skipLabel?: string;
  showNavigation?: boolean;
  
  // Styling
  className?: string;
}

const Footer: React.FC<FooterProps> = ({
  // Step progress
  currentStep,
  completedSteps = [],
  showStepProgress = true,
  
  // Trust strip
  averageRating = 4.9,
  totalReviews = 0,
  showTrustStrip = true,
  
  // Navigation
  onNext,
  onBack,
  onCancel,
  onSkip,
  canGoNext = true,
  canGoBack = false,
  canSkip = false,
  isLoading = false,
  nextLabel = 'Continue',
  backLabel = 'Back',
  skipLabel = 'Skip',
  showNavigation = true,
  
  className = '',
}) => {
  const stepOrder = ['vehicle-selection', 'service-tier', 'addons', 'schedule', 'payment'];
  const stepLabels = {
    'vehicle-selection': 'Vehicle',
    'service-tier': 'Service',
    'addons': 'Addons',
    'schedule': 'Schedule',
    'payment': 'Payment',
  };

  const getStepStatus = (step: string, _index: number) => {
    if (completedSteps.includes(step)) return 'completed';
    if (step === currentStep) return 'current';
    if (stepOrder.indexOf(step) < stepOrder.indexOf(currentStep || '')) return 'completed';
    return 'upcoming';
  };

  return (
    <div className={`w-full ${className}`}>
      {/* Step Progress */}
      {showStepProgress && (
        <div className="mb-8">
          <div className="flex items-center justify-center space-x-6">
            {stepOrder.map((step, index) => {
              const status = getStepStatus(step, index);
              const isLast = index === stepOrder.length - 1;

              return (
                <div key={step} className="flex items-center">
                  {/* Step Label */}
                  <p
                    className={`
                      text-lg font-medium
                      ${
                        status === 'completed' || status === 'current'
                          ? 'text-orange-500'
                          : 'text-gray-400'
                      }
                    `}
                  >
                    {stepLabels[step as keyof typeof stepLabels]}
                  </p>

                  {/* Connector Dot */}
                  {!isLast && (
                    <div className="mx-4">
                      <div className="w-1 h-1 bg-gray-600 rounded-full" />
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* Navigation Buttons */}
      {showNavigation && (
        <div className="flex justify-center items-center gap-4 mb-8">
          <button
            onClick={canGoBack ? onBack : onCancel}
            disabled={isLoading}
            className="px-6 py-3 border border-gray-600 hover:border-gray-500 text-white rounded-lg transition-colors disabled:opacity-50"
          >
            {canGoBack ? backLabel : 'Exit'}
          </button>
          
          {canSkip && onSkip && (
            <button
              onClick={onSkip}
              disabled={isLoading}
              className="px-6 py-3 text-gray-300 hover:text-white transition-colors disabled:opacity-50"
            >
              {skipLabel}
            </button>
          )}
          
          <button
            onClick={onNext}
            disabled={!canGoNext || isLoading}
            className="px-8 py-3 bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors disabled:opacity-50"
          >
            {isLoading ? 'Loading...' : nextLabel}
          </button>
        </div>
      )}

      {/* Trust Strip */}
      {showTrustStrip && (
        <div className="mt-8 mb-16">
          <div className="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 text-center">
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-8 sm:gap-12 place-items-center">
              <div className="flex items-center text-white">
                <Star className="h-5 w-5 text-orange-500 mr-2" />
                <a 
                  href="https://share.google/dAerqNUgo3WpYeJwP" 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  className="font-semibold hover:text-orange-400 transition-colors duration-200"
                >
                  {averageRating}/5 ({totalReviews} reviews)
                </a>
              </div>
              <div className="flex items-center text-white">
                <Lock className="h-5 w-5 text-orange-500 mr-2" />
                <span>Secure checkout via <a href="https://stripe.com/" target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:text-blue-400 transition-colors duration-200">Stripe</a></span>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Footer;


*** END FILE ***

*** FILE: components\shared\HeroBackground.tsx ***
// Hero background with rotating images for booking flow
import React from 'react';
import { useImageRotation } from '@/shared/hooks';
import { getVisibleImageIndices, getImageOpacityClasses, getTransitionStyles } from '@/shared/utils';

import { BOOKING_HERO_CONSTANTS } from '../../constants/hero';

interface HeroBackgroundProps extends React.HTMLAttributes<HTMLDivElement> {
  images?: string[];
  className?: string;
}

const HeroBackground: React.FC<HeroBackgroundProps> = ({ 
  images = BOOKING_HERO_CONSTANTS.IMAGES,
  className = '',
  ...rest
}) => {
  // Use the new image rotation utility
  const rotation = useImageRotation({
    images,
    autoRotate: true,
    interval: BOOKING_HERO_CONSTANTS.IMAGE_ROTATION_INTERVAL,
    fadeDuration: 2000, // 2s fade duration to match original
    preloadNext: true,
    pauseOnHover: false // Background doesn't need hover pause
  });

  const { currentIndex: currentImageIndex } = rotation;
  
  // Get visible image indices for performance optimization
  const visibleIndices = getVisibleImageIndices(currentImageIndex, images.length, true);

  if (images.length === 0) {
    return (
      <div className={`absolute inset-0 bg-gradient-to-br from-stone-800 to-stone-900 ${className}`} {...rest} />
    );
  }

  return (
    <div className={`absolute inset-0 overflow-hidden ${className}`} {...rest}>
      {/* Render only visible images for performance */}
      {images.map((src: string, idx: number) => {
        // Only render visible images
        if (!visibleIndices.includes(idx)) return null;
        
        return (
          <img
            key={`booking-hero-${String(idx)}`}
            src={src}
            alt={`Professional mobile detailing service ${String(idx + 1)}`}
            className={`absolute inset-0 w-full h-full object-cover ${getImageOpacityClasses(idx, currentImageIndex, 2000)}`}
            style={{
              ...getTransitionStyles(2000),
              aspectRatio: BOOKING_HERO_CONSTANTS.IMAGE_DIMENSIONS.aspectRatio,
            }}
            width={BOOKING_HERO_CONSTANTS.IMAGE_DIMENSIONS.width}
            height={BOOKING_HERO_CONSTANTS.IMAGE_DIMENSIONS.height}
            loading={idx === 0 ? "eager" : "lazy"}
            decoding="async"
          />
        );
      })}
    </div>
  );
};

export default HeroBackground;


*** END FILE ***

*** FILE: components\shared\index.ts ***
// Shared components
export { default as DetailsModal } from './DetailsModal';
export { default as Footer } from './Footer';
export { default as HeroBackground } from './HeroBackground';

*** END FILE ***

*** FILE: components\steps\index.ts ***
// Booking step components
export { default as StepVehicleSelection } from './StepVehicleSelection/StepVehicleSelection';
export { default as StepService } from './StepService/StepService';
export { default as StepAddons } from './StepAddons/StepAddons';
export { default as StepSchedule } from './StepSchedule/StepSchedule';
export { default as StepPayment } from './StepPayment/StepPayment';


*** END FILE ***

*** FILE: components\steps\StepAddons\AddonDetailsModal.tsx ***
import React from 'react';
import DetailsModal from '../../shared/DetailsModal';

interface AddonItem {
  id: string;
  name: string;
  price: number;
  description: string;
  featureIds: string[];
  popular?: boolean;
}

interface AddonDetailsModalProps {
  addon: AddonItem;
  isOpen: boolean;
  onClose: () => void;
  vehicleType: string;
  category: string;
}

const AddonDetailsModal: React.FC<AddonDetailsModalProps> = ({
  addon,
  isOpen,
  onClose,
  vehicleType,
  category
}) => {
  return (
    <DetailsModal
      item={addon}
      isOpen={isOpen}
      onClose={onClose}
      vehicleType={vehicleType}
      category={category}
      itemType="addon"
    />
  );
};

export default AddonDetailsModal;


*** END FILE ***

*** FILE: components\steps\StepAddons\Addons.tsx ***
import React, { useState } from 'react';
import { CheckCircle } from 'lucide-react';
import { useBookingStore } from '@/features/booking/state';
import { useAddons, type AddonItem } from '@/features/booking/hooks';
import { Carousel } from '@/shared/ui';
import AddonDetailsModal from './AddonDetailsModal';
import Tabs from './Tabs';

interface AddonsProps {
  onAddonsSelected?: (addons: string[]) => void;
}

interface CarouselAddonItem extends AddonItem {
  position: 'center' | 'left' | 'right';
}

const Addons: React.FC<AddonsProps> = ({ onAddonsSelected }) => {
  const [selectedCategory, setSelectedCategory] = useState<string>('windows');
  const [selectedAddons, setSelectedAddons] = useState<string[]>([]);
  const [modalAddon, setModalAddon] = useState<AddonItem | null>(null);
  const { bookingData, setAddons } = useBookingStore();

  // Use the data hook for addons
  const { availableAddons, isLoading, error } = useAddons(
    bookingData.vehicle || '', 
    selectedCategory
  );

  // Guard against missing vehicle selection
  if (!bookingData.vehicle) {
    return (
      <div className="w-full max-w-4xl mx-auto">
        <div className="text-center py-8">
          <p className="text-white text-lg">Please select a vehicle first.</p>
        </div>
      </div>
    );
  }

  const handleAddonToggle = (addonId: string) => {
    setSelectedAddons(prev => {
      const newSelection = prev.includes(addonId)
        ? prev.filter(id => id !== addonId) // Remove if already selected
        : [...prev, addonId]; // Add if not selected
      
      // Update Zustand store
      setAddons(newSelection);
      // Call parent callback if provided
      onAddonsSelected?.(newSelection);
      return newSelection;
    });
  };

  const handleCategorySelect = (categoryId: string) => {
    setSelectedCategory(categoryId);
  };

  const handleCardClick = (addon: AddonItem) => {
    setModalAddon(addon);
  };

  const handleCloseModal = () => {
    setModalAddon(null);
  };

  const renderAddonCard = (addon: CarouselAddonItem, _isSelected: boolean) => {
    const isAddonSelected = selectedAddons.includes(addon.id);
    
    return (
      <div
        className={`bg-stone-800/80 backdrop-blur-sm rounded-xl p-8 text-center transition-all duration-300 transform cursor-pointer w-[416px] flex-shrink-0 relative ${
          addon.position === 'center'
            ? `scale-100 z-10 ring-2 ${isAddonSelected ? 'ring-green-500' : 'ring-orange-500'}`
            : addon.position === 'left'
            ? 'scale-90 -translate-x-4 opacity-70'
            : 'scale-90 translate-x-4 opacity-70'
        }`}
        onClick={() => handleCardClick(addon)}
      >
        {/* Popular Badge */}
        {addon.popular && (
          <div className="absolute -top-4 left-1/2 -translate-x-1/2">
            <span className="bg-orange-500 text-white px-4 py-1.5 rounded-full text-base font-medium">
              Most Popular
            </span>
          </div>
        )}

        {/* Addon Header */}
        <div className="mb-5">
          <h3 className="text-3xl font-bold text-white mb-3">{addon.name}</h3>
          <p className="text-4xl font-bold text-orange-500">
            ${addon.price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
          </p>
        </div>

        {/* Description and Features */}
        <div className="mb-5">
          <p className="text-stone-300 text-base mb-5">{addon.description}</p>
          
          {/* Features List */}
          {addon.features && addon.features.length > 0 ? (
            <div className="space-y-3">
              {addon.features.map((feature: string, index: number) => (
                <div key={index} className="flex items-center text-base text-stone-300">
                  <CheckCircle className="h-5 w-5 text-green-500 mr-3 flex-shrink-0" />
                  <span className="truncate">{feature}</span>
                </div>
              ))}
            </div>
          ) : null}
        </div>

        {/* Selection Button */}
        <button
          onClick={(e) => {
            e.stopPropagation();
            handleAddonToggle(addon.id);
          }}
          className={`mt-8 w-full py-4 px-8 rounded-lg font-semibold text-lg transition-colors flex items-center justify-center gap-3 ${
            isAddonSelected
              ? 'bg-green-600 hover:bg-green-700 text-white'
              : 'bg-orange-500 hover:bg-orange-600 text-white'
          }`}
        >
          {isAddonSelected && <CheckCircle size={20} />}
          {isAddonSelected ? 'Selected' : 'Select Addon'}
        </button>
      </div>
    );
  };

  if (isLoading) {
    return (
      <div className="w-full max-w-4xl mx-auto">
        <div className="text-center py-8">
          <p className="text-white">Loading addons...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="w-full max-w-4xl mx-auto">
        <div className="text-center py-8">
          <p className="text-red-500">Error loading addons: {error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full max-w-6xl mx-auto relative">
      {/* Category Tabs - Positioned absolutely at top */}
      <Tabs 
        selectedCategory={selectedCategory}
        onCategorySelect={handleCategorySelect}
      />
      
      {/* Addon Carousel */}
      <Carousel
        items={availableAddons}
        selectedItem=""
        onItemSelect={() => {}} // Not used for addons
        renderItem={renderAddonCard}
        onItemClick={handleCardClick}
        emptyMessage={`No add-ons available for ${selectedCategory}`}
      />

      {/* Addon Details Modal */}
      {modalAddon && (
        <AddonDetailsModal
          addon={modalAddon}
          isOpen={!!modalAddon}
          onClose={handleCloseModal}
          vehicleType={bookingData.vehicle}
          category={selectedCategory}
        />
      )}
    </div>
  );
};

export default Addons;


*** END FILE ***

*** FILE: components\steps\StepAddons\Header.tsx ***
import React from 'react';

const Header: React.FC = () => {
  return (
    <div className="text-center mb-8">
      <h2 className="text-3xl font-bold text-white mb-4">Add Extras</h2>
      <p className="text-gray-300">Enhance your service with additional options</p>
    </div>
  );
};

export default Header;


*** END FILE ***

*** FILE: components\steps\StepAddons\StepAddons.tsx ***
import React from 'react';
import Addons from './Addons';

interface StepAddonsProps {
  onAddonsSelected?: (addons: string[]) => void;
}

/**
 * StepAddons - Complete addons step with addon selection
 * The main step header is handled by BookingLayout
 * The Addons component handles tabs and addon selection
 */
const StepAddons: React.FC<StepAddonsProps> = ({ onAddonsSelected }) => {
  return (
    <div className="w-full max-w-6xl mx-auto">
      {/* Addon Selection with integrated tabs */}
      <Addons onAddonsSelected={onAddonsSelected} />
    </div>
  );
};

export default StepAddons;


*** END FILE ***

*** FILE: components\steps\StepAddons\Tabs.tsx ***
import React from 'react';
import { Wrench, Droplets, Sparkles, Shield, Zap, Plus } from 'lucide-react';

interface TabsProps {
  selectedCategory: string;
  onCategorySelect: (categoryId: string) => void;
}

const Tabs: React.FC<TabsProps> = ({ selectedCategory, onCategorySelect }) => {
  // Addon categories
  const addonCategories = [
    { id: 'windows', name: 'Windows', icon: Sparkles },
    { id: 'wheels', name: 'Wheels', icon: Wrench },
    { id: 'trim', name: 'Interior', icon: Droplets },
    { id: 'engine', name: 'Engine', icon: Shield },
  ];

  return (
    <div className="fixed left-0 right-0 z-20 py-4" style={{ bottom: '270px' }}>
      <div className="text-center px-4 sm:px-6 lg:px-8">
        <div className="flex flex-wrap justify-center gap-3 max-w-4xl mx-auto">
          {addonCategories.map((category) => {
            const IconComponent = category.icon;
            return (
              <button
                key={category.id}
                onClick={() => onCategorySelect(category.id)}
                className={`p-2 rounded-lg border-2 transition-all w-24 h-24 ${
                  selectedCategory === category.id
                    ? 'border-orange-500 bg-orange-500/20'
                    : 'border-gray-600 hover:border-gray-500'
                }`}
              >
                <IconComponent className="w-8 h-8 text-white mb-2 mx-auto" />
                <div className="text-white font-medium">{category.name}</div>
              </button>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default Tabs;


*** END FILE ***

*** FILE: components\steps\StepPayment\StepPayment.tsx ***
import React, { useState } from 'react';
import { usePaymentMethods } from '@/features/booking/hooks';
import { useBookingStore } from '@/features/booking/state';

interface StepPaymentProps {
  onPaymentComplete?: () => void;
}

const StepPayment: React.FC<StepPaymentProps> = ({ onPaymentComplete }) => {
  const [currentStep, setCurrentStep] = useState<'summary' | 'payment-type' | 'payment'>('summary');
  const [paymentMethod, setPaymentMethod] = useState<string>('');
  const [cardDetails, setCardDetails] = useState({
    cardNumber: '',
    expiryDate: '',
    cvv: '',
    name: ''
  });

  // Get booking data from store
  const { bookingData, setPaymentMethod: setStorePaymentMethod } = useBookingStore();
  
  // Load payment methods (using mock affiliate ID for now)
  const { data: paymentMethods = [], isLoading, error } = usePaymentMethods('mock-affiliate');

  const handlePaymentMethodSelect = (method: string) => {
    setPaymentMethod(method);
    setStorePaymentMethod(method);
    setCurrentStep('payment');
  };

  const handleCardInputChange = (field: string, value: string) => {
    setCardDetails(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleCompleteBooking = () => {
    // TODO: Add payment processing logic here
    onPaymentComplete?.();
  };

  const isFormValid = () => {
    if (paymentMethod === 'card') {
      return cardDetails.cardNumber && cardDetails.expiryDate && cardDetails.cvv && cardDetails.name;
    }
    return paymentMethod !== '';
  };

  if (isLoading) {
    return (
      <div className="text-center">
        <p className="text-xl text-gray-300 mb-8">Loading payment options...</p>
        <div className="animate-pulse bg-gray-700 h-32 rounded-lg max-w-2xl mx-auto"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center">
        <p className="text-xl text-red-400 mb-8">Error loading payment methods</p>
        <div className="bg-red-900/20 border border-red-500 rounded-lg p-6 max-w-2xl mx-auto">
          <p className="text-red-300">Please try again later or contact support.</p>
        </div>
      </div>
    );
  }

  const renderFlowHeader = () => (
    <div className="mb-8">
      <div className="flex items-center justify-center space-x-4">
        {/* Summary Step */}
        <button
          onClick={() => setCurrentStep('summary')}
          className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-all ${
            currentStep === 'summary'
              ? 'bg-orange-500 text-white'
              : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
          }`}
        >
          <div className={`w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold ${
            currentStep === 'summary' ? 'bg-white text-orange-500' : 'bg-gray-600 text-gray-300'
          }`}>
            1
          </div>
          <span>Summary</span>
        </button>

        {/* Arrow */}
        <div className="text-gray-400">→</div>

        {/* Payment Type Step */}
        <button
          onClick={() => setCurrentStep('payment-type')}
          className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-all ${
            currentStep === 'payment-type'
              ? 'bg-orange-500 text-white'
              : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
          }`}
        >
          <div className={`w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold ${
            currentStep === 'payment-type' ? 'bg-white text-orange-500' : 'bg-gray-600 text-gray-300'
          }`}>
            2
          </div>
          <span>Payment Type</span>
        </button>

        {/* Arrow */}
        <div className="text-gray-400">→</div>

        {/* Payment Step */}
        <button
          onClick={() => setCurrentStep('payment')}
          className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-all ${
            currentStep === 'payment'
              ? 'bg-orange-500 text-white'
              : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
          }`}
        >
          <div className={`w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold ${
            currentStep === 'payment' ? 'bg-white text-orange-500' : 'bg-gray-600 text-gray-300'
          }`}>
            3
          </div>
          <span>Payment</span>
        </button>
      </div>
    </div>
  );

  const renderSummary = () => {
    const { vehicle, vehicleDetails, serviceTier, addons, schedule } = bookingData;
    
    // Service tier names and pricing
    const serviceTiers = {
      'basic': { name: 'Basic Package', price: 89 },
      'premium': { name: 'Premium Package', price: 129 },
      'deluxe': { name: 'Deluxe Package', price: 199 },
      'elite-detail': { name: 'Elite Detail Package', price: 249 }
    };
    
    const addonPrices = {
      'interior-protection': 25,
      'paint-correction': 50,
      'ceramic-coating': 100,
      'engine-detailing': 35
    };
    
    const serviceInfo = serviceTiers[serviceTier as keyof typeof serviceTiers] || { name: 'Unknown Package', price: 0 };
    const servicePrice = serviceInfo.price;
    const addonPrice = addons.reduce((total, addon) => {
      return total + (addonPrices[addon as keyof typeof addonPrices] || 0);
    }, 0);
    const total = servicePrice + addonPrice;
    
    return (
      <div className="text-center">
        <div className="max-w-2xl mx-auto">
          {/* Booking Summary */}
          <div className="mb-8 p-6 bg-gray-800/50 rounded-lg">
            <h3 className="text-xl font-semibold text-white mb-4">Booking Summary</h3>
            <div className="text-gray-300 space-y-3 text-left">
              {/* Vehicle Details */}
              {(vehicleDetails?.make || vehicle) && (
                <div>
                  <div className="font-semibold text-white">Vehicle:</div>
                  <div>
                    {(() => {
                      // Build vehicle string from available details
                      const parts = [];
                      if (vehicleDetails?.make) parts.push(vehicleDetails.make);
                      if (vehicleDetails?.model) parts.push(vehicleDetails.model);
                      if (vehicleDetails?.year) parts.push(vehicleDetails.year);
                      
                      if (parts.length > 0) {
                        return parts.join(' ');
                      } else if (vehicle && vehicle !== 'car') {
                        return vehicle;
                      } else {
                        return 'Vehicle not specified';
                      }
                    })()}
                  </div>
                  {(vehicleDetails?.color || vehicleDetails?.length) && (
                    <div className="text-sm text-gray-400">
                      {(() => {
                        const details = [];
                        if (vehicleDetails?.color) details.push(vehicleDetails.color);
                        if (vehicleDetails?.length) details.push(vehicleDetails.length);
                        return details.join(', ');
                      })()}
                    </div>
                  )}
                </div>
              )}
              
              {/* Service Tier */}
              {serviceTier && (
                <div>
                  <div className="font-semibold text-white">Service:</div>
                  <div>{serviceInfo.name} - ${servicePrice}</div>
                </div>
              )}
              
              {/* Add-ons */}
              {addons.length > 0 && (
                <div>
                  <div className="font-semibold text-white">Add-ons:</div>
                  <div className="space-y-1">
                    {addons.map((addon, index) => (
                      <div key={index} className="text-sm">
                        {addon.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())} - ${addonPrices[addon as keyof typeof addonPrices] || 0}
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Schedule */}
              {schedule.date && (
                <div>
                  <div className="font-semibold text-white">Schedule:</div>
                  <div>
                    {schedule.date.split(',').map((date, index) => (
                      <div key={index}>
                        {new Date(date).toLocaleDateString('en-US', { 
                          weekday: 'long', 
                          month: 'long', 
                          day: 'numeric' 
                        })}
                      </div>
                    ))}
                    {schedule.time && <div className="text-sm text-gray-400">Time: {schedule.time}</div>}
                  </div>
                </div>
              )}
              
              {/* Total */}
              <div className="border-t border-gray-600 pt-3 mt-4">
                <div className="flex justify-between items-center">
                  <span className="text-lg font-semibold text-white">Total:</span>
                  <span className="text-xl font-bold text-orange-500">${total}</span>
                </div>
              </div>
            </div>
          </div>

          <button
            onClick={() => setCurrentStep('payment-type')}
            className="px-8 py-4 rounded-lg font-bold text-lg bg-orange-500 hover:bg-orange-600 text-white transition-all"
          >
            Continue to Payment
          </button>
        </div>
      </div>
    );
  };

  const renderPaymentType = () => (
    <div className="text-center">
      <div className="max-w-2xl mx-auto">
        <h3 className="text-xl font-semibold text-white mb-4">Choose Payment Method</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          {paymentMethods.map((method) => (
            <button
              key={method.id}
              onClick={() => handlePaymentMethodSelect(method.id)}
              disabled={!method.enabled}
              className={`p-4 rounded-lg border-2 transition-all ${
                paymentMethod === method.id
                  ? 'border-orange-500 bg-orange-500/20'
                  : method.enabled
                  ? 'border-gray-600 hover:border-gray-500'
                  : 'border-gray-700 bg-gray-800 text-gray-500 cursor-not-allowed'
              }`}
            >
              <div className="text-2xl mb-2">{method.icon || '💳'}</div>
              <div className="text-white text-sm">{method.name}</div>
              {method.processingFee && (
                <div className="text-xs text-gray-400">{method.processingFee}% fee</div>
              )}
            </button>
          ))}
        </div>
        
        <button
          onClick={() => setCurrentStep('summary')}
          className="px-6 py-3 rounded-lg border border-gray-600 text-gray-300 hover:border-gray-500 transition-all"
        >
          Back to Summary
        </button>
      </div>
    </div>
  );

  const renderPayment = () => (
    <div className="text-center">
      <div className="max-w-2xl mx-auto">
        {/* Card Details Form */}
        {paymentMethod === 'card' && (
          <div className="mb-8 p-6 bg-gray-800/50 rounded-lg">
            <h3 className="text-xl font-semibold text-white mb-4">Card Details</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="md:col-span-2">
                <input
                  type="text"
                  placeholder="Cardholder Name"
                  value={cardDetails.name}
                  onChange={(e) => handleCardInputChange('name', e.target.value)}
                  className="w-full p-3 rounded-lg bg-gray-700 border border-gray-600 text-white placeholder-gray-400 focus:border-orange-500 focus:outline-none"
                />
              </div>
              <div className="md:col-span-2">
                <input
                  type="text"
                  placeholder="Card Number"
                  value={cardDetails.cardNumber}
                  onChange={(e) => handleCardInputChange('cardNumber', e.target.value)}
                  className="w-full p-3 rounded-lg bg-gray-700 border border-gray-600 text-white placeholder-gray-400 focus:border-orange-500 focus:outline-none"
                />
              </div>
              <div>
                <input
                  type="text"
                  placeholder="MM/YY"
                  value={cardDetails.expiryDate}
                  onChange={(e) => handleCardInputChange('expiryDate', e.target.value)}
                  className="w-full p-3 rounded-lg bg-gray-700 border border-gray-600 text-white placeholder-gray-400 focus:border-orange-500 focus:outline-none"
                />
              </div>
              <div>
                <input
                  type="text"
                  placeholder="CVV"
                  value={cardDetails.cvv}
                  onChange={(e) => handleCardInputChange('cvv', e.target.value)}
                  className="w-full p-3 rounded-lg bg-gray-700 border border-gray-600 text-white placeholder-gray-400 focus:border-orange-500 focus:outline-none"
                />
              </div>
            </div>
          </div>
        )}

        {/* Payment Confirmation */}
        <div className="mb-8 p-6 bg-gray-800/50 rounded-lg">
          <h3 className="text-xl font-semibold text-white mb-4">Payment Details</h3>
          <div className="text-gray-300 space-y-2">
            <div>Method: {paymentMethods.find(m => m.id === paymentMethod)?.name}</div>
            <div className="border-t border-gray-600 pt-2 text-orange-500 font-bold">
              Total: ${(() => {
                const serviceTiers = { 'basic': 89, 'premium': 129, 'deluxe': 199, 'elite-detail': 249 };
                const addonPrices = { 'interior-protection': 25, 'paint-correction': 50, 'ceramic-coating': 100, 'engine-detailing': 35 };
                const servicePrice = serviceTiers[bookingData.serviceTier as keyof typeof serviceTiers] || 0;
                const addonPrice = bookingData.addons.reduce((total, addon) => total + (addonPrices[addon as keyof typeof addonPrices] || 0), 0);
                return servicePrice + addonPrice;
              })()}
            </div>
          </div>
        </div>

        {/* Complete Booking Button */}
        <button
          onClick={handleCompleteBooking}
          disabled={!isFormValid()}
          className={`px-8 py-4 rounded-lg font-bold text-lg transition-all ${
            isFormValid()
              ? 'bg-orange-500 hover:bg-orange-600 text-white'
              : 'bg-gray-600 text-gray-400 cursor-not-allowed'
          }`}
        >
          Complete Booking - ${(() => {
            const serviceTiers = { 'basic': 89, 'premium': 129, 'deluxe': 199, 'elite-detail': 249 };
            const addonPrices = { 'interior-protection': 25, 'paint-correction': 50, 'ceramic-coating': 100, 'engine-detailing': 35 };
            const servicePrice = serviceTiers[bookingData.serviceTier as keyof typeof serviceTiers] || 0;
            const addonPrice = bookingData.addons.reduce((total, addon) => total + (addonPrices[addon as keyof typeof addonPrices] || 0), 0);
            return servicePrice + addonPrice;
          })()}
        </button>

        <div className="mt-4">
          <button
            onClick={() => setCurrentStep('payment-type')}
            className="px-6 py-3 rounded-lg border border-gray-600 text-gray-300 hover:border-gray-500 transition-all"
          >
            Change Payment Method
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <div className="text-center">
      {/* Sub-step Flow Header - Positioned 75px below main step header */}
      <div className="absolute top-80 left-0 right-0 z-20">
        {renderFlowHeader()}
      </div>
      
      {/* Step Content */}
      <div className="max-w-2xl mx-auto pt-32">
        {currentStep === 'summary' && renderSummary()}
        {currentStep === 'payment-type' && renderPaymentType()}
        {currentStep === 'payment' && renderPayment()}
      </div>
    </div>
  );
};

export default StepPayment;


*** END FILE ***

*** FILE: components\steps\StepSchedule\StepSchedule.tsx ***
import React, { useState, useMemo } from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { useScheduleOptions, useTimeSlots } from '@/features/booking/hooks';
import { useBookingStore } from '@/features/booking/state';

interface StepScheduleProps {
  onScheduleSelected?: (schedule: { date: string; time: string }) => void;
}

const StepSchedule: React.FC<StepScheduleProps> = ({ onScheduleSelected }) => {
  const [selectedDates, setSelectedDates] = useState<string[]>([]);
  const [selectedTime, setSelectedTime] = useState<string>('');
  const [currentMonth, setCurrentMonth] = useState(new Date());
  
  // Get booking data from store
  const { bookingData, setSchedule } = useBookingStore();
  
  // Load schedule options (using mock location/service IDs for now)
  const { data: scheduleOptions, isLoading, error } = useScheduleOptions('mock-location', 'mock-service');
  
  // Get time slots for first selected date (if any)
  const { timeSlots } = useTimeSlots(selectedDates[0] || '', 'mock-location', 'mock-service');
  
  // Convert schedule options to date options
  const availableDates = useMemo(() => {
    if (!scheduleOptions) return [];
    
    return scheduleOptions
      .filter(option => option.available)
      .map(option => ({
        value: option.date,
        label: new Date(option.date).toLocaleDateString('en-US', { 
          weekday: 'short', 
          month: 'short', 
          day: 'numeric' 
        })
      }));
  }, [scheduleOptions]);

  const handleDateSelect = (date: string) => {
    // Toggle selection - if already selected, remove it; if not selected, add it
    setSelectedDates(prev => {
      if (prev.includes(date)) {
        // Remove date from selection
        const newDates = prev.filter(d => d !== date);
        setSchedule({ date: newDates.join(','), time: '' });
        onScheduleSelected?.({ date: newDates.join(','), time: '' });
        return newDates;
      } else {
        // Add date to selection
        const newDates = [...prev, date].sort();
        setSchedule({ date: newDates.join(','), time: '' });
        onScheduleSelected?.({ date: newDates.join(','), time: '' });
        return newDates;
      }
    });
  };

  const handleTimeSelect = (time: string) => {
    setSelectedTime(time);
    if (selectedDates.length > 0) {
      const schedule = { date: selectedDates.join(','), time };
      setSchedule(schedule);
      onScheduleSelected?.(schedule);
    }
  };

  const navigateMonth = (direction: 'prev' | 'next') => {
    setCurrentMonth(prev => {
      const newMonth = new Date(prev);
      if (direction === 'prev') {
        newMonth.setMonth(prev.getMonth() - 1);
      } else {
        newMonth.setMonth(prev.getMonth() + 1);
      }
      return newMonth;
    });
  };

  // Check if we can navigate to previous month
  const canNavigatePrev = () => {
    const today = new Date();
    const currentMonthYear = currentMonth.getFullYear() * 12 + currentMonth.getMonth();
    const todayMonthYear = today.getFullYear() * 12 + today.getMonth();
    return currentMonthYear > todayMonthYear;
  };

  if (isLoading) {
    return (
      <div className="text-center">
        <p className="text-xl text-gray-300 mb-8">Loading available times...</p>
        <div className="animate-pulse bg-gray-700 h-32 rounded-lg max-w-4xl mx-auto"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center">
        <p className="text-xl text-red-400 mb-8">Error loading schedule options</p>
        <div className="bg-red-900/20 border border-red-500 rounded-lg p-6 max-w-2xl mx-auto">
          <p className="text-red-300">Please try again later or contact support.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="text-center">
      
      <div className="max-w-4xl mx-auto">
        {/* Date Selection - Calendar */}
        <div className="mb-8 mt-48">
          <div className="bg-white/10 backdrop-blur-sm rounded-lg p-6 max-w-2xl mx-auto">
            {/* Month Navigation */}
            <div className="flex items-center justify-between mb-6">
              <button
                onClick={() => navigateMonth('prev')}
                disabled={!canNavigatePrev()}
                className={`p-2 rounded-lg border transition-all ${
                  canNavigatePrev()
                    ? 'border-gray-600 hover:border-gray-500 text-white'
                    : 'border-gray-700 bg-gray-800/50 text-gray-500 cursor-not-allowed'
                }`}
              >
                <ChevronLeft className="h-5 w-5" />
              </button>
              
              <h2 className="text-xl font-semibold text-white">
                {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
              </h2>
              
              <button
                onClick={() => navigateMonth('next')}
                className="p-2 rounded-lg border border-gray-600 hover:border-gray-500 text-white transition-all"
              >
                <ChevronRight className="h-5 w-5" />
              </button>
            </div>
            
            <div className="grid grid-cols-7 gap-2 mb-4">
              {/* Calendar Header */}
              {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (
                <div key={day} className="text-center text-sm font-semibold text-gray-300 py-2">
                  {day}
                </div>
              ))}
              
              {/* Calendar Days */}
              {(() => {
                const today = new Date();
                const month = currentMonth.getMonth();
                const year = currentMonth.getFullYear();
                const firstDay = new Date(year, month, 1);
                const lastDay = new Date(year, month + 1, 0);
                const startDate = new Date(firstDay);
                startDate.setDate(startDate.getDate() - firstDay.getDay());
                
                const calendarDays = [];
                const currentDate = new Date(startDate);
                
                // Generate 6 weeks of calendar
                for (let week = 0; week < 6; week++) {
                  for (let day = 0; day < 7; day++) {
                    const dateStr = currentDate.toISOString().split('T')[0];
                    const isCurrentMonth = currentDate.getMonth() === month;
                    const isPast = currentDate < today;
                    const isAvailable = scheduleOptions?.some(option => option.date === dateStr && option.available) || false;
                    const isSelected = selectedDates.includes(dateStr);
                    
                    calendarDays.push(
                      <button
                        key={dateStr}
                        onClick={() => isAvailable && !isPast && handleDateSelect(dateStr)}
                        disabled={!isAvailable || isPast}
                        className={`p-3 rounded-lg border-2 transition-all text-sm ${
                          isSelected
                            ? 'border-green-500 bg-green-500/20 text-white'
                            : isAvailable && !isPast
                            ? 'border-gray-600 hover:border-gray-500 text-white'
                            : 'border-gray-700 bg-gray-800/50 text-gray-500 cursor-not-allowed'
                        } ${!isCurrentMonth ? 'opacity-50' : ''}`}
                      >
                        {currentDate.getDate()}
                      </button>
                    );
                    
                    currentDate.setDate(currentDate.getDate() + 1);
                  }
                }
                
                return calendarDays;
              })()}
            </div>
            
          </div>
          
          {/* Arrival Time Information */}
          <div className="text-center text-gray-300 mt-6">
            <p className="text-base">
              Arrival times are typically 6am - 9am. We will call to arrange date and time.
            </p>
          </div>
        </div>

      </div>
    </div>
  );
};

export default StepSchedule;


*** END FILE ***

*** FILE: components\steps\StepService\Header.tsx ***
import React from 'react';

const Header: React.FC = () => {
  return (
    <div className="text-center mb-8">
      <h2 className="text-3xl font-bold text-white mb-4">Choose Your Service</h2>
      <p className="text-gray-300">Select the service tier that best fits your needs</p>
    </div>
  );
};

export default Header;


*** END FILE ***

*** FILE: components\steps\StepService\ServiceCard.tsx ***
import React from 'react';
import { CheckCircle } from 'lucide-react';

interface ServiceTier {
  id: string;
  name: string;
  price: number;
  description: string;
  features: string[];
  popular?: boolean;
}

interface ServiceCardProps {
  service: ServiceTier;
  position: 'center' | 'left' | 'right';
  isSelected: boolean;
  onSelect: () => void;
  onCardClick: () => void;
}

const ServiceCard: React.FC<ServiceCardProps> = ({
  service,
  position,
  isSelected,
  onSelect,
  onCardClick
}) => {
  const getPositionClasses = () => {
    const baseClasses = "bg-stone-800/80 backdrop-blur-sm rounded-xl p-8 text-center transition-all duration-300 transform cursor-pointer w-[416px] flex-shrink-0";
    
    switch (position) {
      case 'center':
        return `${baseClasses} scale-100 z-10 ring-2 ${isSelected ? 'ring-green-500 bg-green-800/80' : 'ring-orange-500'}`;
      case 'left':
        return `${baseClasses} scale-90 -translate-x-4 opacity-70`;
      case 'right':
        return `${baseClasses} scale-90 translate-x-4 opacity-70`;
      default:
        return baseClasses;
    }
  };

  const getButtonClasses = () => {
    const baseClasses = "w-full py-4 px-8 rounded-lg font-semibold text-lg transition-colors";
    if (isSelected) {
      return `${baseClasses} bg-green-600 hover:bg-green-700 text-white flex items-center justify-center gap-3`;
    }
    return `${baseClasses} bg-orange-500 hover:bg-orange-600 text-white`;
  };

  return (
    <div className={getPositionClasses()} onClick={onCardClick}>
      {/* Popular Badge */}
      {service.popular && (
        <div className="absolute -top-4 left-1/2 -translate-x-1/2">
          <span className="bg-orange-500 text-white px-4 py-1.5 rounded-full text-base font-medium">
            Most Popular
          </span>
        </div>
      )}

      {/* Service Header */}
      <div className="mb-5">
        <h3 className="text-3xl font-bold text-white mb-3">{service.name}</h3>
        <p className="text-4xl font-bold text-orange-500">
          ${service.price.toLocaleString('en-US', { 
            minimumFractionDigits: 2, 
            maximumFractionDigits: 2 
          })}
        </p>
      </div>

      {/* Service Description */}
      <div className="mb-5">
        <p className="text-stone-300 text-base mb-5">{service.description}</p>
        
        {/* Features List */}
        {service.features && service.features.length > 0 && (
          <div className="space-y-3">
            {service.features.map((feature, index) => (
              <div key={index} className="flex items-center text-base text-stone-300">
                <CheckCircle className="h-5 w-5 text-green-500 mr-3 flex-shrink-0" />
                <span className="truncate">{feature}</span>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Action Button */}
      <button
        onClick={(e) => {
          e.stopPropagation(); // Prevent card click when clicking the button
          onSelect();
        }}
        className={getButtonClasses()}
      >
        {isSelected && <CheckCircle size={20} />}
        {isSelected ? 'Selected' : 'Choose'}
      </button>
    </div>
  );
};

export default ServiceCard;


*** END FILE ***

*** FILE: components\steps\StepService\ServiceCarousel.tsx ***
import React, { useState } from 'react';
import ServiceCard from './ServiceCard';
import ServiceDetailsModal from './ServiceDetailsModal';
import { Carousel } from '@/shared/ui';

interface ServiceTier {
  id: string;
  name: string;
  price: number;
  description: string;
  features: string[];
  featureIds: string[];
  popular?: boolean;
}

interface ServiceCarouselProps {
  services: ServiceTier[];
  selectedService?: string;
  onServiceSelect: (serviceId: string) => void;
}

const ServiceCarousel: React.FC<ServiceCarouselProps> = ({
  services,
  selectedService,
  onServiceSelect
}) => {
  const [modalService, setModalService] = useState<ServiceTier | null>(null);

  const handleCardClick = (service: ServiceTier) => {
    setModalService(service);
  };

  const handleCloseModal = () => {
    setModalService(null);
  };

  const renderServiceCard = (service: ServiceTier & { position: 'center' | 'left' | 'right' }, isSelected: boolean) => (
    <ServiceCard
      service={service}
      position={service.position}
      isSelected={isSelected}
      onSelect={() => {
        // Toggle selection: if already selected, deselect; otherwise select
        if (selectedService === service.id) {
          onServiceSelect(''); // Deselect
        } else {
          onServiceSelect(service.id); // Select
        }
      }}
      onCardClick={() => handleCardClick(service)}
    />
  );

  return (
    <>
      <Carousel
        items={services}
        selectedItem={selectedService ?? ''}
        onItemSelect={onServiceSelect}
        renderItem={renderServiceCard}
        onItemClick={handleCardClick}
        emptyMessage="No services available"
      />
      
      {/* Service Details Modal */}
      {modalService && (
        <ServiceDetailsModal
          service={modalService}
          isOpen={!!modalService}
          onClose={handleCloseModal}
        />
      )}
    </>
  );
};

export default ServiceCarousel;


*** END FILE ***

*** FILE: components\steps\StepService\ServiceDetailsModal.tsx ***
import React from 'react';
import { useBookingStore } from '@/features/booking/state';
import DetailsModal from '../../shared/DetailsModal';

interface ServiceTier {
  id: string;
  name: string;
  price: number;
  description: string;
  features: string[];
  featureIds: string[];
  popular?: boolean;
}

interface ServiceDetailsModalProps {
  service: ServiceTier;
  isOpen: boolean;
  onClose: () => void;
}

const ServiceDetailsModal: React.FC<ServiceDetailsModalProps> = ({
  service,
  isOpen,
  onClose
}) => {
  const { bookingData } = useBookingStore();

  return (
    <DetailsModal
      item={service}
      isOpen={isOpen}
      onClose={onClose}
      vehicleType={bookingData.vehicle}
      itemType="service"
    />
  );
};

export default ServiceDetailsModal;


*** END FILE ***

*** FILE: components\steps\StepService\StepService.tsx ***
import React, { useState } from 'react';
import ServiceCarousel from './ServiceCarousel';
import { useBookingStore } from '@/features/booking/state';
import { useServiceTiers } from '@/features/booking/hooks';

interface StepServiceProps {
  onTierSelected?: (tier: string) => void;
}

const StepService: React.FC<StepServiceProps> = ({ onTierSelected }) => {
  const [selectedService, setSelectedService] = useState<string>('');
  
  // Get booking data from Zustand store
  const { bookingData, setServiceTier } = useBookingStore();

  // Use the data hook for service tiers
  const { serviceTiers, isLoading, error } = useServiceTiers(bookingData.vehicle || '');

  const handleServiceSelect = (serviceId: string) => {
    setSelectedService(serviceId);
    setServiceTier(serviceId); // Update Zustand store
    onTierSelected?.(serviceId);
  };

  // Guard against missing vehicle selection
  if (!bookingData.vehicle) {
    return (
      <div className="w-full max-w-4xl mx-auto">
        <div className="text-center py-8">
          <p className="text-white text-lg">Please select a vehicle first.</p>
        </div>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="w-full max-w-4xl mx-auto">
        <div className="text-center py-8">
          <p className="text-white">Loading services...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="w-full max-w-4xl mx-auto">
        <div className="text-center py-8">
          <p className="text-red-500">Error loading services: {error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full max-w-4xl mx-auto">
      {/* Service Carousel */}
      <ServiceCarousel
        services={serviceTiers}
        selectedService={selectedService}
        onServiceSelect={handleServiceSelect}
      />
    </div>
  );
};

export default StepService;


*** END FILE ***

*** FILE: components\steps\StepVehicleSelection\Header.tsx ***
import React from 'react';

const Header: React.FC = () => {
  return (
    <div className="text-center mb-12 absolute top-1/4 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full">
      <h1 className="text-6xl font-bold text-white mb-6">Vehicle Selection</h1>
    </div>
  );
};

export default Header;


*** END FILE ***

*** FILE: components\steps\StepVehicleSelection\StepVehicleSelection.tsx ***
import React, { useState } from 'react';
import Header from './Header';
import Tabs from './Tabs';
import VehicleSelection from './VehicleType';

interface StepVehicleSelectionProps {
  onVehicleSelected?: (vehicle: string) => void;
  onVehicleDetailsSelected?: (details: { make: string; model: string; year: string; color: string; length: string }) => void;
}

const StepVehicleSelection: React.FC<StepVehicleSelectionProps> = ({ onVehicleSelected, onVehicleDetailsSelected }) => {
  const [selectedVehicle, setSelectedVehicle] = useState<string>('');

  const handleVehicleSelect = (vehicleId: string) => {
    setSelectedVehicle(vehicleId);
    onVehicleSelected?.(vehicleId);
  };

  const handleVehicleDetailsSelect = (details: { make: string; model: string; year: string; color: string; length: string }) => {
    onVehicleDetailsSelected?.(details);
  };

  return (
    <div className="w-full max-w-4xl mx-auto">
      <Tabs 
        selectedVehicle={selectedVehicle}
        onVehicleSelect={handleVehicleSelect}
      />
      <VehicleSelection 
        selectedVehicle={selectedVehicle} 
        onVehicleDetailsSelect={handleVehicleDetailsSelect}
      />
    </div>
  );
};

export default StepVehicleSelection;

*** END FILE ***

*** FILE: components\steps\StepVehicleSelection\Tabs.tsx ***
import React from 'react';
import { Car, CarFront, Truck, Bike, Ship, Sailboat, Home, MoreHorizontal } from 'lucide-react';

interface TabsProps {
  selectedVehicle: string;
  onVehicleSelect: (vehicleId: string) => void;
}

const Tabs: React.FC<TabsProps> = ({ selectedVehicle, onVehicleSelect }) => {
  // Static vehicle types - no backend dependency
  const vehicleTypes = [
    { id: 'car', name: 'Car', icon: CarFront },
    { id: 'truck', name: 'Truck', icon: Truck },
    { id: 'suv', name: 'SUV', icon: Car }, // SUV keeps Car icon
    { id: 'boat', name: 'Boat', icon: Ship },
    { id: 'rv', name: 'RV', icon: 'custom-rv' }, // Custom RV icon
    { id: 'other', name: 'Other', icon: MoreHorizontal },
  ];

  return (
    <div className="mb-8 absolute top-[30%] left-1/2 transform -translate-x-1/2 w-full">
      <div className="flex flex-wrap justify-center gap-3 max-w-4xl mx-auto">
        {vehicleTypes.map((vehicle) => {
          return (
            <button
              key={vehicle.id}
              onClick={() => onVehicleSelect(vehicle.id)}
              className={`p-2 rounded-lg border-2 transition-all w-24 h-24 ${
                selectedVehicle === vehicle.id
                  ? 'border-orange-500 bg-orange-500/20'
                  : 'border-gray-600 hover:border-gray-500'
              }`}
            >
              {vehicle.icon === 'custom-rv' ? (
                <img 
                  src="/icons/rv.png" 
                  alt="RV" 
                  className="w-8 h-8 mb-2 mx-auto object-contain filter brightness-0 invert" 
                />
              ) : (
                React.createElement(vehicle.icon, { className: "w-8 h-8 text-white mb-2 mx-auto" })
              )}
              <div className="text-white font-medium">{vehicle.name}</div>
            </button>
          );
        })}
      </div>
    </div>
  );
};

export default Tabs;


*** END FILE ***

*** FILE: components\steps\StepVehicleSelection\VehicleType.tsx ***
import React, { useState, useEffect, useRef } from 'react';
import { getMakesForType, getModelsForMake, getVehicleYears } from '@/data/vehicle_data';

interface VehicleSelectionProps {
  selectedVehicle: string;
  onVehicleDetailsSelect?: (details: { make: string; model: string; year: string; color: string; length: string }) => void;
}

const VehicleSelection: React.FC<VehicleSelectionProps> = ({ selectedVehicle, onVehicleDetailsSelect }) => {
  const [make, setMake] = useState('');
  const [model, setModel] = useState('');
  const [year, setYear] = useState('');
  const [color, setColor] = useState('');
  const [length, setLength] = useState('');
  const lastDetailsRef = useRef<string>('');

  // Vehicle ID is now already the correct vehicle type name (no mapping needed)
  const vehicleTypeName = selectedVehicle;

  // Get available makes based on selected vehicle type
  const availableMakes = getMakesForType(vehicleTypeName);
  
  // Get available models based on selected make and vehicle type
  const availableModels = make ? getModelsForMake(vehicleTypeName, make) : [];
  
  // Get available years
  const availableYears = getVehicleYears();

  // Reset dependent fields when vehicle type or make changes
  useEffect(() => {
    setModel('');
  }, [selectedVehicle, make]);

  useEffect(() => {
    setMake('');
    setModel('');
    setYear('');
    setColor('');
    setLength('');
  }, [selectedVehicle]);

  // Helper function to update vehicle details
  const updateVehicleDetails = (newMake?: string, newModel?: string, newYear?: string, newColor?: string, newLength?: string) => {
    const currentMake = newMake !== undefined ? newMake : make;
    const currentModel = newModel !== undefined ? newModel : model;
    const currentYear = newYear !== undefined ? newYear : year;
    const currentColor = newColor !== undefined ? newColor : color;
    const currentLength = newLength !== undefined ? newLength : length;
    
    if (currentMake && currentModel && currentYear) {
      const currentDetails = JSON.stringify({ 
        make: currentMake, 
        model: currentModel, 
        year: currentYear, 
        color: currentColor || '', 
        length: currentLength || '' 
      });
      
      if (currentDetails !== lastDetailsRef.current) {
        lastDetailsRef.current = currentDetails;
        onVehicleDetailsSelect?.({
          make: currentMake,
          model: currentModel,
          year: currentYear,
          color: currentColor || '',
          length: currentLength || ''
        });
      }
    }
  };

  return (
    <div className="mb-8 absolute top-[45%] left-1/2 transform -translate-x-1/2 w-full max-w-xl">
      <div className="grid grid-cols-2 gap-4 px-4">
        {/* Make Dropdown */}
        <div className="space-y-2">
          <label className="block text-white font-medium text-sm">Make</label>
          <select 
            value={make}
            onChange={(e) => {
              setMake(e.target.value);
              updateVehicleDetails(e.target.value);
            }}
            className="w-full py-3 px-1.5 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500"
            disabled={!selectedVehicle}
          >
            <option value="">Select Make</option>
            {availableMakes.map((makeOption) => (
              <option key={makeOption} value={makeOption}>
                {makeOption}
              </option>
            ))}
          </select>
        </div>

        {/* Model Dropdown */}
        <div className="space-y-2">
          <label className="block text-white font-medium text-sm">Model</label>
          <select 
            value={model}
            onChange={(e) => {
              setModel(e.target.value);
              updateVehicleDetails(undefined, e.target.value);
            }}
            className="w-full py-3 px-1.5 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500"
            disabled={!make}
          >
            <option value="">Select Model</option>
            {availableModels.map((modelOption) => (
              <option key={modelOption} value={modelOption}>
                {modelOption}
              </option>
            ))}
          </select>
        </div>

        {/* Year Dropdown */}
        <div className="space-y-2">
          <label className="block text-white font-medium text-sm">Year</label>
          <select 
            value={year}
            onChange={(e) => {
              setYear(e.target.value);
              updateVehicleDetails(undefined, undefined, e.target.value);
            }}
            className="w-full py-3 px-1.5 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500"
          >
            <option value="">Select Year</option>
            {availableYears.map((yearOption) => (
              <option key={yearOption} value={yearOption}>
                {yearOption}
              </option>
            ))}
          </select>
        </div>

        {/* Color Dropdown or Length Input */}
        {selectedVehicle === 'boat' || selectedVehicle === 'rv' ? (
          /* Length Input for Boat/RV */
          <div className="space-y-2">
            <label className="block text-white font-medium text-sm">Length (ft)</label>
            <input 
              type="number"
              value={length}
              onChange={(e) => {
                setLength(e.target.value);
                updateVehicleDetails(undefined, undefined, undefined, undefined, e.target.value);
              }}
              placeholder="Enter length in feet"
              className="w-full py-3 px-1.5 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500"
              min="1"
              max="999"
            />
          </div>
        ) : (
          /* Color Dropdown for other vehicles */
          <div className="space-y-2">
            <label className="block text-white font-medium text-sm">Color</label>
            <select 
              value={color}
              onChange={(e) => {
                setColor(e.target.value);
                updateVehicleDetails(undefined, undefined, undefined, e.target.value);
              }}
              className="w-full py-3 px-1.5 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-orange-500"
            >
              <option value="">Select Color</option>
              <option value="black">Black</option>
              <option value="white">White</option>
              <option value="silver">Silver</option>
              <option value="gray">Gray</option>
              <option value="red">Red</option>
              <option value="blue">Blue</option>
              <option value="green">Green</option>
              <option value="other">Other</option>
            </select>
          </div>
        )}
      </div>
    </div>
  );
};

export default VehicleSelection;


*** END FILE ***

*** FILE: constants\hero.ts ***
// Booking hero configuration constants
export const BOOKING_HERO_CONSTANTS = {
  IMAGES: [
    '/images/hero/hero1.png',
    '/images/hero/hero2.png',
  ].filter(Boolean),
  
  IMAGE_ROTATION_INTERVAL: 8000, // 8 seconds
  IMAGE_TRANSITION_DURATION: 2000, // 2 seconds
  
  // Image dimensions for CLS prevention
  IMAGE_DIMENSIONS: {
    width: 1920,
    height: 1080,
    aspectRatio: '16/9'
  }
} as const;


*** END FILE ***

*** FILE: hooks\index.ts ***
// Export booking hooks
export { useFeaturesData } from './useFeaturesData';
export { useVehicleData } from './useVehicleData';
export { useServiceTiers } from './useServiceTiers';
export { useAddons } from './useAddons';
export { useScheduleOptions, useTimeSlots } from './useScheduleOptions';
export { usePaymentMethods, usePaymentTokens } from './usePaymentMethods';


*** END FILE ***

*** FILE: hooks\useAddons.ts ***
import { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { toFolderName } from '@/shared/constants';
import { getCardDescription } from '../utils/displayUtils';

export interface AddonItem {
  id: string;
  name: string;
  price: number;
  description: string;
  features: string[];
  featureIds: string[];
  popular?: boolean;
}

interface AddonData {
  [key: string]: {
    cost?: number;
    features: string[];
    popular?: boolean;
    description?: string;
  };
}

interface FeatureData {
  [key: string]: {
    name: string;
    description: string;
    explanation: string;
    image: string;
    duration: number;
    features: string[];
  };
}

/**
 * Hook to load addons for a specific vehicle type and category
 */
export const useAddons = (vehicleType: string, category: string) => {
  const [availableAddons, setAvailableAddons] = useState<AddonItem[]>([]);

  const { data, isLoading, error } = useQuery({
    queryKey: ['addons', vehicleType, category],
    queryFn: async () => {
      const folderName = toFolderName(vehicleType);
      if (!folderName) {
        throw new Error(`No addons available for vehicle type: ${vehicleType}`);
      }

      try {
        // Try to load service.json first (for windows), then fall back to category-specific files
        try {
          const [addonsData, featuresData] = await Promise.all([
            import(`@/data/affiliate-services/${folderName}/addons/${category}/service.json`),
            import(`@/data/affiliate-services/${folderName}/addons/${category}/features.json`)
          ]);
          
          return {
            addons: addonsData.default,
            features: featuresData.default,
            type: 'service' as const
          };
        } catch (serviceError) {
          // Try to load category-specific file (wheels.json, trim.json, etc.)
          const categoryData = await import(`@/data/affiliate-services/${folderName}/addons/${category}/${category}.json`);
          
          return {
            addons: categoryData.default,
            features: {},
            type: 'category' as const
          };
        }
      } catch (error) {
        throw new Error(`No addons available for ${category} in ${vehicleType}`);
      }
    },
    enabled: !!vehicleType && !!category && !!toFolderName(vehicleType),
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 10 * 60 * 1000, // 10 minutes
  });

  useEffect(() => {
    if (data) {
      let processedAddons: AddonItem[] = [];

      if (data.type === 'service') {
        // Process addons object (windows data structure)
        processedAddons = Object.entries(data.addons).map(([name, addon]: [string, any]) => {
          const featureNames = addon.features.map((featureId: string) => getFeatureName(featureId, data.features));
          const description = getCardDescription(addon, addon.features, data.features);
          
          return {
            id: name.toLowerCase().replace(/\s+/g, '-'),
            name: name,
            price: addon.cost || 0,
            description: description,
            features: featureNames,
            featureIds: addon.features || [],
            popular: addon.popular || false
          };
        });
      } else {
        // Convert features object to addon array format
        const features = Object.keys(data.addons);
        processedAddons = features.map((featureKey: string, index: number) => {
          const feature = data.addons[featureKey];
          return {
            id: featureKey,
            name: feature.name,
            price: 0, // No pricing in features-only files
            description: feature.description || getCardDescription(feature, [featureKey], {}),
            features: [feature.name], // Use the feature name as the single feature
            featureIds: [featureKey],
            popular: index === 0 // Make first item popular
          };
        });
      }
      
      setAvailableAddons(processedAddons);
    }
  }, [data]);

  return {
    availableAddons,
    isLoading,
    error: error?.message || null
  };
};

/**
 * Helper function to get feature name from feature ID
 */
const getFeatureName = (featureId: string, featuresData: FeatureData): string => {
  return featuresData[featureId]?.name || featureId;
};


*** END FILE ***

*** FILE: hooks\useFeaturesData.ts ***
import { useState, useEffect } from 'react';

interface UseFeaturesDataProps {
  isOpen: boolean;
  vehicleType: string;
  category?: string | undefined;
  itemType: 'service' | 'addon';
}

export const useFeaturesData = ({ isOpen, vehicleType, category, itemType }: UseFeaturesDataProps) => {
  const [featuresData, setFeaturesData] = useState<any>(null);

  useEffect(() => {
    if (isOpen && vehicleType) {
      loadFeaturesData();
    }
  }, [isOpen, vehicleType, category, itemType]);

  const loadFeaturesData = async () => {
    try {
      const vehicleFolderMap: Record<string, string> = {
        'car': 'cars',
        'truck': 'trucks',
        'suv': 'suvs',
        'boat': 'boats',
        'rv': 'rvs'
      };

      const folderName = vehicleFolderMap[vehicleType];
      if (folderName) {
        let featuresData;
        
        if (itemType === 'service') {
          // Service features - static imports to avoid Vite warnings
          switch (folderName) {
            case 'cars':
              featuresData = await import('@/data/affiliate-services/cars/service/features.json');
              break;
            case 'trucks':
              featuresData = await import('@/data/affiliate-services/trucks/service/features.json');
              break;
            case 'suvs':
              featuresData = await import('@/data/affiliate-services/suvs/service/features.json');
              break;
            case 'rvs':
              featuresData = await import('@/data/affiliate-services/rvs/service/features.json');
              break;
            // boats doesn't have service features yet
          }
        } else {
          // Addon features - only import files that exist
          switch (folderName) {
            case 'cars':
              switch (category) {
                case 'windows':
                  featuresData = await import('@/data/affiliate-services/cars/addons/windows/features.json');
                  break;
                case 'wheels':
                  featuresData = await import('@/data/affiliate-services/cars/addons/wheels/features.json');
                  break;
                case 'trim':
                  featuresData = await import('@/data/affiliate-services/cars/addons/trim/features.json');
                  break;
                case 'engine':
                  featuresData = await import('@/data/affiliate-services/cars/addons/engine/features.json');
                  break;
              }
              break;
            case 'trucks':
              switch (category) {
                case 'windows':
                  featuresData = await import('@/data/affiliate-services/trucks/addons/windows/features.json');
                  break;
                case 'wheels':
                  featuresData = await import('@/data/affiliate-services/trucks/addons/wheels/features.json');
                  break;
                case 'trim':
                  featuresData = await import('@/data/affiliate-services/trucks/addons/trim/features.json');
                  break;
                case 'engine':
                  featuresData = await import('@/data/affiliate-services/trucks/addons/engine/features.json');
                  break;
              }
              break;
            case 'suvs':
              switch (category) {
                case 'windows':
                  featuresData = await import('@/data/affiliate-services/suvs/addons/windows/features.json');
                  break;
                case 'wheels':
                  featuresData = await import('@/data/affiliate-services/suvs/addons/wheels/features.json');
                  break;
                case 'trim':
                  featuresData = await import('@/data/affiliate-services/suvs/addons/trim/features.json');
                  break;
                case 'engine':
                  featuresData = await import('@/data/affiliate-services/suvs/addons/engine/features.json');
                  break;
              }
              break;
            // boats and rvs don't have addon features yet
          }
        }
        
        if (featuresData) {
          setFeaturesData(featuresData.default);
        }
      }
    } catch (error) {
      console.error(`❌ Error loading features for ${vehicleType}/${category || 'service'}:`, error);
    }
  };

  return featuresData;
};


*** END FILE ***

*** FILE: hooks\usePaymentMethods.ts ***
import { useQuery } from '@tanstack/react-query';

export interface PaymentMethod {
  id: string;
  type: 'card' | 'paypal' | 'apple_pay' | 'google_pay' | 'bank_transfer';
  name: string;
  description: string;
  icon?: string;
  enabled: boolean;
  processingFee?: number;
}

export interface PaymentToken {
  id: string;
  methodId: string;
  last4?: string;
  brand?: string;
  expiryMonth?: number;
  expiryYear?: number;
  isDefault: boolean;
}

/**
 * Hook to load payment methods for a specific affiliate
 */
export const usePaymentMethods = (affiliateId?: string) => {
  return useQuery({
    queryKey: ['paymentMethods', affiliateId],
    queryFn: async (): Promise<PaymentMethod[]> => {
      // TODO: Replace with actual API call
      // For now, return mock data
      const mockPaymentMethods: PaymentMethod[] = [
        {
          id: 'card',
          type: 'card',
          name: 'Credit/Debit Card',
          description: 'Pay with Visa, Mastercard, American Express, or Discover',
          enabled: true,
          processingFee: 2.9
        },
        {
          id: 'paypal',
          type: 'paypal',
          name: 'PayPal',
          description: 'Pay securely with your PayPal account',
          enabled: true,
          processingFee: 3.4
        },
        {
          id: 'apple_pay',
          type: 'apple_pay',
          name: 'Apple Pay',
          description: 'Pay with Touch ID or Face ID',
          enabled: true,
          processingFee: 2.9
        },
        {
          id: 'google_pay',
          type: 'google_pay',
          name: 'Google Pay',
          description: 'Pay with your Google account',
          enabled: true,
          processingFee: 2.9
        }
      ];

      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 300));
      
      return mockPaymentMethods;
    },
    enabled: !!affiliateId,
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 10 * 60 * 1000, // 10 minutes
  });
};

/**
 * Hook to load saved payment tokens for a user
 */
export const usePaymentTokens = (userId?: string) => {
  return useQuery({
    queryKey: ['paymentTokens', userId],
    queryFn: async (): Promise<PaymentToken[]> => {
      // TODO: Replace with actual API call
      // For now, return mock data
      const mockPaymentTokens: PaymentToken[] = [
        {
          id: 'token_1',
          methodId: 'card',
          last4: '4242',
          brand: 'Visa',
          expiryMonth: 12,
          expiryYear: 2025,
          isDefault: true
        },
        {
          id: 'token_2',
          methodId: 'card',
          last4: '5555',
          brand: 'Mastercard',
          expiryMonth: 8,
          expiryYear: 2026,
          isDefault: false
        }
      ];

      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 200));
      
      return mockPaymentTokens;
    },
    enabled: !!userId,
    staleTime: 2 * 60 * 1000, // 2 minutes
    cacheTime: 5 * 60 * 1000, // 5 minutes
  });
};


*** END FILE ***

*** FILE: hooks\useScheduleOptions.ts ***
import { useQuery } from '@tanstack/react-query';

export interface TimeSlot {
  id: string;
  time: string;
  available: boolean;
  price?: number;
}

export interface ScheduleOption {
  date: string;
  timeSlots: TimeSlot[];
  available: boolean;
}

/**
 * Hook to load schedule options for a specific location and service
 */
export const useScheduleOptions = (locationId?: string, serviceId?: string, dateRange?: { start: string; end: string }) => {
  return useQuery({
    queryKey: ['scheduleOptions', locationId, serviceId, dateRange],
    queryFn: async (): Promise<ScheduleOption[]> => {
      // TODO: Replace with actual API call
      // For now, return mock data with current dates
      const today = new Date();
      const mockScheduleOptions: ScheduleOption[] = [];
      
      // Generate available dates for the next 30 days
      for (let i = 0; i < 30; i++) {
        const date = new Date(today);
        date.setDate(today.getDate() + i);
        const dateStr = date.toISOString().split('T')[0];
        
        // Skip weekends for demo purposes (make some dates unavailable)
        const isWeekend = date.getDay() === 0 || date.getDay() === 6;
        const isAvailable = !isWeekend || i % 3 === 0; // Make some weekends available
        
        mockScheduleOptions.push({
          date: dateStr,
          available: isAvailable,
          timeSlots: [
            { id: `${i}-1`, time: '9:00 AM', available: true },
            { id: `${i}-2`, time: '10:00 AM', available: true },
            { id: `${i}-3`, time: '11:00 AM', available: i % 4 !== 0 }, // Some unavailable
            { id: `${i}-4`, time: '1:00 PM', available: true },
            { id: `${i}-5`, time: '2:00 PM', available: true },
            { id: `${i}-6`, time: '3:00 PM', available: i % 5 !== 0 } // Some unavailable
          ]
        });
      }

      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 500));
      
      return mockScheduleOptions;
    },
    enabled: !!locationId && !!serviceId,
    staleTime: 2 * 60 * 1000, // 2 minutes
    cacheTime: 5 * 60 * 1000, // 5 minutes
  });
};

/**
 * Hook to get available time slots for a specific date
 */
export const useTimeSlots = (date: string, locationId?: string, serviceId?: string) => {
  const { data: scheduleOptions, ...rest } = useScheduleOptions(locationId, serviceId);
  
  const timeSlots = scheduleOptions?.find(option => option.date === date)?.timeSlots || [];
  
  return {
    timeSlots,
    ...rest
  };
};


*** END FILE ***

*** FILE: hooks\useServiceTiers.ts ***
import { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { toFolderName } from '@/shared/constants';
import { getCardDescription } from '../utils/displayUtils';

export interface ServiceTier {
  id: string;
  name: string;
  price: number;
  description: string;
  features: string[];
  featureIds: string[];
  popular?: boolean;
}

interface ServiceData {
  [key: string]: {
    cost: number;
    features: string[];
    popular?: boolean;
    description?: string;
  };
}

interface FeatureData {
  [key: string]: {
    name: string;
    description: string;
    explanation: string;
    image: string;
    duration: number;
    features: string[];
  };
}

/**
 * Hook to load service tiers for a specific vehicle type
 */
export const useServiceTiers = (vehicleType: string) => {
  const [serviceTiers, setServiceTiers] = useState<ServiceTier[]>([]);

  const { data, isLoading, error } = useQuery({
    queryKey: ['serviceTiers', vehicleType],
    queryFn: async () => {
      const folderName = toFolderName(vehicleType);
      if (!folderName) {
        throw new Error(`No services available for vehicle type: ${vehicleType}`);
      }

      // Dynamically import the services data for the specific vehicle type
      const [servicesData, featuresData] = await Promise.all([
        import(`@/data/affiliate-services/${folderName}/service/services.json`),
        import(`@/data/affiliate-services/${folderName}/service/features.json`)
      ]);

      return { services: servicesData.default, features: featuresData.default };
    },
    enabled: !!vehicleType && !!toFolderName(vehicleType),
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 10 * 60 * 1000, // 10 minutes
  });

  useEffect(() => {
    if (data) {
      const processedServices = Object.entries(data.services).map(([name, service]: [string, any]) => ({
        id: name.toLowerCase().replace(/\s+/g, '-'),
        name: name,
        price: service.cost,
        description: getCardDescription(service, service.features, data.features),
        features: service.features.map((featureId: string) => getFeatureName(featureId, data.features)),
        featureIds: service.features,
        popular: service.popular || false
      }));
      
      setServiceTiers(processedServices);
    }
  }, [data]);

  return {
    serviceTiers,
    isLoading,
    error: error?.message || null
  };
};

/**
 * Helper function to get feature name from feature ID
 */
const getFeatureName = (featureId: string, featuresData: FeatureData): string => {
  return featuresData[featureId]?.name || featureId;
};


*** END FILE ***

*** FILE: hooks\useVehicleData.ts ***
import { useState, useCallback } from 'react';

// Basic vehicle types
const vehicleTypes = [
  { id: 'cars', name: 'Cars' },
  { id: 'trucks', name: 'Trucks' },
  { id: 'suvs', name: 'SUVs' },
  { id: 'vans', name: 'Vans' },
  { id: 'motorcycles', name: 'Motorcycles' }
];

// Basic makes
const vehicleMakes = [
  'Honda', 'Toyota', 'Ford', 'Chevrolet', 'BMW', 'Mercedes-Benz', 
  'Audi', 'Nissan', 'Hyundai', 'Kia', 'Mazda', 'Subaru'
];

export const useVehicleData = () => {
  const [selectedVehicleType, setSelectedVehicleType] = useState<string>('');

  const getMakes = useCallback((vehicleType: string) => {
    // Return all makes for any vehicle type (simplified)
    return vehicleMakes;
  }, []);

  const getModels = useCallback((vehicleType: string, make: string) => {
    // Return some common models (simplified)
    const commonModels = ['Sedan', 'SUV', 'Truck', 'Hatchback', 'Coupe'];
    return commonModels;
  }, []);

  return {
    vehicleTypes,
    getMakes,
    getModels,
    selectedVehicleType,
    setSelectedVehicleType
  };
};


*** END FILE ***

*** FILE: index.ts ***
// Clean booking exports - only what we need
export { default as BookingApp } from './BookingApp';
export { default as BookingSteps } from './components/BookingSteps';
export { default as BookingPage } from './components/BookingPage';


*** END FILE ***

*** FILE: state\bookingStore.ts ***
import { create } from 'zustand';
import { devtools } from 'zustand/middleware';
import { logger } from '@/shared/utils';
import { BookingState, BookingActions, BookingData, BookingStep } from './types';

const initialBookingData: BookingData = {
  vehicle: '',
  vehicleDetails: {
    make: '',
    model: '',
    year: '',
    color: '',
    length: ''
  },
  serviceTier: '',
  addons: [],
  schedule: { date: '', time: '' },
  paymentMethod: ''
};

const stepOrder: BookingStep[] = ['vehicle-selection', 'service-tier', 'addons', 'schedule', 'payment'];

export const useBookingStore = create<BookingState & BookingActions>()(
  devtools(
    (set, get) => ({
      // Initial state
      currentStep: 'vehicle-selection',
      bookingData: initialBookingData,
      completedSteps: [],
      isLoading: false,
      errors: [],

      // Actions
      setCurrentStep: (step) => {
        const currentIndex = stepOrder.indexOf(step);
        const completedSteps = stepOrder.slice(0, currentIndex);
        
        set({
          currentStep: step,
          completedSteps,
          errors: [] // Clear errors when changing steps
        });
        
        logger.booking.stepChanged(step);
      },

      updateBookingData: (data) => {
        set((state) => ({
          bookingData: { ...state.bookingData, ...data }
        }));
        
        logger.booking.dataUpdated(data);
      },

      setVehicle: (vehicle) => {
        set((state) => ({
          bookingData: { ...state.bookingData, vehicle }
        }));
        
        logger.booking.vehicleSelected(vehicle);
      },

      setVehicleDetails: (details) => {
        set((state) => ({
          bookingData: { 
            ...state.bookingData, 
            vehicleDetails: { ...state.bookingData.vehicleDetails, ...details }
          }
        }));
        
        logger.booking.dataUpdated(details);
      },

      setServiceTier: (tier) => {
        set((state) => ({
          bookingData: { ...state.bookingData, serviceTier: tier }
        }));
        
        logger.booking.serviceSelected(tier);
      },

      setAddons: (addons) => {
        set((state) => ({
          bookingData: { ...state.bookingData, addons }
        }));
        
        logger.booking.addonsSelected(addons);
      },

      setSchedule: (schedule) => {
        set((state) => ({
          bookingData: { ...state.bookingData, schedule }
        }));
        
        logger.booking.scheduleSelected(schedule);
      },

      setPaymentMethod: (method) => {
        set((state) => ({
          bookingData: { ...state.bookingData, paymentMethod: method }
        }));
        
        logger.booking.paymentSelected(method);
      },

      nextStep: () => {
        const { currentStep } = get();
        const currentIndex = stepOrder.indexOf(currentStep);
        
        if (currentIndex < stepOrder.length - 1) {
          const nextStep = stepOrder[currentIndex + 1];
          if (nextStep) {
            get().setCurrentStep(nextStep);
            logger.booking.stepChanged(nextStep);
          }
        } else {
          logger.booking.bookingCompleted();
        }
      },

      previousStep: () => {
        const { currentStep } = get();
        const currentIndex = stepOrder.indexOf(currentStep);
        
        if (currentIndex > 0) {
          const prevStep = stepOrder[currentIndex - 1];
          if (prevStep) {
            get().setCurrentStep(prevStep);
            logger.booking.stepChanged(prevStep);
          }
        }
      },

      resetBooking: () => {
        set({
          currentStep: 'vehicle-selection',
          bookingData: initialBookingData,
          completedSteps: [],
          isLoading: false,
          errors: []
        });
        
        logger.booking.bookingReset();
      },

      setLoading: (loading) => {
        set({ isLoading: loading });
      },

      setErrors: (errors) => {
        set({ errors });
      },

      addError: (error) => {
        set((state) => ({
          errors: [...state.errors, error]
        }));
      },

      clearErrors: () => {
        set({ errors: [] });
      }
    }),
    {
      name: 'booking-store', // Unique name for devtools
    }
  )
);


*** END FILE ***

*** FILE: state\index.ts ***
// Booking state exports
export { useBookingStore } from './bookingStore';
export type { BookingState, BookingActions, BookingData, BookingStep } from './types';


*** END FILE ***

*** FILE: state\types.ts ***
// Booking state types
export type BookingStep = 'vehicle-selection' | 'service-tier' | 'addons' | 'schedule' | 'payment';

export interface BookingData {
  vehicle: string;
  vehicleDetails: {
    make: string;
    model: string;
    year: string;
    color: string;
    length: string;
  };
  serviceTier: string;
  addons: string[];
  schedule: { date: string; time: string };
  paymentMethod: string;
}

export interface BookingState {
  currentStep: BookingStep;
  bookingData: BookingData;
  completedSteps: BookingStep[];
  isLoading: boolean;
  errors: string[];
}

export interface BookingActions {
  setCurrentStep: (step: BookingStep) => void;
  updateBookingData: (data: Partial<BookingData>) => void;
  setVehicle: (vehicle: string) => void;
  setVehicleDetails: (details: Partial<BookingData['vehicleDetails']>) => void;
  setServiceTier: (tier: string) => void;
  setAddons: (addons: string[]) => void;
  setSchedule: (schedule: { date: string; time: string }) => void;
  setPaymentMethod: (method: string) => void;
  nextStep: () => void;
  previousStep: () => void;
  resetBooking: () => void;
  setLoading: (loading: boolean) => void;
  setErrors: (errors: string[]) => void;
  addError: (error: string) => void;
  clearErrors: () => void;
}


*** END FILE ***

*** FILE: utils\displayUtils.ts ***
/**
 * Utility functions for generating display content for services and addons
 */

interface FeatureData {
  [key: string]: {
    name: string;
    description: string;
    explanation: string;
    image: string;
    duration: number;
    features: string[];
  };
}

/**
 * Get description from service/addon data, with fallback to feature names
 */
export const getCardDescription = (
  serviceData: any,
  featureKeys: string[], 
  featuresData: FeatureData,
  maxFeatures: number = 3
): string => {
  // First priority: use description field from service/addon data
  if (serviceData?.description) {
    return serviceData.description;
  }

  // Fallback: generate from feature names
  if (!featureKeys || featureKeys.length === 0 || !featuresData) {
    return 'No features available';
  }

  // Look up feature names from features.json using the keywords
  const featureNames = featureKeys.map(featureKey => {
    const feature = featuresData[featureKey];
    return feature ? feature.name : featureKey; // Fallback to key if not found
  });
  
  // If we have too many features, show only the first few and add "..."
  if (featureNames.length > maxFeatures) {
    return featureNames.slice(0, maxFeatures).join(', ') + '...';
  }
  
  return featureNames.join(', ');
};

/**
 * Generate feature details for modal display
 */
export const generateFeatureDetails = (
  featureKey: string,
  featuresData: FeatureData
) => {
  return featuresData?.[featureKey] || null;
};

/**
 * Get all feature details for a list of feature keys
 */
export const getAllFeatureDetails = (
  featureKeys: string[],
  featuresData: FeatureData
) => {
  return featureKeys.map(key => ({
    key,
    details: generateFeatureDetails(key, featuresData)
  }));
};

/**
 * Format price for display
 */
export const formatPrice = (price: number): string => {
  return price.toLocaleString('en-US', { 
    minimumFractionDigits: 2, 
    maximumFractionDigits: 2 
  });
};


*** END FILE ***
