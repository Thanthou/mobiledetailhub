{"version":3,"file":"api-BcBw9jk9.js","sources":["../../src/shared/api/api.ts"],"sourcesContent":["// import { config } from '@/../config/env';\r\n\r\n// Extend Error interface for custom error codes\r\ninterface CustomError extends Error {\r\n  code?: string;\r\n  retryAfterSeconds?: number;\r\n  remainingAttempts?: number;\r\n  resetTime?: number;\r\n}\r\n\r\n// API error response interface\r\ninterface ApiErrorResponse {\r\n  message?: string;\r\n  error?: string;\r\n  retryAfterSeconds?: number;\r\n  remainingAttempts?: number;\r\n  resetTime?: number;\r\n}\r\n\r\n// Generic API response interface for unknown responses\r\ninterface UnknownApiResponse {\r\n  success?: boolean;\r\n  message?: string;\r\n  error?: string;\r\n  data?: unknown;\r\n  [key: string]: unknown;\r\n}\r\n\r\nconst API_BASE_URL = ''; // Always use relative URLs to leverage Vite proxy\r\n\r\nexport interface QuoteFormData {\r\n  name: string;\r\n  email: string;\r\n  phone?: string;\r\n  vehicle: string;\r\n  services: string[];\r\n  additionalInfo?: string;\r\n  preferredDate?: string;\r\n}\r\n\r\n// User interface for admin operations\r\nexport interface User {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  role?: 'admin' | 'affiliate' | 'customer' | 'tenant';\r\n  is_admin?: boolean;\r\n  created_at: string;\r\n  business_name?: string;\r\n  application_status?: string;\r\n  slug?: string;\r\n}\r\n\r\n// Affiliate application interface\r\nexport interface AffiliateApplication {\r\n  id: number;\r\n  slug: string;\r\n  business_name: string;\r\n  owner: string;\r\n  phone: string;\r\n  email: string;\r\n  has_insurance: boolean;\r\n  source: string;\r\n  notes?: string;\r\n  application_date: string;\r\n  created_at: string;\r\n  city?: string;\r\n  state_code?: string;\r\n  postal_code?: string;\r\n}\r\n\r\n// Generic API response interface\r\nexport interface ApiResponse<T = unknown> {\r\n  success: boolean;\r\n  message?: string;\r\n  data?: T;\r\n}\r\n\r\n// Specific response interfaces\r\nexport interface UsersResponse extends ApiResponse {\r\n  users: User[];\r\n  count: number;\r\n}\r\n\r\nexport interface ApplicationsResponse extends ApiResponse {\r\n  applications: AffiliateApplication[];\r\n  count: number;\r\n}\r\n\r\nexport interface LoginResponse extends ApiResponse {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n  user: {\r\n    id: number;\r\n    email: string;\r\n    role: string;\r\n    name: string;\r\n    phone?: string;\r\n    is_admin?: boolean;\r\n  };\r\n}\r\n\r\nexport interface AffiliateApprovalResponse extends ApiResponse {\r\n  affiliate: AffiliateApplication & {\r\n    user_id: number;\r\n    temp_password: string;\r\n  };\r\n  note: string;\r\n}\r\n\r\nexport interface AffiliateRejectionResponse extends ApiResponse {\r\n  affiliate: AffiliateApplication;\r\n}\r\n\r\nexport interface AffiliateDeletionResponse extends ApiResponse {\r\n  deletedAffiliate?: {\r\n    id: number;\r\n    business_name: string;\r\n    slug: string;\r\n    email: string;\r\n  };\r\n  deletedUser?: {\r\n    id: number;\r\n    name: string;\r\n    email: string;\r\n  };\r\n}\r\n\r\nclass ApiService {\r\n  private async makeRequest<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\r\n    const url = `${API_BASE_URL}${endpoint}`;\r\n    \r\n    const defaultOptions: RequestInit = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      ...options,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, defaultOptions);\r\n      const data = await response.json() as UnknownApiResponse;\r\n      \r\n      if (!response.ok) {\r\n        const errorMessage = data.message || data.error || 'Network response was not ok';\r\n        throw new Error(errorMessage);\r\n      }\r\n      \r\n      return data as T;\r\n    } catch (error) {\r\n      console.error('API request failed:', error);\r\n      throw new Error(error instanceof Error ? error.message : 'An error occurred');\r\n    }\r\n  }\r\n\r\n  async submitQuoteRequest(data: QuoteFormData): Promise<ApiResponse> {\r\n    return this.makeRequest<ApiResponse>('/api/quote', {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  async checkHealth(): Promise<ApiResponse> {\r\n    return this.makeRequest<ApiResponse>('/api/health');\r\n  }\r\n\r\n  async login(email: string, password: string): Promise<LoginResponse> {\r\n    // Use relative URL to leverage Vite proxy\r\n    const url = '/api/auth/login';\r\n    try {\r\n      // Create an AbortController for timeout\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => { controller.abort(); }, 10000); // 10 second timeout\r\n      \r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n        signal: controller.signal\r\n      });\r\n      \r\n      clearTimeout(timeoutId);\r\n      \r\n      const data = await response.json() as ApiErrorResponse & LoginResponse;\r\n      \r\n      if (!response.ok) {\r\n        // Handle rate limiting specifically\r\n        if (response.status === 429) {\r\n          const error: CustomError = new Error(data.error || 'Rate limited');\r\n          error.code = 'RATE_LIMITED';\r\n          error.retryAfterSeconds = data.retryAfterSeconds;\r\n          error.remainingAttempts = data.remainingAttempts;\r\n          error.resetTime = data.resetTime;\r\n          throw error;\r\n        }\r\n        \r\n        // Handle other error codes\r\n        if (response.status === 401) {\r\n          const error: CustomError = new Error(data.error || 'Invalid credentials');\r\n          error.code = 'INVALID_CREDENTIALS';\r\n          throw error;\r\n        }\r\n        \r\n        if (response.status === 403) {\r\n          const error: CustomError = new Error(data.error || 'Access denied');\r\n          error.code = 'FORBIDDEN';\r\n          throw error;\r\n        }\r\n        \r\n        const errorMessage = data.message || data.error || 'Login failed';\r\n        throw new Error(errorMessage);\r\n      }\r\n      \r\n      return data;\r\n      \r\n    } catch (error) {\r\n      \r\n      // Handle timeout specifically\r\n      if (error instanceof Error && error.name === 'AbortError') {\r\n        const timeoutError: CustomError = new Error('Login request timed out. Please check your connection and try again.');\r\n        timeoutError.code = 'TIMEOUT';\r\n        throw timeoutError;\r\n      }\r\n      \r\n      // Handle network errors\r\n      if (error instanceof TypeError && error.message.includes('fetch')) {\r\n        const networkError: CustomError = new Error('Network error. Please check your connection and try again.');\r\n        networkError.code = 'NETWORK_ERROR';\r\n        throw networkError;\r\n      }\r\n      \r\n      // Re-throw with additional context if it's not already an Error\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error(error instanceof Error ? error.message : 'Login failed');\r\n    }\r\n  }\r\n\r\n  async register(email: string, password: string, name: string, phone?: string): Promise<LoginResponse> {\r\n    // Use relative URL to leverage Vite proxy\r\n    const url = '/api/auth/register';\r\n    \r\n    try {\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password, name, phone }),\r\n      });\r\n      \r\n      const data = await response.json() as ApiErrorResponse & LoginResponse;\r\n      \r\n      if (!response.ok) {\r\n        // Handle rate limiting specifically\r\n        if (response.status === 429) {\r\n          const error: CustomError = new Error(data.error || 'Rate limited');\r\n          error.code = 'RATE_LIMITED';\r\n          error.retryAfterSeconds = data.retryAfterSeconds;\r\n          error.remainingAttempts = data.remainingAttempts;\r\n          error.resetTime = data.resetTime;\r\n          throw error;\r\n        }\r\n        \r\n        // Handle other error codes\r\n        if (response.status === 400) {\r\n          const errorMessage = data.message || data.error || 'Registration failed';\r\n          const error: CustomError = new Error(errorMessage);\r\n          error.code = 'VALIDATION_ERROR';\r\n          throw error;\r\n        }\r\n        \r\n        const errorMessage = data.message || data.error || 'Registration failed';\r\n        throw new Error(errorMessage);\r\n      }\r\n      \r\n      return data;\r\n      \r\n    } catch (error) {\r\n      console.error('Registration failed:', error);\r\n      // Re-throw with additional context if it's not already an Error\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error(error instanceof Error ? error.message : 'Registration failed');\r\n    }\r\n  }\r\n\r\n  async getUsers(status?: string): Promise<UsersResponse> {\r\n    const endpoint = status && status !== 'all-users' \r\n      ? `/api/admin/users?status=${status}`\r\n      : '/api/admin/users';\r\n    \r\n    // Get token from localStorage (optional in development mode)\r\n    const token = localStorage.getItem('token');\r\n    \r\n    const headers: HeadersInit = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n    \r\n    // Only add Authorization header if token exists\r\n    if (token) {\r\n      headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    \r\n    return this.makeRequest<UsersResponse>(endpoint, {\r\n      headers,\r\n    });\r\n  }\r\n\r\n  async getPendingApplications(): Promise<ApplicationsResponse> {\r\n    // Use relative URL to leverage Vite proxy\r\n    const url = '/api/admin/pending-applications';\r\n    \r\n    // Get token from localStorage (optional in development mode)\r\n    const token = localStorage.getItem('token');\r\n    \r\n    try {\r\n      const headers: HeadersInit = {\r\n        'Content-Type': 'application/json',\r\n      };\r\n      \r\n      // Only add Authorization header if token exists\r\n      if (token) {\r\n        headers['Authorization'] = `Bearer ${token}`;\r\n      }\r\n      \r\n      const response = await fetch(url, {\r\n        headers,\r\n      });\r\n      \r\n      const data = await response.json() as ApplicationsResponse;\r\n      \r\n      if (!response.ok) {\r\n        const errorMessage = data.message || 'Network response was not ok';\r\n        throw new Error(errorMessage);\r\n      }\r\n      \r\n      return data;\r\n      \r\n    } catch (error) {\r\n      console.error('API request failed:', error);\r\n      throw new Error(error instanceof Error ? error.message : 'An error occurred');\r\n    }\r\n  }\r\n\r\n  async approveApplication(applicationId: number, approvedSlug: string, adminNotes: string, serviceAreas?: Array<{city: string, state: string, zip?: string}>): Promise<AffiliateApprovalResponse> {\r\n    // Use relative URL to leverage Vite proxy\r\n    const url = `/api/admin/approve-application/${applicationId.toString()}`;\r\n    \r\n    // Get token from localStorage (optional in development mode)\r\n    const token = localStorage.getItem('token');\r\n    \r\n    try {\r\n      const headers: HeadersInit = {\r\n        'Content-Type': 'application/json',\r\n      };\r\n      \r\n      // Only add Authorization header if token exists\r\n      if (token) {\r\n        headers['Authorization'] = `Bearer ${token}`;\r\n      }\r\n      \r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify({\r\n          approved_slug: approvedSlug,\r\n          admin_notes: adminNotes,\r\n          ...(serviceAreas && serviceAreas.length > 0 && { service_areas: serviceAreas })\r\n        }),\r\n      });\r\n      \r\n      const data = await response.json() as AffiliateApprovalResponse;\r\n      \r\n      if (!response.ok) {\r\n        const errorMessage = data.message || 'Network response was not ok';\r\n        throw new Error(errorMessage);\r\n      }\r\n      \r\n      return data;\r\n      \r\n    } catch (error) {\r\n      console.error('API request failed:', error);\r\n      throw new Error(error instanceof Error ? error.message : 'An error occurred');\r\n    }\r\n  }\r\n\r\n  async rejectApplication(applicationId: number, rejectionReason: string, adminNotes: string): Promise<AffiliateRejectionResponse> {\r\n    // Use relative URL to leverage Vite proxy\r\n    const url = `/api/admin/reject-application/${applicationId.toString()}`;\r\n    \r\n    // Get token from localStorage (optional in development mode)\r\n    const token = localStorage.getItem('token');\r\n    \r\n    try {\r\n      const headers: HeadersInit = {\r\n        'Content-Type': 'application/json',\r\n      };\r\n      \r\n      // Only add Authorization header if token exists\r\n      if (token) {\r\n        headers['Authorization'] = `Bearer ${token}`;\r\n      }\r\n      \r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify({\r\n          rejection_reason: rejectionReason,\r\n          admin_notes: adminNotes\r\n        }),\r\n      });\r\n      \r\n      const data = await response.json() as AffiliateRejectionResponse;\r\n      \r\n      if (!response.ok) {\r\n        const errorMessage = data.message || 'Network response was not ok';\r\n        throw new Error(errorMessage);\r\n      }\r\n      \r\n      return data;\r\n      \r\n    } catch (error) {\r\n      console.error('API request failed:', error);\r\n      throw new Error(error instanceof Error ? error.message : 'An error occurred');\r\n    }\r\n  }\r\n\r\n  async deleteAffiliate(affiliateId: number): Promise<AffiliateDeletionResponse> {\r\n    // Use relative URL to leverage Vite proxy\r\n    const url = `/api/admin/tenants/${affiliateId.toString()}`;\r\n    \r\n    // Get token from localStorage (optional in development mode)\r\n    const token = localStorage.getItem('token');\r\n    \r\n    try {\r\n      const headers: HeadersInit = {\r\n        'Content-Type': 'application/json',\r\n      };\r\n      \r\n      // Only add Authorization header if token exists\r\n      if (token) {\r\n        headers['Authorization'] = `Bearer ${token}`;\r\n      }\r\n      \r\n      const response = await fetch(url, {\r\n        method: 'DELETE',\r\n        headers,\r\n      });\r\n      \r\n      const data = await response.json() as AffiliateDeletionResponse;\r\n      \r\n      if (!response.ok) {\r\n        const errorMessage = data.message || 'Network response was not ok';\r\n        throw new Error(errorMessage);\r\n      }\r\n      \r\n      return data;\r\n      \r\n    } catch (error) {\r\n      console.error('API request failed:', error);\r\n      throw new Error(error instanceof Error ? error.message : 'An error occurred');\r\n    }\r\n  }\r\n}\r\n\r\nexport const apiService = new ApiService(); "],"names":["errorMessage"],"mappings":"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"}